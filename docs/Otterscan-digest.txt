Directory structure:
└── zilliqa-otterscan/
    ├── README.md
    ├── cypress.config.ts
    ├── Dockerfile
    ├── Dockerfile.zilliqa
    ├── index.html
    ├── jest.config.ts
    ├── LICENSE
    ├── Makefile
    ├── package.json
    ├── postcss.config.js
    ├── README.zilliqa.md
    ├── run-nginx.sh
    ├── tailwind.config.js
    ├── tsconfig.json
    ├── tsconfig.node.json
    ├── vercel.json
    ├── vite.config.ts
    ├── .dockerignore
    ├── .nvmrc
    ├── .prettierignore
    ├── .prettierrc.json
    ├── .release-it.json
    ├── autogen/
    │   └── .gitkeep
    ├── cd/
    │   ├── base/
    │   │   ├── deployment.yaml
    │   │   ├── ingress.yaml
    │   │   ├── kustomization.yaml
    │   │   ├── namespace.yaml
    │   │   └── svc.yaml
    │   └── overlays/
    │       ├── development/
    │       │   ├── backend-config.yaml
    │       │   ├── certificate.yaml
    │       │   ├── configmap.yaml
    │       │   ├── frontend-config.yaml
    │       │   └── kustomization.yaml
    │       ├── production/
    │       │   ├── backend-config.yaml
    │       │   ├── certificate.yaml
    │       │   ├── configmap.yaml
    │       │   ├── frontend-config.yaml
    │       │   └── kustomization.yaml
    │       └── staging/
    │           ├── backend-config.yaml
    │           ├── certificate.yaml
    │           ├── configmap.yaml
    │           ├── frontend-config.yaml
    │           └── kustomization.yaml
    ├── cypress/
    │   ├── tsconfig.json
    │   ├── e2e/
    │   │   ├── spec.cy.ts
    │   │   ├── devnet/
    │   │   │   ├── navigation.cy.ts
    │   │   │   ├── spec.cy.ts
    │   │   │   └── verified-contracts.cy.ts
    │   │   └── mainnet/
    │   │       ├── block-rewards.cy.ts
    │   │       ├── smoketests.cy.ts
    │   │       ├── spec.cy.ts
    │   │       └── verified-contracts.cy.ts
    │   ├── fixtures/
    │   │   └── contracts/
    │   │       └── AllTypes/
    │   │           ├── bytecode.txt
    │   │           ├── metadata.json
    │   │           └── sources/
    │   │               └── test.sol
    │   └── support/
    │       ├── commands.ts
    │       ├── devnet-config.json
    │       └── e2e.ts
    ├── docs/
    │   ├── ipfs.md
    │   └── testing.md
    ├── nginx/
    │   ├── nginx.conf
    │   └── conf.d/
    │       └── default.conf
    ├── public/
    │   ├── config.json
    │   ├── manifest.json
    │   └── robots.txt
    ├── scripts/
    │   ├── gen-version.sh
    │   ├── run-anvil-devnet.sh
    │   ├── run-erigon-devnet-e2e-tests.sh
    │   └── run-ots-develop.sh
    ├── src/
    │   ├── App.tsx
    │   ├── ConnectionErrorPanel.tsx
    │   ├── Faucets.tsx
    │   ├── fetcher.ts
    │   ├── Footer.tsx
    │   ├── Header.tsx
    │   ├── highlight-init.ts
    │   ├── Home.tsx
    │   ├── index.css
    │   ├── index.tsx
    │   ├── Logo.tsx
    │   ├── Main.tsx
    │   ├── NetworkMenu.tsx
    │   ├── NetworkMenuWithConfig.tsx
    │   ├── PageNotFound.tsx
    │   ├── params.ts
    │   ├── PriceBox.tsx
    │   ├── ProbeError.ts
    │   ├── ProbeErrorHandler.tsx
    │   ├── queryClient.ts
    │   ├── react-app-env.d.ts
    │   ├── reportWebVitals.ts
    │   ├── Search.tsx
    │   ├── setupTests.ts
    │   ├── SourcifyMenu.tsx
    │   ├── types.ts
    │   ├── url.ts
    │   ├── use4Bytes.ts
    │   ├── useAppConfig.ts
    │   ├── useBlockTagContext.tsx
    │   ├── useChainInfo.ts
    │   ├── useConfig.ts
    │   ├── useConsensus.ts
    │   ├── useERC1967.ts
    │   ├── useErigonHooks.ts
    │   ├── useLatestBlock.ts
    │   ├── usePriceOracle.ts
    │   ├── useProvider.ts
    │   ├── useQuirks.ts
    │   ├── useResolvedAddresses.ts
    │   ├── useRuntime.ts
    │   ├── useSelectedTransaction.ts
    │   ├── useTicker.ts
    │   ├── useTitle.ts
    │   ├── useTopic0.ts
    │   ├── useZilliqa.ts
    │   ├── useZilliqaHooks.ts
    │   ├── vite-env.d.ts
    │   ├── WarningHeader.tsx
    │   ├── abi/
    │   │   ├── erc20.json
    │   │   ├── erc721metadata.json
    │   │   ├── chainlink/
    │   │   │   ├── AggregatorV3Interface.json
    │   │   │   └── FeedRegistryInterface.json
    │   │   └── optimism/
    │   │       └── L1Block.json
    │   ├── api/
    │   │   ├── address-resolver/
    │   │   │   ├── address-resolver.ts
    │   │   │   ├── CompositeAddressResolver.ts
    │   │   │   ├── CustomLabelResolver.ts
    │   │   │   ├── ENSAddressResolver.ts
    │   │   │   ├── ERCTokenResolver.ts
    │   │   │   ├── HardcodedAddressResolver.ts
    │   │   │   ├── index.ts
    │   │   │   ├── UniswapV1Resolver.ts
    │   │   │   ├── UniswapV2Resolver.ts
    │   │   │   ├── UniswapV3Resolver.ts
    │   │   │   └── hardcoded-addresses/
    │   │   │       ├── 1.json
    │   │   │       ├── 10.json
    │   │   │       ├── 11155111.json
    │   │   │       ├── 11155420.json
    │   │   │       └── 1337.json
    │   │   └── token-price-resolver/
    │   │       ├── token-price-resolver.ts
    │   │       └── resolvers/
    │   │           ├── UniswapV2PriceResolver.ts
    │   │           └── UniswapV3PriceResolver.ts
    │   ├── components/
    │   │   ├── AddressHighlighter.tsx
    │   │   ├── AddressLegend.stories.tsx
    │   │   ├── AddressLegend.tsx
    │   │   ├── AddressLink.tsx
    │   │   ├── AddressOrENSNameInvalidNonce.tsx
    │   │   ├── AddressOrENSNameNotFound.tsx
    │   │   ├── AddressOrENSNameNoTx.tsx
    │   │   ├── AddressSwap.tsx
    │   │   ├── Age.tsx
    │   │   ├── AutoRefreshAge.tsx
    │   │   ├── BCInfoToolTip.tsx
    │   │   ├── BlockConfirmations.stories.tsx
    │   │   ├── BlockConfirmations.tsx
    │   │   ├── BlockLink.stories.tsx
    │   │   ├── BlockLink.tsx
    │   │   ├── BlockNotFound.tsx
    │   │   ├── CanBeEmptyText.tsx
    │   │   ├── ChainInfoHeader.tsx
    │   │   ├── ChainInfoItem.tsx
    │   │   ├── ContentFrame.tsx
    │   │   ├── Copy.tsx
    │   │   ├── DisplayInteger.stories.tsx
    │   │   ├── DisplayInteger.tsx
    │   │   ├── DSBlockLink.tsx
    │   │   ├── DSBlockNotFound.tsx
    │   │   ├── ElementDiff.tsx
    │   │   ├── ErrorFallback.stories.tsx
    │   │   ├── ErrorFallback.tsx
    │   │   ├── ExpanderSwitch.tsx
    │   │   ├── ExternalBlockLink.tsx
    │   │   ├── ExternalLink.stories.tsx
    │   │   ├── ExternalLink.tsx
    │   │   ├── Faucet.tsx
    │   │   ├── FiatValue.tsx
    │   │   ├── FormattedBalance.stories.tsx
    │   │   ├── FormattedBalance.tsx
    │   │   ├── formatter.ts
    │   │   ├── HelpButton.stories.tsx
    │   │   ├── HelpButton.tsx
    │   │   ├── HexValue.tsx
    │   │   ├── HighlightedCode.tsx
    │   │   ├── InfoRow.tsx
    │   │   ├── InlineCode.tsx
    │   │   ├── InternalCreate.tsx
    │   │   ├── InternalSelfDestruct.tsx
    │   │   ├── InternalTransactionOperation.tsx
    │   │   ├── InternalTransfer.tsx
    │   │   ├── LabeledSwitch.stories.tsx
    │   │   ├── LabeledSwitch.tsx
    │   │   ├── MethodName.tsx
    │   │   ├── ModeTab.stories.tsx
    │   │   ├── ModeTab.tsx
    │   │   ├── NativeTokenAmount.tsx
    │   │   ├── NativeTokenAmountAndFiat.tsx
    │   │   ├── NativeTokenPrice.tsx
    │   │   ├── NavBlock.stories.tsx
    │   │   ├── NavBlock.tsx
    │   │   ├── NavButton.stories.tsx
    │   │   ├── NavButton.tsx
    │   │   ├── NavTab.tsx
    │   │   ├── Nonce.stories.tsx
    │   │   ├── Nonce.tsx
    │   │   ├── PercentageBar.stories.tsx
    │   │   ├── PercentageBar.tsx
    │   │   ├── PercentageGauge.stories.tsx
    │   │   ├── PercentageGauge.tsx
    │   │   ├── PercentagePosition.stories.tsx
    │   │   ├── PercentagePosition.tsx
    │   │   ├── RelativePosition.stories.tsx
    │   │   ├── RelativePosition.tsx
    │   │   ├── RelevantNumericValue.tsx
    │   │   ├── StandardFrame.tsx
    │   │   ├── StandardScrollableTable.tsx
    │   │   ├── StandardSubtitle.tsx
    │   │   ├── StandardTable.tsx
    │   │   ├── StandardTBody.tsx
    │   │   ├── StandardTextarea.tsx
    │   │   ├── StandardTHead.tsx
    │   │   ├── SwitchTab.tsx
    │   │   ├── ThemeToggler.stories.tsx
    │   │   ├── ThemeToggler.tsx
    │   │   ├── Timestamp.tsx
    │   │   ├── TimestampAge.tsx
    │   │   ├── TransactionDirection.tsx
    │   │   ├── TransactionLink.stories.tsx
    │   │   ├── TransactionLink.tsx
    │   │   ├── TransactionType.tsx
    │   │   └── USDAmount.tsx
    │   ├── consensus/
    │   │   ├── Epoch.tsx
    │   │   ├── Slot.tsx
    │   │   ├── types.ts
    │   │   ├── Validator.tsx
    │   │   ├── components/
    │   │   │   ├── CheckedValidatorLink.tsx
    │   │   │   ├── EpochLink.stories.tsx
    │   │   │   ├── EpochLink.tsx
    │   │   │   ├── EpochNavBlock.tsx
    │   │   │   ├── Finalized.tsx
    │   │   │   ├── NotFinalized.tsx
    │   │   │   ├── SlashingCount.tsx
    │   │   │   ├── SlotAttestationsLink.tsx
    │   │   │   ├── SlotLink.stories.tsx
    │   │   │   ├── SlotLink.tsx
    │   │   │   ├── UncheckedValidatorLink.tsx
    │   │   │   ├── ValidatorLink.stories.tsx
    │   │   │   └── ValidatorLink.tsx
    │   │   ├── epoch/
    │   │   │   ├── EpochSubtitle.tsx
    │   │   │   ├── LoadingSlotItem.tsx
    │   │   │   ├── NotFoundSlotItem.tsx
    │   │   │   ├── ScheduledOrMissedSlotItem.tsx
    │   │   │   ├── SlotItem.tsx
    │   │   │   ├── SlotTimestamp.tsx
    │   │   │   └── StoredSlotItem.tsx
    │   │   ├── slot/
    │   │   │   ├── AggregationBits.tsx
    │   │   │   ├── AggregationParticipation.tsx
    │   │   │   ├── Attestation.tsx
    │   │   │   ├── Attestations.tsx
    │   │   │   ├── AttestationsTabTitle.tsx
    │   │   │   ├── BlockRoot.tsx
    │   │   │   ├── Overview.tsx
    │   │   │   ├── OverviewSkeleton.tsx
    │   │   │   ├── SlotByBlockRoot.tsx
    │   │   │   ├── SlotNotFound.tsx
    │   │   │   ├── SlotSubtitle.tsx
    │   │   │   ├── ValidatorList.tsx
    │   │   │   └── WithdrawalDetailsRow.tsx
    │   │   └── validator/
    │   │       ├── Overview.tsx
    │   │       ├── ValidatorSubtitle.tsx
    │   │       └── WithdrawalCredentials.tsx
    │   ├── execution/
    │   │   ├── Address.tsx
    │   │   ├── AddressMainPage.tsx
    │   │   ├── AddressTransactionByNonce.tsx
    │   │   ├── Block.tsx
    │   │   ├── BlockDetails.tsx
    │   │   ├── BlockList.tsx
    │   │   ├── BlockTransactions.tsx
    │   │   ├── BroadcastTransactionPage.tsx
    │   │   ├── ChainInfo.tsx
    │   │   ├── DSBlock.tsx
    │   │   ├── DSBlockList.tsx
    │   │   ├── feeCalc.ts
    │   │   ├── op-tx-calculation.ts
    │   │   ├── Transaction.tsx
    │   │   ├── types.ts
    │   │   ├── address/
    │   │   │   ├── AddressAttributes.tsx
    │   │   │   ├── AddressContract.tsx
    │   │   │   ├── AddressERC20Results.tsx
    │   │   │   ├── AddressERC721Results.tsx
    │   │   │   ├── AddressReadContract.tsx
    │   │   │   ├── AddressReadContractAsProxy.tsx
    │   │   │   ├── AddressSubtitle.tsx
    │   │   │   ├── AddressTokens.tsx
    │   │   │   ├── AddressTransactionResults.tsx
    │   │   │   ├── AddressWithdrawals.tsx
    │   │   │   ├── BlockRewardedItem.tsx
    │   │   │   ├── BlocksRewarded.tsx
    │   │   │   ├── ContractFromRepo.tsx
    │   │   │   ├── Contracts.tsx
    │   │   │   ├── EditableAddressTag.tsx
    │   │   │   ├── ERC20Item.tsx
    │   │   │   ├── GenericTransactionSearchResult.tsx
    │   │   │   ├── PendingItem.stories.tsx
    │   │   │   ├── PendingItem.tsx
    │   │   │   ├── PendingPage.stories.tsx
    │   │   │   ├── PendingPage.tsx
    │   │   │   ├── ProxyContract.tsx
    │   │   │   ├── ProxyReadContract.tsx
    │   │   │   ├── ScillaContract.tsx
    │   │   │   ├── ScillaInitParams.tsx
    │   │   │   ├── ScillaState.tsx
    │   │   │   ├── TokenAmount.tsx
    │   │   │   ├── TokenBalance.tsx
    │   │   │   ├── WhatsabiWarning.tsx
    │   │   │   ├── WithdrawalItem.tsx
    │   │   │   ├── contract/
    │   │   │   │   ├── contract-input-grammar
    │   │   │   │   ├── ContractABI.stories.tsx
    │   │   │   │   ├── ContractABI.tsx
    │   │   │   │   ├── contractInputDataParser.test.ts
    │   │   │   │   ├── contractInputDataParser.ts
    │   │   │   │   ├── DecodedABI.stories.tsx
    │   │   │   │   ├── DecodedABI.tsx
    │   │   │   │   ├── DecodedFragment.stories.tsx
    │   │   │   │   ├── DecodedFragment.tsx
    │   │   │   │   ├── FunctionParamInput.stories.tsx
    │   │   │   │   ├── FunctionParamInput.tsx
    │   │   │   │   ├── HighlightedSolidity.tsx
    │   │   │   │   ├── HighlightedSource.tsx
    │   │   │   │   ├── RawABI.stories.tsx
    │   │   │   │   ├── RawABI.tsx
    │   │   │   │   ├── RawDecodedFragment.tsx
    │   │   │   │   ├── ReadContract.tsx
    │   │   │   │   └── ReadFunction.tsx
    │   │   │   └── renderer/
    │   │   │       ├── ENSName.stories.tsx
    │   │   │       ├── ENSName.tsx
    │   │   │       ├── PlainString.stories.tsx
    │   │   │       ├── PlainString.tsx
    │   │   │       ├── TokenLogo.tsx
    │   │   │       ├── TokenName.tsx
    │   │   │       ├── UniswapV1ExchangeName.tsx
    │   │   │       ├── UniswapV2PairName.tsx
    │   │   │       ├── UniswapV3PoolName.tsx
    │   │   │       ├── VerifiedContractName.stories.tsx
    │   │   │       └── VerifiedContractName.tsx
    │   │   ├── block/
    │   │   │   ├── BlockTransactionByIndex.tsx
    │   │   │   ├── BlockTransactionHeader.tsx
    │   │   │   ├── BlockTransactionResults.tsx
    │   │   │   ├── RecentBlocks.tsx
    │   │   │   └── RecentDSBlocks.tsx
    │   │   ├── components/
    │   │   │   ├── BlockReward.tsx
    │   │   │   ├── DecoratedAddressLink.tsx
    │   │   │   ├── ParamDeclaration.stories.tsx
    │   │   │   ├── ParamDeclaration.tsx
    │   │   │   ├── PlainAddress.stories.tsx
    │   │   │   ├── PlainAddress.tsx
    │   │   │   ├── TransactionAddress.stories.tsx
    │   │   │   ├── TransactionAddress.tsx
    │   │   │   └── TransactionAddressWithCopy.tsx
    │   │   └── transaction/
    │   │       ├── Details.tsx
    │   │       ├── FunctionSignature.tsx
    │   │       ├── LogEntry.tsx
    │   │       ├── Logs.tsx
    │   │       ├── NavButton.tsx
    │   │       ├── NavNonce.tsx
    │   │       ├── Receipt.tsx
    │   │       ├── RewardSplit.tsx
    │   │       ├── StateDiff.tsx
    │   │       ├── TokenTransferItem.tsx
    │   │       ├── Trace.tsx
    │   │       ├── TraceInput.tsx
    │   │       ├── TraceItem.tsx
    │   │       ├── decoder/
    │   │       │   ├── AddressDecoder.stories.tsx
    │   │       │   ├── AddressDecoder.tsx
    │   │       │   ├── BooleanDecoder.stories.tsx
    │   │       │   ├── BooleanDecoder.tsx
    │   │       │   ├── BytesDecoder.stories.tsx
    │   │       │   ├── BytesDecoder.tsx
    │   │       │   ├── DecodedLogSignature.tsx
    │   │       │   ├── DecodedLogSignatures.stories.tsx
    │   │       │   ├── DecodedParamRow.stories.tsx
    │   │       │   ├── DecodedParamRow.tsx
    │   │       │   ├── DecodedParamsTable.stories.tsx
    │   │       │   ├── DecodedParamsTable.tsx
    │   │       │   ├── DecodedScillaEncaps.tsx
    │   │       │   ├── DecodedScillaLogSignature.tsx
    │   │       │   ├── DecodedScillaParamsTable.tsx
    │   │       │   ├── DefaultDecoder.tsx
    │   │       │   ├── FunctionSignature.tsx
    │   │       │   ├── InputDecoder.tsx
    │   │       │   ├── OutputDecoder.tsx
    │   │       │   ├── Uint256Decoder.stories.tsx
    │   │       │   └── Uint256Decoder.tsx
    │   │       └── log/
    │   │           ├── LogIndex.stories.tsx
    │   │           ├── LogIndex.tsx
    │   │           ├── RawLog.stories.tsx
    │   │           ├── RawLog.tsx
    │   │           ├── Topic.stories.tsx
    │   │           ├── Topic.tsx
    │   │           └── TwoColumnPanel.tsx
    │   ├── kleros/
    │   │   ├── t2crtokens.eth.json
    │   │   └── useTokenList.ts
    │   ├── ots2/
    │   │   ├── contractMatchParsers.ts
    │   │   ├── pagination.test.ts
    │   │   ├── pagination.ts
    │   │   ├── usePrototypeHooks.ts
    │   │   ├── usePrototypeTransferHooks.ts
    │   │   └── useUIHooks.ts
    │   ├── scilla/
    │   │   ├── useZRC2Hooks.ts
    │   │   └── ZRC2TransferItem.tsx
    │   ├── search/
    │   │   ├── BlockItem.tsx
    │   │   ├── BlockResultHeader.tsx
    │   │   ├── CameraScanner.tsx
    │   │   ├── DSBlockItem.tsx
    │   │   ├── DSBlockResultHeader.tsx
    │   │   ├── messages.ts
    │   │   ├── PageButton.stories.tsx
    │   │   ├── PageButton.tsx
    │   │   ├── PageControl.stories.tsx
    │   │   ├── PageControl.tsx
    │   │   ├── PendingResults.tsx
    │   │   ├── RecentBlockItem.tsx
    │   │   ├── RecentBlockResultHeader.tsx
    │   │   ├── RecentDSBlockItem.tsx
    │   │   ├── RecentDSBlockResultHeader.tsx
    │   │   ├── RecentDSNavBar.tsx
    │   │   ├── RecentNavBar.tsx
    │   │   ├── ResultHeader.tsx
    │   │   ├── search.ts
    │   │   ├── SearchResultNavBar.stories.tsx
    │   │   ├── SearchResultNavBar.tsx
    │   │   ├── TransactionItem.tsx
    │   │   ├── TransactionItemFiatFee.tsx
    │   │   ├── TransactionResultHeader.tsx
    │   │   ├── UndefinedPageButton.tsx
    │   │   ├── UndefinedPageControl.tsx
    │   │   ├── useEmptyBlocksToggler.ts
    │   │   ├── useFeeToggler.ts
    │   │   ├── useMultiColumnDisplayToggler.ts
    │   │   └── qr-reader/
    │   │       ├── QrReader.tsx
    │   │       ├── useQrReader.ts
    │   │       └── utils.ts
    │   ├── selection/
    │   │   ├── FormattedBalanceHighlighter.tsx
    │   │   ├── SelectionHighlighter.tsx
    │   │   ├── StandardSelectionBoundary.tsx
    │   │   └── useSelection.ts
    │   ├── sourcify/
    │   │   ├── SourcifyLogo.tsx
    │   │   ├── useSourcify.ts
    │   │   └── useWhatsabi.ts
    │   ├── special/
    │   │   └── london/
    │   │       ├── Blip.tsx
    │   │       ├── BlockRow.tsx
    │   │       ├── Blocks.tsx
    │   │       ├── chart.ts
    │   │       └── LiveBlocks.tsx
    │   ├── storybook/
    │   │   └── util.tsx
    │   ├── token/
    │   │   ├── AllContracts.tsx
    │   │   ├── AllERC1155.tsx
    │   │   ├── AllERC1167.tsx
    │   │   ├── AllERC20.tsx
    │   │   ├── AllERC4626.tsx
    │   │   ├── AllERC721.tsx
    │   │   ├── ContractFilterMenu.tsx
    │   │   ├── ContractHeader.tsx
    │   │   ├── ContractItem.tsx
    │   │   ├── ERC1155Header.tsx
    │   │   ├── ERC1155Item.tsx
    │   │   ├── ERC1167Header.tsx
    │   │   ├── ERC1167Item.tsx
    │   │   ├── ERC20Header.tsx
    │   │   ├── ERC20Item.tsx
    │   │   ├── ERC4626Header.tsx
    │   │   ├── ERC4626Item.tsx
    │   │   ├── ERC721Header.tsx
    │   │   ├── ERC721Item.tsx
    │   │   ├── filters.ts
    │   │   └── GenericContractSearchResult.tsx
    │   └── utils/
    │       ├── age.day.test.ts
    │       ├── age.intraday.test.ts
    │       ├── formatter.ts
    │       ├── future.intraday.test.ts
    │       ├── NOTICE.txt
    │       └── utils.ts
    ├── .github/
    │   ├── dependabot.yml
    │   └── workflows/
    │       ├── build-and-prettier.yml
    │       ├── cicd-prd.yaml
    │       ├── cicd-stg.yaml
    │       ├── docker-publish.yaml
    │       └── end-to-end.yaml
    └── .storybook/
        ├── main.ts
        ├── preview-head.html
        └── preview.tsx

================================================
FILE: README.md
================================================
# Otterscan

An open-source, fast, local, laptop-friendly Ethereum block explorer.

https://user-images.githubusercontent.com/28685/124196700-4fe71200-daa3-11eb-912c-b66494fe4b23.mov

## Documentation

> 💡 For install instructions and a lot more, please take a look at our official documentation: [The Otterscan Book](https://docs.otterscan.io/)!

## What?

This is an Ethereum block explorer designed to be run locally with an archive node companion, [Erigon](https://github.com/erigontech/erigon).

This approach brings many advantages, as follows.

### Privacy

You are querying your own node, so you are not sending your IP address or queries to an external, third-party node.

### Fast

Since you are querying your local archive node, everything is fast. No network roundtrips are necessary.

### Actually, very fast

This software was designed to be a companion of Erigon, a blazingly fast archive node.

### Really, it is even faster

The standard web3 JSON-RPC methods are quite verbose and generic requiring many calls to gather many pieces of information at client side.

We've implemented some custom methods at the client level, so less information needs to be JSON-marshalled and transmitted over the network.

## Why?

Current offerings are either closed source or lack many features the most famous Ethereum block explorer has, or simply have high requirements like having an archive node + additional indexers.

Otterscan requires only a mainline Erigon execution node and Otterscan itself (a simple React app), which makes it a laptop-friendly block explorer.

## Why the name?

3 reasons:

- It is heavily based on Erigon, whose mascot is an otter (Erigon, the otter), think about an otter scanning your transactions inside blocks.
- It is an homage to the most popular Ethereum block explorer.
- The author loves wordplays and bad puns.

## Kudos (in no particular order)

We make use of open-source software and integrate many public data sources, mainly:

To the [Geth](https://geth.ethereum.org/) team whose code Erigon is based on.

To the [Erigon](https://github.com/ledgerwatch/erigon) team that made it possible for regular humans to run an archive node on a retail laptop. Also, they have been very helpful explaining Erigon's internals which made the Otterscan modifications possible.

To the [Test in Prod](https://www.testinprod.io/) team that made OP-Erigon. Their effort made it possible to run Otterscan against any Optimism Superchain.

To the [mdbx](https://github.com/erthink/libmdbx) team which created the blazingly fast database that empowers Erigon.

To [Trust Wallet](https://github.com/trustwallet/assets) who sponsors and makes available their icons under a permissive license.

To the owners of the [4bytes repository](https://github.com/ethereum-lists/4bytes) that we import and use to translate method selectors to human-friendly strings.

To [Sourcify](https://sourcify.dev/), a public, decentralized source code and metadata verification service.

To [Ethers](https://github.com/ethers-io/ethers.js/), which is the client library we used to interact with the Erigon node. It is high-level enough to hide most JSON-RPC particularities but flexible enough to allow for easy interaction with custom methods.

## License

This software itself is MIT licensed and redistributes MIT-compatible dependencies.

The Otterscan API is implemented inside Erigon and follow its own license (LPGL-3).

## Getting in touch

### Erigon Discord server

Our Discord server: https://discord.gg/5xM2q2eqDz

Otterscan also has a community channel under the "ecosystem" section of [Erigon's Discord](https://github.com/erigontech/erigon#erigon-discord-server) (invite should be requested).

### X/Twitter

Official X/Twitter account: ([@otterscan](https://x.com/otterscan)).

Follow the creator on X/Twitter for more updates ([@wmitsuda](https://x.com/wmitsuda)).

### Donation address

If you like this project, feel free to send donations to `otterscan.eth` on any EVM chain (it's an EOA).

We also participate regularly on Gitcoin Grants rounds.



================================================
FILE: cypress.config.ts
================================================
import { defineConfig } from "cypress";
import fs from "fs";

export default defineConfig({
  e2e: {
    projectId: "rypdvn",
    setupNodeEvents(on, config) {
      on(
        "after:spec",
        (spec: Cypress.Spec, results: CypressCommandLine.RunResult) => {
          if (results && results.video) {
            // Do we have failures for any retry attempts?
            const failures = results.tests.some((test) =>
              test.attempts.some((attempt) => attempt.state === "failed"),
            );
            if (!failures) {
              // delete the video if the spec passed and no tests retried
              fs.unlinkSync(results.video);
            }
          }
        },
      );
      on("task", {
        // Run cy.task('log', <message>) to log something to stdout
        log(message) {
          console.log(message);
          return null;
        },
      });
    },
    baseUrl: "http://localhost:5173",
    // SyntaxHighlighter files may take several seconds to load in dev mode
    defaultCommandTimeout: 8_000,
    video: true,
    env: {
      DEVNET_ERIGON_URL: "http://localhost:8545",
      DEVNET_SOURCIFY_SOURCE: "http://localhost:7077",
    },
  },
});



================================================
FILE: Dockerfile
================================================
FROM --platform=linux/amd64 node:20.10.0-alpine3.17 AS builder
WORKDIR /otterscan-build
COPY --link ["package.json", "package-lock.json", "/otterscan-build/"]
RUN npm ci
COPY --link ["run-nginx.sh", "tsconfig.json", "tsconfig.node.json", "postcss.config.js", "tailwind.config.js", "vite.config.ts", "index.html", "/otterscan-build/"]
COPY --link ["public", "/otterscan-build/public/"]
COPY --link ["src", "/otterscan-build/src/"]
RUN npm run build

# Add brotli module to official nginx image
# Based on: https://github.com/nginxinc/docker-nginx/tree/master/modules
FROM nginx:1.27.0-alpine3.19 as nginxbuilder

RUN set -ex \
    && apk update \
    && apk add linux-headers openssl-dev pcre-dev zlib-dev openssl abuild \
               musl-dev libxslt libxml2-utils make mercurial gcc unzip git \
               xz g++ coreutils \
    # allow abuild as a root user \
    && printf "#!/bin/sh\\nSETFATTR=true /usr/bin/abuild -F \"\$@\"\\n" > /usr/local/bin/abuild \
    && chmod +x /usr/local/bin/abuild \
    && hg clone -r ${NGINX_VERSION}-${PKG_RELEASE} https://hg.nginx.org/pkg-oss/ \
    && cd pkg-oss \
    && mkdir /tmp/packages \
    && for module in "brotli"; do \
        echo "Building $module for nginx-$NGINX_VERSION"; \
        if [ -d /modules/$module ]; then \
            echo "Building $module from user-supplied sources"; \
            # check if module sources file is there and not empty
            if [ ! -s /modules/$module/source ]; then \
                echo "No source file for $module in modules/$module/source, exiting"; \
                exit 1; \
            fi; \
            # some modules require build dependencies
            if [ -f /modules/$module/build-deps ]; then \
                echo "Installing $module build dependencies"; \
                apk update && apk add $(cat /modules/$module/build-deps | xargs); \
            fi; \
            # if a module has a build dependency that is not in a distro, provide a
            # shell script to fetch/build/install those
            # note that shared libraries produced as a result of this script will
            # not be copied from the builder image to the main one so build static
            if [ -x /modules/$module/prebuild ]; then \
                echo "Running prebuild script for $module"; \
                /modules/$module/prebuild; \
            fi; \
            /pkg-oss/build_module.sh -v $NGINX_VERSION -f -y -o /tmp/packages -n $module $(cat /modules/$module/source); \
            BUILT_MODULES="$BUILT_MODULES $(echo $module | tr '[A-Z]' '[a-z]' | tr -d '[/_\-\.\t ]')"; \
        elif make -C /pkg-oss/alpine list | grep -E "^$module\s+\d+" > /dev/null; then \
            echo "Building $module from pkg-oss sources"; \
            cd /pkg-oss/alpine; \
            make abuild-module-$module BASE_VERSION=$NGINX_VERSION NGINX_VERSION=$NGINX_VERSION; \
            apk add $(. ./abuild-module-$module/APKBUILD; echo $makedepends;); \
            make module-$module BASE_VERSION=$NGINX_VERSION NGINX_VERSION=$NGINX_VERSION; \
            find ~/packages -type f -name "*.apk" -exec mv -v {} /tmp/packages/ \;; \
            BUILT_MODULES="$BUILT_MODULES $module"; \
        else \
            echo "Don't know how to build $module module, exiting"; \
            exit 1; \
        fi; \
    done \
    && echo "BUILT_MODULES=\"$BUILT_MODULES\"" > /tmp/packages/modules.env

FROM nginx:1.27.0-alpine3.19
COPY --from=nginxbuilder /tmp/packages /tmp/packages
RUN set -ex \
    && . /tmp/packages/modules.env \
    && for module in $BUILT_MODULES; do \
           apk add --no-cache --allow-untrusted /tmp/packages/nginx-module-${module}-${NGINX_VERSION}*.apk; \
       done \
    && rm -rf /tmp/packages
RUN apk update && apk add jq
WORKDIR /usr/share/nginx/html/
COPY --link --from=otterscan/otterscan-assets:v1.1.1 /usr/share/nginx/html/chains chains/
COPY --link --from=otterscan/otterscan-assets:v1.1.1 /usr/share/nginx/html/topic0 topic0/
COPY --link --from=otterscan/otterscan-assets:v1.1.1 /usr/share/nginx/html/assets assets/
COPY --link --from=otterscan/otterscan-assets:v1.1.1 /usr/share/nginx/html/signatures signatures/
COPY --link nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf
COPY --link nginx/nginx.conf /etc/nginx/nginx.conf
COPY --link --from=builder /otterscan-build/dist /usr/share/nginx/html/
COPY --link --from=builder /otterscan-build/run-nginx.sh /
WORKDIR /

CMD ["/run-nginx.sh"]



================================================
FILE: Dockerfile.zilliqa
================================================
FROM node:22.9.0-alpine3.19 AS builder
WORKDIR /otterscan-build
COPY --link ["package.json", "package-lock.json", "/otterscan-build/"]
RUN npm ci --fetch-timeout 6000000 --verbose
COPY --link ["run-nginx.sh", "tsconfig.json", "tsconfig.node.json", "postcss.config.js", "tailwind.config.js", "vite.config.ts", "index.html", "/otterscan-build/"]
COPY --link ["public", "/otterscan-build/public/"]
COPY --link ["src", "/otterscan-build/src/"]
COPY --link ["autogen", "/otterscan-build/autogen/"]
RUN npm run just-build

FROM nginx:1.27.3-alpine3.20
RUN set -ex \
    && apk update \
    && apk add nginx-mod-http-brotli jq
WORKDIR /usr/share/nginx/html/
COPY --link --from=otterscan/otterscan-assets:v1.1.1 /usr/share/nginx/html/chains chains/
COPY --link --from=otterscan/otterscan-assets:v1.1.1 /usr/share/nginx/html/topic0 topic0/
COPY --link --from=otterscan/otterscan-assets:v1.1.1 /usr/share/nginx/html/assets assets/
COPY --link --from=otterscan/otterscan-assets:v1.1.1 /usr/share/nginx/html/signatures signatures/
COPY --link nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf
COPY --link nginx/nginx.conf /etc/nginx/nginx.conf
COPY --link --from=builder /otterscan-build/dist /usr/share/nginx/html/
COPY --link --from=builder /otterscan-build/run-nginx.sh /
WORKDIR /

CMD ["/run-nginx.sh"]



================================================
FILE: index.html
================================================
<!doctype html>
<html lang="en" class="dark:bg-white dark-mode">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="Zilliqa block explorer" />
    <meta name="format-detection" content="telephone=no" />
    <link rel="apple-touch-icon" href="/logo192.png" />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Montserrat"
    />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="/manifest.json" />
    <title>Otterscan</title>
  </head>

  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script type="module" src="/src/index.tsx"></script>
  </body>
</html>



================================================
FILE: jest.config.ts
================================================
import type { Config } from "jest";

const config: Config = {
  preset: "ts-jest",
  testEnvironment: "node",
};

export default config;



================================================
FILE: LICENSE
================================================
MIT License

Copyright (c) 2021-2024 Otterscan contributors

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


================================================
FILE: Makefile
================================================
.PHONY: all
all: image/build-and-push

.ONESHELL:
SHELL := /bin/bash
.SHELLFLAGS = -ec

ENVIRONMENT ?= dev
VALID_ENVIRONMENTS := dev stg prd
# Check if the ENVIRONMENT variable is in the list of valid environments
ifeq ($(filter $(ENVIRONMENT),$(VALID_ENVIRONMENTS)),)
$(error Invalid value for ENVIRONMENT. Valid values are dev, stg, or prd.)
endif

HERE=$(shell pwd)

IMAGE_TAG ?= otterscan:latest
export IMAGE_TAG

.PHONY: image/build-and-push
image/build-and-push:
	./scripts/gen-version.sh autogen/version.ts
	docker buildx build -f Dockerfile.zilliqa . -t "${IMAGE_TAG}"
	docker push "${IMAGE_TAG}"



================================================
FILE: package.json
================================================
{
  "name": "otterscan",
  "version": "2.7.0",
  "private": true,
  "license": "MIT",
  "type": "module",
  "dependencies": {
    "@fontsource/fira-code": "^5.1.0",
    "@fontsource/roboto": "^5.1.0",
    "@fontsource/roboto-mono": "^5.1.0",
    "@fontsource/space-grotesk": "^5.1.0",
    "@fortawesome/fontawesome-svg-core": "^6.5.2",
    "@fortawesome/free-brands-svg-icons": "^6.5.2",
    "@fortawesome/free-regular-svg-icons": "^6.5.2",
    "@fortawesome/free-solid-svg-icons": "^6.5.2",
    "@fortawesome/react-fontawesome": "^0.2.2",
    "@headlessui/react": "^2.1.8",
    "@shazow/whatsabi": "^0.12.0",
    "@tanstack/react-query": "^5.52.0",
    "@testing-library/jest-dom": "^6.4.8",
    "@testing-library/react": "^15.0.5",
    "@testing-library/user-event": "^14.5.2",
    "@types/jest": "^29.5.13",
    "@types/node": "^20.16.10",
    "@types/react": "^18.3.8",
    "@types/react-blockies": "^1.4.4",
    "@types/react-dom": "^18.3.0",
    "@types/react-syntax-highlighter": "^15.5.11",
    "@zilliqa-js/zilliqa": "^3.5.0",
    "@zilliqa-js/crypto": "^3.5.0",
    "@zxing/browser": "^0.1.5",
    "@zxing/library": "^0.21.3",
    "chart.js": "^4.4.4",
    "ethers": "zilliqa/ethers.js#v6.13.4_ethers_zq",
    "highlightjs-solidity": "^2.0.6",
    "prettier-plugin-organize-imports": "^4.1.0",
    "react": "^18.2.0",
    "react-blockies": "^1.4.1",
    "react-chartjs-2": "^5.2.0",
    "react-content-loader": "^7.0.2",
    "react-dom": "^18.3.1",
    "react-error-boundary": "^4.0.13",
    "react-helmet-async": "^2.0.5",
    "react-image": "^4.1.0",
    "react-intersection-observer": "^9.13.1",
    "react-router-dom": "^6.26.2",
    "react-syntax-highlighter": "^15.5.0",
    "shiki": "^1.21.0",
    "swr": "^2.2.2",
    "tiny-invariant": "^1.3.3",
    "use-keyboard-shortcut": "^1.1.6",
    "web-vitals": "^3.5.2"
  },
  "scripts": {
    "start": "./scripts/gen-version.sh autogen/version.ts && vite",
    "build": "./scripts/gen-version.sh autogen/version.ts && tsc && vite build",
    "preview": "./scripts/gen-version.sh autogen/version.ts && vite preview",
    "test": "jest",
    "just-build": "tsc && vite build",
    "source-map-explorer": "source-map-explorer build/static/js/*.js",
    "assets-start": "docker run --rm -p 5175:80 --name otterscan-assets -d otterscan/otterscan-assets:v1.0.1",
    "assets-stop": "docker stop otterscan-assets",
    "docker-build": "docker buildx build -t otterscan  .",
    "docker-start": "docker run --rm -p 5273:80 --name otterscan -d otterscan",
    "docker-stop": "docker stop otterscan",
    "docker-hub-start": "docker run --rm -p 5273:80 --pull always --name otterscan -d otterscan/otterscan:develop",
    "storybook": "storybook dev -p 6006",
    "build-storybook": "storybook build",
    "build-parsers": "npx tspeg ./src/execution/address/contract/contract-input-grammar | npx prettier --stdin-filepath contractInput.ts > ./src/execution/address/contract/contractInputDataParser.ts",
    "start-devnet": "VITE_CONFIG_JSON=$(cat cypress/support/devnet-config.json) vite",
    "cy:run-mainnet": "npx cypress run --spec \"cypress/e2e/mainnet/**/*.cy.ts,cypress/e2e/*.cy.ts\"",
    "cy:run-devnet": "npx cypress run --spec \"cypress/e2e/devnet/**/*.cy.ts,cypress/e2e/*.cy.ts\""
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@storybook/addon-essentials": "^8.3.3",
    "@storybook/addon-interactions": "^8.3.3",
    "@storybook/addon-links": "^8.3.3",
    "@storybook/blocks": "^8.3.3",
    "@storybook/react": "^8.3.3",
    "@storybook/react-vite": "^8.3.3",
    "@storybook/test": "^8.3.3",
    "@vitejs/plugin-react-swc": "^3.7.1",
    "autoprefixer": "^10.4.20",
    "cypress": "^13.15.0",
    "jest": "^29.7.0",
    "postcss": "^8.4.41",
    "prettier": "^3.3.3",
    "prettier-plugin-tailwindcss": "^0.6.8",
    "source-map-explorer": "^2.5.3",
    "storybook": "^8.3.3",
    "tailwindcss": "^3.4.13",
    "ts-jest": "^29.2.5",
    "ts-node": "^10.9.2",
    "tspeg": "^3.3.1",
    "typescript": "^5.6.2",
    "vite": "^5.4.8",
    "vite-imagetools": "^7.0.4",
    "vite-plugin-compression": "^0.5.1"
  },
  "optionalDependencies": {
    "@rollup/rollup-linux-x64-gnu": "^4.22.4"
  }
}



================================================
FILE: postcss.config.js
================================================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};



================================================
FILE: README.zilliqa.md
================================================
# Zilliqa Otterscan

Here are some local notes for the Zilliqa version of otterscan

## Autogenerated files

There are some modules (`autogen/version.ts` in particular) which are
autogenerated. Because there is no way to stop Vite from trying to
analyse these, they must always be there.

Because there is no way to tell git to remember their existence but
ignore changes to them, they are generated by `npm start` as well as
`npm build`, but they are not checked into the repo.

Be warned! If you use `vite` directly, you may end up with analysis
errors due to their absence.

## Parameters

You can now pass `network=` and `name=` parameters to preload a network into `localStorage`.
For large sets of prewritten parameters, there is a list of connection objects in `config.json`.

These are overridden if we select network from your hostname.

## Configuration

There are some extra config options - see `public/config.json` for an example. In particular, `connections` is a list of potential connections, each of which is a dictionary:

- `menuName` - name that will appear in the connection menu for this option
- `url` - the URL to query
- `hostnames` - an array of hostnames. If the `window.location` hostname has one of these as a prefix, the `url` will be force-selected and the connections menu will not appear.

## Starting for development

.. because I keep forgetting!

```
export VITE_ERIGON_URL=<url>
npm run assets-start
npm start
```



================================================
FILE: run-nginx.sh
================================================
#!/bin/sh

# If complete config is provided, use it
if [ "$OTTERSCAN_CONFIG" ]; then
  PARAMS="$OTTERSCAN_CONFIG"
else
  # Build config JSON from container init params
  PARAMS=$(jq -n \
    --arg erigonURL "$ERIGON_URL" \
    --arg beaconAPI "$BEACON_API_URL" \
    --arg assetsURLPrefix "$ASSETS_URL_PREFIX" \
    --arg experimental "$OTS2" \
    '{
      erigonURL: $erigonURL,
      beaconAPI: $beaconAPI,
      assetsURLPrefix: $assetsURLPrefix,
      experimental: $experimental,
    }')
fi

# Overwrite base image config.json with our own and let nginx do the rest
if [ ! "$DISABLE_CONFIG_OVERWRITE" ]; then
  echo $PARAMS > /usr/share/nginx/html/config.json
fi
exec nginx -g "daemon off;"



================================================
FILE: tailwind.config.js
================================================
function withOpacity(variableName) {
  return ({ opacityValue }) => {
    if (opacityValue !== undefined) {
      return `rgba(var(${variableName}), ${opacityValue})`;
    }
    return `rgb(var(${variableName}))`;
  };
}

/** @type {import('tailwindcss').Config} */
export default {
  content: ["./src/**/*.{js,jsx,ts,tsx}", "./index.html"],
  darkMode: "selector",
  theme: {
    extend: {
      colors: {
        "link-blue": "#3498db",
        "link-blue-light": "#95c9ec",
        "link-blue-hover": "#0468ab",
        "verified-contract": "#2b50aa",
        "verified-contract-hover": "#26007b",
        "source-line-numbers": "#738a9486",
        "zq-darkblue": "#2B9297",
        "zq-lightblue": "#4DBBBA",
        "zq-whitetext": "#F0F0F0",
      },
      fontFamily: {
        sans: ["Montserrat"],
        title: ["Montserrat"],
        address: ["Montserrat"],
        hash: ["Roboto Mono"],
        data: ["Roboto Mono"],
        balance: ["Fira Code"],
        blocknum: ["Montserrat"],
        code: ["Fira Code"],
      },
      borderColor: {
        skin: {
          from: withOpacity("--color-from-border"),
        },
      },
      textColor: {
        skin: {
          button: withOpacity("--color-button-text"),

          from: withOpacity("--color-from-text"),
        },
      },
      backgroundColor: {
        skin: {
          "button-fill": withOpacity("--color-button-fill"),
          "button-hover-fill": withOpacity("--color-button-hover-fill"),

          from: withOpacity("--color-from-fill"),
          to: withOpacity("--color-to-fill"),
          "table-hover": withOpacity("--color-table-row-hover"),
        },
      },
    },
  },
  plugins: [],
};



================================================
FILE: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ESNext",
    "useDefineForClassFields": true,
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    "allowJs": false,
    "allowImportingTsExtensions": true,
    "skipLibCheck": true,
    "esModuleInterop": false,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "module": "ESNext",
    "moduleResolution": "Node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }],
}



================================================
FILE: tsconfig.node.json
================================================
{
  "compilerOptions": {
    "composite": true,
    "module": "ESNext",
    "moduleResolution": "Node",
    "allowSyntheticDefaultImports": true
  },
  "include": ["vite.config.ts"]
}



================================================
FILE: vercel.json
================================================
{
  "github": {
    "silent": true
  },
  "git": {
    "deploymentEnabled": {
      "dependabot/*": false
    }
  }
}



================================================
FILE: vite.config.ts
================================================
import react from "@vitejs/plugin-react-swc";
import { defineConfig } from "vite";
import { imagetools } from "vite-imagetools";
import viteCompression from "vite-plugin-compression";

// https://vitejs.dev/config/
export default defineConfig({
  define: {
    global: "globalThis",
  },
  plugins: [
    react(),
    viteCompression(),
    viteCompression({ algorithm: "brotliCompress" }),
    imagetools(),
  ],
});



================================================
FILE: .dockerignore
================================================
.git
node_modules
4bytes
!4bytes/signatures
!4bytes/with_parameter_names
trustwallet
!trustwallet/blockchains/ethereum/assets
!trustwallet/blockchains/polygon/assets
!trustwallet/blockchains/smartchain/assets
chains
!chains/_data/chains



================================================
FILE: .nvmrc
================================================
v20.10.0



================================================
FILE: .prettierignore
================================================
build
dist
docs
nginx
public
scripts

# submodules
4bytes
chains
topic0
trustwallet

node_modules
.github



================================================
FILE: .prettierrc.json
================================================
{
  "plugins": ["prettier-plugin-organize-imports"],
  "overrides": [
    {
      "files": ["tsconfig.json", "jsconfig.json"],
      "options": {
        "parser": "jsonc"
      }
    }
  ]
}



================================================
FILE: .release-it.json
================================================
{
  "git": {
    "tag": false
  },
  "npm": {
    "publish": false
  }
}



================================================
FILE: autogen/.gitkeep
================================================



================================================
FILE: cd/base/deployment.yaml
================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otterscan
  namespace: otterscan
  labels:
    app.kubernetes.io/name: otterscan
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: otterscan
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: otterscan
    spec:
      containers:
        - image: otterscan
          name: otterscan
          resources:
            limits:
              memory: 200Mi
            requests:
              memory: 100Mi
          ports:
            - containerPort: 80
          env:
            - name: DISABLE_CONFIG_OVERWRITE
              value: "disable"
          readinessProbe:
            httpGet:
              path: /
              port: 80



================================================
FILE: cd/base/ingress.yaml
================================================
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: otterscan
  namespace: otterscan
  labels:
    app.kubernetes.io/name: otterscan
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  rules:
    - host: localhost
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: otterscan
                port:
                  number: 80



================================================
FILE: cd/base/kustomization.yaml
================================================
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
resources:
  - namespace.yaml
  - deployment.yaml
  - svc.yaml
  - ingress.yaml



================================================
FILE: cd/base/namespace.yaml
================================================
apiVersion: v1
kind: Namespace
metadata:
  name: otterscan
  labels:
    app.kubernetes.io/name: otterscan



================================================
FILE: cd/base/svc.yaml
================================================
apiVersion: v1
kind: Service
metadata:
  name: otterscan
  namespace: otterscan
  labels:
    app.kubernetes.io/name: otterscan
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: otterscan



================================================
FILE: cd/overlays/development/backend-config.yaml
================================================
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: otterscan
  namespace: otterscan
  labels:
    app.kubernetes.io/name: otterscan
spec:
  timeoutSec: 120
  healthCheck:
    requestPath: /health



================================================
FILE: cd/overlays/development/certificate.yaml
================================================
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: otterscan
  labels:
    app.kubernetes.io/name: otterscan
spec:
  domains:
    - otterscan.zilstg.dev



================================================
FILE: cd/overlays/development/configmap.yaml
================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: otterscan
  namespace: otterscan
  labels:
    app.kubernetes.io/name: otterscan
data:
  config.json: |
    {
      "connections": [
        {
          "menuName": "zq2-mainnet",
          "url": "https://api.zq2-mainnet.zilliqa.com",
          "hostnames": ["explorer.zq2-mainnet.zilliqa.com"]
        },
        {
          "menuName": "zq2-testnet",
          "url": "https://api.zq2-testnet.zilliqa.com",
          "hostnames": ["explorer.zq2-testnet.zilliqa.com"]
        },
        {
          "menuName": "zq2-protomainnet",
          "url": "https://api.zq2-protomainnet.zilliqa.com",
          "hostnames": ["explorer.zq2-protomainnet.zilliqa.com"]
        },
        {
          "menuName": "zq2-prototestnet",
          "url": "https://api.zq2-prototestnet.zilliqa.com",
          "hostnames": ["explorer.zq2-prototestnet.zilliqa.com"]
        },
        {
          "menuName": "zq2-devnet",
          "url": "https://api.zq2-devnet.zilliqa.com",
          "hostnames": ["explorer.zq2-devnet.zilliqa.com"]
        },
        {
          "menuName": "zq1-mainnet",
          "url": "https://mainnet-v934-fireblocks.mainnet-20240103-ase1.zq1.network",
          "hostnames": ["otterscan.zilliqa.com"]
        },
        {
          "menuName": "zq1-testnet",
          "url": "https://testnet-v932-fireblocks.testnet-ase1.zq1.dev",
          "hostnames": ["otterscan.testnet.zilliqa.com"]
        },
        {
          "menuName": "zq1-devnet",
          "url": "https://devnet-pub-v930-otterscan.devnet-ase1.zq1.dev",
          "hostnames": ["otterscan.devnet.zilliqa.com"]
        },
        {
          "menuName": "zq2-infratest",
          "url": "https://api.zq2-infratest.zilstg.dev",
          "hostnames": ["explorer.zq2-infratest.zilstg.dev"]
        },
        {
          "menuName": "zq2-perftest",
          "url": "https://api.zq2-perftest.zilstg.dev",
          "hostnames": ["explorer.zq2-perftest.zilstg.dev"]
        },
        {
          "menuName": "zq2-persistence",
          "url": "https://api.zq2-persistence.zilstg.dev",
          "hostnames": ["explorer.zq2-persistence.zilstg.dev"]
        },
        {
          "menuName": "zq2-richard",
          "url": "https://api.zq2-richard.zilstg.dev",
          "hostnames": ["explorer.zq2-richard.zilstg.dev"]
        }
      ]
    }



================================================
FILE: cd/overlays/development/frontend-config.yaml
================================================
apiVersion: networking.gke.io/v1beta1
kind: FrontendConfig
metadata:
  name: otterscan
  namespace: otterscan
  labels:
    app.kubernetes.io/name: otterscan
spec:
  redirectToHttps:
    enabled: true
    responseCodeName: RESPONSE_CODE



================================================
FILE: cd/overlays/development/kustomization.yaml
================================================
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

namespace: otterscan-dev

resources:
  - ../../base
  - configmap.yaml
  - certificate.yaml
  - backend-config.yaml
  - frontend-config.yaml

patches:
  - target:
      kind: Ingress
      name: otterscan
    patch: |-
      - op: replace
        path: "/spec/rules/0/host"
        value: otterscan.zilstg.dev
      - op: replace
        path: /metadata/annotations
        value:
          kubernetes.io/ingress.class: gce
          kubernetes.io/ingress.global-static-ip-name: otterscan-zilstg-dev
          networking.gke.io/managed-certificates: otterscan
          networking.gke.io/v1beta1.FrontendConfig: otterscan

  - target:
      kind: Service
      name: otterscan
    patch: |-
      - op: add
        path: /metadata/annotations
        value:
          beta.cloud.google.com/backend-config: '{"default": "otterscan"}'

  - target:
      kind: Deployment
      name: otterscan
    patch: |-
      - op: add
        path: /spec/template/spec/volumes
        value:
          - name: network-config
            configMap:
              name: otterscan
      - op: add
        path: /spec/template/spec/containers/0/volumeMounts
        value:
          - mountPath: /usr/share/nginx/html/config.json
            readOnly: true
            name: network-config
            subPath: config.json



================================================
FILE: cd/overlays/production/backend-config.yaml
================================================
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: otterscan
  namespace: otterscan
  labels:
    app.kubernetes.io/name: otterscan
spec:
  timeoutSec: 120
  healthCheck:
    requestPath: /health



================================================
FILE: cd/overlays/production/certificate.yaml
================================================
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: otterscan
  labels:
    app.kubernetes.io/name: otterscan
spec:
  domains:
    - explorer.zq2-mainnet.zilliqa.com
    - explorer.zq2-protomainnet.zilliqa.com



================================================
FILE: cd/overlays/production/configmap.yaml
================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: otterscan
  namespace: otterscan
  labels:
    app.kubernetes.io/name: otterscan
data:
  config.json: |
    {
      "connections": [
        {
          "menuName": "zq2-mainnet",
          "url": "https://api.zq2-mainnet.zilliqa.com",
          "hostnames": ["explorer.zq2-mainnet.zilliqa.com"]
        },
        {
          "menuName": "zq2-protomainnet",
          "url": "https://api.zq2-protomainnet.zilliqa.com",
          "hostnames": ["explorer.zq2-protomainnet.zilliqa.com"]
        }
      ]
    }



================================================
FILE: cd/overlays/production/frontend-config.yaml
================================================
apiVersion: networking.gke.io/v1beta1
kind: FrontendConfig
metadata:
  name: otterscan
  namespace: otterscan
  labels:
    app.kubernetes.io/name: otterscan
spec:
  redirectToHttps:
    enabled: true
    responseCodeName: RESPONSE_CODE



================================================
FILE: cd/overlays/production/kustomization.yaml
================================================
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

namespace: otterscan-prd

resources:
  - ../../base
  - configmap.yaml
  - certificate.yaml
  - backend-config.yaml
  - frontend-config.yaml

patches:
  - target:
      kind: Ingress
      name: otterscan
    patch: |-
      - op: replace
        path: "/spec/rules/0/host"
        value: explorer.zq2-mainnet.zilliqa.com
      - op: add
        path: "/spec/rules/-"
        value:
          host: explorer.zq2-protomainnet.zilliqa.com
          http:
            paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: otterscan
                    port:
                      number: 80
      - op: replace
        path: /metadata/annotations
        value:
          kubernetes.io/ingress.class: gce
          kubernetes.io/ingress.global-static-ip-name: zq2-otterscan-zilliqa-com
          networking.gke.io/managed-certificates: otterscan
          networking.gke.io/v1beta1.FrontendConfig: otterscan

  - target:
      kind: Service
      name: otterscan
    patch: |-
      - op: add
        path: /metadata/annotations
        value:
          beta.cloud.google.com/backend-config: '{"default": "otterscan"}'

  - target:
      kind: Deployment
      name: otterscan
    patch: |-
      - op: add
        path: /spec/template/spec/volumes
        value:
          - name: network-config
            configMap:
              name: otterscan
      - op: add
        path: /spec/template/spec/containers/0/volumeMounts
        value:
          - mountPath: /usr/share/nginx/html/config.json
            readOnly: true
            name: network-config
            subPath: config.json



================================================
FILE: cd/overlays/staging/backend-config.yaml
================================================
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: otterscan
  namespace: otterscan
  labels:
    app.kubernetes.io/name: otterscan
spec:
  timeoutSec: 120
  healthCheck:
    requestPath: /health



================================================
FILE: cd/overlays/staging/certificate.yaml
================================================
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: otterscan
  labels:
    app.kubernetes.io/name: otterscan
spec:
  domains:
    - explorer.zq2-testnet.zilliqa.com
    - explorer.zq2-prototestnet.zilliqa.com
    - explorer.zq2-devnet.zilliqa.com
    - explorer.zq2-infratest.zilstg.dev
    - explorer.zq2-perftest.zilstg.dev
    - explorer.zq2-persistence.zilstg.dev
    - explorer.zq2-richard.zilstg.dev



================================================
FILE: cd/overlays/staging/configmap.yaml
================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: otterscan
  namespace: otterscan
  labels:
    app.kubernetes.io/name: otterscan
data:
  config.json: |
    {
      "connections": [
        {
          "menuName": "zq2-testnet",
          "url": "https://api.zq2-testnet.zilliqa.com",
          "hostnames": ["explorer.zq2-testnet.zilliqa.com"]
        },
        {
          "menuName": "zq2-prototestnet",
          "url": "https://api.zq2-prototestnet.zilliqa.com",
          "hostnames": ["explorer.zq2-prototestnet.zilliqa.com"]
        },
        {
          "menuName": "zq2-devnet",
          "url": "https://api.zq2-devnet.zilliqa.com",
          "hostnames": ["explorer.zq2-devnet.zilliqa.com"]
        },
        {
          "menuName": "zq2-infratest",
          "url": "https://api.zq2-infratest.zilstg.dev",
          "hostnames": ["explorer.zq2-infratest.zilstg.dev"]
        },
        {
          "menuName": "zq2-perftest",
          "url": "https://api.zq2-perftest.zilstg.dev",
          "hostnames": ["explorer.zq2-perftest.zilstg.dev"]
        },
        {
          "menuName": "zq2-persistence",
          "url": "https://api.zq2-persistence.zilstg.dev",
          "hostnames": ["explorer.zq2-persistence.zilstg.dev"]
        },
        {
          "menuName": "zq2-richard",
          "url": "https://api.zq2-richard.zilstg.dev",
          "hostnames": ["explorer.zq2-richard.zilstg.dev"]
        }
      ]
    }



================================================
FILE: cd/overlays/staging/frontend-config.yaml
================================================
apiVersion: networking.gke.io/v1beta1
kind: FrontendConfig
metadata:
  name: otterscan
  namespace: otterscan
  labels:
    app.kubernetes.io/name: otterscan
spec:
  redirectToHttps:
    enabled: true
    responseCodeName: RESPONSE_CODE



================================================
FILE: cd/overlays/staging/kustomization.yaml
================================================
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

namespace: otterscan-stg

resources:
  - ../../base
  - configmap.yaml
  - certificate.yaml
  - backend-config.yaml
  - frontend-config.yaml

patches:
  - target:
      kind: Ingress
      name: otterscan
    patch: |-
      - op: replace
        path: "/spec/rules/0/host"
        value: explorer.zq2-testnet.zilliqa.com
      - op: add
        path: "/spec/rules/-"
        value:
          host: explorer.zq2-prototestnet.zilliqa.com
          http:
            paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: otterscan
                    port:
                      number: 80
      - op: add
        path: "/spec/rules/-"
        value:
          host: explorer.zq2-devnet.zilliqa.com
          http:
            paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: otterscan
                    port:
                      number: 80
      - op: add
        path: "/spec/rules/-"
        value:
          host: explorer.zq2-infratest.zilstg.dev
          http:
            paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: otterscan
                    port:
                      number: 80
      - op: add
        path: "/spec/rules/-"
        value:
          host: explorer.zq2-perftest.zilstg.dev
          http:
            paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: otterscan
                    port:
                      number: 80
      - op: add
        path: "/spec/rules/-"
        value:
          host: explorer.zq2-persistence.zilstg.dev
          http:
            paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: otterscan
                    port:
                      number: 80
      - op: add
        path: "/spec/rules/-"
        value:
          host: explorer.zq2-richard.zilstg.dev
          http:
            paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: otterscan
                    port:
                      number: 80
      - op: replace
        path: /metadata/annotations
        value:
          kubernetes.io/ingress.class: gce
          kubernetes.io/ingress.global-static-ip-name: zq2-otterscan-zilstg-dev
          networking.gke.io/managed-certificates: otterscan
          networking.gke.io/v1beta1.FrontendConfig: otterscan

  - target:
      kind: Service
      name: otterscan
    patch: |-
      - op: add
        path: /metadata/annotations
        value:
          beta.cloud.google.com/backend-config: '{"default": "otterscan"}'

  - target:
      kind: Deployment
      name: otterscan
    patch: |-
      - op: add
        path: /spec/template/spec/volumes
        value:
          - name: network-config
            configMap:
              name: otterscan
      - op: add
        path: /spec/template/spec/containers/0/volumeMounts
        value:
          - mountPath: /usr/share/nginx/html/config.json
            readOnly: true
            name: network-config
            subPath: config.json



================================================
FILE: cypress/tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ESNext",
    "lib": ["ESNext", "dom"],
    "types": ["cypress", "node"],
    "baseUrl": "../node_modules",
    "moduleResolution": "Node",
  },
  "include": ["**/*.ts"],
}



================================================
FILE: cypress/e2e/spec.cy.ts
================================================
describe("Home and navigation", () => {
  beforeEach(() => {
    cy.visit("/");
  });
  it("Loads the logo text", () => {
    cy.get('[data-test="logotext"]').contains("Otterscan");
  });
  it("Searches by block number", () => {
    const blockNumber = "10";
    cy.get('[data-test="home-search-input"]').type(`${blockNumber}{enter}`);
    cy.url().should("include", `/block/${blockNumber}`);
    cy.get('[data-test="block-number"]').contains(`#${blockNumber}`);
  });
  it("Loads the latest block via useLatestBlockHeader and displays it on the home page", () => {
    cy.get('[data-test="home-latest-block-header"]', { timeout: 10000 });
  });
});



================================================
FILE: cypress/e2e/devnet/navigation.cy.ts
================================================
import { Wallet } from "ethers";

describe("Navigation", () => {
  xit("Should navigate correctly on address transaction results pages with a single transaction", () => {
    // Send 26 transactions (25n + 1, with the default page size of 25)
    const targetAddr = Wallet.createRandom().address;
    const loopArr = Array.from({ length: 25 + 1 }, (value, index) => index);
    cy.wrap(loopArr)
      .each((index) => {
        cy.sendTx({
          to: targetAddr,
          value: 1_000_000_000n * BigInt(index + 1),
        });
      })
      .then(() => {
        cy.visit(`/address/${targetAddr}`);
        cy.get('[data-test="address"]', { timeout: 15_000 }).contains(
          targetAddr,
        );

        // Check that the first transaction is the most recent
        cy.get(":nth-child(1) > .min-w-48")
          .invoke("text")
          .should("contain", "0.000000026");
        // Check that the next page has the expected transaction
        cy.get('[data-test="nav-next"]').first().click();
        cy.get(":nth-child(1) > .min-w-48")
          .invoke("text")
          .should("contain", "0.000000001");
        // Go back
        cy.get('[data-test="nav-prev"]').first().click();
        cy.get(":nth-child(1) > .min-w-48")
          .invoke("text")
          .should("contain", "0.000000026");
        // Try again starting on the last page, going the other direction
        cy.get('[data-test="nav-last"]').first().click();
        cy.get(":nth-child(1) > .min-w-48")
          .invoke("text")
          .should("contain", "0.000000025");
        cy.get('[data-test="nav-prev"]').first().click();
        cy.get(":nth-child(1) > .min-w-48")
          .invoke("text")
          .should("contain", "0.000000026");
        cy.get('[data-test="nav-next"]').first().click();
        cy.get(":nth-child(1) > .min-w-48")
          .invoke("text")
          .should("contain", "0.000000025");
      });
  });
});



================================================
FILE: cypress/e2e/devnet/spec.cy.ts
================================================
describe("Devnet tests", () => {
  beforeEach(() => {
    cy.visit("/");
  });
  xit("Has a warning header with the chain ID", () => {
    cy.get('[data-test="warning-header-network-name"]').contains(
      "You are on ChainID: 1337",
    );
  });
  it("Can navigate to a transaction's Trace tab and back", () => {
    cy.sendTx({
      to: "0x67b1d87101671b127f5f8714789C7192f7ad340e",
    }).then(({ txReceipt }) => {
      cy.visit("/tx/" + txReceipt.hash);
      // Click Trace button and make sure the trace loads
      cy.get("a").contains("Trace").click();
      cy.get("span").contains("<fallback>");
      cy.location("pathname").should(
        "equal",
        "/tx/" + txReceipt.hash + "/trace",
      );
      // Go back to the Overview tab
      cy.get("a").contains("Overview").click();
      cy.location("pathname").should("equal", "/tx/" + txReceipt.hash);
      cy.get('[data-test="tx-hash"]').contains(txReceipt.hash);
    });
  });
});



================================================
FILE: cypress/e2e/devnet/verified-contracts.cy.ts
================================================
describe("Read Contract tests", () => {
  it("Should add and remove elements from a dynamic array", () => {
    // Deploy AllTypes contract
    cy.fixture("contracts/AllTypes/bytecode.txt").then((bytecode) => {
      cy.sendTx({ data: bytecode.trim() }).then(({ txReceipt }) => {
        // TODO: Remove this second transaction when ots_hasCode on the contract creation block is fixed
        cy.sendTx({});
        cy.interceptDirectory(
          `${Cypress.env("DEVNET_SOURCIFY_SOURCE")}/contracts/full_match/1337/${
            txReceipt.contractAddress
          }/`,
          "contracts/AllTypes",
        );

        // Visit contract's Read Contract page
        cy.visit("/address/" + txReceipt.contractAddress + "/readContract");
        cy.get('[data-test="read-function"]')
          .contains("getVariableLengthStringArray")
          .parent()
          .as("func");
        cy.get("@func").find("input").type("one");
        cy.get("@func").find("button").contains("Add Element").click();
        cy.get("@func").find("input").eq(1).type("two");
        cy.get("@func").find("button").contains("Add Element").click();
        cy.get("@func").find("input").eq(2).type("three");

        cy.get("@func").find("input").eq(0).should("have.value", "one");
        cy.get("@func").find("input").eq(1).should("have.value", "two");
        cy.get("@func").find("input").eq(2).should("have.value", "three");

        // Remove the 2nd element
        cy.get("@func")
          .find("[data-test='remove-array-element']")
          .eq(1)
          .click();
        cy.get("@func").find("input").eq(0).should("have.value", "one");
        cy.get("@func").find("input").eq(1).should("have.value", "three");

        // Add another array element
        cy.get("@func").find("button").contains("Add Element").click();
        cy.get("@func").find("input").eq(2).type("new");

        cy.get("@func").find("input").eq(0).should("have.value", "one");
        cy.get("@func").find("input").eq(1).should("have.value", "three");
        cy.get("@func").find("input").eq(2).should("have.value", "new");

        // Remove the 1st element
        cy.get("@func")
          .find("[data-test='remove-array-element']")
          .eq(0)
          .click();
        cy.get("@func").find("input").eq(0).should("have.value", "three");
        cy.get("@func").find("input").eq(1).should("have.value", "new");

        // Query
        cy.get("@func").find("button").contains("Query").click();

        cy.get("@func")
          .contains("ret_0 [0]")
          .parents("tr")
          .eq(0)
          .contains("three");
        cy.get("@func")
          .contains("ret_0 [1]")
          .parents("tr")
          .eq(0)
          .contains("new");
      });
    });
  });
});



================================================
FILE: cypress/e2e/mainnet/block-rewards.cy.ts
================================================
describe("ETH mainnet block rewards", () => {
  it("Should be 5 ETH pre-Byzantium", () => {
    cy.visit("/block/4369999");
    cy.get('[data-test="block-reward"]').invoke("text").should("equal", "5");
  });

  it("Should be 3 ETH post-Byzantium", () => {
    cy.visit("/block/4370000");
    cy.get('[data-test="block-reward"]').invoke("text").should("equal", "3");
  });

  it("Should be 3 ETH pre-Constantinople", () => {
    cy.visit("/block/7279999");
    cy.get('[data-test="block-reward"]').invoke("text").should("equal", "3");
  });

  it("Should be 2 ETH post-Constantinople", () => {
    cy.visit("/block/7280000");
    cy.get('[data-test="block-reward"]').invoke("text").should("equal", "2");
  });

  it("Should be 2 ETH pre-merge", () => {
    cy.visit("/block/15537393");
    cy.get('[data-test="block-reward"]').invoke("text").should("equal", "2");
  });

  it("Should be 0 ETH post-merge", () => {
    cy.visit("/block/15537394");
    cy.get('[data-test="block-reward"]').invoke("text").should("equal", "0");
  });
});



================================================
FILE: cypress/e2e/mainnet/smoketests.cy.ts
================================================
describe("Basic navigation", () => {
  it("Should load vitalik.eth address", () => {
    // From the home page, go to vitalik.eth address page, expect it finds it
    cy.visit("/");
    cy.get('[data-test="home-search-input"]').type(`vitalik.eth{enter}`);

    cy.get('[data-test="address"]', { timeout: 15_000 }).contains(
      "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
    );

    // Go to last page, check if it has a full 25 entries page
    cy.get('[data-test="nav-last"]').first().click();
    cy.get('[data-test="page-count"]')
      .first()
      .invoke("text")
      .should("equal", "25");

    // Examine the first transaction hash
    cy.get('[data-test="tx-hash"]')
      .first()
      .invoke("text")
      .should(
        "equal",
        "0x32e725433af17709360462be3ee194bba4994650fe697b5677339531a5db99a9",
      );

    // Go back 2 pages
    cy.get('[data-test="nav-prev"]').first().click();
    cy.get('[data-test="tx-hash"]')
      .first()
      .invoke("text")
      .should(
        "equal",
        "0x012616c16fc2dbffe6dfba0f450aca81624743a684e176cea208e499a1af9b62",
      );

    cy.get('[data-test="nav-prev"]').first().click();
    cy.get('[data-test="tx-hash"]')
      .first()
      .invoke("text")
      .should(
        "equal",
        "0x64426b39b22e76b9679c86292d16e1ca1f68a144a9029ec49efdae1f900db8d8",
      );

    // Go forward 1 page (test forward is working)
    cy.get('[data-test="nav-next"]').first().click();
    cy.get('[data-test="tx-hash"]')
      .first()
      .invoke("text")
      .should(
        "equal",
        "0x012616c16fc2dbffe6dfba0f450aca81624743a684e176cea208e499a1af9b62",
      );

    // Click second tx, open tx page
    cy.get('[data-test="tx-hash"]').eq(1).click();
    cy.location("pathname").should(
      "equal",
      "/tx/0x9b8964cd49910fd7494fb8359912b8925bf7417126a3e5a0a3f69e0166ad437e",
    );
    cy.get('[data-test="tx-hash"]')
      .invoke("text")
      .should(
        "equal",
        "0x9b8964cd49910fd7494fb8359912b8925bf7417126a3e5a0a3f69e0166ad437e",
      );
    cy.get('[data-test="status"]').invoke("text").should("equal", "Success");
  });
});



================================================
FILE: cypress/e2e/mainnet/spec.cy.ts
================================================
describe("Direct navigation by URL", () => {
  it("Loads a block page by hash", () => {
    cy.visit(
      "/block/0xaf53d2fe59e1c849f157be75e2b47b4f8b4d551e55ed27d98ec58eee420df3a7",
    );
    cy.get('[data-test="block-height-text"]', { timeout: 10000 }).contains(
      `18,600,400`,
    );
  });
});



================================================
FILE: cypress/e2e/mainnet/verified-contracts.cy.ts
================================================
describe("Read Contract tests", () => {
  it("Should get a correct response with array input", () => {
    cy.visit(
      "/address/0x536384FCd25b576265B6775F383D5ac408FF9dB7/readContract",
    );
    cy.get('[data-test="read-function"]')
      .contains("getAddressForCounterfactualWallet")
      .parent()
      .as("func");
    cy.get("@func")
      .find("input")
      .eq(0)
      .type("0x0000000000000000000000000000000000000001");
    cy.get("@func")
      .find("input")
      .eq(1)
      .type("0x0000000000000000000000000000000000000005");
    cy.get("@func").find("button").contains("Add Element").click();
    cy.get("@func")
      .find("input")
      .eq(2)
      .type("0x0000000000000000000000000000000000000006");
    cy.get("@func").find("button").contains("Add Element").click();
    cy.get("@func")
      .find("input")
      .eq(3)
      .type("0x0000000000000000000000000000000000000007");

    cy.get("@func")
      .find("input")
      .eq(1)
      .should("have.value", "0x0000000000000000000000000000000000000005");
    cy.get("@func")
      .find("input")
      .eq(2)
      .should("have.value", "0x0000000000000000000000000000000000000006");
    cy.get("@func")
      .find("input")
      .eq(3)
      .should("have.value", "0x0000000000000000000000000000000000000007");

    // Remove the 2nd element
    cy.get("@func").find("[data-test='remove-array-element']").eq(1).click();
    cy.get("@func")
      .find("input")
      .eq(1)
      .should("have.value", "0x0000000000000000000000000000000000000005");
    cy.get("@func")
      .find("input")
      .eq(2)
      .should("have.value", "0x0000000000000000000000000000000000000007");

    // Add another array element
    cy.get("@func").find("button").contains("Add Element").click();
    cy.get("@func")
      .find("input")
      .eq(3)
      .type("0x0000000000000000000000000000000000000008");

    cy.get("@func")
      .find("input")
      .eq(1)
      .should("have.value", "0x0000000000000000000000000000000000000005");
    cy.get("@func")
      .find("input")
      .eq(2)
      .should("have.value", "0x0000000000000000000000000000000000000007");
    cy.get("@func")
      .find("input")
      .eq(3)
      .should("have.value", "0x0000000000000000000000000000000000000008");

    // Remove the 1st element
    cy.get("@func").find("[data-test='remove-array-element']").eq(0).click();
    cy.get("@func")
      .find("input")
      .eq(1)
      .should("have.value", "0x0000000000000000000000000000000000000007");
    cy.get("@func")
      .find("input")
      .eq(2)
      .should("have.value", "0x0000000000000000000000000000000000000008");

    // Add other inputs
    cy.get("@func")
      .find("input")
      .eq(3)
      .type("0x0000000000000000000000000000000000000002");
    cy.get("@func")
      .find("input")
      .eq(4)
      .type("0x0000000000000000000000000000000000000000");

    // Query
    cy.get("@func").find("button").contains("Query").click();

    cy.get("@func")
      .contains("_wallet")
      .parents("tr")
      .eq(0)
      .contains("0x296d1362694fA673719D6F5dD6521c019ed1978C");
  });
});



================================================
FILE: cypress/fixtures/contracts/AllTypes/bytecode.txt
================================================
0x608060405234801561001057600080fd5b50611784806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806382abdced1161008c578063a2050af811610066578063a2050af8146102d2578063a6ed563e14610303578063ae22c57d14610333578063c946bf4c14610363576100ea565b806382abdced1461024157806382d696a1146102715780639c981fcb146102a1576100ea565b80634d507192116100c85780634d5071921461017f5780636168d817146101b05780636689e498146101e0578063781c6dbe14610210576100ea565b80631e553250146100ef5780633740774b1461011f578063441abbac1461014f575b600080fd5b61010960048036038101906101049190610497565b610393565b60405161011691906104d3565b60405180910390f35b61013960048036038101906101349190610527565b61039d565b6040516101469190610563565b60405180910390f35b610169600480360381019061016491906105b4565b6103a7565b60405161017691906105f0565b60405180910390f35b61019960048036038101906101949190610670565b6103b1565b6040516101a7929190611044565b60405180910390f35b6101ca60048036038101906101c59190611068565b6103c1565b6040516101d791906110a4565b60405180910390f35b6101fa60048036038101906101f591906110bf565b6103cb565b60405161020791906110fb565b60405180910390f35b61022a6004803603810190610225919061116c565b6103d5565b6040516102389291906111f7565b60405180910390f35b61025b6004803603810190610256919061123d565b6103e5565b604051610268919061130e565b60405180910390f35b61028b60048036038101906102869190611330565b6103ee565b604051610298919061136c565b60405180910390f35b6102bb60048036038101906102b691906113dd565b6103f8565b6040516102c9929190611468565b60405180910390f35b6102ec60048036038101906102e791906114e2565b610408565b6040516102fa9291906115b6565b60405180910390f35b61031d600480360381019061031891906115da565b610418565b60405161032a9190611616565b60405180910390f35b61034d60048036038101906103489190611631565b610422565b60405161035a919061166d565b60405180910390f35b61037d600480360381019061037891906116ac565b61042c565b60405161038a9190611733565b60405180910390f35b6000819050919050565b6000819050919050565b6000819050919050565b3660008383915091509250929050565b6000819050919050565b6000819050919050565b3660008383915091509250929050565b36819050919050565b6000819050919050565b3660008383915091509250929050565b3660008383915091509250929050565b6000819050919050565b6000819050919050565b36819050919050565b600080fd5b600080fd5b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6104748161043f565b811461047f57600080fd5b50565b6000813590506104918161046b565b92915050565b6000602082840312156104ad576104ac610435565b5b60006104bb84828501610482565b91505092915050565b6104cd8161043f565b82525050565b60006020820190506104e860008301846104c4565b92915050565b600060ff82169050919050565b610504816104ee565b811461050f57600080fd5b50565b600081359050610521816104fb565b92915050565b60006020828403121561053d5761053c610435565b5b600061054b84828501610512565b91505092915050565b61055d816104ee565b82525050565b60006020820190506105786000830184610554565b92915050565b6000819050919050565b6105918161057e565b811461059c57600080fd5b50565b6000813590506105ae81610588565b92915050565b6000602082840312156105ca576105c9610435565b5b60006105d88482850161059f565b91505092915050565b6105ea8161057e565b82525050565b600060208201905061060560008301846105e1565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126106305761062f61060b565b5b8235905067ffffffffffffffff81111561064d5761064c610610565b5b60208301915083602082028301111561066957610668610615565b5b9250929050565b6000806020838503121561068757610686610435565b5b600083013567ffffffffffffffff8111156106a5576106a461043a565b5b6106b18582860161061a565b92509250509250929050565b600082825260208201905092915050565b6000819050919050565b60008115159050919050565b6106ed816106d8565b81146106f857600080fd5b50565b60008135905061070a816106e4565b92915050565b600061071f60208401846106fb565b905092915050565b610730816106d8565b82525050565b60006107456020840184610512565b905092915050565b610756816104ee565b82525050565b600061076b602084018461059f565b905092915050565b61077c8161057e565b82525050565b60008160000b9050919050565b61079881610782565b81146107a357600080fd5b50565b6000813590506107b58161078f565b92915050565b60006107ca60208401846107a6565b905092915050565b6107db81610782565b82525050565b6000819050919050565b6107f4816107e1565b81146107ff57600080fd5b50565b600081359050610811816107eb565b92915050565b60006108266020840184610802565b905092915050565b610837816107e1565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108688261083d565b9050919050565b6108788161085d565b811461088357600080fd5b50565b6000813590506108958161086f565b92915050565b60006108aa6020840184610886565b905092915050565b6108bb8161085d565b82525050565b60006108d06020840184610482565b905092915050565b6108e18161043f565b82525050565b6000819050919050565b6108fa816108e7565b811461090557600080fd5b50565b600081359050610917816108f1565b92915050565b600061092c6020840184610908565b905092915050565b61093d816108e7565b82525050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261096f5761096e61094d565b5b83810192508235915060208301925067ffffffffffffffff82111561099757610996610943565b5b6001820236038313156109ad576109ac610948565b5b509250929050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006109f283856109b5565b93506109ff8385846109c6565b610a08836109d5565b840190509392505050565b60008083356001602003843603038112610a3057610a2f61094d565b5b83810192508235915060208301925067ffffffffffffffff821115610a5857610a57610943565b5b600182023603831315610a6e57610a6d610948565b5b509250929050565b600082825260208201905092915050565b6000610a938385610a76565b9350610aa08385846109c6565b610aa9836109d5565b840190509392505050565b60008083356001602003843603038112610ad157610ad061094d565b5b83810192508235915060208301925067ffffffffffffffff821115610af957610af8610943565b5b602082023603831315610b0f57610b0e610948565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b6000610b3f848484610a87565b90509392505050565b6000602082019050919050565b6000610b618385610b17565b935083602084028501610b7384610b28565b8060005b87811015610bb9578484038952610b8e8284610a13565b610b99868284610b32565b9550610ba484610b48565b935060208b019a505050600181019050610b77565b50829750879450505050509392505050565b600082356001604003833603038112610be757610be661094d565b5b82810191505092915050565b600060029050919050565b600081905092915050565b6000819050919050565b600060029050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b6000610c4b82610c13565b610c558185610c1e565b935083602082028501610c6785610c29565b8060005b85811015610cad578484038952610c828284610a13565b610c8d868284610b32565b9550610c9884610c33565b935060208b019a505050600181019050610c6b565b50829750879550505050505092915050565b6000610ccb8383610c40565b905092915050565b600082356001604003833603038112610cef57610cee61094d565b5b82810191505092915050565b6000602082019050919050565b6000610d1382610bf3565b610d1d8185610bfe565b935083602082028501610d2f85610c09565b8060005b85811015610d73578484038952610d4a8284610cd3565b610d548582610cbf565b9450610d5f83610cfb565b925060208a01995050600181019050610d33565b50829750879550505050505092915050565b600082905092915050565b60608201610da16000830183610736565b610dae600085018261074d565b50610dbc60208301836108c1565b610dc960208501826108d8565b50610dd7604083018361089b565b610de460408501826108b2565b50505050565b60006101e08301610dfe6000840184610710565b610e0b6000860182610727565b50610e196020840184610736565b610e26602086018261074d565b50610e34604084018461075c565b610e416040860182610773565b50610e4f60608401846107bb565b610e5c60608601826107d2565b50610e6a6080840184610817565b610e77608086018261082e565b50610e8560a084018461089b565b610e9260a08601826108b2565b50610ea060c08401846108c1565b610ead60c08601826108d8565b50610ebb60e084018461091d565b610ec860e0860182610934565b50610ed7610100840184610952565b858303610100870152610eeb8382846109e6565b92505050610efd610120840184610a13565b858303610120870152610f11838284610a87565b92505050610f23610140840184610ab4565b858303610140870152610f37838284610b55565b92505050610f49610160840184610bcb565b848203610160860152610f5c8282610d08565b915050610f6d610180840184610d85565b610f7b610180860182610d90565b508091505092915050565b6000610f928383610dea565b905092915050565b6000823560016101e003833603038112610fb757610fb661094d565b5b82810191505092915050565b6000602082019050919050565b6000610fdc83856106bd565b935083602084028501610fee846106ce565b8060005b878110156110325784840389526110098284610f9a565b6110138582610f86565b945061101e83610fc3565b925060208a01995050600181019050610ff2565b50829750879450505050509392505050565b6000602082019050818103600083015261105f818486610fd0565b90509392505050565b60006020828403121561107e5761107d610435565b5b600061108c848285016106fb565b91505092915050565b61109e816106d8565b82525050565b60006020820190506110b96000830184611095565b92915050565b6000602082840312156110d5576110d4610435565b5b60006110e3848285016107a6565b91505092915050565b6110f581610782565b82525050565b600060208201905061111060008301846110ec565b92915050565b60008083601f84011261112c5761112b61060b565b5b8235905067ffffffffffffffff81111561114957611148610610565b5b60208301915083600182028301111561116557611164610615565b5b9250929050565b6000806020838503121561118357611182610435565b5b600083013567ffffffffffffffff8111156111a1576111a061043a565b5b6111ad85828601611116565b92509250509250929050565b600082825260208201905092915050565b60006111d683856111b9565b93506111e38385846109c6565b6111ec836109d5565b840190509392505050565b600060208201905081810360008301526112128184866111ca565b90509392505050565b60008190508260206002028201111561123757611236610615565b5b92915050565b60006020828403121561125357611252610435565b5b600082013567ffffffffffffffff8111156112715761127061043a565b5b61127d8482850161121b565b91505092915050565b600081905092915050565b600061129c82610bf3565b6112a68185611286565b9350836020820285016112b885610c09565b8060005b858110156112fc5784840389526112d38284610cd3565b6112dd8582610cbf565b94506112e883610cfb565b925060208a019950506001810190506112bc565b50829750879550505050505092915050565b600060208201905081810360008301526113288184611291565b905092915050565b60006020828403121561134657611345610435565b5b600061135484828501610802565b91505092915050565b611366816107e1565b82525050565b6000602082019050611381600083018461135d565b92915050565b60008083601f84011261139d5761139c61060b565b5b8235905067ffffffffffffffff8111156113ba576113b9610610565b5b6020830191508360018202830111156113d6576113d5610615565b5b9250929050565b600080602083850312156113f4576113f3610435565b5b600083013567ffffffffffffffff8111156114125761141161043a565b5b61141e85828601611387565b92509250509250929050565b600082825260208201905092915050565b6000611447838561142a565b93506114548385846109c6565b61145d836109d5565b840190509392505050565b6000602082019050818103600083015261148381848661143b565b90509392505050565b60008083601f8401126114a2576114a161060b565b5b8235905067ffffffffffffffff8111156114bf576114be610610565b5b6020830191508360208202830111156114db576114da610615565b5b9250929050565b600080602083850312156114f9576114f8610435565b5b600083013567ffffffffffffffff8111156115175761151661043a565b5b6115238582860161148c565b92509250509250929050565b600082825260208201905092915050565b600061154c838561152f565b93508360208402850161155e84610b28565b8060005b878110156115a45784840389526115798284610a13565b611584868284610b32565b955061158f84610b48565b935060208b019a505050600181019050611562565b50829750879450505050509392505050565b600060208201905081810360008301526115d1818486611540565b90509392505050565b6000602082840312156115f0576115ef610435565b5b60006115fe84828501610908565b91505092915050565b611610816108e7565b82525050565b600060208201905061162b6000830184611607565b92915050565b60006020828403121561164757611646610435565b5b600061165584828501610886565b91505092915050565b6116678161085d565b82525050565b6000602082019050611682600083018461165e565b92915050565b600080fd5b6000606082840312156116a3576116a2611688565b5b81905092915050565b6000606082840312156116c2576116c1610435565b5b60006116d08482850161168d565b91505092915050565b606082016116ea6000830183610736565b6116f7600085018261074d565b5061170560208301836108c1565b61171260208501826108d8565b50611720604083018361089b565b61172d60408501826108b2565b50505050565b600060608201905061174860008301846116d9565b9291505056fea2646970667358221220fce0a7dcb191d14c3a4e9c9ce570179e21a4078982de09aaefb6d45b10d9cd0264736f6c63430008120033



================================================
FILE: cypress/fixtures/contracts/AllTypes/metadata.json
================================================
{
  "compiler": { "version": "0.8.18+commit.87f61d96" },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          { "internalType": "address", "name": "val", "type": "address" }
        ],
        "name": "getAddress",
        "outputs": [
          { "internalType": "address", "name": "", "type": "address" }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              { "internalType": "bool", "name": "boolVal", "type": "bool" },
              { "internalType": "uint8", "name": "uint8Val", "type": "uint8" },
              {
                "internalType": "uint256",
                "name": "uint256Val",
                "type": "uint256"
              },
              { "internalType": "int8", "name": "int8Val", "type": "int8" },
              {
                "internalType": "int256",
                "name": "int256Val",
                "type": "int256"
              },
              {
                "internalType": "address",
                "name": "addressVal",
                "type": "address"
              },
              {
                "internalType": "bytes1",
                "name": "bytes1Val",
                "type": "bytes1"
              },
              {
                "internalType": "bytes32",
                "name": "bytes32Val",
                "type": "bytes32"
              },
              { "internalType": "bytes", "name": "bytesVal", "type": "bytes" },
              {
                "internalType": "string",
                "name": "stringVal",
                "type": "string"
              },
              {
                "internalType": "string[]",
                "name": "varLenStringArray",
                "type": "string[]"
              },
              {
                "internalType": "string[2][2]",
                "name": "fixedLenStringArray",
                "type": "string[2][2]"
              },
              {
                "components": [
                  {
                    "internalType": "uint8",
                    "name": "tinyUint8",
                    "type": "uint8"
                  },
                  {
                    "internalType": "bytes1",
                    "name": "tinyBytes1",
                    "type": "bytes1"
                  },
                  {
                    "internalType": "address",
                    "name": "tinyAddress",
                    "type": "address"
                  }
                ],
                "internalType": "struct TinyTuple",
                "name": "tupleVal",
                "type": "tuple"
              }
            ],
            "internalType": "struct AllTypeVal[]",
            "name": "val",
            "type": "tuple[]"
          }
        ],
        "name": "getAllTypeTuple",
        "outputs": [
          {
            "components": [
              { "internalType": "bool", "name": "boolVal", "type": "bool" },
              { "internalType": "uint8", "name": "uint8Val", "type": "uint8" },
              {
                "internalType": "uint256",
                "name": "uint256Val",
                "type": "uint256"
              },
              { "internalType": "int8", "name": "int8Val", "type": "int8" },
              {
                "internalType": "int256",
                "name": "int256Val",
                "type": "int256"
              },
              {
                "internalType": "address",
                "name": "addressVal",
                "type": "address"
              },
              {
                "internalType": "bytes1",
                "name": "bytes1Val",
                "type": "bytes1"
              },
              {
                "internalType": "bytes32",
                "name": "bytes32Val",
                "type": "bytes32"
              },
              { "internalType": "bytes", "name": "bytesVal", "type": "bytes" },
              {
                "internalType": "string",
                "name": "stringVal",
                "type": "string"
              },
              {
                "internalType": "string[]",
                "name": "varLenStringArray",
                "type": "string[]"
              },
              {
                "internalType": "string[2][2]",
                "name": "fixedLenStringArray",
                "type": "string[2][2]"
              },
              {
                "components": [
                  {
                    "internalType": "uint8",
                    "name": "tinyUint8",
                    "type": "uint8"
                  },
                  {
                    "internalType": "bytes1",
                    "name": "tinyBytes1",
                    "type": "bytes1"
                  },
                  {
                    "internalType": "address",
                    "name": "tinyAddress",
                    "type": "address"
                  }
                ],
                "internalType": "struct TinyTuple",
                "name": "tupleVal",
                "type": "tuple"
              }
            ],
            "internalType": "struct AllTypeVal[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [{ "internalType": "bool", "name": "val", "type": "bool" }],
        "name": "getBool",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [{ "internalType": "bytes", "name": "val", "type": "bytes" }],
        "name": "getBytes",
        "outputs": [{ "internalType": "bytes", "name": "", "type": "bytes" }],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "bytes1", "name": "val", "type": "bytes1" }
        ],
        "name": "getBytes1",
        "outputs": [{ "internalType": "bytes1", "name": "", "type": "bytes1" }],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "bytes32", "name": "val", "type": "bytes32" }
        ],
        "name": "getBytes32",
        "outputs": [
          { "internalType": "bytes32", "name": "", "type": "bytes32" }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string[2][2]",
            "name": "val",
            "type": "string[2][2]"
          }
        ],
        "name": "getFixedLengthStringArray",
        "outputs": [
          { "internalType": "string[2][2]", "name": "", "type": "string[2][2]" }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "int256", "name": "val", "type": "int256" }
        ],
        "name": "getInt256",
        "outputs": [{ "internalType": "int256", "name": "", "type": "int256" }],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [{ "internalType": "int8", "name": "val", "type": "int8" }],
        "name": "getInt8",
        "outputs": [{ "internalType": "int8", "name": "", "type": "int8" }],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "string", "name": "val", "type": "string" }
        ],
        "name": "getString",
        "outputs": [{ "internalType": "string", "name": "", "type": "string" }],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              { "internalType": "uint8", "name": "tinyUint8", "type": "uint8" },
              {
                "internalType": "bytes1",
                "name": "tinyBytes1",
                "type": "bytes1"
              },
              {
                "internalType": "address",
                "name": "tinyAddress",
                "type": "address"
              }
            ],
            "internalType": "struct TinyTuple",
            "name": "val",
            "type": "tuple"
          }
        ],
        "name": "getTinyTuple",
        "outputs": [
          {
            "components": [
              { "internalType": "uint8", "name": "tinyUint8", "type": "uint8" },
              {
                "internalType": "bytes1",
                "name": "tinyBytes1",
                "type": "bytes1"
              },
              {
                "internalType": "address",
                "name": "tinyAddress",
                "type": "address"
              }
            ],
            "internalType": "struct TinyTuple",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "val", "type": "uint256" }
        ],
        "name": "getUint256",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [{ "internalType": "uint8", "name": "val", "type": "uint8" }],
        "name": "getUint8",
        "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "string[]", "name": "val", "type": "string[]" }
        ],
        "name": "getVariableLengthStringArray",
        "outputs": [
          { "internalType": "string[]", "name": "", "type": "string[]" }
        ],
        "stateMutability": "pure",
        "type": "function"
      }
    ],
    "devdoc": {
      "details": "Store & retrieve all types",
      "kind": "dev",
      "methods": {
        "getAddress(address)": {
          "details": "Store & retrieve an address",
          "params": { "val": "Value to return" }
        },
        "getAllTypeTuple((bool,uint8,uint256,int8,int256,address,bytes1,bytes32,bytes,string,string[],string[2][2],(uint8,bytes1,address))[])": {
          "details": "Store & retrieve a tuple with all types",
          "params": { "val": "Value to return" }
        },
        "getBool(bool)": {
          "details": "Store & retrieve a bool",
          "params": { "val": "Value to return" }
        },
        "getBytes(bytes)": {
          "details": "Store & retrieve a byte array",
          "params": { "val": "Value to return" }
        },
        "getBytes1(bytes1)": {
          "details": "Store & retrieve a bytes1",
          "params": { "val": "Value to return" }
        },
        "getBytes32(bytes32)": {
          "details": "Store & retrieve a bytes32",
          "params": { "val": "Value to return" }
        },
        "getFixedLengthStringArray(string[2][2])": {
          "details": "Store & retrieve a fixed-length string array",
          "params": { "val": "Value to return" }
        },
        "getInt256(int256)": {
          "details": "Store & retrieve an int256",
          "params": { "val": "Value to return" }
        },
        "getInt8(int8)": {
          "details": "Store & retrieve an int8",
          "params": { "val": "Value to return" }
        },
        "getString(string)": {
          "details": "Store & retrieve a string",
          "params": { "val": "Value to return" }
        },
        "getTinyTuple((uint8,bytes1,address))": {
          "details": "Store & retrieve a tuple with fixed-length types",
          "params": { "val": "Value to return" }
        },
        "getUint256(uint256)": {
          "details": "Store & retrieve a uint256",
          "params": { "val": "Value to return" }
        },
        "getUint8(uint8)": {
          "details": "Store & retrieve a uint8",
          "params": { "val": "Value to return" }
        },
        "getVariableLengthStringArray(string[])": {
          "details": "Store & retrieve a variable-length string array",
          "params": { "val": "Value to return" }
        }
      },
      "title": "AllTypes",
      "version": 1
    },
    "userdoc": { "kind": "user", "methods": {}, "version": 1 }
  },
  "settings": {
    "compilationTarget": { "test.sol": "AllTypes" },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": { "bytecodeHash": "ipfs" },
    "optimizer": { "enabled": false, "runs": 200 },
    "remappings": []
  },
  "sources": {
    "test.sol": {
      "keccak256": "0x6557dc50dd96646f758608c668ebe005caab5695e68064fdfd9b5795beff9189",
      "license": "GPL-3.0",
      "urls": [
        "bzz-raw://057d9e0fe433f0acb411609f9e974f8b6a828932a368077dc2e23a81fbebf2eb",
        "dweb:/ipfs/QmTMiFNCi1yoBMZZJ9sgUNAiTCptXaeJnEGz5qN4yFNTEy"
      ]
    }
  },
  "version": 1
}



================================================
FILE: cypress/fixtures/contracts/AllTypes/sources/test.sol
================================================
// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.2 <0.9.0;

/**
* @title TinyTuple
* @dev A structure with fixed-length types
*/
struct TinyTuple {
    uint8 tinyUint8;
    bytes1 tinyBytes1;
    function(uint8) external tinyFunction;
}

/**
 * @title AllTypes
 * @dev A structure that has all types
 */
struct AllTypeVal {
    bool boolVal;
    uint8 uint8Val;
    uint256 uint256Val;
    int8 int8Val;
    int256 int256Val;
    address addressVal;
    bytes1 bytes1Val;
    bytes32 bytes32Val;
    function() external functionVal;
    bytes bytesVal;
    string stringVal;
    string[] varLenStringArray;
    string[2][2] fixedLenStringArray;
    TinyTuple tupleVal;
}

/**
 * @title AllTypes
 * @dev Store & retrieve all types
 */
contract AllTypes {

    /**
    * @dev Store & retrieve a bool
    * @param val Value to return
    */
    function getBool(bool val) public pure returns (bool) {
        return val;
    }

    /**
    * @dev Store & retrieve a uint8
    * @param val Value to return
    */
    function getUint8(uint8 val) public pure returns (uint8) {
        return val;
    }

    /**
    * @dev Store & retrieve a uint256
    * @param val Value to return
    */
    function getUint256(uint256 val) public pure returns (uint256) {
        return val;
    }

    /**
    * @dev Store & retrieve an int8
    * @param val Value to return
    */
    function getInt8(int8 val) public pure returns (int8) {
        return val;
    }

    /**
    * @dev Store & retrieve an int256
    * @param val Value to return
    */
    function getInt256(int256 val) public pure returns (int256) {
        return val;
    }

    /**
    * @dev Store & retrieve an address
    * @param val Value to return
    */
    function getAddress(address val) public pure returns (address) {
        return val;
    }

    /**
    * @dev Store & retrieve a bytes1
    * @param val Value to return
    */
    function getBytes1(bytes1 val) public pure returns (bytes1) {
        return val;
    }

    /**
    * @dev Store & retrieve a bytes32
    * @param val Value to return
    */
    function getBytes32(bytes32 val) public pure returns (bytes32) {
        return val;
    }

    /**
    * @dev Store & retrieve a function
    * @param val Value to return
    */
    function getFunction(function() external val) public pure returns (function() external) {
        return val;
    }

    /**
    * @dev Store & retrieve a byte array
    * @param val Value to return
    */
    function getBytes(bytes calldata val) public pure returns (bytes calldata) {
        return val;
    }

    /**
    * @dev Store & retrieve a string
    * @param val Value to return
    */
    function getString(string calldata val) public pure returns (string calldata) {
        return val;
    }

    /**
    * @dev Store & retrieve a variable-length string array
    * @param val Value to return
    */
    function getVariableLengthStringArray(string[] calldata val) public pure returns (string[] calldata) {
        return val;
    }

    /**
    * @dev Store & retrieve a fixed-length string array
    * @param val Value to return
    */
    function getFixedLengthStringArray(string[2][2] calldata val) public pure returns (string[2][2] calldata) {
        return val;
    }

    /**
    * @dev Store & retrieve a tuple with fixed-length types
    * @param val Value to return
    */
    function getTinyTuple(TinyTuple calldata val) public pure returns (TinyTuple calldata) {
        return val;
    }

    /**
    * @dev Store & retrieve a tuple with all types
    * @param val Value to return
    */
    function getAllTypeTuple(AllTypeVal calldata val) public pure returns (AllTypeVal calldata) {
        return val;
    }
}



================================================
FILE: cypress/support/commands.ts
================================================
/// <reference types="cypress" />
import {
  TransactionReceipt,
  TransactionRequest,
  TransactionResponse,
  Wallet,
  ethers,
} from "ethers";

Cypress.Commands.add(
  "interceptDirectory",
  (baseUrl: string, directory: string) => {
    cy.intercept(baseUrl + "**", (req) => {
      const filePath = req.url.replace(baseUrl, "");
      req.reply({
        fixture: directory + "/" + filePath,
      });
    });
  },
);

// Send a transaction using the devnet key
Cypress.Commands.add("sendTx", (txReq: TransactionRequest) => {
  return cy.wrap(
    (async () => {
      const provider = new ethers.JsonRpcProvider(
        Cypress.env("DEVNET_ERIGON_URL"),
        undefined,
        // Speed up polling time from 4000ms => 100ms
        { polling: true, pollingInterval: 100 },
      );
      // Temporary fix for https://github.com/ethers-io/ethers.js/issues/4713
      provider.pollingInterval = 100;
      const wallet = new ethers.Wallet(
        Cypress.env("DEVNET_ACCOUNT_KEY") ||
          ethers.sha256(ethers.toUtf8Bytes("erigon devnet key")),
        provider,
      );
      const tx = await wallet.sendTransaction(txReq);
      const txReceipt = await tx.wait();
      return { tx, txReceipt, wallet };
    })(),
    { timeout: 15_000 },
  );
});

declare global {
  namespace Cypress {
    interface Chainable {
      interceptDirectory(baseUrl: string, directory: string): Chainable<void>;
      sendTx(txReq: TransactionRequest): Chainable<{
        tx: TransactionResponse;
        txReceipt: TransactionReceipt;
        wallet: Wallet;
      }>;
    }
  }
}



================================================
FILE: cypress/support/devnet-config.json
================================================
{
  "erigonURL": "http://localhost:8545",
  "beaconAPI": "http://localhost:5052",
  "assetsURLPrefix": "http://localhost:5175",
  "sourcify": {
    "sources": {
      "central_server": "http://localhost:7077",
      "ipfs": "http://localhost:7077"
    }
  }
}



================================================
FILE: cypress/support/e2e.ts
================================================
// ***********************************************************
// This example support/e2e.ts is processed and
// loaded automatically before your test files.
//
// This is a great place to put global configuration and
// behavior that modifies Cypress.
//
// You can change the location of this file or turn off
// automatically serving support files with the
// 'supportFile' configuration option.
//
// You can read more here:
// https://on.cypress.io/configuration
// ***********************************************************

// Import commands.js using ES2015 syntax:
import "./commands";

// Alternatively you can use CommonJS syntax:
// require('./commands')



================================================
FILE: docs/ipfs.md
================================================
# IPFS

This doc describes various topics regarding our use of IPFS (currently only used for Sourcify integration).

## Default public gateway by default

By default every IPFS resource is linked to the default public IPFS gateway at https://ipfs.io.

This is done so even users without a local node can use IPFS integration by default.

However this brings us some privacy concerns, since queries are made against the public gateway.

We recommend the use of [IPFS Companion](https://docs.ipfs.io/install/ipfs-companion/), a popular browser extension that intercepts gateway calls and redirect them to your local gateway.

This also solves the problem of users not having a local gateway at http://localhost:8080 (the default bind address of `ipfs` daemon, but also a very common bind address for other software leading to collisions), but instead having a private gateway inside the local network. The IPFS Companion allows you to customize which gateway you want it to redirect requests to.

This way we can provide an out-of-box usable integration, but still allowing users to address privacy concerns.

## Slow IPNS resolution

By default IPNS resolution _may_ be **extremely** slow. There is an experimental IPFS feature called IPNS pubsub that speeds it up significantly (https://github.com/ipfs/go-ipfs/blob/master/docs/experimental-features.md#ipns-pubsub), but for it to work, it needs to be enabled in **both** resolver and publisher nodes.

We asked Sourcify to enable it in their publisher node, so you just have to enable it in your local node to have an usable performance.

On IPFS Companion, make sure **both** `Enable PubSub` and `Enable IPNS over PubSub` options are enabled.

![IPFS pubsub](./ipns-pubsub.png)

## Pinning Sourcify locally

If you have an IPFS node, you can speedup things significantly and also help to spread their data among the network by pinning their entire repository.

However, due to their repository characteristics (> 5 GB of thousands of small files and many nested directories), there are a few gotchas.

> Please note this is based on Otterscan author's experience, it would be welcome to have more datapoints.

### Use `badgerds`

By default ipfs uses the `flatfs` datastore, which stores objects in simple files.

I simply couldn't finish pinning the entire repo using the default settings, after 6 hours it was able to get only ~10% of the total repo, the pinning process itself slows down the computer a lot.

`badgerds` is an alternative ipfs node repository format, still labeled as experimental, but marked as a _"to be turned into the default"_ repository format in future. It uses a key-value database internally.

You can create a repository from scratch by using `ipfs init -p badgerds`, or convert an existing repository using [ipfs-ds-convert](https://github.com/ipfs/ipfs-ds-convert).

> Use it at your own risk!

My experiments pinning the entire repo on `badgerds` gave different timings, varying from 1 to 2 hours in a standard MacBook Pro laptop, totally affordable for home users, with no perceived system degradation.

```
$ time ipfs pin add --progress /ipns/repo.sourcify.dev
pinned QmVn7fcwo4Eai19hRX6dG9jAV8piHyxcrPTuobyZjEKhMW recursively
ipfs pin add --progress   4.47s user 1.85s system 0% cpu 2:22:41.00 total
```

### IPFS root changes hourly

The Sourcify root IPNS name is `/ipns/repo.sourcify.dev`.

Pinning it resolves it to the current IPFS root hash. However, any change to their contents changes the root hash (e.g., new contracts are verified).

Sourcify current runs a cron job the updates the IPNS name hourly. It means that your pin will eventually become stale.

But we think it is still worth pinning the repo because data always gets added to their repo, so by pinning current data you are speeding up your own queries to existing contracts and contributing to spread their data over the network so other people don't have to rely 100% on their node availability.



================================================
FILE: docs/testing.md
================================================
# Running tests

## Unit tests
To run the unit tests with Jest, simply run

```sh
npm run test
```

## End-to-end tests
Otterscan uses Cypress as its end-to-end testing framework. You can run the end-to-end tests locally. First, ensure you are running an Otterscan instance on `http://localhost:5173`. Then you can run one of the following commands:

### Ethereum mainnet
```sh
npm run cy:run-mainnet
```

### Erigon devnet
Running the devnet tests requires a custom Otterscan configuration. You can use this command to start Otterscan with the devnet configuration:
```sh
npm run start-devnet
```
The Otterscan instance should then be pointed to an Erigon devnet running on `http://localhost:8545`. You can start an Erigon devnet with this command:
```sh
./erigon --chain=dev --datadir=dev --http.api eth,erigon,trace,ots,ots2 --http.corsdomain "*" --http.vhosts "*" --mine --fakepow
```

(Note: The private key for the funded account can be found with `echo -n "erigon devnet key" | sha256sum`.)

Run the devnet and common end-to-end tests:
```sh
npm run cy:run-devnet
```

## Running GitHub Actions workflows locally
Otterscan uses GitHub Actions as its CI platform and runs several jobs when pull requests are opened or commits are made to the `develop` and `main` branches.

You can test these locally using [act](https://github.com/nektos/act) with the following command:
```sh
# Ethereum Mainnet Erigon RPC URL
E2E_ERIGON_URL=
# Cypress Cloud record key, if you have one
E2E_CYPRESS_RECORD_KEY=

act --container-architecture linux/amd64 pull_request -s E2E_ERIGON_URL=$E2E_ERIGON_URL -s E2E_CYPRESS_RECORD_KEY=$E2E_CYPRESS_RECORD_KEY --artifact-server-path /tmp/artifacts
```

Screenshots of failed tests will be "uploaded" to `/tmp/artifacts`.



================================================
FILE: nginx/nginx.conf
================================================
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

#load_module modules/ngx_http_brotli_static_module.so;

events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;
}



================================================
FILE: nginx/conf.d/default.conf
================================================
server {
    listen       80;
    server_name  localhost;

    gzip_static on;

    #access_log  /var/log/nginx/host.access.log  main;

    location /static {
        root   /usr/share/nginx/html;
        expires max;
    }

    location /signatures {
        root   /usr/share/nginx/html;
        expires 30d;
        default_type text/plain;
        
        # Base on: https://michielkalkman.com/snippets/nginx-cors-open-configuration/
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            #
            # Om nom nom cookies
            #
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';

            #
            # Custom headers and headers various browsers *should* be OK with but aren't
            #
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            #
            # Tell client that this pre-flight info is valid for 20 days
            #
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        if ($request_method = 'GET') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type' always;
        }
    }

    location /topic0 {
        root   /usr/share/nginx/html;
        expires 30d;
        default_type text/plain;

        # Base on: https://michielkalkman.com/snippets/nginx-cors-open-configuration/
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            #
            # Om nom nom cookies
            #
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';

            #
            # Custom headers and headers various browsers *should* be OK with but aren't
            #
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            #
            # Tell client that this pre-flight info is valid for 20 days
            #
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        if ($request_method = 'GET') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type' always;
        }
    }

    location /assets {
        root   /usr/share/nginx/html;
        expires 30d;
        
        # Base on: https://michielkalkman.com/snippets/nginx-cors-open-configuration/
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            #
            # Om nom nom cookies
            #
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';

            #
            # Custom headers and headers various browsers *should* be OK with but aren't
            #
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            #
            # Tell client that this pre-flight info is valid for 20 days
            #
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        if ($request_method = 'GET') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type' always;
        }
    }

    location /chains {
        root   /usr/share/nginx/html;
        expires 30d;

        # Base on: https://michielkalkman.com/snippets/nginx-cors-open-configuration/
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            #
            # Om nom nom cookies
            #
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';

            #
            # Custom headers and headers various browsers *should* be OK with but aren't
            #
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            #
            # Tell client that this pre-flight info is valid for 20 days
            #
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        if ($request_method = 'GET') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type' always;
        }
    }

    location / {
        root   /usr/share/nginx/html;
        index  index.html;
        try_files $uri /index.html;

        # brotli_static on;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

}


================================================
FILE: public/config.json
================================================
{
  "assetsURLPrefix": "http://localhost:5175",
  "connections": [
    { "menuName": "zq1-mainnet", "url": "https://mainnet-v934-fireblocks.mainnet-20240103-ase1.zq1.network", "hostnames": ["otterscan.zilliqa.com"] },
    { "menuName": "zq1-testnet", "url": "https://testnet-v932-fireblocks.testnet-ase1.zq1.dev", "hostnames": ["otterscan.testnet.zilliqa.com"] },
    { "menuName": "zq2-mainnet", "url": "https://api.zq2-mainnet.zilliqa.com", "hostnames": ["explorer.zq2-mainnet.zilliqa.com" ] },
    { "menuName": "zq2-testnet", "url": "https://api.zq2-testnet.zilliqa.com", "hostnames": ["explorer.zq2-testnet.zilliqa.com" ] },
    { "menuName": "zq2-prototestnet", "url": "https://api.zq2-prototestnet.zilliqa.com", "hostnames": ["explorer.zq2-prototestnet.zilliqa.com" ] },
    { "menuName": "zq2-protomainnet", "url": "https://api.zq2-protomainnet.zilliqa.com", "hostnames": ["explorer.zq2-protomainnet.zilliqa.com" ] }
  ]
}



================================================
FILE: public/manifest.json
================================================
{
  "short_name": "Otterscan",
  "name": "Otterscan",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}



================================================
FILE: public/robots.txt
================================================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:



================================================
FILE: scripts/gen-version.sh
================================================
#! /bin/bash
if [ $# -ne 1 ]; then
    echo "Syntax: gen-version.sh <output_filename>" 2>1
    exit 1
fi
STATUS=$(git status --porcelain)
COMMIT=$(git rev-parse --short HEAD 2>/dev/null)
VERSION=$(git describe --tags 2>/dev/null)
if [ -z "$STATUS" ]; then
    # No changes
    if [ -z $VERSION ]; then
        REPORT="${COMMIT}"
    else
        REPORT="${VERSION}"
    fi
else
    # Changes
    REPORT="${COMMIT}+"
fi
echo "export const OTTERSCAN_VERSION = \"${REPORT}\";" >$1



================================================
FILE: scripts/run-anvil-devnet.sh
================================================
#!/bin/sh
./anvil --chain-id 1337



================================================
FILE: scripts/run-erigon-devnet-e2e-tests.sh
================================================
#!/usr/bin/env sh
./erigon/build/bin/erigon \
  --chain=dev \
  --datadir=dev \
  --http.api eth,erigon,trace,ots,ots2 \
  --http.corsdomain "*" \
  --http.vhosts "*" \
  --mine \
  --fakepow



================================================
FILE: scripts/run-ots-develop.sh
================================================
#!/usr/bin/env bash
set -e

# this script docker-runs the latest develop Otterscan image from Dockerhub
IMAGE_NAME="${OTS_IMAGE:-otterscan/otterscan:develop}"
PULL="${PULL:-always}"
docker run --rm --name otterscan -d -p 5100:80 --pull $PULL --env ERIGON_URL="$1" --env BEACON_API_URL="$2" $IMAGE_NAME

echo "Using EL JSON-RPC API at: $1"
echo "Using CL REST API at: $2"
echo "Otterscan is running; stop it with: docker stop otterscan"



================================================
FILE: src/App.tsx
================================================
import { QueryClientProvider } from "@tanstack/react-query";
import { isAddress } from "ethers";
import { FC, lazy, Suspense } from "react";
import { ErrorBoundary } from "react-error-boundary";
import {
  Await,
  createBrowserRouter,
  createRoutesFromElements,
  defer,
  LoaderFunction,
  Outlet,
  Route,
  RouterProvider,
  useLoaderData,
} from "react-router-dom";
import ErrorFallback from "./components/ErrorFallback";
import ConnectionErrorPanel from "./ConnectionErrorPanel";
import Footer from "./Footer";
import Home from "./Home";
import Main from "./Main";
import {
  addressAttributesQuery,
  erc20HoldingsQuery,
  genericTransactionCountQuery,
  genericTransactionListQuery,
  type TransactionSearchType,
} from "./ots2/usePrototypeTransferHooks";
import { PAGE_SIZE } from "./params";
import ProbeErrorHandler from "./ProbeErrorHandler";
import { queryClient } from "./queryClient";
import { loader as searchLoader } from "./Search";
import { getTransactionQuery, searchTransactionsQuery } from "./search/search";
import { ConnectionStatus } from "./types";
import { ChainInfoContext, populateChainInfo } from "./useChainInfo";
import { loadOtterscanConfig, OtterscanConfig } from "./useConfig";
import { getBalanceQuery, getCodeQuery, hasCodeQuery } from "./useErigonHooks";
import { useQuirks } from "./useQuirks";
import { createRuntime, RuntimeContext } from "./useRuntime";
import WarningHeader from "./WarningHeader";

const Block = lazy(() => import("./execution/Block"));
const BlockTransactions = lazy(() => import("./execution/BlockTransactions"));
const BlockTransactionByIndex = lazy(
  () => import("./execution/block/BlockTransactionByIndex"),
);
const DSBlock = lazy(() => import("./execution/DSBlock"));
const BlockList = lazy(() => import("./execution/BlockList"));
const DSBlockList = lazy(() => import("./execution/DSBlockList"));
const Address = lazy(() => import("./execution/Address"));
const AddressTransactionResults = lazy(
  () => import("./execution/address/AddressTransactionResults"),
);
const AddressContract = lazy(
  () => import("./execution/address/AddressContract"),
);
const AddressReadContract = lazy(
  () => import("./execution/address/AddressReadContract"),
);
const AddressReadContractAsProxy = lazy(
  () => import("./execution/address/AddressReadContractAsProxy"),
);
const AddressERC20Results = lazy(
  () => import("./execution/address/AddressERC20Results"),
);
const AddressERC721Results = lazy(
  () => import("./execution/address/AddressERC721Results"),
);
const AddressTokens = lazy(() => import("./execution/address/AddressTokens"));
const AddressWithdrawals = lazy(
  () => import("./execution/address/AddressWithdrawals"),
);
const BlocksRewarded = lazy(() => import("./execution/address/BlocksRewarded"));
const ProxyContract = lazy(() => import("./execution/address/ProxyContract"));
const ProxyReadContract = lazy(
  () => import("./execution/address/ProxyReadContract"),
);
const Transaction = lazy(() => import("./execution/Transaction"));
const AllContracts = lazy(() => import("./token/AllContracts"));
const AllERC20 = lazy(() => import("./token/AllERC20"));
const AllERC4626 = lazy(() => import("./token/AllERC4626"));
const AllERC721 = lazy(() => import("./token/AllERC721"));
const AllERC1155 = lazy(() => import("./token/AllERC1155"));
const AllERC1167 = lazy(() => import("./token/AllERC1167"));
const Epoch = lazy(() => import("./consensus/Epoch"));
const Slot = lazy(() => import("./consensus/Slot"));
const SlotByBlockRoot = lazy(() => import("./consensus/slot/SlotByBlockRoot"));
const Validator = lazy(() => import("./consensus/Validator"));
const LiveBlocks = lazy(() => import("./special/london/LiveBlocks"));
const Faucets = lazy(() => import("./Faucets"));
const PageNotFound = lazy(() => import("./PageNotFound"));
const BroadcastTransactionPage = lazy(
  () => import("./execution/BroadcastTransactionPage"),
);

const config = loadOtterscanConfig();

const runtime = populateChainInfo(createRuntime(config));

/**
 * Triggers both config loading and runtime probing/building in parallel.
 *
 * Makes config available in a separate data variable in order to show
 * progress during probing.
 */
const loader: LoaderFunction = async () => {
  return defer({
    config,
    rt: runtime,
  });
};

const addressLoader: LoaderFunction = async ({ params }) => {
  runtime.then((rt) => {
    if (isAddress(params.addressOrName)) {
      const quirks = useQuirks(rt.provider);
      let blockTag = "latest";
      if (quirks?.isZilliqa1) {
        // Zilliqa 1 requires that the tag be numeric, but ignores it, so we can
        // use 0 and save ourselves a fetch.
        blockTag = "0";
      }
      const query = hasCodeQuery(rt.provider, params.addressOrName, blockTag);
      queryClient.prefetchQuery(query);
    }
  });
  return null;
};

const addressTxResultsLoader: LoaderFunction = async ({ params, request }) => {
  if (params.addressOrName !== undefined && isAddress(params.addressOrName)) {
    const address = params.addressOrName;
    runtime.then((rt) => {
      if (
        params.direction === undefined ||
        params.direction === "first" ||
        params.direction === "last"
      ) {
        const searchQuery = searchTransactionsQuery(
          rt.provider,
          address,
          0,
          params.direction === "last" ? "after" : "before",
        );
        queryClient.prefetchQuery(searchQuery);
      } else if (params.direction === "next" || params.direction === "prev") {
        const url = new URL(request.url);
        const txHash = url.searchParams.get("h");
        if (txHash) {
          queryClient
            .fetchQuery(getTransactionQuery(rt.provider, txHash))
            .then((tx) => {
              if (tx !== null) {
                const searchQuery = searchTransactionsQuery(
                  rt.provider,
                  address,
                  tx.blockNumber!,
                  params.direction === "prev" ? "after" : "before",
                );
                queryClient.prefetchQuery(searchQuery);
              }
            });
        }
      }

      const balanceQuery = getBalanceQuery(rt.provider, address);
      queryClient.prefetchQuery(balanceQuery);
    });
  }
  return null;
};

const addressContractLoader: LoaderFunction = async ({ params }) => {
  runtime.then((rt) => {
    if (params.addressOrName && isAddress(params.addressOrName)) {
      const query = getCodeQuery(rt.provider, params.addressOrName, "latest");
      queryClient.prefetchQuery(query);
    }
  });
  return null;
};

const proxyContractLoader: LoaderFunction = async ({ params }) => {
  Promise.all([runtime, config]).then(([rt, cfg]) => {
    if (
      cfg.experimental &&
      params.addressOrName &&
      isAddress(params.addressOrName)
    ) {
      const query = addressAttributesQuery(rt.provider, params.addressOrName);
      queryClient.prefetchQuery(query);
    }
  });
  return null;
};

const addressOts2List: (typeName: TransactionSearchType) => LoaderFunction =
  (typeName: TransactionSearchType) =>
  async ({ params }) => {
    runtime.then((rt) => {
      if (params.addressOrName && isAddress(params.addressOrName)) {
        const countQuery = genericTransactionCountQuery(
          rt.provider,
          typeName,
          params.addressOrName,
        );
        queryClient
          .fetchQuery(countQuery)
          .then((total) => {
            if (total !== undefined && params.addressOrName !== undefined) {
              let pageNumber = 1;
              if (params.p) {
                try {
                  pageNumber = parseInt(params.p);
                } catch (e: any) {}
              }
              const query = genericTransactionListQuery(
                rt.provider,
                typeName,
                params.addressOrName,
                pageNumber,
                PAGE_SIZE,
                total,
              );
              queryClient.prefetchQuery(query);
            }
          })
          .catch((e) => {});
      }
    });
    return null;
  };

const addressTokenHoldings: LoaderFunction = async ({ params }) => {
  runtime.then((rt) => {
    if (isAddress(params.addressOrName)) {
      const query = erc20HoldingsQuery(rt.provider, params.addressOrName);
      queryClient.prefetchQuery(query);
    }
  });
  return null;
};

const Layout: FC = () => {
  // Config + rt map; typings are not available here :(
  const data: any = useLoaderData();

  return (
    // Catch all error boundary
    <ErrorBoundary FallbackComponent={ErrorFallback}>
      {/* wait for config load */}
      <Await resolve={data.config}>
        {(config: OtterscanConfig) => (
          // Wait for runtime building + probing; suspend while probing;
          // don't show probe splash if hardcoded chainId
          <Suspense
            fallback={
              config.experimentalFixedChainId === undefined && (
                <ConnectionErrorPanel
                  connStatus={ConnectionStatus.CONNECTING}
                  nodeURL={config.erigonURL!}
                  config={config}
                />
              )
            }
          >
            <Await
              resolve={data.rt}
              errorElement={<ProbeErrorHandler config={config} />}
            >
              {(runtime) => (
                // App is healthy from here
                <QueryClientProvider client={queryClient}>
                  <RuntimeContext.Provider value={runtime}>
                    <ChainInfoContext.Provider
                      value={runtime.config!.chainInfo}
                    >
                      <div className="flex h-screen flex-col">
                        <WarningHeader />
                        <Outlet />
                        <Footer />
                      </div>
                    </ChainInfoContext.Provider>
                  </RuntimeContext.Provider>
                </QueryClientProvider>
              )}
            </Await>
          </Suspense>
        )}
      </Await>
    </ErrorBoundary>
  );
};

const router = createBrowserRouter(
  createRoutesFromElements(
    <Route element={<Layout />} loader={loader}>
      <Route index element={<Home />} />
      <Route path="/search" loader={searchLoader} />
      <Route path="/special/liveBlocks" element={<LiveBlocks />} />
      <Route path="*" element={<Main />}>
        <Route path="block/:blockNumberOrHash" element={<Block />} />
        <Route path="block/:blockNumber/txs" element={<BlockTransactions />} />
        <Route path="dsblock/:dsBlockNumberOrHash" element={<DSBlock />} />
        <Route path="blocklist" element={<BlockList />} />
        <Route path="dsblocklist" element={<DSBlockList />} />
        <Route
          path="block/:blockNumberOrHash/tx/:txIndex"
          element={<BlockTransactionByIndex />}
        />
        <Route path="tx/:txhash/*" element={<Transaction />} />
        <Route
          path="address/:uncheckedAddressOrName/"
          element={<Address />}
          loader={addressLoader}
        >
          <Route
            index
            element={<AddressTransactionResults />}
            loader={addressTxResultsLoader}
          />
          <Route
            path="txs/:direction"
            element={<AddressTransactionResults />}
            loader={addressTxResultsLoader}
          />
          {/* Experimental address routes */}
          <Route
            path="erc20"
            element={<AddressERC20Results />}
            loader={addressOts2List("ERC20Transfer")}
          />
          <Route
            path="erc721"
            element={<AddressERC721Results />}
            loader={addressOts2List("ERC721Transfer")}
          />
          <Route
            path="tokens"
            element={<AddressTokens />}
            loader={addressTokenHoldings}
          />
          <Route
            path="withdrawals"
            element={<AddressWithdrawals />}
            loader={addressOts2List("Withdrawals")}
          />
          <Route
            path="blocksRewarded"
            element={<BlocksRewarded />}
            loader={addressOts2List("BlocksRewarded")}
          />
          <Route
            path="contract"
            element={<AddressContract />}
            loader={addressContractLoader}
          />
          <Route path="readContract" element={<AddressReadContract />} />
          <Route
            path="readContractAs1967Proxy"
            element={<AddressReadContractAsProxy />}
          />
          <Route
            path="proxyLogicContract"
            element={<ProxyContract />}
            loader={proxyContractLoader}
          />
          <Route
            path="readContractAsProxy"
            element={<ProxyReadContract />}
            loader={proxyContractLoader}
          />
          <Route
            path="*"
            element={
              null /* TODO: Replace with address-specific "tab not found" */
            }
          />
        </Route>

        {/* EXPERIMENTAL ROUTES */}
        <Route path="contracts/*" element={<AllContracts />} />
        <Route path="contracts/erc20/*" element={<AllERC20 />} />
        <Route path="contracts/erc4626/*" element={<AllERC4626 />} />
        <Route path="contracts/erc721/*" element={<AllERC721 />} />
        <Route path="contracts/erc1155/*" element={<AllERC1155 />} />
        <Route path="contracts/erc1167/*" element={<AllERC1167 />} />
        {/* EXPERIMENTAL ROUTES */}

        <Route path="epoch/:epochNumber/*" element={<Epoch />} />
        <Route path="slot/:slotNumber/*" element={<Slot />} />
        <Route
          path="slotByBlockRoot/:blockRoot/*"
          element={<SlotByBlockRoot />}
        />
        <Route path="validator/:validatorIndex/*" element={<Validator />} />
        <Route path="faucets/*" element={<Faucets />} />
        <Route path="broadcastTx" element={<BroadcastTransactionPage />} />
        <Route path="*" element={<PageNotFound />} />
      </Route>
    </Route>,
  ),
);

const App = () => <RouterProvider router={router} />;

export default App;



================================================
FILE: src/ConnectionErrorPanel.tsx
================================================
import {
  faBarsProgress,
  faCheckCircle,
  faClock,
  faTimesCircle,
} from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { FC, PropsWithChildren, memo } from "react";
import NetworkMenuWithConfig from "./NetworkMenuWithConfig";
import { ConnectionStatus } from "./types";
import { OtterscanConfig } from "./useConfig";

type ConnectionErrorPanelProps = {
  connStatus: ConnectionStatus;
  nodeURL: string;
  config: OtterscanConfig;
};

const ConnectionErrorPanel: FC<ConnectionErrorPanelProps> = ({
  connStatus,
  nodeURL,
  config,
}) => {
  return (
    <div className="flex h-screen flex-col font-sans">
      <div className="min-w-lg m-auto h-60 max-w-lg text-lg">
        <Step type="wait" msg="Trying to connect to Zilliqa node..." />
        <div className="flex space-x-2">
          <span className="ml-7 text-base">{nodeURL}</span>
        </div>
        {connStatus === ConnectionStatus.NOT_ETH_NODE && (
          <Step type="error" msg="It does not seem to be a Zilliqa node">
            <p>Make sure your browser can access the URL above.</p>
            <p>
              If you want to customize the Zilliqa rpc endpoint, please follow
              the instructions in the <code>README.md</code>.
            </p>
          </Step>
        )}
        {connStatus === ConnectionStatus.NOT_ERIGON && (
          <>
            <Step type="ok" msg="It is a Zilliqa node" />
            <Step type="error" msg="It does not seem to be a Zilliqa node">
              Make sure your Zilliqa node is up and running.
            </Step>
          </>
        )}
        {connStatus === ConnectionStatus.NOT_OTTERSCAN_PATCHED && (
          <>
            <Step type="ok" msg="It is a Zilliqa node" />
            <Step
              type="error"
              msg="It does not seem to contain up-to-date Otterscan patches"
            >
              Check your Zilliqa node version.
            </Step>
          </>
        )}
        {config?.displayConnectionMenu ? (
          <div className="flex space-x-2 mt-2">
            <span className="text-blue-600">
              <FontAwesomeIcon icon={faBarsProgress} size="1x" />
            </span>
            <NetworkMenuWithConfig config={config} />
          </div>
        ) : (
          <div />
        )}
      </div>
    </div>
  );
};

type StepProps = {
  type: "wait" | "ok" | "error" | "change";
  msg: string;
};

const Step: FC<PropsWithChildren<StepProps>> = memo(
  ({ type, msg, children }) => (
    <>
      <div className="flex space-x-2">
        {type === "wait" && (
          <span className="text-gray-600">
            <FontAwesomeIcon icon={faClock} size="1x" />
          </span>
        )}
        {type === "ok" && (
          <span className="text-emerald-600">
            <FontAwesomeIcon icon={faCheckCircle} size="1x" />
          </span>
        )}
        {type === "error" && (
          <span className="text-red-600">
            <FontAwesomeIcon icon={faTimesCircle} size="1x" />
          </span>
        )}
        {type === "change" && (
          <span className="text-blue-600">
            <FontAwesomeIcon icon={faBarsProgress} size="1x" />
          </span>
        )}
        <span>{msg}</span>
      </div>
      {children && <div className="ml-7 mt-4 text-sm">{children}</div>}
    </>
  ),
);

export default memo(ConnectionErrorPanel);



================================================
FILE: src/Faucets.tsx
================================================
import {
  faFaucetDrip,
  faTriangleExclamation,
} from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import React, { useMemo } from "react";
import { useLocation } from "react-router-dom";
import ContentFrame from "./components/ContentFrame";
import ExternalLink from "./components/ExternalLink";
import StandardFrame from "./components/StandardFrame";
import StandardSubtitle from "./components/StandardSubtitle";
import { useChainInfo } from "./useChainInfo";

const Faucets: React.FC = () => {
  const { faucets } = useChainInfo();
  const loc = useLocation();
  const urls = useMemo(() => {
    const s = new URLSearchParams(loc.search);
    const address = s.get("address");

    const _urls: string[] = faucets.map((u) =>
      // eslint-disable-next-line no-template-curly-in-string
      address !== null ? u.replaceAll("${ADDRESS}", address) : u,
    );

    // Shuffle faucets to avoid UI bias
    for (let i = _urls.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [_urls[i], _urls[j]] = [_urls[j], _urls[i]];
    }

    return _urls;
  }, [faucets, loc]);

  return (
    <StandardFrame>
      <StandardSubtitle>Faucets</StandardSubtitle>
      <ContentFrame>
        <div className="space-y-3 py-4">
          {urls.length > 0 && (
            <div className="flex items-baseline space-x-2 rounded bg-amber-200 px-2 py-1 font-bold text-red-800 underline">
              <FontAwesomeIcon
                className="self-center"
                icon={faTriangleExclamation}
                size="1x"
              />
              <span>
                The following external links come from
                https://github.com/ethereum-lists/chains and are *NOT* endorsed
                by us. Use at your own risk.
              </span>
            </div>
          )}
          {/* Display the shuffling notice only if there are 1+ faucets */}
          {urls.length > 1 && (
            <div className="flex items-baseline space-x-2 rounded bg-amber-200 px-2 py-1 text-amber-700">
              <FontAwesomeIcon
                className="self-center"
                icon={faTriangleExclamation}
                size="1x"
              />
              <span>The faucet links below are shuffled on page load.</span>
            </div>
          )}
          {urls.length > 0 ? (
            <div className="space-y-3 pt-2">
              {urls.map((url) => (
                <div className="flex items-baseline space-x-2">
                  <FontAwesomeIcon
                    className="text-gray-400"
                    icon={faFaucetDrip}
                    size="1x"
                  />
                  <ExternalLink key={url} href={url}>
                    <span>{url}</span>
                  </ExternalLink>
                </div>
              ))}
            </div>
          ) : (
            <div>There are no registered faucets.</div>
          )}
        </div>
      </ContentFrame>
    </StandardFrame>
  );
};

export default Faucets;



================================================
FILE: src/fetcher.ts
================================================
// TODO: remove duplication with other json fetchers
// TODO: deprecated and remove
export const jsonFetcher = async (url: string): Promise<unknown> => {
  try {
    const res = await fetch(url);
    if (res.ok) {
      return res.json();
    }
    return null;
  } catch (err) {
    console.warn(`error while getting beacon data: url=${url} err=${err}`);
    return null;
  }
};

export const jsonFetcherWithErrorHandling = async (url: string) => {
  const res = await fetch(url);
  if (res.ok) {
    return res.json();
  }
  throw res;
};



================================================
FILE: src/Footer.tsx
================================================
import React, { useContext } from "react";
import { RuntimeContext } from "./useRuntime";

const Footer: React.FC = () => {
  const { provider, config } = useContext(RuntimeContext);

  return (
    <>
      <div
        className={`w-full border-t border-t-gray-100 px-2 py-1 text-xs ${
          provider._network.chainId === 1n
            ? "bg-link-blue dark:bg-link-blue-light text-gray-200 dark:text-gray-800"
            : "bg-zq-lightblue text-white font-bold"
        } flex justify-between items-center`}
      >
        <div className="flex-grow text-center">
          {provider ? (
            <>Using Zilliqa node at {config?.erigonURL}</>
          ) : (
            <>Waiting for the provider...</>
          )}
        </div>
        <div className="flex-shrink-0 ml-2">zq otterscan {config?.version}</div>
      </div>
    </>
  );
};

export default React.memo(Footer);



================================================
FILE: src/Header.tsx
================================================
import { faQrcode, faQuestionCircle } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { FC, lazy, memo, useContext, useState } from "react";
import { Link } from "react-router-dom";
import NetworkMenu from "./NetworkMenu";
import PriceBox from "./PriceBox";
import SourcifyMenu from "./SourcifyMenu";
import InlineCode from "./components/InlineCode";
import { useGenericSearch } from "./search/search";
import { RuntimeContext } from "./useRuntime";
// @ts-expect-error
import Otter from "./otter.png?w=128&h=128&webp";

const CameraScanner = lazy(() => import("./search/CameraScanner"));
type HeaderProps = { sourcifyPresent: boolean };

// Should really move out to utils
const Header: FC<HeaderProps> = ({ sourcifyPresent }) => {
  const { config, provider } = useContext(RuntimeContext);
  const [searchRef, handleChange, handleSubmit] = useGenericSearch();
  const [isScanning, setScanning] = useState<boolean>(false);
  const [isHelpOpen, setHelpOpen] = useState<boolean>(false);

  return (
    <>
      {isScanning && <CameraScanner turnOffScan={() => setScanning(false)} />}
      <div className="flex flex-col sm:flex-row items-baseline space-y-1 sm:space-y-0 justify-between px-3 lg:px-9 py-2">
        <div className="flex flex-row justify-between sm:self-center items-center w-full sm:w-auto shrink-0 mr-2">
          <Link className="self-center" to="/">
            <div className="flex items-center space-x-2 font-title text-2xl font-bold text-link-blue">
              <img
                className="rounded-full"
                src={Otter}
                width={32}
                height={32}
                alt="An otter scanning"
                title="An otter scanning"
              />
              <span>
                {config.branding?.siteName || "Otterscan"}
                {config.experimental && <span className="text-red-400">2</span>}
              </span>
            </div>
          </Link>
        </div>
        {config.displayConnectionMenu ? (
          <div className="pt-2 flex items-center justify-center">
            <NetworkMenu />
          </div>
        ) : (
          <div />
        )}
        <div className="flex items-baseline gap-x-3">
          {(provider._network.chainId === 1n ||
            config.priceOracleInfo?.nativeTokenPrice?.ethUSDOracleAddress) && (
            <div className="hidden lg:inline">
              <PriceBox />
            </div>
          )}
          <form
            className="flex"
            onSubmit={handleSubmit}
            autoComplete="off"
            spellCheck={false}
          >
            <input
              className="w-full rounded-l border-b border-l border-t px-2 py-1 text-sm focus:outline-none"
              type="text"
              size={80}
              placeholder={`Type "/" to search by address / txn hash / #ds block number${
                provider._network.getPlugin(
                  "org.ethers.plugins.network.Ens",
                ) !== null
                  ? " / ENS name"
                  : ""
              }`}
              onChange={handleChange}
              ref={searchRef}
            />
            <button
              className="border bg-skin-button-fill px-2 py-1 text-sm text-skin-button hover:bg-skin-button-hover-fill focus:outline-none"
              type="button"
              onClick={() => setScanning(true)}
              title="Scan an ETH address using your camera"
            >
              <FontAwesomeIcon icon={faQrcode} />
            </button>
            <button
              className="border bg-skin-button-fill px-2 py-1 text-sm text-skin-button hover:bg-skin-button-hover-fill focus:outline-none"
              type="button"
              onClick={() => setHelpOpen(true)}
              title="Help with searching"
            >
              <FontAwesomeIcon icon={faQuestionCircle} />
            </button>
            <button
              className="rounded-r border-b border-r border-t bg-skin-button-fill px-2 py-1 text-sm text-skin-button hover:bg-skin-button-hover-fill focus:outline-none"
              type="submit"
            >
              Search
            </button>
          </form>
          <div className="hidden sm:inline self-stretch">
            {sourcifyPresent && <SourcifyMenu />}
          </div>
        </div>
      </div>
      {isHelpOpen && (
        <div
          className="fixed inset-0 z-10 overflow-y-auto"
          aria-labelledby="modal-title"
          role="dialog"
          aria-modal="true"
        >
          <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div
              className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"
              aria-hidden="true"
            ></div>

            <span
              className="hidden sm:inline-block sm:align-middle sm:h-screen"
              aria-hidden="true"
            >
              &#8203;
            </span>

            <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
              <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="sm:flex sm:items-start">
                  <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                    <h3
                      className="text-lg leading-6 font-medium text-gray-900"
                      id="modal-title"
                    >
                      Help Information
                    </h3>
                    <div className="mt-2">
                      <span className="text-sm text-gray-500">
                        <p>Search terms are interpreted as..</p>
                        <br />
                        <ul className="list-disc list-inside mb-6">
                          <li>
                            {" "}
                            A bech32 address if it is in the right format.
                          </li>
                          <li>
                            {" "}
                            An address if we can (right length, starts with{" "}
                            <InlineCode>0x</InlineCode> or{" "}
                            <InlineCode>zil1</InlineCode>).
                          </li>
                          <li>
                            {" "}
                            If a 32-character hex string we'll try to search as
                            a transaction id
                          </li>
                          <li>
                            {" "}
                            If a &gt; 40 character hex string, we'll think it's
                            probably an address with leading 0s.
                          </li>
                          <li>
                            {" "}
                            Then we'll attempt an{" "}
                            <InlineCode>BigInt</InlineCode> and try to find a
                            block number
                          </li>
                          <li>
                            {" "}
                            Terms starting with <InlineCode>#</InlineCode> are
                            treated as a DS block number for ZQ1
                          </li>
                          <li>
                            {" "}
                            Terms like{" "}
                            <InlineCode>epoch:&lt;number&gt;</InlineCode> are
                            epochs.
                          </li>
                          <li>
                            {" "}
                            Terms like{" "}
                            <InlineCode>
                              validator:&lt;number&gt;
                            </InlineCode>{" "}
                            are validator searches.
                          </li>
                        </ul>
                        <p>
                          If the search term does not match any of those rules,
                          we interpret it as an ENS name.
                        </p>
                      </span>
                    </div>
                  </div>
                </div>
              </div>
              <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button
                  type="button"
                  className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                  onClick={() => setHelpOpen(false)}
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default memo(Header);



================================================
FILE: src/highlight-init.ts
================================================
import { Light as SyntaxHighlighter } from "react-syntax-highlighter";

// @ts-ignore
import hljs from "highlight.js/lib/core";

// @ts-ignore
import json from "highlight.js/lib/languages/json";
import docco from "react-syntax-highlighter/dist/esm/styles/hljs/docco";

import hljsDefineSolidity from "highlightjs-solidity";
hljsDefineSolidity(hljs);
hljs.registerLanguage("json", json);

export { docco, SyntaxHighlighter };



================================================
FILE: src/Home.tsx
================================================
import { faQrcode } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { FC, lazy, memo, useContext, useState } from "react";
import { NavLink, useSearchParams } from "react-router-dom";
import Header from "./Header";
import Logo from "./Logo";
import Timestamp from "./components/Timestamp";
import ChainInfo from "./execution/ChainInfo";
import RecentBlocks from "./execution/block/RecentBlocks";
import RecentDSBlocks from "./execution/block/RecentDSBlocks";
import { useGenericSearch } from "./search/search";
import { blockURL, slotURL } from "./url";
import { useFinalizedSlotNumber, useSlotTimestamp } from "./useConsensus";
import { useLatestBlockHeader } from "./useLatestBlock";
import { RuntimeContext } from "./useRuntime";
import { usePageTitle } from "./useTitle";
import { commify } from "./utils/utils";

const CameraScanner = lazy(() => import("./search/CameraScanner"));

const Home: FC = () => {
  const { provider, config } = useContext(RuntimeContext);
  const [searchRef, handleChange, handleSubmit] = useGenericSearch();

  const latestBlock = useLatestBlockHeader(provider);
  const finalizedSlotNumber = useFinalizedSlotNumber();
  const slotTime = useSlotTimestamp(finalizedSlotNumber);
  const [isScanning, setScanning] = useState<boolean>(false);

  usePageTitle("Home");

  const [searchParams, setSearchParams] = useSearchParams();
  const isDevMode = searchParams.get("dev") === "1";

  return (
    <>
      <Header sourcifyPresent={true} />
      <div className="mx-1 my-1">
        <ChainInfo />
      </div>
      <div className="grid grid-cols-5 gap-x-1 mx-1">
        {isDevMode ? (
          <span className="col-span-2">
            <RecentDSBlocks />
          </span>
        ) : (
          <div />
        )}
        <span className={isDevMode ? "col-span-3" : "col-span-5"}>
          <RecentBlocks />
        </span>
      </div>

      <div className="flex grow flex-col items-center pb-5">
        {isScanning && <CameraScanner turnOffScan={() => setScanning(false)} />}
        <div className="mb-10 mt-5 flex max-h-64 grow items-end">
          <Logo />
        </div>
        <form
          className="flex min-w-[24rem] w-1/3 flex-col"
          onSubmit={handleSubmit}
          autoComplete="off"
          spellCheck={false}
        >
          <div className="mb-10 flex">
            <input
              className="w-full rounded-l border-b border-l border-t px-2 py-1 focus:outline-none"
              type="text"
              size={50}
              data-test="home-search-input"
              placeholder={`Search by address / txn hash / block number / # DSblock ${
                provider?._network.getPlugin(
                  "org.ethers.plugins.network.Ens",
                ) !== null
                  ? " / ENS name"
                  : ""
              }`}
              onChange={handleChange}
              ref={searchRef}
              autoFocus
            />
            <button
              className="flex items-center justify-center rounded-r border bg-skin-button-fill px-2 py-1 text-base text-skin-button hover:bg-skin-button-hover-fill focus:outline-none"
              type="button"
              onClick={() => setScanning(true)}
              title="Scan an ETH address using your camera"
            >
              <FontAwesomeIcon icon={faQrcode} />
            </button>
          </div>
          <button
            className="mx-auto mb-10 rounded bg-skin-button-fill px-3 py-1 hover:bg-skin-button-hover-fill focus:outline-none"
            type="submit"
          >
            Search
          </button>
        </form>
        {!(config?.branding?.hideAnnouncements ?? false) &&
          config?.experimental && (
            <NavLink
              className="text-md font-bold text-green-600 hover:text-green-800"
              to="contracts/all"
            >
              🧪 EXPERIMENTAL CONTRACT BROWSER 🧪
            </NavLink>
          )}
        {latestBlock && (
          <NavLink
            className="mt-5 flex flex-col items-center space-y-1 text-sm text-gray-500 hover:text-link-blue"
            to={blockURL(latestBlock.number)}
            data-test="home-latest-block-header"
          >
            <div>Latest block: {commify(latestBlock.number)}</div>
            <Timestamp value={latestBlock.timestamp} />
            <div>Zilliqa Otterscan Version: {config?.version}</div>
          </NavLink>
        )}
        {finalizedSlotNumber !== undefined && (
          <NavLink
            className="mt-5 flex flex-col items-center space-y-1 text-sm text-gray-500 hover:text-link-blue"
            to={slotURL(finalizedSlotNumber)}
          >
            <div>Finalized slot: {commify(finalizedSlotNumber)}</div>
            {slotTime && <Timestamp value={slotTime} />}
          </NavLink>
        )}
      </div>
    </>
  );
};

export default memo(Home);



================================================
FILE: src/index.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --color-button-fill: 244, 244, 245; /* gray-100 */
    --color-button-hover-fill: 228, 228, 231; /* gray-200 */
    --color-button-text: 113, 113, 122; /* gray-500 */

    --color-from-border: 254, 226, 226;
    --color-from-text: 220, 38, 38;
    --color-from-fill: 254, 242, 242;
    --color-to-fill: 236, 253, 245;

    --color-table-row-hover: 243, 244, 246;
  }
  .test-theme {
    --color-button-fill: 14, 165, 233; /* sky-500 */
    --color-button-hover-fill: 56, 189, 248; /* sky-400 */
    --color-button-text: 186, 230, 253; /* sky-200 */

    --color-from-border: 251, 146, 60;
    --color-from-text: 249, 115, 22;
    --color-from-fill: 254, 215, 170;
    --color-to-fill: 125, 211, 252;

    --color-table-row-hover: 2, 132, 199;
  }
}

@layer components {
  .dark-mode {
    @apply dark:invert dark:-hue-rotate-180 dark:brightness-90;
  }

  .dark-no-invert {
    @apply dark:invert dark:hue-rotate-180 dark:saturate-[1.25];
  }

  img {
    @apply dark-no-invert;
  }

  video {
    @apply dark-no-invert;
  }
}



================================================
FILE: src/index.tsx
================================================
import "@fontsource/fira-code/index.css";
import "@fontsource/roboto-mono/index.css";
import "@fontsource/roboto/index.css";
import spaceGrotesk from "@fontsource/space-grotesk/files/space-grotesk-latin-400-normal.woff2";
import "@fontsource/space-grotesk/index.css";
import React from "react";
import { createRoot } from "react-dom/client";
import { Helmet, HelmetProvider } from "react-helmet-async";
import App from "./App";
import "./index.css";
import reportWebVitals from "./reportWebVitals";

const container = document.getElementById("root");
const root = createRoot(container!);
root.render(
  <React.StrictMode>
    <HelmetProvider>
      <Helmet>
        <link rel="preload" href={spaceGrotesk} as="font" type="font/woff2" />
        <script>
          {`if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
              document.documentElement.classList.add('dark');
            } else {
              document.documentElement.classList.remove('dark');
            }`}
        </script>
      </Helmet>
      <App />
    </HelmetProvider>
  </React.StrictMode>,
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();



================================================
FILE: src/Logo.tsx
================================================
import { FC, memo, useContext } from "react";
// @ts-expect-error
import Otter from "./otter.png?w=128&h=128&webp";
import { RuntimeContext } from "./useRuntime";

const Logo: FC = () => {
  const { config } = useContext(RuntimeContext);

  return (
    <div className="flex cursor-default items-center justify-center space-x-4 font-title text-6xl font-bold text-link-blue">
      <img
        className="rounded-full"
        src={Otter}
        width={96}
        height={96}
        alt="An otter scanning"
        title="An otter scanning"
      />
      <span data-test="logotext">
        {config.branding?.siteName || "Otterscan"}
        {config.experimental && <span className="text-red-400">2</span>}
      </span>
    </div>
  );
};

export default memo(Logo);



================================================
FILE: src/Main.tsx
================================================
import React, { Suspense, useMemo, useState } from "react";
import { ErrorBoundary } from "react-error-boundary";
import { Outlet } from "react-router-dom";
import Header from "./Header";
import ErrorFallback from "./components/ErrorFallback";
import { SourcifySource } from "./sourcify/useSourcify";
import { AppConfig, AppConfigContext } from "./useAppConfig";

const Main: React.FC = () => {
  const [sourcifySource, setSourcifySource] = useState<SourcifySource>(
    SourcifySource.CENTRAL_SERVER,
  );
  const appConfig = useMemo((): AppConfig => {
    return {
      sourcifySource,
      setSourcifySource,
    };
  }, [sourcifySource, setSourcifySource]);

  return (
    <AppConfigContext.Provider value={appConfig}>
      <Header sourcifyPresent={true} />
      <ErrorBoundary FallbackComponent={ErrorFallback}>
        <Suspense fallback={<div className="w-screen h-screen"></div>}>
          <Outlet />
        </Suspense>
      </ErrorBoundary>
    </AppConfigContext.Provider>
  );
};

export default Main;



================================================
FILE: src/NetworkMenu.tsx
================================================
import React, { useContext } from "react";
import NetworkMenuWithConfig from "./NetworkMenuWithConfig.tsx";
import { RuntimeContext } from "./useRuntime";

const NetworkMenu: React.FC = () => {
  let { config } = useContext(RuntimeContext);
  return <NetworkMenuWithConfig config={config} />;
};

export default React.memo(NetworkMenu);



================================================
FILE: src/NetworkMenuWithConfig.tsx
================================================
import { Menu, MenuButton, MenuItem, MenuItems } from "@headlessui/react";
import React, { FC, PropsWithChildren, useState } from "react";
import InlineCode from "./components/InlineCode";
import {
  OtterscanConfig,
  chooseConnection,
  deleteParametersFromLocation,
  forgetLocalStorage,
  newConnection,
} from "./useConfig";

type NetworkMenuWithConfigProps = {
  config: OtterscanConfig;
};

// className="flex h-full w-full items-center justify-center space-x-2 rounded border px-2 py-1 text-sm">
const NetworkMenuWithConfig: FC<NetworkMenuWithConfigProps> = ({ config }) => {
  const [goToOpen, setGoToOpen] = useState<boolean>(false);
  const [connectUrl, setConnectUrl] = useState<string>("");
  const [connectName, setConnectName] = useState<string>("");
  let connections = config.connections;
  if (connections === undefined) {
    return (
      <Menu>
        <div className="relative self-stretch h-full">
          <MenuButton className="flex items-center justify-center space-x-2 rounded border px-2 py-1 text-sm">
            No Networks
          </MenuButton>
          <MenuItems> </MenuItems>
        </div>
      </Menu>
    );
  }

  async function newNetwork(name: string, url: string) {
    let result = await newConnection(config, connectName, connectUrl);
    goToNetwork(name);
  }

  async function goToNetwork(name: string) {
    console.log("Switch to network " + name);
    const result = await chooseConnection(config, name);
    if (result) {
      console.log("Connection changed. Reloading .. ");
      await deleteParametersFromLocation();
      //window.location.reload();
    }
  }

  async function forgetBrowserSettings() {
    console.log("Forget browser settings");
    await forgetLocalStorage();
    window.location.reload();
  }

  var legend =
    connections.find((elem) => elem?.url == config?.erigonURL)?.menuName ??
    "Networks";

  const connectionItems = connections.map((conn) => (
    <div key={conn?.menuName}>
      <NetworkMenuItem
        onClick={() => goToNetwork(conn?.menuName)}
        checked={conn?.url === config.erigonURL}
        name={conn?.menuName}
        url={conn?.url ?? "(none)"}
      ></NetworkMenuItem>
    </div>
  ));
  return (
    <>
      <Menu>
        <div className="relative self-stretch h-full">
          <MenuButton className="flex items-center justify-center space-x-2 rounded border px-2 py-1 text-sm">
            {legend}
          </MenuButton>
          <MenuItems className="absolute left-0 mt-1 flex min-w-max flex-col rounded-b border bg-white p-1 text-sm">
            {connectionItems}
            <NetworkSetItem onClick={() => setGoToOpen(true)} />
            <RemoveConfigItem onClick={() => forgetBrowserSettings()} />
          </MenuItems>
        </div>
      </Menu>
      {goToOpen && (
        <div
          className="fixed inset-0 z-10 overflow-y-auto"
          aria-labelledby="modal-title"
          role="dialog"
          aria-modal="true"
        >
          <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div
              className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"
              aria-hidden="true"
            ></div>

            <span
              className="hidden sm:inline-block sm:align-middle sm:h-screen"
              aria-hidden="true"
            >
              &#8203;
            </span>

            <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:w-full sm:align-middle sm:max-w-lg">
              <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="sm:items-start">
                  <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                    <h3
                      className="text-lg leading-6 font-medium text-gray-900"
                      id="modal-title"
                    >
                      Connect to a network
                    </h3>
                    <div className="w-full mt-2 w-full">
                      <div className="text-sm">
                        {" "}
                        You can also configure these by giving the{" "}
                        <InlineCode>network</InlineCode> URL parameter to
                        indicate a URL and (optionally){" "}
                        <InlineCode>name</InlineCode> for the name
                      </div>
                      <div className="text-sm text-gray-500 w-full m-4">
                        Name:{" "}
                        <input
                          className="border ml-4 border-gray-400"
                          id="name"
                          onChange={(e) => setConnectName(e.target.value)}
                        ></input>
                      </div>
                      <div className="text-sm w-full m-4 min-w-[600px]">
                        URL:{" "}
                        <input
                          id="url"
                          className="min-w-[40ch] border ml-4 border-gray-400"
                          onChange={(e) => setConnectUrl(e.target.value)}
                        ></input>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button
                  type="button"
                  className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                  onClick={() => {
                    setGoToOpen(false);
                  }}
                >
                  Close
                </button>
                <button
                  type="button"
                  className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                  onClick={() => {
                    if (!newNetwork(connectName, connectUrl)) {
                      alert("Connection not found?!");
                    }
                    setGoToOpen(false);
                  }}
                >
                  Connect
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

type RemoveConfigItemProps = {
  onClick: (event?: any) => void;
};

export const RemoveConfigItem: React.FC<RemoveConfigItemProps> = ({
  onClick,
}) => {
  return (
    <MenuItem>
      {({ focus }) => (
        <div
          className={`px-2 py-1 text-left text-sm ${
            focus ? "border-zq-lightblue text-gray-500" : "text-gray-400"
          } transition-colors transition-transform duration-75`}
        >
          <button name="Forget" onClick={onClick}>
            Forget Browser Settings
          </button>
        </div>
      )}
    </MenuItem>
  );
};

type NetworkSetItemProps = {
  onClick: (event?: any) => void;
};

export const NetworkSetItem: React.FC<NetworkSetItemProps> = ({ onClick }) => {
  return (
    <MenuItem>
      {({ focus }) => (
        <div
          className={`px-2 py-1 text-left text-sm ${
            focus ? "border-zq-lightblue text-gray-500" : "text-gray-400"
          } transition-colors transition-transform duration-75`}
        >
          <button name="Connect" onClick={onClick}>
            Connect
          </button>
        </div>
      )}
    </MenuItem>
  );
};

type NetworkMenuItemProps = {
  checked?: boolean;
  name: string;
  url: string;
  onClick: (event?: any) => void;
};

export const NetworkMenuItem: React.FC<
  PropsWithChildren<NetworkMenuItemProps>
> = ({ checked, name, url, onClick }) => (
  <MenuItem>
    {({ focus }) => (
      <button
        className={`px-2 py-1 text-left text-sm ${
          focus ? "border-zq-lightblue text-gray-500" : "text-gray-400"
        } transition-colors transition-transform duration-75 ${
          checked ? "text-gray-900" : ""
        }`}
        onClick={onClick}
      >
        {name} / {url}
      </button>
    )}
  </MenuItem>
);

export default React.memo(NetworkMenuWithConfig);



================================================
FILE: src/PageNotFound.tsx
================================================
import React from "react";
import { NavLink } from "react-router-dom";
import StandardFrame from "./components/StandardFrame";

const PageNotFound: React.FC = () => (
  <StandardFrame>
    <div className="m-auto flex h-full flex-col items-center justify-center space-y-10 border">
      <span className="text-4xl">Page not found!</span>
      <NavLink className="text-link-blue hover:text-link-blue-hover" to="/">
        Click here to go to home
      </NavLink>
    </div>
  </StandardFrame>
);

export default PageNotFound;



================================================
FILE: src/params.ts
================================================
export const MIN_API_LEVEL = 8;

export const RECENT_SIZE = 5;
export const PAGE_SIZE = 25;



================================================
FILE: src/PriceBox.tsx
================================================
import { faGasPump } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { FixedNumber, JsonRpcApiProvider } from "ethers";
import React, { useContext, useEffect, useMemo, useState } from "react";
import { formatValue } from "./components/formatter";
import { useChainInfo } from "./useChainInfo";
import { useLatestBlockHeader } from "./useLatestBlock";
import {
  formatFiatValue,
  useETHUSDRawOracle,
  useFastGasRawOracle,
} from "./usePriceOracle";
import { RuntimeContext } from "./useRuntime";

// TODO: encapsulate this magic number
const ETH_FEED_DEFAULT_DECIMALS = 8n;

async function blockNearestToDate(
  provider: JsonRpcApiProvider,
  date: Date,
  maxBlockNumber?: number,
): Promise<number | null> {
  let low = 0;
  let high = maxBlockNumber ?? (await provider.getBlockNumber());

  while (low < high) {
    const mid = Math.floor((low + high) / 2);
    const block = await provider.getBlock(mid);

    if (!block || !block.timestamp) {
      return null;
    }

    const blockDate = new Date(block.timestamp * 1000);
    if (blockDate < date) {
      low = mid + 1;
    } else {
      high = mid;
    }
  }
  // We'll use the earlier block number
  return high;
}

const PriceBox: React.FC = () => {
  const { config, provider } = useContext(RuntimeContext);
  const {
    nativeCurrency: { symbol },
  } = useChainInfo();
  const latestBlock = useLatestBlockHeader(provider);

  const maybeOutdated: boolean =
    latestBlock !== undefined &&
    Date.now() / 1000 - latestBlock.timestamp > 3600;

  const latestPriceData = useETHUSDRawOracle(provider, "latest");

  const [prevDayBlock, setPrevDayBlock] = useState<number | null>(null);
  useEffect(() => {
    if (latestBlock === undefined) {
      return;
    }
    (async function () {
      const yesterday = new Date(latestBlock.timestamp * 1000);
      yesterday.setHours(yesterday.getHours() - 24);
      const prevDayBlockNumber = await blockNearestToDate(
        provider,
        yesterday,
        latestBlock?.number,
      );
      setPrevDayBlock(prevDayBlockNumber);
    })();
  }, [provider, latestBlock !== undefined]);
  const prevDayPriceData = useETHUSDRawOracle(
    provider,
    prevDayBlock ?? undefined,
  );
  const [latestPrice, latestPriceTimestamp, oneDayPriceChange] = useMemo(() => {
    if (!latestPriceData) {
      return [undefined, undefined, undefined];
    }

    const priceDecimals =
      config.priceOracleInfo?.nativeTokenPrice?.ethUSDOracleDecimals ??
      ETH_FEED_DEFAULT_DECIMALS;
    const currentPrice = FixedNumber.fromValue(
      latestPriceData.answer,
      priceDecimals,
    );
    const formattedPrice = formatFiatValue(currentPrice, 2);
    let oneDayPriceChange = undefined;
    if (prevDayPriceData) {
      const prevDayPrice = FixedNumber.fromValue(
        prevDayPriceData.answer,
        priceDecimals,
      );
      oneDayPriceChange = (
        ((currentPrice.toUnsafeFloat() - prevDayPrice.toUnsafeFloat()) /
          prevDayPrice.toUnsafeFloat()) *
        100
      ).toFixed(2);
      if (currentPrice.gte(prevDayPrice)) {
        oneDayPriceChange = "+" + oneDayPriceChange;
      }
    }

    const timestamp = new Date(Number(latestPriceData.updatedAt) * 1000);
    return [formattedPrice, timestamp, oneDayPriceChange];
  }, [latestPriceData, prevDayPriceData, prevDayBlock]);

  const latestGasData = useFastGasRawOracle(provider, "latest");
  const [latestGasPrice, latestGasPriceTimestamp] = useMemo(() => {
    if (!latestGasData) {
      return [undefined, undefined];
    }

    const formattedGas = formatValue(latestGasData.answer, 9);
    const timestamp = new Date(Number(latestGasData.updatedAt) * 1000);
    return [formattedGas, timestamp];
  }, [latestGasData]);

  return (
    <>
      {latestPriceData && (
        <div
          className={`flex space-x-2 rounded-lg px-2 py-1 ${
            maybeOutdated ? "bg-zg-lightblue" : "bg-gray-100"
          } font-sans text-xs text-gray-800`}
        >
          <span
            title={`${symbol}/USD last updated at: ${latestPriceTimestamp?.toString()}`}
          >
            {symbol}: $<span className="font-balance">{latestPrice}</span>
            {oneDayPriceChange ? (
              <span
                className={`ml-0.5 ${oneDayPriceChange.startsWith("+") ? "text-green-500" : "text-red-500"}`}
              >
                {" "}
                ({oneDayPriceChange}%)
              </span>
            ) : null}
          </span>
          {latestGasData && (
            <>
              <span>|</span>
              <span
                className="text-gray-400"
                title={`Fast gas price last updated at: ${latestGasPriceTimestamp?.toString()}`}
              >
                <FontAwesomeIcon icon={faGasPump} size="1x" />
                <span className="ml-1">{latestGasPrice} Gwei</span>
              </span>
            </>
          )}
        </div>
      )}
    </>
  );
};

export default React.memo(PriceBox);



================================================
FILE: src/ProbeError.ts
================================================
import { ConnectionStatus } from "./types";

export class ProbeError extends Error {
  status: ConnectionStatus;
  nodeURL: string;

  constructor(status: ConnectionStatus, nodeURL: string) {
    super("Error while probing ETH node");
    this.status = status;
    this.nodeURL = nodeURL;

    Object.setPrototypeOf(this, ProbeError.prototype);
  }
}



================================================
FILE: src/ProbeErrorHandler.tsx
================================================
import { FC } from "react";
import { useAsyncError } from "react-router-dom";
import ConnectionErrorPanel from "./ConnectionErrorPanel";
import { ProbeError } from "./ProbeError";
import { OtterscanConfig } from "./useConfig";

type ProbeErrorHandlerProps = {
  config: OtterscanConfig;
};

const ProbeErrorHandler: FC<ProbeErrorHandlerProps> = ({
  config,
}: ProbeErrorHandlerProps) => {
  const err = useAsyncError();
  if (!(err instanceof ProbeError)) {
    throw err;
  }
  return (
    <ConnectionErrorPanel
      connStatus={err.status}
      nodeURL={err.nodeURL}
      config={config}
    />
  );
};

export default ProbeErrorHandler;



================================================
FILE: src/queryClient.ts
================================================
import { QueryClient } from "@tanstack/react-query";

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 15000,
    },
  },
});



================================================
FILE: src/react-app-env.d.ts
================================================
/// <reference types="react-scripts" />
declare module "use-keyboard-shortcut";
declare module "highlightjs-solidity";
declare module "*.woff";
declare module "*.woff2";



================================================
FILE: src/reportWebVitals.ts
================================================
import { ReportHandler } from "web-vitals";

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import("web-vitals").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;



================================================
FILE: src/Search.tsx
================================================
import { LoaderFunctionArgs, redirect } from "react-router-dom";
import invariant from "tiny-invariant";
import { parseSearch } from "./search/search";

export const loader = ({ request }: LoaderFunctionArgs) => {
  const url = new URL(request.url);
  const q = url.searchParams.get("q");
  invariant(q !== null);

  const redir = parseSearch(q);
  if (redir === undefined) {
    // This probably means we didn't handle some search criteria and
    // should actually not happen
    throw new Response("Not Found", { status: 404 });
  }
  return redirect(redir);
};



================================================
FILE: src/setupTests.ts
================================================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import "@testing-library/jest-dom";



================================================
FILE: src/SourcifyMenu.tsx
================================================
import { faBars } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { Menu, MenuButton, MenuItem, MenuItems } from "@headlessui/react";
import React, { PropsWithChildren } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import ThemeToggler from "./components/ThemeToggler";
import { SourcifySource } from "./sourcify/useSourcify";
import { useAppConfigContext } from "./useAppConfig";

const SourcifyMenu: React.FC = () => {
  const { sourcifySource, setSourcifySource } = useAppConfigContext() ?? {
    sourcifySource: null,
    setSourcifySource: (s: SourcifySource) => {},
  };
  const navigate = useNavigate();
  const location = useLocation();

  return (
    <Menu>
      <div className="relative self-stretch h-full">
        <MenuButton className="flex h-full w-full items-center justify-center space-x-2 rounded border px-2 py-1 text-sm">
          <FontAwesomeIcon icon={faBars} size="1x" />
        </MenuButton>
        <MenuItems className="absolute right-0 mt-1 flex min-w-max flex-col rounded-b border bg-white p-1 text-sm">
          {sourcifySource !== null && (
            <>
              <SourcifyMenuTitle>Sourcify Datasource</SourcifyMenuTitle>
              <SourcifyMenuItem
                checked={sourcifySource === SourcifySource.IPFS_IPNS}
                onClick={() => setSourcifySource(SourcifySource.IPFS_IPNS)}
              >
                Resolve IPNS
              </SourcifyMenuItem>
              <SourcifyMenuItem
                checked={sourcifySource === SourcifySource.CENTRAL_SERVER}
                onClick={() => setSourcifySource(SourcifySource.CENTRAL_SERVER)}
              >
                Sourcify Servers
              </SourcifyMenuItem>
              <div className="my-1 border-b border-gray-300" />
            </>
          )}
          <ThemeToggler />
          <div className="my-1 border-b border-gray-300" />
          <SourcifyMenuItem
            checked={location.pathname !== "/broadcastTx"}
            onClick={() => {
              navigate("/broadcastTx");
            }}
          >
            Broadcast Transaction
          </SourcifyMenuItem>
        </MenuItems>
      </div>
    </Menu>
  );
};

type SourcifyMenuItemProps = {
  checked?: boolean;
  onClick: (event?: any) => void;
};

export const SourcifyMenuItem: React.FC<
  PropsWithChildren<SourcifyMenuItemProps>
> = ({ checked = false, onClick, children }) => (
  <MenuItem>
    {({ focus }) => (
      <button
        className={`px-2 py-1 text-left text-sm ${
          focus ? "border-zq-lightblue text-gray-500" : "text-gray-400"
        } transition-colors transition-transform duration-75 ${
          checked ? "text-gray-900" : ""
        }`}
        onClick={onClick}
      >
        {children}
      </button>
    )}
  </MenuItem>
);

export const SourcifyMenuTitle: React.FC<PropsWithChildren> = ({
  children,
}) => (
  <div className="border-b border-gray-300 px-2 py-1 text-xs select-none">
    {children}
  </div>
);

export default React.memo(SourcifyMenu);



================================================
FILE: src/types.ts
================================================
import { Log } from "ethers";

export enum ConnectionStatus {
  CONNECTING,
  NOT_ETH_NODE,
  NOT_ERIGON,
  NOT_OTTERSCAN_PATCHED,
  CONNECTED,
}

export type ProcessedTransaction = {
  blockNumber: number;
  timestamp: number;
  miner?: string;
  idx: number;
  hash: string;
  from?: string;
  to: string | null;
  createdContractAddress?: string;
  value: bigint;
  type: number;
  fee: bigint;
  gasPrice: bigint;
  data: string;
  status: number;
};

export type TransactionChunk = {
  txs: ProcessedTransaction[];
  firstPage: boolean;
  lastPage: boolean;
};

export type TransactionDescriptionData = {
  value: bigint;
  data: string;
};

export type TransactionData = {
  transactionHash: string;
  from: string;
  to?: string;
  value: bigint;
  type: number;
  maxFeePerGas?: bigint | undefined;
  maxPriorityFeePerGas?: bigint | undefined;
  gasPrice?: bigint;
  gasLimit: bigint;
  nonce: bigint;
  data: string;
  maxFeePerBlobGas?: bigint | undefined;
  blobVersionedHashes?: string[] | undefined;
  confirmedData?: ConfirmedTransactionData | undefined;
};

export type ConfirmedTransactionData = {
  status: boolean;
  blockNumber: number;
  transactionIndex: number;
  confirmations: number;
  createdContractAddress?: string;
  fee: bigint;
  gasUsed: bigint;
  logs: Log[];
  blobGasPrice?: bigint;
  blobGasUsed?: bigint;

  // Optimism-specific
  l1GasUsed?: bigint;
  l1GasPrice?: bigint;
  l1FeeScalar?: string;
  l1Fee?: bigint;
};

// The VOID...
export const ZERO_ADDRESS = "0x0000000000000000000000000000000000000000";

// TODO: replace all occurrences of plain string
export type ChecksummedAddress = string;

export enum AddressContext {
  FROM,
  TO,
}

export type From = {
  current: string;
  depth: number;
};

export enum OperationType {
  TRANSFER = 0,
  SELF_DESTRUCT = 1,
  CREATE = 2,
  CREATE2 = 3,
  EOFCREATE = 4,
}

export type InternalOperation = {
  type: OperationType;
  from: string;
  to: string;
  value: bigint;
};

export type TokenTransfer = {
  token: string;
  from: string;
  to: string;
  value: bigint;
};

export type TokenMeta = {
  name: string;
  symbol: string;
  decimals: number;
};

export type TokenMetas = Record<string, TokenMeta | null | undefined>;

export type ZRC2Transfer = {
  token: string;
  from: string;
  to: string;
  value: bigint;
  contractAddress: string;
  transitionName: string;
};

export type ZRC2Meta = {
  name: string;
  symbol: string;
  decimals: number;
  contractAddress: string;
  version?: string;
};



================================================
FILE: src/url.ts
================================================
import { BlockTag } from "ethers";
import { ChecksummedAddress } from "./types";

export const fourBytesURL = (
  assetsURLPrefix: string,
  fourBytes: string,
): string => `${assetsURLPrefix}/signatures/${fourBytes}`;

export const topic0URL = (assetsURLPrefix: string, topic0: string): string =>
  `${assetsURLPrefix}/topic0/${topic0}`;

export const tokenLogoURL = (
  assetsURLPrefix: string,
  chainId: bigint,
  address: string,
): string => `${assetsURLPrefix}/assets/${chainId}/${address}/logo.png`;

export const chainInfoURL = (
  assetsURLPrefix: string,
  chainId: bigint,
): string => `${assetsURLPrefix}/chains/eip155-${chainId}.json`;

export const epochURL = (epochNumber: number) => `/epoch/${epochNumber}`;

export const slotURL = (slot: number | string) =>
  typeof slot === "number" ? `/slot/${slot}` : `/slotByBlockRoot/${slot}`;

export const slotAttestationsURL = (slotNumber: number) =>
  `/slot/${slotNumber}/attestations`;

export const validatorURL = (validatorIndex: number) =>
  `/validator/${validatorIndex}`;

export const dsBlockURL = (blockNum: BlockTag) => `/dsblock/${blockNum}`;

export const blockURL = (blockNum: BlockTag) => `/block/${blockNum}`;

export const blockTxsURL = (blockNum: BlockTag) => `/block/${blockNum}/txs`;

export const blockTxURL = (blockNum: BlockTag, txIndex: number) =>
  `/block/${blockNum}/tx/${txIndex}`;

export const transactionURL = (txHash: string) => `/tx/${txHash}`;

export const addressByNonceURL = (address: ChecksummedAddress, nonce: bigint) =>
  `/address/${address}?nonce=${nonce}`;

export const addressURL = (address: ChecksummedAddress) =>
  `/address/${address}`;

export const openInRemixURL = (checksummedAddress: string, networkId: bigint) =>
  `https://remix.ethereum.org/#activate=sourcify&call=sourcify//fetchAndSave//${checksummedAddress}//${networkId}`;



================================================
FILE: src/use4Bytes.ts
================================================
import {
  BigNumberish,
  Fragment,
  Interface,
  TransactionDescription,
} from "ethers";
import { useContext, useMemo } from "react";
import { Fetcher } from "swr";
import useSWRImmutable from "swr/immutable";
import { useSourcifyMetadata } from "./sourcify/useSourcify";
import { fourBytesURL } from "./url";
import { RuntimeContext } from "./useRuntime";

export type FourBytesEntry = {
  name: string;
  signature: string | undefined;
  fromVerifiedContract: boolean;
};

/**
 * Given a hex input data; extract the method selector
 *
 * @param rawInput Raw tx input including the "0x"
 * @returns the first 4 bytes, including the "0x" or null if the input
 * contains an invalid selector, e.g., txs with 0x00 data; simple transfers (0x)
 * return null as well as it is not a method selector
 */
export const extract4Bytes = (rawInput: string): string | null => {
  if (rawInput.length < 10) {
    return null;
  }
  return rawInput.slice(0, 10);
};

type FourBytesKey = [id: "4bytes", fourBytes: string];
type FourBytesFetcher = Fetcher<
  FourBytesEntry | null | undefined,
  FourBytesKey
>;

const fourBytesFetcher =
  (assetsURLPrefix: string): FourBytesFetcher =>
  async ([_, key]) => {
    if (key === null || key === "0x") {
      return undefined;
    }

    // Handle simple transfers with invalid selector like tx:
    // 0x8bcbdcc1589b5c34c1e55909c8269a411f0267a4fed59a73dd4348cc71addbb9,
    // which contains 0x00 as data
    if (key.length !== 10) {
      return undefined;
    }

    const fourBytes = key.slice(2);
    const signatureURL = fourBytesURL(assetsURLPrefix, fourBytes);

    try {
      const res = await fetch(signatureURL);
      if (!res.ok) {
        console.warn(`Signature does not exist in 4bytes DB: ${fourBytes}`);
        return null;
      }

      // Get only the first occurrence, for now ignore alternative param names
      const sigs = await res.text();
      const sig = sigs.split(";")[0];
      const cut = sig.indexOf("(");
      const method = sig.slice(0, cut);

      const entry: FourBytesEntry = {
        name: method,
        signature: sig,
        fromVerifiedContract: false,
      };
      return entry;
    } catch (err) {
      // Network error or something wrong with URL config;
      // silence and don't try it again
      return null;
    }
  };

/**
 * Extract 4bytes DB info
 *
 * @param rawFourBytes a hex string containing the 4bytes signature in the "0xXXXXXXXX" format.
 * @param address (optional) the address to which this four-byte selector is sent; if a
 * Sourcify match exists at this address, the contract ABI will be used to decode the selector.
 */
export const use4Bytes = (
  rawFourBytes: string | null,
  address?: string,
): FourBytesEntry | null | undefined => {
  if (rawFourBytes !== null && !rawFourBytes.startsWith("0x")) {
    throw new Error(
      `rawFourBytes must contain a bytes hex string starting with 0x; received value: "${rawFourBytes}"`,
    );
  }

  const { config, provider } = useContext(RuntimeContext);
  const sourcifyMatch = useSourcifyMetadata(address, provider._network.chainId);
  let sourcifyFourBytes: FourBytesEntry | null = null;
  if (sourcifyMatch && rawFourBytes) {
    try {
      const int = new Interface(sourcifyMatch.metadata.output.abi);
      if (int.hasFunction(rawFourBytes)) {
        const func = int.getFunction(rawFourBytes);
        if (func) {
          sourcifyFourBytes = {
            name: func.name,
            signature: func.format("sighash"),
            fromVerifiedContract: true,
          };
        }
      }
    } catch (e: any) {}
  }

  const assetsURLPrefix = config.assetsURLPrefix;
  const fourBytesKey = assetsURLPrefix !== undefined ? rawFourBytes : null;

  const fetcher = fourBytesFetcher(assetsURLPrefix!);
  const { data, error } = useSWRImmutable(["4bytes", fourBytesKey], fetcher);
  return sourcifyFourBytes ? sourcifyFourBytes : error ? undefined : data;
};

export const useMethodSelector = (
  data: string,
  to?: string,
): [boolean, string, string, boolean] => {
  const rawFourBytes = extract4Bytes(data);
  let fourBytesEntry = use4Bytes(rawFourBytes, to);
  const isSimpleTransfer = data === "0x";
  const methodName = isSimpleTransfer
    ? "transfer"
    : (fourBytesEntry?.name ?? rawFourBytes ?? "-");
  const methodTitle = isSimpleTransfer
    ? "ETH Transfer"
    : methodName === rawFourBytes
      ? methodName
      : `${methodName} [${rawFourBytes}]`;

  const fromVerifiedContract = fourBytesEntry
    ? fourBytesEntry.fromVerifiedContract
    : false;
  return [isSimpleTransfer, methodName, methodTitle, fromVerifiedContract];
};

export const useTransactionDescription = (
  fourBytesEntry: FourBytesEntry | null | undefined,
  data: string | undefined,
  value: BigNumberish | undefined,
): TransactionDescription | null | undefined => {
  const txDesc = useMemo(() => {
    if (!fourBytesEntry) {
      return fourBytesEntry;
    }
    if (
      !fourBytesEntry.signature ||
      data === undefined ||
      value === undefined
    ) {
      return undefined;
    }

    const sig = fourBytesEntry?.signature;
    const functionFragment = Fragment.from(`function ${sig}`);
    const intf = new Interface([functionFragment]);
    try {
      return intf.parseTransaction({ data, value });
    } catch {
      return undefined;
    }
  }, [fourBytesEntry, data, value]);

  return txDesc;
};



================================================
FILE: src/useAppConfig.ts
================================================
import React, { useContext } from "react";
import { SourcifySource } from "./sourcify/useSourcify";

export type AppConfig = {
  sourcifySource: SourcifySource;
  setSourcifySource: (newSourcifySource: SourcifySource) => void;
};

export const AppConfigContext = React.createContext<AppConfig>(undefined!);

export const useAppConfigContext = () => {
  return useContext(AppConfigContext);
};



================================================
FILE: src/useBlockTagContext.tsx
================================================
import { createContext, useContext } from "react";

/**
 * This context means child components have a temporal context expressed in
 * terms of BlockTag.
 *
 * One obvious example is: child components want to show an UI indicator if
 * the address is an EOA or contract. But if this address is currently a
 * contract and it is an UI element of an existing transaction, it may be that
 * at the time (block) the transaction happened it was still an EOA (create2),
 * so it should be displayed as an EOA.
 */
export const BlockNumberContext = createContext<number | "latest" | undefined>(
  undefined,
);

export const useBlockNumberContext = () => useContext(BlockNumberContext);



================================================
FILE: src/useChainInfo.ts
================================================
import { createContext, useContext } from "react";
import { chainInfoURL } from "./url";
import { ChainInfo, defaultChainInfo } from "./useConfig";
import { OtterscanRuntime } from "./useRuntime";

export const populateChainInfo = async (
  rtPromise: Promise<OtterscanRuntime>,
): Promise<OtterscanRuntime> => {
  const runtime = await rtPromise;

  // Hardcoded chainInfo; DON'T fetch it
  const hardcodedChainInfo = runtime.config.chainInfo !== undefined;
  if (hardcodedChainInfo) {
    return rtPromise;
  }

  // TODO: check the assertions
  const assetsURLPrefix = runtime.config.assetsURLPrefix!;
  const network = await runtime.provider.getNetwork();
  const chainId = network.chainId;

  const url = chainInfoURL(assetsURLPrefix, chainId);
  try {
    const res = await fetch(url);
    if (!res.ok) {
      runtime.config.chainInfo = defaultChainInfo;
      return Promise.resolve(runtime);
    }

    const info: ChainInfo = await res.json();
    runtime.config.chainInfo = info;
    return Promise.resolve(runtime);
  } catch (err) {
    runtime.config.chainInfo = defaultChainInfo;
    return Promise.resolve(runtime);
  }
};

export const ChainInfoContext = createContext<ChainInfo | undefined>(undefined);

export const useChainInfo = (): ChainInfo => {
  const chainInfo = useContext(ChainInfoContext);
  if (chainInfo === undefined) {
    throw new Error("no chain info");
  }
  return chainInfo;
};



================================================
FILE: src/useConfig.ts
================================================
/** Defines a chain you can connect to
 */
export type ChainConnection = {
  /** Chain Info - if not present, we will assume it is null */
  info?: ChainInfo;
  /** Name to put in the menu */
  menuName: string;
  /** URL to connect to */
  url?: string;
  /** Faucet URL */
  faucets?: string[];
  /** Hostname prefixes that default to this connection */
  hostnames?: string[];
};

/**
 * Defines a set of metadata for a certain chain.
 *
 * Users may define where it comes from, but it usually will come
 * from config file or read from chainlist directory.
 */
export type ChainInfo = {
  /**
   * Full name of the chain.
   */
  name: string;

  /**
   * If this is a testnet, list example faucets; used by a certain part of
   * ots UI.
   */
  faucets: string[];

  /**
   * Describe the chain native token, e.g., mainnet is ETH, polygon is MATIC.
   */
  nativeCurrency: {
    /**
     * The full native token name, e.g. "Ether"
     */
    name: string;

    /**
     * The native token symbol, e.g. "ETH"
     */
    symbol: string;

    /**
     * The native token number of decimals, e.g. mainnet == 18.
     */
    decimals: number;
  };
};

/**
 * Defines the sources for price information on the chain. Other than from
 * trusted oracle sources, price information can be manipulated.
 */
export type PriceOracleInfo = {
  /**
   * If set, shows the native token price.
   */
  nativeTokenPrice?: {
    /**
     * A Chainlink AggregatorV3 compatible smart contract address acting
     * as an oracle for the native token's price in USD.
     *
     * Note: You can deploy a contract that is compatible with the AggregatorV3
     * interface but does not actually use Chainlink oracles; for instance,
     * a custom contract that estimates the native token's USD price from an
     * on-chain source could be deployed.
     */
    ethUSDOracleAddress: string;
    /**
     * Number of decimals used by the oracle contract, output by calling
     * `decimals()`.
     */
    ethUSDOracleDecimals: number;
  };

  /**
   * The address of the wrapped native token contract, which should match the
   * WETH variable in Uniswap router contracts. This is used to estimate the
   * price of tokens which have at least one Uniswap pool with the wrapped
   * native token.
   */
  wrappedEthAddress?: string;

  /**
   * If defined, considers UniswapV2 pairs when estimating token prices for
   * tokens which do not have a Chainlink oracle.
   */
  uniswapV2?: {
    factoryAddress: string;
  };

  /**
   * If defined, considers UniswapV3 pairs when estimating token prices for
   * tokens which do not have a Chainlink oracle. 0.01%, 0.05%, 0.3%, and 1%
   * fee tiers are checked.
   */
  uniswapV3?: {
    factoryAddress: string;
  };
};

export const defaultChainInfo: ChainInfo = {
  name: "",
  faucets: [],
  nativeCurrency: {
    name: "Zilliqa",
    symbol: "ZIL",
    decimals: 18,
  },
};

/**
 * This is a 1:1 mapping to public/config.json file which is fetched on
 * page load.
 */
export type OtterscanConfig = {
  /**
   * URL for Erigon JSON-RPC endpoint.
   */
  erigonURL?: string;

  /**
   * (optional) URL for Beacon chain REST API (for merged chains)
   */
  beaconAPI?: string;

  /**
   * URL for static assets (logos, 4bytes, topic0, etc.)
   */
  assetsURLPrefix?: string;

  /**
   * Enable experimental features (possibly still undocumented)
   */
  experimental?: boolean;

  /**
   * Hardcode a chain ID here, avoiding having to probe the ETH provider
   * for it, saving network calls.
   */
  experimentalFixedChainId?: number;

  /**
   * Optional info about the chain; it may be predefined from config.json,
   * but also it can omitted, in which can it should be auto detected from
   * provider network + fetching the chain metadata file (in this case
   * there is an initial network hop + repaint).
   *
   * Hosted instances will probably want to hardcode the chain info during
   * initialization.
   */
  chainInfo?: ChainInfo;

  /**
   * Optional site customization options
   */
  branding?: {
    /**
     * Site name shown in page titles, home, and header.
     */
    siteName?: string;
    /**
     * Additional name shown only in page titles.
     */
    networkTitle?: string;
    /**
     * If set to true, hides new feature announcements on the home page.
     */
    hideAnnouncements?: boolean;
  };

  sourcify?: {
    /**
     * Optional custom Sourcify sources object with the keys "ipfs" and
     * "central_server" whose values are their respective root URLs.
     */
    sources?: { [key: string]: string };

    /**
     * See https://github.com/ethereum/sourcify/tree/staging/services/server#choosing-the-storage-backend
     *
     * "RepositoryV1" for the original backend format whose source filenames
     * are derived from the contract metadata.
     * "RepositoryV2" to use the Sourcify backend format which uses keccak256
     * hashes for source file names since source file names can be arbitrary
     * strings.
     */
    backendFormat?: string;
  };

  /**
   * Optional custom price oracle information for estimating the current price
   * of the native token and all other tokens.
   */
  priceOracleInfo?: PriceOracleInfo;

  /**
   * Optional settings for chains that follow the OP Stack.
   */
  opChainSettings?: {
    /**
     * The root URL of a block explorer for the layer-1 of this chain, without
     * a trailing forward slash, e.g. "https://sepolia.otterscan.io".
     */
    l1ExplorerURL?: string;
  };

  /**
   * Temporary config option, until address labels are complete: Enables setting
   * address labels which are kept in local storage.
   */
  WIP_customAddressLabels?: boolean;

  /** Version number
   */
  version?: string;

  /** Chain connections
   */
  connections?: ChainConnection[];

  /** Should we display the connection menu?
   */
  displayConnectionMenu?: boolean;
};

/**
 * Default location for fetching the config file.
 */
export const DEFAULT_CONFIG_FILE = "/config.json";

/** Stash a connection and go to it */
export const newConnection = async (
  config: OtterscanConfig,
  name: string,
  connection: string,
): Promise<boolean> => {
  var storage = window["localStorage"];
  var storageConfiguration = JSON.parse(
    storage.getItem("otterscanConfig") ?? "{}",
  );
  if (!(storageConfiguration instanceof Object)) {
    storageConfiguration = {};
  }
  console.log("newConnection storage " + storageConfiguration);
  var conn = storageConfiguration["connections"] ?? config.connections;
  conn = conn.filter((val: ChainConnection) => val.menuName !== name);
  conn.push({ menuName: name, url: connection });
  storageConfiguration["connections"] = conn;
  console.log("storing " + JSON.stringify(storageConfiguration));
  storage.setItem("otterscanConfig", JSON.stringify(storageConfiguration));
  return true;
};

/** Stores the connection with the given name in local storage - issuing a page reload will then
 * get us to use it.
 */
export const chooseConnection = async (
  config: OtterscanConfig,
  connection: string,
): Promise<boolean> => {
  var storage = window["localStorage"];
  var storageConfiguration = JSON.parse(
    storage.getItem("otterscanConfig") ?? "{}",
  );
  if (!(storageConfiguration instanceof Object)) {
    storageConfiguration = {};
  }
  console.log("storage " + storageConfiguration);
  let connections =
    storageConfiguration["connections"] ?? config.connections ?? [];
  for (var chain of connections) {
    if (chain.menuName === connection) {
      console.log(`Changing to ${chain.menuName}, URL ${chain.url} .. `);
      storageConfiguration["erigonURL"] = chain.url;
      storageConfiguration["faucets"] = chain.faucets;
      storageConfiguration["info"] = chain.info;
      storage.setItem("otterscanConfig", JSON.stringify(storageConfiguration));
      console.log("stash " + JSON.stringify(storageConfiguration));
      return true;
    }
  }
  return false;
};

export const deleteParametersFromLocation = async (): Promise<boolean> => {
  window.location.search = "";
  return true;
};

export const forgetLocalStorage = async (): Promise<boolean> => {
  window["localStorage"].removeItem("otterscanConfig");
  return true;
};

/**
 * Loads the global configuration according to the following criteria:
 *
 * - if the entire JSON is informed via VITE_CONFIG_JSON env variable, use it
 * - otherwise fetch the JSON from default config URL
 * - if fetching the JSON, allows to override some keys using VITE_ env variables
 */
export const loadOtterscanConfig = async (): Promise<OtterscanConfig> => {
  // vite config override has precedence over everything
  if (import.meta.env.VITE_CONFIG_JSON !== undefined) {
    console.log("Using hardcoded config: ");
    console.log(import.meta.env.VITE_CONFIG_JSON);

    // We trust the contents of VITE_CONFIG_JSON to be a valid
    // Otterscan JSON configuration
    try {
      return JSON.parse(import.meta.env.VITE_CONFIG_JSON);
    } catch (err) {
      throw new Error("Error while reading config file", { cause: err });
    }
  }

  // We fetch the config file from the deployment site, optionally overriding
  // some keys during development time
  const configURL = DEFAULT_CONFIG_FILE;

  try {
    const res = await fetch(configURL);
    const data = await res.json();
    // Override config for local dev
    var config: OtterscanConfig = { ...data };
    console.log(
      `DEV = ${import.meta.env.DEV} ${import.meta.env.VITE_ERIGON_URL}`,
    );
    if (import.meta.env.DEV) {
      config.erigonURL = import.meta.env.VITE_ERIGON_URL ?? config.erigonURL;
      config.beaconAPI =
        import.meta.env.VITE_BEACON_API_URL ?? config.beaconAPI;
      config.assetsURLPrefix =
        import.meta.env.VITE_ASSETS_URL ?? config.assetsURLPrefix;
      config.experimental =
        import.meta.env.VITE_EXPERIMENTAL ?? config.experimental;
      if (import.meta.env.VITE_EXPERIMENTAL_FIXED_CHAIN_ID !== undefined) {
        config.experimentalFixedChainId = parseInt(
          import.meta.env.VITE_EXPERIMENTAL_FIXED_CHAIN_ID,
        );
      }
    }
    console.log(`Erigon = ${config.erigonURL}`);
    if (config.version === undefined) {
      config.version = "(unknown)";
    }
    if (import.meta.env.VITE_OTTERSCAN_VERSION !== undefined) {
      config.version = import.meta.env.VITE_OTTERSCAN_VERSION;
    }
    try {
      import("../autogen/version.ts").then((mod) => {
        config.version = mod.OTTERSCAN_VERSION;
      });
    } catch (e) {
      // The version import doesn't exist - we're probably a development version.
    }
    //console.log(JSON.stringify(config));
    var storageConfiguration: any = {};
    var hostForcesConnection: boolean = false;
    try {
      var storage = window["localStorage"];
      if (storage !== undefined) {
        storageConfiguration = JSON.parse(
          storage.getItem("otterscanConfig") ?? "{}",
        );
      }
    } catch (err) {
      console.log(`Failed to get localStorage config - ${err}`);
    }

    // Default by hostname
    try {
      var host = window.location.host;
      // Ignore locally stored connections when matching hostnames.
      var connections: ChainConnection[] | undefined = config.connections;
      if (connections !== undefined) {
        for (var c of connections) {
          const hosts = c.hostnames;
          if (hosts !== undefined) {
            for (var h of hosts) {
              if (host.startsWith(h)) {
                storageConfiguration["erigonURL"] = c.url;
                hostForcesConnection = true;
              }
            }
          }
        }
      }
    } catch (err) {
      throw new Error(`Error setting URL from hostname: ${err}`);
    }

    // If we've still not got a connection, use the first one.
    try {
      if (config.erigonURL === undefined || config.erigonURL == null) {
        var connections: ChainConnection[] | undefined =
          storageConfiguration["connections"] ?? config.connections;
        if (connections !== undefined) {
          if (!("erigonURL" in storageConfiguration)) {
            console.log("No URL; using first connection " + connections[0].url);
            storageConfiguration["erigonURL"] = connections[0].url;
          }
        }
      }
    } catch (err) {
      throw new Error(`Error setting default connection`);
    }

    // Set up URL parameters.
    if (!hostForcesConnection) {
      try {
        var params = new URLSearchParams(window.location.search);
        // Historical - this is the parameter devex used to use.
        if (params.has("network")) {
          const url = params.get("network");
          storageConfiguration["erigonURL"] = url;
          var connections: ChainConnection[] | undefined =
            storageConfiguration["connections"] ?? config.connections;
          var found = false;
          if (connections) {
            for (var c of connections) {
              if (c.url === url) {
                if (params.has("name")) {
                  let name = params.get("name");
                  connections = connections.map((c: ChainConnection) => {
                    if (c.url == url) {
                      c.menuName = name!;
                    }
                    return c;
                  });
                }
                found = true;
                break;
              }
            }
            if (!found) {
              var name = params.get("name") ?? url;
              if (name && url) {
                connections.push({ menuName: name, url });
              }
            }
          }
          storageConfiguration["connections"] = connections;
        }
      } catch (err) {
        console.log(`Error parsing parameters - ${err}`);
      }
    }

    // Stash
    try {
      var storage = window["localStorage"];
      if (storage !== undefined) {
        storage.setItem(
          "otterscanConfig",
          JSON.stringify(storageConfiguration),
        );
      }
    } catch (err) {
      console.log(`Error storing back to local storage - ${err}`);
    }
    config = { ...config, ...storageConfiguration };
    // We deliberately do not store this, so that we have a fighting chance of
    // being able to pop the menu back up again if a connection host was in the
    // config file and is no longer there.
    config.displayConnectionMenu = !hostForcesConnection;
    console.log(JSON.stringify(config));

    console.info("Loaded app config");
    console.info(config);
    return config;
  } catch (err) {
    throw new Error(`Error while reading config file: ${configURL}`, {
      cause: err,
    });
  }
};



================================================
FILE: src/useConsensus.ts
================================================
import { useContext, useMemo } from "react";
import useSWR from "swr";
import useSWRImmutable from "swr/immutable";
import { jsonFetcher, jsonFetcherWithErrorHandling } from "./fetcher";
import { RuntimeContext } from "./useRuntime";

const DEFAULT_SLOTS_PER_EPOCH = 32;
const DEFAULT_SECONDS_PER_SLOT = 12;
export const EPOCHS_AFTER_HEAD = 1;

export const HEAD_EPOCH_REFRESH_INTERVAL = 60 * 1000;
export const FINALIZED_SLOT_REFRESH_INTERVAL = 60 * 1000;

function toNumberWithDefault(item: any, defaultVal: number): number {
  if (item === undefined || item === null) {
    return defaultVal;
  }
  return Number(item);
}

const useGenesisURL = () => {
  const { config } = useContext(RuntimeContext);
  if (config.beaconAPI === undefined) {
    return null;
  }
  return `${config.beaconAPI}/eth/v1/beacon/genesis`;
};

export const useGenesisTime = (): number | undefined => {
  const url = useGenesisURL();
  const { data, error } = useSWRImmutable(url, jsonFetcher);

  if (error || !data) {
    return undefined;
  }

  if (typeof data !== "object" || data === null) {
    return undefined;
  }
  if (
    !("data" in data) ||
    typeof data.data !== "object" ||
    data.data === null
  ) {
    return undefined;
  }
  if (
    !("genesis_time" in data.data) ||
    typeof data.data.genesis_time !== "string"
  ) {
    return undefined;
  }
  const genesisTime = parseInt(data.data.genesis_time);
  if (isNaN(genesisTime)) {
    return undefined;
  }
  return genesisTime;
};

const useBeaconSpecURL = () => {
  const { config } = useContext(RuntimeContext);
  if (config.beaconAPI === undefined) {
    return null;
  }
  return `${config.beaconAPI}/eth/v1/config/spec`;
};

export const useBeaconSpec = (): Record<string, string> | undefined => {
  const url = useBeaconSpecURL();
  const { data, error } = useSWRImmutable(url, jsonFetcher);
  if (
    error ||
    !data ||
    typeof data !== "object" ||
    !("data" in data) ||
    !data.data ||
    typeof data.data !== "object"
  ) {
    return undefined;
  }
  return data.data as Record<string, string>;
};

export const useSlotToEpoch = <T extends number | undefined>(
  slotNumber: T,
): T => {
  const slotsPerEpochStr = useBeaconSpec()?.SLOTS_PER_EPOCH;
  const slotsPerEpoch: number = slotsPerEpochStr
    ? Number(slotsPerEpochStr)
    : DEFAULT_SLOTS_PER_EPOCH;
  if (slotNumber === undefined) {
    return undefined as T;
  }
  return Math.floor(slotNumber / slotsPerEpoch) as T;
};

const useBeaconHeaderURL = (tag: string) => {
  const { config } = useContext(RuntimeContext);
  if (config.beaconAPI === undefined) {
    return null;
  }
  return `${config.beaconAPI}/eth/v1/beacon/headers/${tag}`;
};

const useBeaconBlockURL = (slot: number | string) => {
  const { config } = useContext(RuntimeContext);
  if (config.beaconAPI === undefined) {
    return null;
  }
  return `${config.beaconAPI}/eth/v2/beacon/blocks/${slot}`;
};

const useBlockRootURL = (slotNumber: number) => {
  const { config } = useContext(RuntimeContext);
  if (config.beaconAPI === undefined) {
    return null;
  }
  return `${config.beaconAPI}/eth/v1/beacon/blocks/${slotNumber}/root`;
};

const useValidatorURL = (validatorIndex: number | string) => {
  const { config } = useContext(RuntimeContext);
  if (config.beaconAPI === undefined) {
    return null;
  }
  return `${config.beaconAPI}/eth/v1/beacon/states/head/validators/${validatorIndex}`;
};

const useEpochProposersURL = (epochNumber: number) => {
  const { config } = useContext(RuntimeContext);
  if (config.beaconAPI === undefined) {
    return null;
  }
  return `${config.beaconAPI}/eth/v1/validator/duties/proposer/${epochNumber}`;
};

const useCommitteeURL = (
  epochNumber: number,
  slotNumber: number,
  committeeIndex: number,
) => {
  const { config } = useContext(RuntimeContext);
  if (config.beaconAPI === undefined) {
    return null;
  }
  return `${config.beaconAPI}/eth/v1/beacon/states/head/committees?epoch=${epochNumber}&slot=${slotNumber}&index=${committeeIndex}`;
};

export const useSlot = (slot: number | string) => {
  const url = useBeaconBlockURL(slot);
  const { data, error, isLoading, isValidating } = useSWR(
    url,
    jsonFetcherWithErrorHandling,
  );

  return {
    slot: data,
    error,
    isLoading,
    isValidating,
  };
};

export const useSlotHeader = (slot: number | string | null) => {
  const url = useBeaconHeaderURL(slot === null ? "" : slot.toString());
  const { data, error, isLoading, isValidating } = useSWRImmutable(
    slot === null ? null : url,
    jsonFetcherWithErrorHandling,
  );

  return {
    slot: data,
    error,
    isLoading,
    isValidating,
  };
};

export const useBlockRoot = (slotNumber: number) => {
  const url = useBlockRootURL(slotNumber);
  const { data, error, isLoading, isValidating } = useSWRImmutable(
    url,
    jsonFetcherWithErrorHandling,
  );

  if (isLoading || isValidating) {
    return {
      blockRoot: undefined,
      error,
      isLoading,
    };
  }

  if (
    typeof data !== "object" ||
    data === null ||
    !("data" in data) ||
    data.data === null
  ) {
    return {
      blockRoot: undefined,
      error,
      isLoading,
    };
  }
  if (
    typeof data.data !== "object" ||
    !("root" in data.data) ||
    typeof data.data.root !== "string"
  ) {
    return {
      blockRoot: undefined,
      error,
      isLoading,
    };
  }

  return {
    blockRoot: data.data.root,
    error,
    isLoading,
  };
};

export const useValidator = (validatorIndex: number | string) => {
  const url = useValidatorURL(validatorIndex);
  const { data, error } = useSWR(url, jsonFetcherWithErrorHandling);
  if (error) {
    return undefined;
  }
  return data;
};

export const useSlotsFromEpoch = (epochNumber: number): number[] => {
  const slotsPerEpoch = toNumberWithDefault(
    useBeaconSpec()?.SLOTS_PER_EPOCH,
    DEFAULT_SLOTS_PER_EPOCH,
  );
  const slots = useMemo(() => {
    const startSlot = epochNumber * slotsPerEpoch;
    const endSlot = startSlot + slotsPerEpoch - 1;

    const s: number[] = [];
    for (let i = startSlot; i <= endSlot; i++) {
      s.push(i);
    }
    return s;
  }, [epochNumber]);

  return slots;
};

export const useReversedSlotsFromEpoch = (epochNumber: number): number[] => {
  const slots = useSlotsFromEpoch(epochNumber);
  const reversed = useMemo(() => {
    const r = [...slots];
    return r.reverse();
  }, [slots]);

  return reversed;
};

// Note: this API seems really slow in LH; workaround it
// to not block the entire UI:
// https://github.com/sigp/lighthouse/issues/3770
//
// DO NOT SUSPEND ON PURPOSE!!!
export const useProposerMap = (epochNumber: number) => {
  const url = useEpochProposersURL(epochNumber);
  const { data: proposers } = useSWRImmutable(
    url,
    jsonFetcherWithErrorHandling,
  );

  const proposerMap = useMemo(() => {
    if (!proposers) {
      return undefined;
    }
    if (typeof proposers !== "object" || !("data" in proposers)) {
      return undefined;
    }
    if (!Array.isArray(proposers.data)) {
      return undefined;
    }

    const m: Record<string, string> = {};
    for (const e of proposers.data as unknown[]) {
      if (typeof e !== "object" || e === null) {
        return undefined;
      }
      if (!("slot" in e) || !("validator_index" in e)) {
        return undefined;
      }
      if (typeof e.slot !== "string" || typeof e.validator_index !== "string") {
        return undefined;
      }
      m[e.slot] = e.validator_index;
    }
    return m;
  }, [proposers]);

  return proposerMap;
};

// 0xFFFFFFFFFFFFFFFF; used to indicate it has not happened yet
const MAX_EPOCH = "18446744073709551615";

export const useEpochTimestamp = (epoch: any) => {
  const beaconSpec = useBeaconSpec();
  const slotsPerEpoch = toNumberWithDefault(
    beaconSpec?.SLOTS_PER_EPOCH,
    DEFAULT_SLOTS_PER_EPOCH,
  );
  const secondsPerSlot = toNumberWithDefault(
    beaconSpec?.SECONDS_PER_SLOT,
    DEFAULT_SECONDS_PER_SLOT,
  );
  const genesisTime = useGenesisTime();
  if (epoch === undefined || genesisTime === undefined) {
    return undefined;
  }
  if (epoch === MAX_EPOCH) {
    return undefined;
  }
  return genesisTime + epoch * slotsPerEpoch * secondsPerSlot;
};

export const useSlotTimestamp = (slot: number | undefined) => {
  const genesisTime = useGenesisTime();
  const beaconSpec = useBeaconSpec();
  const secondsPerSlot = toNumberWithDefault(
    beaconSpec?.SECONDS_PER_SLOT,
    DEFAULT_SECONDS_PER_SLOT,
  );
  if (slot === undefined || genesisTime === undefined) {
    return undefined;
  }
  return genesisTime + slot * secondsPerSlot;
};

export const useCommittee = (slotNumber: number, committeeIndex: number) => {
  const epochNumber = useSlotToEpoch(slotNumber);
  const url = useCommitteeURL(epochNumber, slotNumber, committeeIndex);
  const { data, error } = useSWRImmutable(url, jsonFetcherWithErrorHandling);
  if (error) {
    return undefined;
  }
  return data;
};

/**
 * They refresh automatically on purpose because the accepted tags are
 * moving targets
 */
const useDynamicHeader = (
  tag: "finalized" | "head",
  refreshInterval: number = 1000,
) => {
  const url = useBeaconHeaderURL(tag);
  const { data, error } = useSWR(url, jsonFetcher, {
    refreshInterval,
  });

  if (error) {
    console.error(error);
    return undefined;
  }
  return data;
};

const parseSlotNumber = (slot: unknown): number | undefined => {
  if (!slot || typeof slot !== "object") {
    return undefined;
  }
  if (
    !("data" in slot) ||
    typeof slot.data !== "object" ||
    slot.data === null
  ) {
    return undefined;
  }
  if (
    !("header" in slot.data) ||
    typeof slot.data.header !== "object" ||
    slot.data.header === null
  ) {
    return undefined;
  }
  if (
    !("message" in slot.data.header) ||
    typeof slot.data.header.message !== "object" ||
    slot.data.header.message === null
  ) {
    return undefined;
  }
  if (
    !("slot" in slot.data.header.message) ||
    typeof slot.data.header.message.slot !== "string"
  ) {
    return undefined;
  }
  const slotAsNumber = parseInt(slot.data.header.message.slot);
  if (isNaN(slotAsNumber)) {
    return undefined;
  }

  return slotAsNumber;
};

// TODO: useMemo
export const useHeadSlotNumber = (
  refreshInterval?: number,
): number | undefined => {
  const beaconSpec = useBeaconSpec();
  const defaultRefreshInterval =
    toNumberWithDefault(
      beaconSpec?.SECONDS_PER_SLOT,
      DEFAULT_SECONDS_PER_SLOT,
    ) * 1000;
  if (refreshInterval === undefined) {
    refreshInterval = defaultRefreshInterval;
  }
  const slot = useDynamicHeader("head", refreshInterval);
  return parseSlotNumber(slot);
};

export const useFinalizedSlotNumber = (
  refreshInterval: number = FINALIZED_SLOT_REFRESH_INTERVAL,
): number | undefined => {
  const slot = useDynamicHeader("finalized", refreshInterval);
  return parseSlotNumber(slot);
};

export const useHeadEpochNumber = (
  refreshInterval: number = HEAD_EPOCH_REFRESH_INTERVAL,
) => {
  const headSlot = useHeadSlotNumber(refreshInterval);
  return useSlotToEpoch(headSlot);
};



================================================
FILE: src/useERC1967.ts
================================================
import { useQuery } from "@tanstack/react-query";
import { JsonRpcApiProvider, getAddress } from "ethers";

type Address = string;

const DELEGATE_STORAGE_LOCATION =
  "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc";
const BEACON_STORAGE_LOCATION =
  "0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50";
const ADMIN_STORAGE_LOCATION =
  "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103";

export type ERC1967ProxyAttributes = {
  delegate: Address;
  beacon: Address | undefined;
  admin: Address | undefined;
};

export const GetStorageQuery = (
  provider: JsonRpcApiProvider,
  address: Address | undefined,
  slot: string,
) => {
  return {
    queryKey: ["getStorageAt", address, slot],
    queryFn: () => {
      if (address === undefined) {
        return Promise.resolve(undefined);
      } else {
        return provider.getStorage(address, slot);
      }
    },
  };
};

export const useERC1967ProxyAttributes = (
  provider: JsonRpcApiProvider,
  address: Address | undefined,
): ERC1967ProxyAttributes | undefined => {
  function toAddress(s: string | undefined): string | undefined {
    if (s === undefined || s === "0x") {
      return undefined;
    }
    const addr = getAddress("0x" + s.toLowerCase().slice(-40));
    return addr;
  }

  const { data: delegateData } = useQuery(
    GetStorageQuery(provider, address, DELEGATE_STORAGE_LOCATION),
  );
  const { data: beaconData } = useQuery(
    GetStorageQuery(provider, address, BEACON_STORAGE_LOCATION),
  );
  const { data: adminData } = useQuery(
    GetStorageQuery(provider, address, ADMIN_STORAGE_LOCATION),
  );

  const delegate = toAddress(delegateData);
  const beacon = toAddress(beaconData);
  const admin = toAddress(adminData);

  if (delegate === undefined) {
    return undefined;
  }
  return { delegate, beacon, admin };
};



================================================
FILE: src/useErigonHooks.ts
================================================
import { useQuery } from "@tanstack/react-query";
import {
  AbiCoder,
  BlockParams,
  BlockTag,
  Contract,
  JsonRpcApiProvider,
  Log,
  TransactionReceiptParams,
  TransactionResponseParams,
  ZeroAddress,
  dataSlice,
  getAddress,
  getBytes,
  isHexString,
  toNumber,
} from "ethers";
import { useEffect, useMemo, useState } from "react";
import useSWR, { Fetcher } from "swr";
import useSWRImmutable from "swr/immutable";
import useSWRInfinite from "swr/infinite";
import erc20 from "./abi/erc20.json";
import L1Block from "./abi/optimism/L1Block.json";
import { getOpFeeData, isOptimisticChain } from "./execution/op-tx-calculation";
import {
  ChecksummedAddress,
  InternalOperation,
  OperationType,
  ProcessedTransaction,
  TokenMeta,
  TokenTransfer,
  TransactionData,
} from "./types";
import { useQuirks } from "./useQuirks";
import { formatter } from "./utils/formatter";

const TRANSFER_TOPIC =
  "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef";

export interface ExtendedBlock extends BlockParams {
  blockReward: bigint;
  unclesReward: bigint;
  feeReward: bigint;
  size: number;
  sha3Uncles: string;
  stateRoot: string;
  totalDifficulty?: bigint;
  transactionCount: number;
  // Optimism-specific
  gasUsedDepositTx?: bigint;
}

export const readBlock = async (
  provider: JsonRpcApiProvider,
  blockNumberOrHash: string,
): Promise<ExtendedBlock | null> => {
  let blockPromise: Promise<any>;
  if (isHexString(blockNumberOrHash, 32)) {
    blockPromise = provider.send("ots_getBlockDetailsByHash", [
      blockNumberOrHash,
    ]);
  } else {
    const blockNumber = parseInt(blockNumberOrHash);
    if (isNaN(blockNumber) || blockNumber < 0) {
      return null;
    }
    blockPromise = provider.send("ots_getBlockDetails", [blockNumber]);
  }

  const _rawBlock = await blockPromise;
  if (_rawBlock === null) {
    return null;
  }
  const _block: BlockParams = formatter.blockParams(_rawBlock.block);
  const _rawIssuance = _rawBlock.issuance;

  const extBlock: ExtendedBlock = {
    blockReward: formatter.bigInt(_rawIssuance.blockReward ?? 0),
    unclesReward: formatter.bigInt(_rawIssuance.uncleReward ?? 0),
    feeReward: formatter.bigInt(_rawBlock.totalFees),
    size: formatter.number(_rawBlock.block.size),
    sha3Uncles: _rawBlock.block.sha3Uncles,
    stateRoot: _rawBlock.block.stateRoot,
    totalDifficulty:
      _rawBlock.block.totalDifficulty &&
      formatter.bigInt(_rawBlock.block.totalDifficulty),
    transactionCount: formatter.number(_rawBlock.block.transactionCount),
    // Optimism-specific; gas used by the deposit transaction
    gasUsedDepositTx: formatter.bigInt(_rawBlock.gasUsedDepositTx ?? 0n),
    ..._block,
  };
  return extBlock;
};

export type BlockTransactionsPage = {
  total: number;
  txs: ProcessedTransaction[];
};

const blockTransactionsFetcher: Fetcher<
  BlockTransactionsPage,
  [JsonRpcApiProvider, number, number, number]
> = async ([provider, blockNumber, pageNumber, pageSize]) => {
  const result = await provider.send("ots_getBlockTransactions", [
    blockNumber,
    pageNumber,
    pageSize,
  ]);
  const _block = formatter.blockParamsWithTransactions(result.fullblock);
  const _receipts = result.receipts;

  const rawTxs = _block.transactions
    .map((t: TransactionResponseParams, i: number): ProcessedTransaction => {
      const _rawReceipt = _receipts[i];
      // Empty logs on purpose because of ethers formatter requires it
      _rawReceipt.logs = [];
      const _receipt: TransactionReceiptParams =
        formatter.transactionReceiptParams(_rawReceipt);

      if (t.hash === null) {
        throw new Error("blockTransactionsFetcher: unknown tx hash");
      }

      let fee: bigint;
      let effectiveGasPrice: bigint;
      if (t.type === 2 || t.type === 3) {
        const tip =
          t.maxFeePerGas! - _block.baseFeePerGas! < t.maxPriorityFeePerGas!
            ? t.maxFeePerGas! - _block.baseFeePerGas!
            : t.maxPriorityFeePerGas!;
        effectiveGasPrice = _block.baseFeePerGas! + tip;
      } else {
        effectiveGasPrice = t.gasPrice!;
      }

      // Handle Optimism-specific values
      let l1Fee: bigint | undefined;
      if (isOptimisticChain(provider._network.chainId)) {
        if (t.type === 126) {
          fee = 0n;
          effectiveGasPrice = 0n;
        } else {
          l1Fee = formatter.bigInt(_rawReceipt.l1Fee);
          ({ fee, gasPrice: effectiveGasPrice } = getOpFeeData(
            t.type,
            effectiveGasPrice,
            _receipt.gasUsed!,
            l1Fee,
          ));
        }
      } else {
        fee = formatter.bigInt(_receipt.gasUsed) * effectiveGasPrice;
      }

      return {
        blockNumber: blockNumber,
        timestamp: _block.timestamp,
        miner: _block.miner,
        idx: i,
        hash: t.hash,
        from: t.from ?? undefined,
        to: t.to ?? null,
        createdContractAddress: _receipt.contractAddress ?? undefined,
        value: t.value,
        type: t.type,
        fee,
        gasPrice: effectiveGasPrice,
        data: t.data,
        status: formatter.number(_receipt.status),
      };
    })
    .reverse();

  return { total: result.fullblock.transactionCount, txs: rawTxs };
};

export const useBlockTransactions = (
  provider: JsonRpcApiProvider,
  blockNumber: number | undefined,
  pageNumber: number,
  pageSize: number,
): { data: BlockTransactionsPage | undefined; isLoading: boolean } => {
  const { data, error, isLoading } = useSWRImmutable(
    blockNumber !== undefined
      ? [provider, blockNumber, pageNumber, pageSize]
      : null,
    blockTransactionsFetcher,
    { keepPreviousData: true },
  );
  if (error) {
    return { data: undefined, isLoading: false };
  }
  return { data, isLoading };
};

const blockDataFetcher: Fetcher<
  ExtendedBlock | null,
  [JsonRpcApiProvider, string]
> = async ([provider, blockNumberOrHash]) => {
  return readBlock(provider, blockNumberOrHash);
};

// TODO: some callers may use only block headers?
export const useBlockData = (
  provider: JsonRpcApiProvider,
  blockNumberOrHash: string | undefined,
): { data: ExtendedBlock | null | undefined; isLoading: boolean } => {
  const { data, error, isLoading } = useSWRImmutable(
    blockNumberOrHash !== undefined ? [provider, blockNumberOrHash] : null,
    blockDataFetcher,
    { keepPreviousData: true },
  );
  if (error) {
    return { data: undefined, isLoading: false };
  }
  return { data, isLoading };
};

export const useRecentBlocks = (
  provider: JsonRpcApiProvider | undefined,
  blockNumber: number | undefined,
  pageNumber: number,
  pageSize: number,
): { data: (ExtendedBlock | null)[] | undefined; isLoading: boolean } => {
  const startBlockNum: number | undefined = blockNumber
    ? blockNumber - pageSize * pageNumber
    : undefined;

  // This function is used by SWR to get the key which we pass to the fetcher function
  // It also searches the cache for the presence of this key and if found returns the
  // cached value. The pageSize differenciates the cache between components so that different components
  // do not display incorrect number of displays
  const getKey = (
    pageIndex: number,
  ): [JsonRpcApiProvider, string, number] | null => {
    if (
      provider == undefined ||
      startBlockNum == undefined ||
      startBlockNum - pageIndex < 0
    )
      return null;

    return [provider, (startBlockNum - pageIndex).toString(), pageSize];
  };

  // Calls the fetcher to fetch the most recent pageNumber of blocks in parallel
  const { data, error, isLoading, isValidating } = useSWRInfinite(
    getKey,
    blockDataFetcher,
    {
      keepPreviousData: true,
      revalidateFirstPage: false,
      initialSize: pageSize,
      parallel: true,
    },
  );
  if (error) {
    return { data: undefined, isLoading: false };
  }
  return { data, isLoading: isLoading || isValidating };
};

export const useBlockDataFromTransaction = (
  provider: JsonRpcApiProvider,
  txData: TransactionData | null | undefined,
): ExtendedBlock | null | undefined => {
  const { data: block } = useBlockData(
    provider,
    txData?.confirmedData
      ? txData.confirmedData.blockNumber.toString()
      : undefined,
  );
  return block;
};

export const useTxData = (
  provider: JsonRpcApiProvider,
  txhash: string,
): TransactionData | undefined | null => {
  const [txData, setTxData] = useState<TransactionData | undefined | null>();

  useEffect(() => {
    const readTxData = async () => {
      try {
        const [_response, _receipt] = await Promise.all([
          provider.getTransaction(txhash),
          provider.getTransactionReceipt(txhash),
        ]);
        if (_response === null) {
          setTxData(null);
          return;
        }

        let fee: bigint;
        let gasPrice: bigint;

        // Handle Optimism-specific values
        let l1GasUsed: bigint | undefined;
        let l1GasPrice: bigint | undefined;
        let l1FeeScalar: string | undefined;
        let l1Fee: bigint | undefined;
        if (isOptimisticChain(provider._network.chainId)) {
          if (_response.type === 0x7e) {
            fee = 0n;
            gasPrice = 0n;
          } else {
            const _rawReceipt = await provider.send(
              "eth_getTransactionReceipt",
              [txhash],
            );
            l1GasUsed = formatter.bigInt(_rawReceipt.l1GasUsed);
            l1GasPrice = formatter.bigInt(_rawReceipt.l1GasPrice);
            l1FeeScalar = _rawReceipt.l1FeeScalar;
            l1Fee = formatter.bigInt(_rawReceipt.l1Fee);
            ({ fee, gasPrice } = getOpFeeData(
              _response.type,
              _response.gasPrice!,
              _receipt ? _receipt.gasUsed! : 0n,
              l1Fee,
            ));
          }
        } else {
          fee = _response.gasPrice! * _receipt!.gasUsed!;
          gasPrice = _response.gasPrice!;
        }

        setTxData({
          transactionHash: _response.hash,
          from: _response.from,
          to: _response.to ?? undefined,
          value: _response.value,
          type: _response.type ?? 0,
          maxFeePerGas: _response.maxFeePerGas ?? undefined,
          maxPriorityFeePerGas: _response.maxPriorityFeePerGas ?? undefined,
          gasPrice,
          gasLimit: _response.gasLimit,
          nonce: BigInt(_response.nonce),
          data: _response.data,
          maxFeePerBlobGas: _response.maxFeePerBlobGas ?? undefined,
          blobVersionedHashes: _response.blobVersionedHashes ?? undefined,
          confirmedData:
            _receipt === null
              ? undefined
              : {
                  status: _receipt.status === 1,
                  blockNumber: _receipt.blockNumber,
                  transactionIndex: _receipt.index,
                  // TODO: Does awaiting this Promise induce another RPC call?
                  confirmations: await _receipt.confirmations(),
                  createdContractAddress: _receipt.contractAddress ?? undefined,
                  fee,
                  gasUsed: _receipt.gasUsed,
                  logs: Array.from(_receipt.logs),
                  blobGasPrice: _receipt.blobGasPrice ?? undefined,
                  blobGasUsed: _receipt.blobGasUsed ?? undefined,
                  l1GasUsed,
                  l1GasPrice,
                  l1FeeScalar,
                  l1Fee,
                },
        });
      } catch (err) {
        console.error(err);
        setTxData(null);
      }
    };

    readTxData();
  }, [provider, txhash]);

  return txData;
};

export const findTokenTransfersInLogs = (
  logs: readonly Log[],
): TokenTransfer[] => {
  return logs
    .filter((l) => l.topics.length === 3 && l.topics[0] === TRANSFER_TOPIC)
    .map((l) => ({
      token: l.address,
      from: getAddress(dataSlice(getBytes(l.topics[1]), 12)),
      to: getAddress(dataSlice(getBytes(l.topics[2]), 12)),
      value: BigInt(l.data),
    }));
};

export const useTokenTransfers = (
  txData?: TransactionData | null,
): TokenTransfer[] | undefined => {
  const transfers = useMemo(() => {
    if (txData === undefined || txData === null) {
      return undefined;
    }
    if (!txData.confirmedData) {
      return undefined;
    }

    return findTokenTransfersInLogs(txData.confirmedData.logs);
  }, [txData]);

  return transfers;
};

export const useInternalOperations = (
  provider: JsonRpcApiProvider,
  txHash: string | undefined,
): InternalOperation[] | undefined => {
  const { data, error } = useSWRImmutable(
    txHash !== undefined ? ["ots_getInternalOperations", txHash] : null,
    providerFetcher(provider),
  );

  const _transfers = useMemo(() => {
    if (error || data === undefined) {
      return undefined;
    }

    const _t: InternalOperation[] = [];
    if (data) {
      for (const t of data) {
        _t.push({
          type: t.type,
          from: formatter.address(getAddress(t.from)),
          to: formatter.address(getAddress(t.to)),
          value: formatter.bigInt(t.value),
        });
      }
    }
    return _t;
  }, [data]);
  return _transfers;
};

export const useSendsToMiner = (
  provider: JsonRpcApiProvider,
  txHash: string | undefined,
  miner: string | undefined,
): [boolean, InternalOperation[]] | [undefined, undefined] => {
  const ops = useInternalOperations(provider, txHash);
  if (ops === undefined) {
    return [undefined, undefined];
  }

  const send =
    ops.findIndex(
      (op) =>
        op.type === OperationType.TRANSFER &&
        miner !== undefined &&
        miner === getAddress(op.to),
    ) !== -1;
  return [send, ops];
};

export type StateDiffElement = {
  type: string;
  from: string | null;
  to: string | null;

  // "+": new
  // "*": modified
  // "-": removed
  storageChange: string;
};

export type StateDiffGroup = {
  title: string;
  diffs: (StateDiffElement | StateDiffGroup)[];
};

export const useStateDiffTrace = (
  provider: JsonRpcApiProvider,
  txHash: string,
): StateDiffGroup[] | undefined => {
  const [traceGroups, setTraceGroups] = useState<
    StateDiffGroup[] | undefined
  >();

  useEffect(() => {
    const stateDiffTrace = async () => {
      const results = await provider.send("trace_replayTransaction", [
        txHash,
        ["stateDiff"],
      ]);
      const entries: StateDiffGroup[] = [];
      let address: string;
      let highLevelChange: any;

      // Iterate over each address with a state change
      for ([address, highLevelChange] of Object.entries(results.stateDiff)) {
        const sdGroup: StateDiffGroup = {
          title: address,
          diffs: [],
        };
        let changeType: string;
        let changes: any;

        function addChangeType(
          changeType: string,
          changes: any,
        ): StateDiffGroup | StateDiffElement | null {
          if (changes === "=") {
            // No change
            return null;
          }

          if (changeType === "storage") {
            // Create a "storage" subgroup and a subgroup for each storage slot
            let group: StateDiffGroup = {
              title: "storage",
              diffs: [],
            };
            for (const [storageSlot, storageChange] of Object.entries(
              changes,
            )) {
              let storageGroup: StateDiffGroup = {
                title: storageSlot,
                diffs: [],
              };
              let change = addChangeType("storageChange", storageChange);
              if (change !== null) {
                storageGroup.diffs.push(change);
              }
              group.diffs.push(storageGroup);
            }
            return group;
          }

          let storageChanges = Object.keys(changes);
          if (storageChanges.length !== 1) {
            throw new Error("More than one storage change type found");
          }
          // storageChange is "*", "+", or "-"
          let storageChange = storageChanges[0];

          if (storageChange === "+") {
            // Just the new value is stored
            return {
              type: changeType,
              from: null,
              to: changes[storageChange],
              storageChange,
            };
          } else if (storageChange === "-") {
            return {
              type: changeType,
              from: changes[storageChange],
              to: null,
              storageChange,
            };
          }

          return {
            type: changeType,
            from: changes[storageChange].from,
            to: changes[storageChange].to,
            storageChange,
          };
        }

        // Add each of the state changes from this acddress
        for ([changeType, changes] of Object.entries(highLevelChange)) {
          let change = addChangeType(changeType, changes);
          if (change !== null) {
            sdGroup.diffs.push(change);
          }
        }
        entries.push(sdGroup);
      }
      setTraceGroups(entries);
    };
    stateDiffTrace();
  }, [provider, txHash]);
  return traceGroups;
};

export type TraceEntry = {
  type: string;
  depth: number;
  from: string;
  to: string;
  value: bigint;
  input: string;
  output?: string;
};

export type TraceGroup = TraceEntry & {
  children: TraceGroup[] | null;
};

export const useTraceTransaction = (
  provider: JsonRpcApiProvider,
  txHash: string,
): TraceGroup[] | undefined => {
  const [traceGroups, setTraceGroups] = useState<TraceGroup[] | undefined>();

  useEffect(() => {
    const traceTx = async () => {
      let results = await provider.send("ots_traceTransaction", [txHash]);
      // null here means there was no trace
      if (results == null) {
        results = [];
      }

      // Implement better formatter
      for (let i = 0; i < results.length; i++) {
        results[i].from = formatter.address(results[i].from);
        results[i].to = formatter.address(results[i].to);
        results[i].value =
          results[i].value === null ? null : formatter.bigInt(results[i].value);
      }

      // Build trace tree
      const buildTraceTree = (
        flatList: TraceEntry[],
        depth: number = 0,
      ): TraceGroup[] => {
        const entries: TraceGroup[] = [];

        let children: TraceEntry[] | null = null;
        for (let i = 0; i < flatList.length; i++) {
          if (flatList[i].depth === depth) {
            if (children !== null) {
              const childrenTree = buildTraceTree(children, depth + 1);
              const prev = entries.pop();
              if (prev) {
                prev.children = childrenTree;
                entries.push(prev);
              }
            }

            entries.push({
              ...flatList[i],
              children: null,
            });
            children = null;
          } else {
            if (children === null) {
              children = [];
            }
            children.push(flatList[i]);
          }
        }
        if (children !== null) {
          const childrenTree = buildTraceTree(children, depth + 1);
          const prev = entries.pop();
          if (prev) {
            prev.children = childrenTree;
            entries.push(prev);
          }
        }

        return entries;
      };

      const traceTree = buildTraceTree(results);
      setTraceGroups(traceTree);
    };
    traceTx();
  }, [provider, txHash]);

  return traceGroups;
};

// Error(string)
const ERROR_MESSAGE_SELECTOR = "0x08c379a0";

export const useTransactionError = (
  provider: JsonRpcApiProvider,
  txHash: string,
): [string | undefined, string | undefined, boolean | undefined] => {
  const [errorMsg, setErrorMsg] = useState<string | undefined>();
  const [data, setData] = useState<string | undefined>();
  const [isCustomError, setCustomError] = useState<boolean | undefined>();

  useEffect(() => {
    // Reset
    setErrorMsg(undefined);
    setData(undefined);
    setCustomError(undefined);

    const readCodes = async () => {
      const result = (await provider.send("ots_getTransactionError", [
        txHash,
      ])) as string | null;

      // Empty or success
      if (result === "0x" || result == null || typeof result !== "string") {
        setErrorMsg(undefined);
        if (result == null) {
          // Avoid problems later :-)
          setData("0x");
        } else {
          setData(result);
        }
        setCustomError(false);
        return;
      }

      // Filter hardcoded Error(string) selector because ethers don't let us
      // construct it
      const selector = result.substr(0, 10);
      if (selector === ERROR_MESSAGE_SELECTOR) {
        const msg = AbiCoder.defaultAbiCoder().decode(
          ["string"],
          "0x" + result.substr(10),
        );
        setErrorMsg(msg[0]);
        setData(result);
        setCustomError(false);
        return;
      }

      setErrorMsg(undefined);
      setData(result);
      setCustomError(true);
    };
    readCodes();
  }, [provider, txHash]);

  return [errorMsg, data, isCustomError];
};

export const useTransactionCount = (
  provider: JsonRpcApiProvider,
  sender: ChecksummedAddress | undefined,
): bigint | undefined => {
  const { data, error } = useSWR(
    sender ? { provider, sender } : null,
    async ({ provider, sender }): Promise<bigint | undefined> =>
      provider.getTransactionCount(sender).then(BigInt),
  );

  if (error) {
    return undefined;
  }
  return data;
};

type TransactionBySenderAndNonceKey = {
  network: bigint;
  sender: ChecksummedAddress;
  nonce: bigint;
};

const getTransactionBySenderAndNonceFetcher =
  (provider: JsonRpcApiProvider) =>
  async ({
    network,
    sender,
    nonce,
  }: TransactionBySenderAndNonceKey): Promise<string | null | undefined> => {
    if (nonce < 0) {
      return undefined;
    }

    const result = (await provider.send("ots_getTransactionBySenderAndNonce", [
      sender,
      toNumber(nonce),
    ])) as string;

    // Empty or success
    return result;
  };

export const useTransactionBySenderAndNonce = (
  provider: JsonRpcApiProvider,
  sender: ChecksummedAddress | undefined,
  nonce: bigint | undefined,
): string | null | undefined => {
  const { data, error } = useSWR<
    string | null | undefined,
    any,
    TransactionBySenderAndNonceKey | null
  >(
    sender && nonce !== undefined
      ? {
          network: provider._network.chainId,
          sender,
          nonce,
        }
      : null,
    getTransactionBySenderAndNonceFetcher(provider),
  );

  if (error) {
    return undefined;
  }
  return data;
};

type ContractCreatorKey = {
  type: "cc";
  network: bigint;
  address: ChecksummedAddress;
};

type ContractCreator = {
  hash: string;
  creator: ChecksummedAddress;
};

export const useContractCreator = (
  provider: JsonRpcApiProvider,
  address: ChecksummedAddress | undefined,
): ContractCreator | null | undefined => {
  const { data, error } = useSWR<
    ContractCreator | null | undefined,
    any,
    ContractCreatorKey | null
  >(
    address
      ? {
          type: "cc",
          network: provider._network.chainId,
          address,
        }
      : null,
    getContractCreatorFetcher(provider!),
  );

  if (error) {
    return undefined;
  }
  return data as ContractCreator;
};

const getContractCreatorFetcher =
  (provider: JsonRpcApiProvider) =>
  async ({
    network,
    address,
  }: ContractCreatorKey): Promise<ContractCreator | null | undefined> => {
    const result = (await provider.send("ots_getContractCreator", [
      address,
    ])) as ContractCreator;

    // Empty or success
    if (result) {
      result.creator = formatter.address(result.creator);
    }
    return result;
  };

export const getBalanceQuery = (
  provider: JsonRpcApiProvider,
  address: ChecksummedAddress,
) => ({
  queryKey: ["eth_getBalance", address],
  queryFn: () => provider.getBalance(address),
});

/**
 * This is a generic fetch for SWR, where the key is an array, whose
 * element 0 is the JSON-RPC method, and the remaining are the method
 * arguments.
 */
export const providerFetcher =
  (provider: JsonRpcApiProvider): Fetcher<any | undefined, [string, ...any]> =>
  async (key) => {
    for (const a of key) {
      if (a === undefined) {
        return undefined;
      }
    }

    const method = key[0];
    const args = key.slice(1);
    const result = await provider.send(method, args);
    return result;
  };

export const useHasCode = (
  provider: JsonRpcApiProvider,
  address: ChecksummedAddress | undefined,
  blockTag: BlockTag = "latest",
): boolean | undefined => {
  const quirks = useQuirks(provider);
  if (quirks?.isZilliqa1) {
    // Zilliqa 1 requires that the tag be numeric, but ignores it, so we can
    // use 0 and save ourselves a fetch.
    blockTag = 0;
  }
  const { data: hasCode } = useQuery(hasCodeQuery(provider, address, blockTag));
  return hasCode;
};

export const hasCodeQuery = (
  provider: JsonRpcApiProvider,
  address: ChecksummedAddress | undefined,
  blockTag: BlockTag = "latest",
) => ({
  queryKey: ["ots_hasCode", address, blockTag],
  queryFn: () => {
    return provider.send("ots_hasCode", [address, blockTag]);
  },
});

export const getCodeQuery = (
  provider: JsonRpcApiProvider,
  address: ChecksummedAddress | undefined,
  blockTag: BlockTag = "latest",
) => ({
  queryKey: ["eth_getCode", address, blockTag],
  queryFn: () => {
    return provider.send("eth_getCode", [address, blockTag]);
  },
});

export const useGetRawReceipt = (
  provider: JsonRpcApiProvider,
  address: ChecksummedAddress,
): string | undefined => {
  const { data } = useQuery(getTransactionReceiptQuery(provider!, address));
  return data as string | undefined;
};

export const getTransactionReceiptQuery = (
  provider: JsonRpcApiProvider,
  address: ChecksummedAddress,
) => ({
  queryKey: ["eth_getTransactionReceipt", address],
  queryFn: () => {
    return provider.send("eth_getTransactionReceipt", [address]);
  },
});

const ERC20_PROTOTYPE = new Contract(ZeroAddress, erc20);

const tokenMetadataFetcher =
  (
    provider: JsonRpcApiProvider,
  ): Fetcher<TokenMeta | null, ["tokenmeta", ChecksummedAddress]> =>
  async ([_, address]) => {
    // TODO: workaround for https://github.com/ethers-io/ethers.js/issues/4183
    const erc20Contract: Contract = ERC20_PROTOTYPE.connect(provider).attach(
      address,
    ) as Contract;
    try {
      const name = (await erc20Contract.name()) as string;
      if (!name.trim()) {
        return null;
      }

      const [symbol, decimals] = (await Promise.all([
        erc20Contract.symbol(),
        erc20Contract.decimals(),
      ])) as [string, number];

      // Prevent faulty tokens with empty name/symbol
      if (!symbol.trim()) {
        return null;
      }

      return {
        name,
        symbol,
        decimals: Number(decimals),
      };
    } catch (err) {
      // Ignore on purpose; this indicates the probe failed and the address
      // is not a token
      return null;
    }
  };

export const useTokenMetadata = (
  provider: JsonRpcApiProvider,
  address: ChecksummedAddress | undefined,
): TokenMeta | null | undefined => {
  const fetcher = tokenMetadataFetcher(provider);
  const { data, error } = useSWRImmutable(
    address !== undefined ? ["tokenmeta", address] : null,
    fetcher,
  );
  if (error) {
    return undefined;
  }
  return data;
};

const l1BlockContractAddress = "0x4200000000000000000000000000000000000015";
const L1BLOCK_PROTOTYPE = new Contract(l1BlockContractAddress, L1Block);
const l1EpochFetcher =
  (
    provider: JsonRpcApiProvider,
  ): Fetcher<bigint | null, ["l1epoch", BlockTag]> =>
  async ([_, blockTag]) => {
    // TODO: workaround for https://github.com/ethers-io/ethers.js/issues/4183
    const l1BlockContract: Contract = L1BLOCK_PROTOTYPE.connect(
      provider,
    ).attach(l1BlockContractAddress) as Contract;
    try {
      return l1BlockContract.number({ blockTag });
    } catch (err) {
      return null;
    }
  };

export const useL1Epoch = (
  provider: JsonRpcApiProvider,
  blockTag: BlockTag | null,
): bigint | null | undefined => {
  const fetcher = l1EpochFetcher(provider);
  const key = isOptimisticChain(provider._network.chainId)
    ? ["l1epoch", blockTag]
    : null;
  const { data, error } = useSWRImmutable(key, fetcher);
  return error ? undefined : data;
};



================================================
FILE: src/useLatestBlock.ts
================================================
import { BlockchainInfo } from "@zilliqa-js/core/dist/types/src/types";
import { Zilliqa } from "@zilliqa-js/zilliqa";
import { Block, JsonRpcApiProvider } from "ethers";
import { useEffect, useState } from "react";
import { formatter } from "./utils/formatter";

const refreshRate = 30000; // In milliseconds

/**
 * Returns the latest block header AND hook an internal listener
 * that'll update and trigger a component render as a side effect
 * every time it is notified of a new block by the web3 provider.
 */
export const useLatestBlockHeader = (provider: JsonRpcApiProvider) => {
  const [latestBlock, setLatestBlock] = useState<Block>();

  useEffect(() => {
    const getAndSetBlockHeader = async (blockNumber: number) => {
      const _raw = await provider.send("erigon_getHeaderByNumber", [
        blockNumber,
      ]);
      const _block = new Block(formatter.blockParams(_raw), provider);
      setLatestBlock(_block);
    };

    // Immediately read and set the latest block header
    const readLatestBlock = async () => {
      const blockNum = await provider.getBlockNumber();
      await getAndSetBlockHeader(blockNum);
    };
    readLatestBlock();

    // Hook a listener that'll update the latest block header
    // every time it is notified of a new block
    provider.on("block", getAndSetBlockHeader);
    return () => {
      provider.removeListener("block", getAndSetBlockHeader);
    };
  }, [provider]);

  return latestBlock;
};

/**
 * Returns the latest chain information AND hoook an internal listener
 * that'll update and trigger a component reder as a side effect every
 * the poll returns a different value
 */

export const useLatestBlockChainInfo = (
  zilliqa?: Zilliqa,
): BlockchainInfo | undefined => {
  const [latestBlockChainInfo, setLatestBlockChainInfo] =
    useState<BlockchainInfo>();

  useEffect(() => {
    // TODO: Is this necessary to check whether the hook has been removed
    let isCancelled = false;
    if (!zilliqa) {
      return;
    }

    const getData = async () => {
      const blockChainInfo = await zilliqa.blockchain.getBlockChainInfo();
      if (!isCancelled && blockChainInfo) {
        setLatestBlockChainInfo(blockChainInfo.result);
      }
    };
    getData();
    const getDataTimer = setInterval(async () => {
      await getData();
    }, refreshRate);
    return () => {
      isCancelled = true;
      clearInterval(getDataTimer);
    };
  }, [zilliqa]);

  return latestBlockChainInfo;
};

interface BCInfoState {
  startTxBlock: number;
  maxTPS: number;
  maxTPSTxBlockNum: number;
  maxTxnCount: number;
  maxTxnCountTxBlockNum: number;
}

export const useBCInfoStateInfo = (
  latestBlockChainInfo?: BlockchainInfo,
): BCInfoState | undefined => {
  const [state, setState] = useState<BCInfoState>();

  useEffect(() => {
    setState((prevState: BCInfoState | undefined) => {
      if (latestBlockChainInfo === undefined) return prevState;

      if (prevState === undefined) {
        return {
          startTxBlock: parseInt(latestBlockChainInfo.NumTxBlocks, 10) - 1,
          maxTPS: latestBlockChainInfo.TransactionRate,
          maxTPSTxBlockNum: parseInt(latestBlockChainInfo.NumTxBlocks, 10) - 1,
          maxTxnCount: parseInt(latestBlockChainInfo.NumTxnsTxEpoch, 10),
          maxTxnCountTxBlockNum:
            parseInt(latestBlockChainInfo.NumTxBlocks, 10) - 1,
        };
      }

      const newState: BCInfoState = { ...prevState };
      if (prevState.maxTPS <= latestBlockChainInfo.TransactionRate) {
        newState.maxTPS = latestBlockChainInfo.TransactionRate;
        newState.maxTPSTxBlockNum =
          parseInt(latestBlockChainInfo.NumTxBlocks, 10) - 1;
      }
      if (
        prevState.maxTxnCount <=
        parseInt(latestBlockChainInfo.NumTxnsTxEpoch, 10)
      ) {
        newState.maxTxnCount = parseInt(
          latestBlockChainInfo.NumTxnsTxEpoch,
          10,
        );
        newState.maxTxnCountTxBlockNum =
          parseInt(latestBlockChainInfo.NumTxBlocks, 10) - 1;
      }
      return newState;
    });
  }, [latestBlockChainInfo]);

  return state;
};

/**
 * Returns the latest block number AND hook an internal listener
 * that'll update and trigger a component render as a side effect
 * every time it is notified of a new block by the web3 provider.
 *
 * This hook is cheaper than useLatestBlockHeader.
 */
export const useLatestBlockNumber = (provider: JsonRpcApiProvider) => {
  const [latestBlock, setLatestBlock] = useState<number>();

  useEffect(() => {
    // Immediately read and set the latest block number
    const readLatestBlock = async () => {
      const blockNum = await provider.getBlockNumber();
      setLatestBlock(blockNum);
    };
    readLatestBlock();

    // Hook a listener that'll update the latest block number
    // every time it is notified of a new block
    const listener = async (blockNumber: number) => {
      setLatestBlock(blockNumber);
    };

    provider.on("block", listener);
    return () => {
      provider.removeListener("block", listener);
    };
  }, [provider]);

  return latestBlock;
};



================================================
FILE: src/usePriceOracle.ts
================================================
import {
  BlockTag,
  Contract,
  FixedNumber,
  JsonRpcApiProvider,
  ZeroAddress,
} from "ethers";
import { useContext } from "react";
import { Fetcher } from "swr";
import useSWRImmutable from "swr/immutable";
import AggregatorV3Interface from "./abi/chainlink/AggregatorV3Interface.json";
import FeedRegistryInterface from "./abi/chainlink/FeedRegistryInterface.json";
import UniswapV2PriceResolver from "./api/token-price-resolver/resolvers/UniswapV2PriceResolver";
import UniswapV3PriceResolver from "./api/token-price-resolver/resolvers/UniswapV3PriceResolver";
import {
  PriceOracleSource,
  TokenPriceResolver,
} from "./api/token-price-resolver/token-price-resolver";
import { ChecksummedAddress } from "./types";
import { type PriceOracleInfo } from "./useConfig";
import { RuntimeContext } from "./useRuntime";
import { commify } from "./utils/utils";

const FEED_REGISTRY_MAINNET: ChecksummedAddress =
  "0x47Fb2585D2C56Fe188D0E6ec628a38b74fCeeeDf";

// The USD "token" address for Chainlink feed registry's purposes
const USD = "0x0000000000000000000000000000000000000348";

// Map of (network ID => (token address => equivalent value token address))
const tokenEquivMap = new Map<
  bigint | undefined,
  Map<ChecksummedAddress, ChecksummedAddress>
>([
  [
    1n,
    new Map<ChecksummedAddress, ChecksummedAddress>([
      [
        "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
      ],
    ]),
  ],
]);

const defaultPriceOracleInfo: Map<bigint, PriceOracleInfo> = new Map<
  bigint,
  PriceOracleInfo
>([
  [
    1n,
    {
      wrappedEthAddress: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
      uniswapV2: {
        factoryAddress: "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",
      },
      uniswapV3: {
        factoryAddress: "0x1F98431c8aD98523631AE4a59f267346ea31F984",
      },
    },
  ],
  [
    10n,
    {
      nativeTokenPrice: {
        ethUSDOracleAddress: "0x13e3Ee699D1909E989722E753853AE30b17e08c5",
        ethUSDOracleDecimals: 8,
      },
      wrappedEthAddress: "0x4200000000000000000000000000000000000006",
      uniswapV2: {
        factoryAddress: "0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf",
      },
      uniswapV3: {
        factoryAddress: "0x1F98431c8aD98523631AE4a59f267346ea31F984",
      },
    },
  ],
]);

type FeedRegistryFetcherKey = [ChecksummedAddress, BlockTag];
type FeedRegistryFetcherData = {
  price: bigint | undefined;
  decimals: bigint | undefined;
  source: PriceOracleSource | undefined;
};

const feedRegistryFetcherKey = (
  tokenAddress: ChecksummedAddress,
  blockTag: BlockTag | undefined,
): FeedRegistryFetcherKey | null => {
  if (blockTag === undefined) {
    return null;
  }
  return [tokenAddress, blockTag];
};

const FEED_REGISTRY_MAINNET_PROTOTYPE = new Contract(
  FEED_REGISTRY_MAINNET,
  FeedRegistryInterface,
);

const feedRegistryFetcher =
  (
    provider: JsonRpcApiProvider,
    priceOracleInfo: PriceOracleInfo | undefined,
    ethPriceData: { price: bigint | undefined; decimals: bigint },
    tokenDecimals: bigint,
  ): Fetcher<FeedRegistryFetcherData, FeedRegistryFetcherKey> =>
  async ([tokenAddress, blockTag]) => {
    // FeedRegistry is supported only on mainnet, see:
    // https://docs.chain.link/docs/feed-registry/
    if (provider._network.chainId === 1n) {
      try {
        // Let SWR handle error
        // TODO: using "as Contract" workaround for https://github.com/ethers-io/ethers.js/issues/4183
        const feedRegistry = FEED_REGISTRY_MAINNET_PROTOTYPE.connect(
          provider,
        ) as Contract;
        const [priceData, decimals, header] = await Promise.all([
          feedRegistry.latestRoundData(tokenAddress, USD, {
            blockTag,
          }),
          feedRegistry.decimals(tokenAddress, USD, {
            blockTag,
          }),
          provider.getBlock(blockTag),
        ]);
        const quote = BigInt(priceData.answer);

        // If oracle is older than 7 days, assume it's stale
        if (
          header !== null &&
          priceData.updatedAt < header.timestamp - 3600 * 24 * 7
        ) {
          throw new Error("Stale oracle quote");
        }

        return { price: quote, decimals, source: "Chainlink" };
      } catch (e) {}

      if (priceOracleInfo === undefined) {
        priceOracleInfo = defaultPriceOracleInfo.get(1n);
      }
    } else if (priceOracleInfo === undefined) {
      priceOracleInfo = defaultPriceOracleInfo.get(provider._network.chainId);
    }

    if (
      priceOracleInfo &&
      priceOracleInfo.wrappedEthAddress &&
      ethPriceData.decimals + 18n + (18n - tokenDecimals) >= 0n
    ) {
      // ETH price has not come in yet
      if (ethPriceData.price === undefined) {
        throw new Error("ETH price unknown");
      }
      // Special case for Wrapped ETH
      if (tokenAddress === priceOracleInfo.wrappedEthAddress) {
        return {
          price: ethPriceData.price,
          decimals: ethPriceData.decimals,
          source: "Equivalence",
        };
      }

      const resolvers: TokenPriceResolver[] = [];
      if (priceOracleInfo.uniswapV2) {
        if (!priceOracleInfo.uniswapV2.factoryAddress) {
          console.error(
            "Invalid config: UniswapV2 factory address not defined",
          );
        } else {
          resolvers.push(
            new UniswapV2PriceResolver(
              priceOracleInfo.uniswapV2.factoryAddress,
            ),
          );
        }
      }
      if (priceOracleInfo.uniswapV3) {
        if (!priceOracleInfo.uniswapV3.factoryAddress) {
          console.error(
            "Invalid config: UniswapV3 factory address not defined",
          );
        } else {
          resolvers.push(
            new UniswapV3PriceResolver(
              priceOracleInfo.uniswapV3.factoryAddress,
            ),
          );
        }
      }

      const _priceOracleInfo = priceOracleInfo;
      const results = await Promise.all(
        resolvers.map((resolver) =>
          resolver
            .resolveTokenPrice(
              provider,
              _priceOracleInfo.wrappedEthAddress!,
              tokenAddress,
              blockTag,
            )
            .then((result) => {
              if (result === undefined) {
                return result;
              }
              return { ...result, source: resolver.source };
            }),
        ),
      );
      const mostConfidentPool = results.reduce(
        (acc, cur) =>
          cur !== undefined &&
          (acc === undefined || cur.confidence > acc.confidence)
            ? cur
            : acc,
        undefined,
      );
      if (mostConfidentPool === undefined) {
        return { price: undefined, decimals: undefined, source: undefined };
      }
      return {
        price: mostConfidentPool.price * ethPriceData.price,
        decimals: ethPriceData.decimals + 18n + (18n - tokenDecimals),
        source: mostConfidentPool.source,
      };
    }
    return { price: undefined, decimals: undefined, source: undefined };
  };

export const useTokenUSDOracle = (
  provider: JsonRpcApiProvider,
  blockTag: BlockTag | undefined,
  tokenAddress: ChecksummedAddress,
  tokenDecimals: bigint | undefined,
): FeedRegistryFetcherData => {
  const netTokenEquivMap = tokenEquivMap.get(provider._network.chainId);
  if (netTokenEquivMap !== undefined) {
    const tokenEquiv = netTokenEquivMap.get(tokenAddress);
    if (tokenEquiv !== undefined) {
      tokenAddress = tokenEquiv;
    }
  }
  const { price: ethPrice, decimals: ethPriceDecimals } = useETHUSDOracle(
    provider,
    blockTag,
  );
  const { config } = useContext(RuntimeContext);
  const fetcher = feedRegistryFetcher(
    provider,
    config.priceOracleInfo,
    {
      price: ethPrice,
      decimals: ethPriceDecimals,
    },
    tokenDecimals ?? 0n,
  );
  // Conditional data fetching, since token price resolvers depend on the ETH price
  const { data, error } = useSWRImmutable(
    ethPrice !== undefined && tokenDecimals !== undefined
      ? feedRegistryFetcherKey(tokenAddress, blockTag)
      : null,
    fetcher,
  );
  if (error) {
    return { price: undefined, decimals: undefined, source: undefined };
  }
  return data ?? { price: undefined, decimals: undefined, source: undefined };
};

const ethUSDFetcherKey = (blockTag: BlockTag | undefined) => {
  if (blockTag === undefined) {
    return null;
  }
  return ["ethusd", blockTag];
};

const ETH_USD_FEED_PROTOTYPE = new Contract(ZeroAddress, AggregatorV3Interface);

const ethUSDFetcher =
  (
    provider: JsonRpcApiProvider,
    priceOracleInfo: PriceOracleInfo | undefined,
  ): Fetcher<any | undefined, ["ethusd", BlockTag | undefined]> =>
  async ([_, blockTag]) => {
    if (
      provider._network.chainId !== 1n &&
      priceOracleInfo?.nativeTokenPrice?.ethUSDOracleAddress === undefined
    ) {
      return undefined;
    }

    // TODO: Remove "as Contract" workaround for https://github.com/ethers-io/ethers.js/issues/4183
    const c = ETH_USD_FEED_PROTOTYPE.connect(provider).attach(
      priceOracleInfo?.nativeTokenPrice?.ethUSDOracleAddress ||
        "eth-usd.data.eth",
    ) as Contract;
    const priceData = await c.latestRoundData({ blockTag });
    return priceData;
  };

export const useETHUSDOracle = (
  provider: JsonRpcApiProvider,
  blockTag: BlockTag | undefined,
): { price: bigint | undefined; decimals: bigint } => {
  const { config } = useContext(RuntimeContext);
  const priceOracleInfo =
    config.priceOracleInfo ??
    defaultPriceOracleInfo.get(provider._network.chainId);
  const fetcher = ethUSDFetcher(provider, priceOracleInfo);
  const { data, error } = useSWRImmutable(ethUSDFetcherKey(blockTag), fetcher);
  const decimals = BigInt(
    priceOracleInfo?.nativeTokenPrice?.ethUSDOracleDecimals ?? 8,
  );
  if (error) {
    return { price: undefined, decimals };
  }
  const price = data !== undefined ? BigInt(data.answer) : undefined;
  return { price, decimals };
};

/**
 * Converts a certain amount of ETH to fiat using an oracle
 */
export const useFiatValue = (
  ethAmount: bigint,
  blockTag: BlockTag | undefined,
) => {
  const { provider } = useContext(RuntimeContext);
  const { price: ethPrice, decimals: ethPriceDecimals } = useETHUSDOracle(
    provider,
    blockTag,
  );

  if (ethAmount === 0n || ethPrice === undefined) {
    return undefined;
  }

  return FixedNumber.fromValue(
    (ethAmount * ethPrice) / 10n ** ethPriceDecimals,
    18,
  );
};

export const formatFiatValue = (
  fiat: FixedNumber | undefined,
  decimals = 2,
): string | undefined => {
  if (!fiat) {
    return undefined;
  }

  let value = commify(fiat.round(decimals).toString());

  // little hack: commify removes trailing decimal zeros
  const parts = value.split(".");
  if (parts.length == 2) {
    value = value + "0".repeat(decimals - parts[1].length);
  }

  return value;
};

export const useETHUSDRawOracle = (
  provider: JsonRpcApiProvider,
  blockTag: BlockTag | undefined,
): any | undefined => {
  const { config } = useContext(RuntimeContext);
  const fetcher = ethUSDFetcher(provider, config.priceOracleInfo);
  const { data, error } = useSWRImmutable(ethUSDFetcherKey(blockTag), fetcher);
  if (error) {
    return undefined;
  }
  return data;
};

const fastGasFetcherKey = (blockTag: BlockTag | undefined) => {
  if (blockTag === undefined) {
    return null;
  }
  return ["gasgwei", blockTag];
};

const FAST_GAS_FEED_PROTOTYPE = new Contract(
  ZeroAddress,
  AggregatorV3Interface,
);

const fastGasFetcher =
  (
    provider: JsonRpcApiProvider,
  ): Fetcher<any | undefined, ["gasgwei", BlockTag | undefined]> =>
  async ([_, blockTag]) => {
    if (provider._network.chainId !== 1n) {
      return undefined;
    }
    // TODO: Remove "as Contract" workaround for https://github.com/ethers-io/ethers.js/issues/4183
    const c = FAST_GAS_FEED_PROTOTYPE.connect(provider).attach(
      "fast-gas-gwei.data.eth",
    ) as Contract;
    const priceData = await c.latestRoundData({ blockTag });
    return priceData;
  };

export const useFastGasRawOracle = (
  provider: JsonRpcApiProvider,
  blockTag: BlockTag | undefined,
): any | undefined => {
  const fetcher = fastGasFetcher(provider);
  const { data, error } = useSWRImmutable(fastGasFetcherKey(blockTag), fetcher);
  if (error) {
    return undefined;
  }
  return data;
};



================================================
FILE: src/useProvider.ts
================================================
import { JsonRpcApiProvider, JsonRpcProvider, WebSocketProvider } from "ethers";
import { ProbeError } from "./ProbeError";
import { MIN_API_LEVEL } from "./params";
import { ConnectionStatus } from "./types";

export const DEFAULT_ERIGON_URL = "http://127.0.0.1:8545";

export const createAndProbeProvider = async (
  erigonURL?: string,
): Promise<JsonRpcApiProvider> => {
  if (erigonURL !== undefined) {
    if (erigonURL === "") {
      console.info(`Using default erigon URL: ${DEFAULT_ERIGON_URL}`);
      erigonURL = DEFAULT_ERIGON_URL;
    } else {
      console.log(`Using configured erigon URL: ${erigonURL}`);
    }
  }

  if (erigonURL === undefined) {
    throw new ProbeError(ConnectionStatus.NOT_ETH_NODE, "");
  }

  let provider: JsonRpcApiProvider;
  if (erigonURL?.startsWith("ws://") || erigonURL?.startsWith("wss://")) {
    provider = new WebSocketProvider(erigonURL, undefined, {
      staticNetwork: true,
    });
  } else {
    // Batching takes place by default
    provider = new JsonRpcProvider(erigonURL, undefined, {
      staticNetwork: true,
    });
  }

  // Check if it is at least a regular ETH node
  const probeBlockNumber = provider.getBlockNumber();
  const probeHeader1 = provider.send("erigon_getHeaderByNumber", [1]);
  const probeOtsAPI = provider.send("ots_getApiLevel", []).then((level) => {
    if (level < MIN_API_LEVEL) {
      throw new ProbeError(ConnectionStatus.NOT_OTTERSCAN_PATCHED, erigonURL);
    }
  });

  try {
    await Promise.all([probeBlockNumber, probeHeader1, probeOtsAPI]);
    return provider;
  } catch (err) {
    // If any was rejected, then check them sequencially in order to
    // narrow the error cause, but we need to await them individually
    // because we don't know if all of them have been finished

    try {
      await probeBlockNumber;
    } catch (err) {
      console.log(err);
      throw new ProbeError(ConnectionStatus.NOT_ETH_NODE, erigonURL);
    }

    // Check if it is an Erigon node by probing a lightweight method
    try {
      // Get header for block 1
      await probeHeader1;
    } catch (err) {
      console.log(err);
      throw new ProbeError(ConnectionStatus.NOT_ERIGON, erigonURL);
    }

    // Check if it has Otterscan patches by probing a lightweight method
    try {
      await probeOtsAPI;
    } catch (err) {
      console.log(err);
      throw new ProbeError(ConnectionStatus.NOT_OTTERSCAN_PATCHED, erigonURL);
    }

    throw new Error("Must not happen", { cause: err });
  }
};



================================================
FILE: src/useQuirks.ts
================================================
import { useQuery } from "@tanstack/react-query";
import { JsonRpcApiProvider } from "ethers";

export type Quirks = {
  // Zilliqa 1 has so many odd quirks that we just have to declare it ..
  isZilliqa1: boolean;
  version?: string;
  commit?: string;
};

type ZilliqaVersion = {
  Commit: string;
  Version: string;
};

export const useQuirks = (provider: JsonRpcApiProvider): Quirks => {
  const { data: version } = useQuery(getVersionQuery(provider));
  const isZilliqa1 = version?.Version.match(/^v9.[0-9]+/);
  return {
    isZilliqa1: !!isZilliqa1,
    version: version?.Version,
    commit: version?.Commit,
  };
};

export const getVersionQuery = (provider: JsonRpcApiProvider) => ({
  queryKey: ["GetVersion"],
  queryFn: () => {
    return provider.send("GetVersion", []);
  },
});



================================================
FILE: src/useResolvedAddresses.ts
================================================
import { EnsPlugin, JsonRpcApiProvider, getAddress, isAddress } from "ethers";
import { useContext, useEffect, useState } from "react";
import { Fetcher } from "swr";
import useSWRImmutable from "swr/immutable";
import { getResolver } from "./api/address-resolver";
import { SelectedResolvedName } from "./api/address-resolver/CompositeAddressResolver";
import { ChecksummedAddress } from "./types";
import { RuntimeContext } from "./useRuntime";

export const useAddressOrENS = (
  addressOrName: string,
  urlFixer: (address: ChecksummedAddress) => void,
): [
  ChecksummedAddress | undefined,
  boolean | undefined,
  boolean | undefined,
] => {
  const { provider } = useContext(RuntimeContext);
  const [checksummedAddress, setChecksummedAddress] = useState<
    ChecksummedAddress | undefined
  >(isAddress(addressOrName) ? addressOrName : undefined);
  const [isENS, setENS] = useState<boolean>();
  const [error, setError] = useState<boolean>();

  // If it looks like it is an ENS name, try to resolve it
  useEffect(() => {
    // TODO: handle and offer fallback to bad checksummed addresses
    if (isAddress(addressOrName)) {
      // Normalize to checksummed address
      const _checksummedAddress = getAddress(addressOrName);
      if (_checksummedAddress !== addressOrName) {
        // Request came with a non-checksummed address; fix the URL
        urlFixer(_checksummedAddress);
        return;
      }

      setENS(false);
      setError(false);
      setChecksummedAddress(_checksummedAddress);
      return;
    }

    if (
      (
        provider._network.getPlugin(
          "org.ethers.plugins.network.Ens",
        ) as EnsPlugin | null
      )?.address
    ) {
      const resolveName = async () => {
        const resolvedAddress = await provider.resolveName(addressOrName);
        if (resolvedAddress !== null) {
          setENS(true);
          setError(false);
          setChecksummedAddress(resolvedAddress);
        } else {
          setENS(false);
          setError(true);
          setChecksummedAddress(undefined);
        }
      };
    } else {
      // Would it be an address if we lowercased it and removed anything other than the leading 0x and the hex chars?
      try {
        console.log(`trying with ${addressOrName}`);
        // typescript thinks that addressOrName is never here, but it isn't ..
        const _unsummedAddress = getAddress(
          (addressOrName as string).toLowerCase(),
        );
        if (isAddress(_unsummedAddress)) {
          setENS(false);
          setError(false);
          setChecksummedAddress(_unsummedAddress);
          console.log(
            `_unsummed = ${_unsummedAddress} is ${isAddress(_unsummedAddress)}`,
          );
        } else {
          setENS(false);
          setError(true);
          setChecksummedAddress(undefined);
        }
      } catch (e) {
        setENS(false);
        setError(true);
        setChecksummedAddress(undefined);
      }
    }
  }, [provider, addressOrName, urlFixer]);

  return [checksummedAddress, isENS, error];
};

export const useResolvedAddress = (
  provider: JsonRpcApiProvider,
  address: ChecksummedAddress,
): SelectedResolvedName<any> | undefined => {
  const fetcher: Fetcher<
    SelectedResolvedName<any> | undefined,
    string
  > = async (key) => {
    const resolver = getResolver(provider._network.chainId);
    return resolver.resolveAddress(provider, key);
  };

  const { data, error } = useSWRImmutable(address, fetcher);
  if (error) {
    return undefined;
  }
  return data;
};



================================================
FILE: src/useRuntime.ts
================================================
import { Zilliqa } from "@zilliqa-js/zilliqa";
import { JsonRpcApiProvider, JsonRpcProvider, Network } from "ethers";
import { createContext } from "react";
import { OtterscanConfig } from "./useConfig";
import { createAndProbeProvider } from "./useProvider";
import { createZilliqa } from "./useZilliqa";

/**
 * A runtime comprises a OtterscanConfig read from somewhere, +
 * ETH provider + status object built from the config.
 */
export type OtterscanRuntime = {
  /**
   * Config object; it is guaranteed a config has already been loaded
   * by the time the runtime object is constructed.
   */
  config: OtterscanConfig;

  /**
   * ETH provider; notice that it doesn't mean that there can't be network
   * errors, remote node shutting down, etc., situations which can make
   * this object unusable in the future and the caller should do proper
   * error handling.
   *
   * The presence of this field merely means that at the time this object
   * was instantiated, an ETH provider was built on top of the given
   * configuration, and some basic testing/probing might have been made
   * in order to fail fast obvious configuration errors.
   */
  provider: JsonRpcApiProvider;

  /**
   * Zilliqa object; may be undefined if not ready because of config fetching,
   * probing occurring, etc.
   */
  zilliqa?: Zilliqa;
};

/**
 * Create an OtterscanRuntime based on a previously loaded configuration.
 *
 * If the config specifies a hardcoded chain ID, just create the runtime
 * object and corresponding ethers provider.
 *
 * Otherwise, does the probing process in order to validate the connection
 * is correctly configured and reads the chain ID from the node.
 */
export const createRuntime = async (
  config: Promise<OtterscanConfig>,
): Promise<OtterscanRuntime> => {
  const effectiveConfig = await config;

  // Hardcoded config
  if (effectiveConfig.experimentalFixedChainId !== undefined) {
    const network = Network.from(effectiveConfig.experimentalFixedChainId);
    return {
      config: effectiveConfig,
      provider: new JsonRpcProvider(effectiveConfig.erigonURL, network, {
        staticNetwork: network,
      }),
      zilliqa: createZilliqa(effectiveConfig.erigonURL!),
    };
  }

  const zilliqa = createZilliqa(effectiveConfig?.erigonURL!)!;
  const provider = await createAndProbeProvider(effectiveConfig.erigonURL);
  return {
    config: effectiveConfig,
    provider,
    zilliqa,
  };
};

/**
 * App-level context holding the runtime data. Use it only once.
 */
export const RuntimeContext = createContext<OtterscanRuntime>(null!);



================================================
FILE: src/useSelectedTransaction.ts
================================================
import { createContext, useContext } from "react";
import { TransactionData } from "./types";

export const SelectedTransactionContext = createContext<
  TransactionData | null | undefined
>(undefined);

export const useSelectedTransaction = () =>
  useContext(SelectedTransactionContext);



================================================
FILE: src/useTicker.ts
================================================
import { createContext, useContext, useEffect, useState } from "react";

export const useTicker = (interval: number) => {
  const [now, setNow] = useState<Date>(new Date());

  useEffect(() => {
    const timer = setInterval(() => {
      setNow(new Date());
    }, interval);
    return () => {
      clearInterval(timer);
    };
  }, []);

  return now;
};

export const FastTickerContext = createContext<Date>(undefined!);

export const SlowTickerContext = createContext<Date>(undefined!);

export const useCurrentTimeFastRefresh = () => {
  return useContext(FastTickerContext);
};

export const useCurrentTimeSlowRefresh = () => {
  return useContext(SlowTickerContext);
};



================================================
FILE: src/useTitle.ts
================================================
import { BlockTag, isHexString } from "ethers";
import { useContext } from "react";
import { RuntimeContext } from "./useRuntime";
import { commify } from "./utils/utils";

/**
 * Set the page title.
 */
export const usePageTitle = (title: string | undefined) => {
  const { config } = useContext(RuntimeContext);
  if (title === undefined) {
    return;
  }
  const siteName = config.branding?.siteName || "Otterscan";
  const networkTitle = config.branding?.networkTitle
    ? `| ${config.branding?.networkTitle} `
    : "";
  document.title = `${title} ${networkTitle}| ${siteName}`;
};

/**
 * Title for main block page.
 */
export const useBlockPageTitle = (blockNumber: BlockTag) => {
  let blockStr = blockNumber;
  if (!isHexString(blockNumber)) {
    blockStr = `#${commify(blockNumber)}`;
  }
  usePageTitle(`Block ${blockStr}`);
};

/**
 * Page title for 1 page of transactions results for a block.
 */
export const useBlockTransactionsPageTitle = (
  blockNumber: number,
  pageNumber: number,
  pageCount: number | undefined,
) => {
  usePageTitle(
    blockNumber === undefined
      ? undefined
      : `Block #${commify(blockNumber)} Txns | Page ${pageNumber}${
          pageCount === undefined ? "" : "/" + pageCount
        }`,
  );
};



================================================
FILE: src/useTopic0.ts
================================================
import { useContext } from "react";
import { Fetcher } from "swr";
import useSWRImmutable from "swr/immutable";
import { topic0URL } from "./url";
import { RuntimeContext } from "./useRuntime";

export type Topic0Entry = {
  signatures: string[] | undefined;
};

const topic0Fetcher: Fetcher<Topic0Entry | null | undefined, string> = async (
  signatureURL,
) => {
  try {
    const res = await fetch(signatureURL);
    if (!res.ok) {
      console.error(`Signature does not exist in topic0 DB: ${signatureURL}`);
      return null;
    }

    // Get only the first occurrence, for now ignore alternative param names
    const sig = await res.text();
    const sigs = sig.split(";");
    const entry: Topic0Entry = {
      signatures: sigs,
    };
    return entry;
  } catch (err) {
    console.error(`Couldn't fetch signature URL ${signatureURL}`, err);
    return null;
  }
};

/**
 * Extract topic0 DB info
 *
 * @param rawTopic0 an hex string containing the keccak256 of event signature
 */
export const useTopic0 = (
  rawTopic0: string,
): Topic0Entry | null | undefined => {
  if (rawTopic0.length !== 66 || !rawTopic0.startsWith("0x")) {
    throw new Error(
      `rawTopic0 must contain a 32 bytes hex event signature starting with 0x; received value: "${rawTopic0}"`,
    );
  }

  const runtime = useContext(RuntimeContext);
  const assetsURLPrefix = runtime.config.assetsURLPrefix;

  const topic0 = rawTopic0.slice(2);
  const signatureURL = () =>
    assetsURLPrefix === undefined ? null : topic0URL(assetsURLPrefix, topic0);
  const { data, error } = useSWRImmutable(signatureURL, topic0Fetcher);
  if (error) {
    return null;
  }
  return data;
};



================================================
FILE: src/useZilliqa.ts
================================================
import { useQuery } from "@tanstack/react-query";
import { Zilliqa } from "@zilliqa-js/zilliqa";
import { JsonRpcApiProvider, toUtf8String } from "ethers";
import { useMemo } from "react";
import { getCodeQuery } from "./useErigonHooks";

export const createZilliqa = (erigonURL: string): Zilliqa => {
  return new Zilliqa(erigonURL);
};

export const useIsScillaCode = (
  provider: JsonRpcApiProvider,
  checksummedAddress?: string,
) => {
  const { data: code } = useQuery(
    getCodeQuery(provider, checksummedAddress, "latest"),
  );
  const scillaCode = useMemo(() => {
    try {
      if (code) {
        let s = toUtf8String(code);
        if (s.startsWith("scilla_version")) {
          return s;
        }
      }
    } catch (err) {
      // Silently ignore on purpose
      return undefined;
    }
  }, [code]);
  return scillaCode;
};



================================================
FILE: src/useZilliqaHooks.ts
================================================
// TODO: Once devex is completely depricated we can alter the zilliqa APIs so
// values are returned in a format that is easier to handle in Otterscan such
// as Timestamp
// TODO: Convert to react-query.

import {
  BlockchainInfo,
  DsBlockObj,
} from "@zilliqa-js/core/dist/types/src/types";
import { Zilliqa } from "@zilliqa-js/zilliqa";
import { Fetcher } from "swr";
import useSWRImmutable from "swr/immutable";
import useSWRInfinite from "swr/infinite";

export type InitValue = {
  vname: string;
  type: string;
  value: any;
};

export type ContractInitData = Array<InitValue>;

export type ContractState = {
  [key: string]: object;
};

const dsBlockDataFetcher: Fetcher<
  DsBlockObj | null,
  [Zilliqa, number]
> = async ([zilliqa, blockNum]) => {
  const response = await zilliqa.blockchain.getDSBlock(blockNum);
  if (response.error !== undefined) throw new Error(response.error.message);
  if (response.result.header.BlockNum !== blockNum.toString())
    throw new Error("Invalid DS Block Number");
  return response.result as DsBlockObj;
};

export const useDSBlockData = (
  zilliqa: Zilliqa | undefined,
  blockNumberOrHash: string | undefined,
): { data: DsBlockObj | null | undefined; isLoading: boolean } => {
  const { data, error, isLoading } = useSWRImmutable(
    zilliqa !== undefined && blockNumberOrHash !== undefined
      ? [zilliqa, blockNumberOrHash]
      : null,
    dsBlockDataFetcher,
    { keepPreviousData: true },
  );
  if (error) {
    return { data: undefined, isLoading: false };
  }
  return { data, isLoading };
};

export const useDSBlocksData = (
  zilliqa: Zilliqa | undefined,
  blockNumber: number | undefined,
  pageNumber: number,
  pageSize: number,
): { data: (DsBlockObj | null)[] | undefined; isLoading: boolean } => {
  const startBlockNum: number | undefined = blockNumber
    ? blockNumber - pageSize * pageNumber
    : undefined;

  // This function is used by SWR to get the key which we pass to the fetcher function
  // It also searches the cache for the presence of this key and if found returns the
  // cached value. The pageSize differenciates the cache between components so that different components
  // do not display incorrect number of displays
  const getKey = (pageIndex: number): [Zilliqa, number, number] | null => {
    if (
      zilliqa == undefined ||
      startBlockNum == undefined ||
      startBlockNum - pageIndex < 0
    )
      return null;

    return [zilliqa, startBlockNum - pageIndex, pageSize];
  };

  // Calls the fetcher to fetch the most recent pageNumber of blocks in parallel
  const { data, error, isLoading, isValidating } = useSWRInfinite(
    getKey,
    dsBlockDataFetcher,
    {
      keepPreviousData: true,
      revalidateFirstPage: false,
      initialSize: pageSize,
      parallel: true,
    },
  );
  if (error) {
    return { data: undefined, isLoading: false };
  }
  return { data, isLoading: isLoading || isValidating };
};

export const blockchainInfoFetcher: Fetcher<BlockchainInfo, Zilliqa> = async (
  zilliqa: Zilliqa,
) => {
  const response = await zilliqa.blockchain.getBlockChainInfo();
  if (response.error !== undefined) throw new Error(response.error.message);
  return response.result as BlockchainInfo;
};

export const useBlockChainInfo = (
  zilliqa: Zilliqa | undefined,
): { data: BlockchainInfo | undefined; isLoading: boolean } => {
  const { data, error, isLoading } = useSWRImmutable(
    zilliqa !== undefined ? zilliqa : null,
    blockchainInfoFetcher,
    { keepPreviousData: true },
  );
  if (error) {
    return { data: undefined, isLoading: false };
  }
  return { data, isLoading };
};

export const smartContractInitFetcher: Fetcher<
  ContractInitData,
  [Zilliqa, string, string]
> = async ([zilliqa, methodName, address]) => {
  const contract = zilliqa.contracts.at(address);
  const initParams = await contract.getInit();
  return initParams as ContractInitData;
};

export const useSmartContractInit = (
  zilliqa: Zilliqa | undefined,
  address: string,
): { data: ContractInitData | undefined; isLoading: boolean } => {
  const { data, error, isLoading } = useSWRImmutable(
    zilliqa !== undefined ? [zilliqa, "useSmartContractInit", address] : null,
    smartContractInitFetcher,
    { keepPreviousData: true },
  );
  if (error) {
    return { data: undefined, isLoading: false };
  }
  return { data, isLoading };
};

export const smartContractStateFetcher: Fetcher<
  any,
  [Zilliqa, string, string]
> = async ([zilliqa, methodName, address]) => {
  const contract = zilliqa.contracts.at(address);
  const state = await contract.getState();
  return state as any;
};

export const useSmartContractState = (
  zilliqa: Zilliqa | undefined,
  address: string,
  generation: number,
): { data: ContractState | undefined; isLoading: boolean } => {
  const { data, error, isLoading } = useSWRImmutable(
    zilliqa !== undefined
      ? [zilliqa, "useSmartContractState", address, generation]
      : null,
    smartContractStateFetcher,
    { keepPreviousData: true },
  );
  if (error) {
    return { data: undefined, isLoading: false };
  }
  return { data, isLoading };
};



================================================
FILE: src/vite-env.d.ts
================================================
/// <reference types="vite/client" />



================================================
FILE: src/WarningHeader.tsx
================================================
import React, { useContext } from "react";
import { useChainInfo } from "./useChainInfo";
import { RuntimeContext } from "./useRuntime";

const WarningHeader: React.FC = () => {
  const { provider } = useContext(RuntimeContext);
  const { name } = useChainInfo();
  const chainId = provider._network.chainId;
  if (chainId === 1n) {
    return <></>;
  }

  let chainMsg = `ChainID: ${chainId}`;
  if (chainId === 3n) {
    chainMsg = "Ropsten Testnet";
  } else if (chainId === 4n) {
    chainMsg = "Rinkeby Testnet";
  } else if (chainId === 5n) {
    chainMsg = "Görli Testnet";
  } else if (chainId === 10n) {
    chainMsg = "OP Mainnet";
  } else if (chainId === 42n) {
    chainMsg = "Kovan Testnet";
  } else if (chainId === 100n) {
    chainMsg = "Gnosis Chain";
  } else if (chainId === 137n) {
    chainMsg = "Polygon Mainnet";
  } else if (chainId === 10200n) {
    chainMsg = "Chiado Testnet";
  } else if (chainId === 80001n) {
    chainMsg = "Mumbai Testnet";
  } else if (chainId === 80002n) {
    chainMsg = "Amoy Testnet";
  } else if (chainId === 11155111n) {
    chainMsg = "Sepolia Testnet";
  } else if (chainId === 11155420n) {
    chainMsg = "OP Sepolia";
  } else if (chainId === 17000n) {
    chainMsg = "Holesky Testnet";
  } else if (name) {
    chainMsg = name;
  }

  return (
    <div
      className="w-full bg-zq-lightblue px-2 py-1 text-center font-bold text-white"
      data-test="warning-header-network-name"
    >
      You are on {chainMsg}
    </div>
  );
};

export default React.memo(WarningHeader);



================================================
FILE: src/abi/erc20.json
================================================
[
  {
    "constant": true,
    "inputs": [],
    "name": "name",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_spender",
        "type": "address"
      },
      {
        "name": "_value",
        "type": "uint256"
      }
    ],
    "name": "approve",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "totalSupply",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_from",
        "type": "address"
      },
      {
        "name": "_to",
        "type": "address"
      },
      {
        "name": "_value",
        "type": "uint256"
      }
    ],
    "name": "transferFrom",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "decimals",
    "outputs": [
      {
        "name": "",
        "type": "uint8"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_owner",
        "type": "address"
      }
    ],
    "name": "balanceOf",
    "outputs": [
      {
        "name": "balance",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "symbol",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_to",
        "type": "address"
      },
      {
        "name": "_value",
        "type": "uint256"
      }
    ],
    "name": "transfer",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_owner",
        "type": "address"
      },
      {
        "name": "_spender",
        "type": "address"
      }
    ],
    "name": "allowance",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "payable": true,
    "stateMutability": "payable",
    "type": "fallback"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "owner",
        "type": "address"
      },
      {
        "indexed": true,
        "name": "spender",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "value",
        "type": "uint256"
      }
    ],
    "name": "Approval",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "from",
        "type": "address"
      },
      {
        "indexed": true,
        "name": "to",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "value",
        "type": "uint256"
      }
    ],
    "name": "Transfer",
    "type": "event"
  }
]



================================================
FILE: src/abi/erc721metadata.json
================================================
[
  {
    "inputs": [],
    "name": "name",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "symbol",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "tokenId",
        "type": "uint256"
      }
    ],
    "name": "tokenURI",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  }
]



================================================
FILE: src/abi/chainlink/AggregatorV3Interface.json
================================================
[
  {
    "inputs": [],
    "name": "decimals",
    "outputs": [
      {
        "internalType": "uint8",
        "name": "",
        "type": "uint8"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "description",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint80",
        "name": "_roundId",
        "type": "uint80"
      }
    ],
    "name": "getRoundData",
    "outputs": [
      {
        "internalType": "uint80",
        "name": "roundId",
        "type": "uint80"
      },
      {
        "internalType": "int256",
        "name": "answer",
        "type": "int256"
      },
      {
        "internalType": "uint256",
        "name": "startedAt",
        "type": "uint256"
      },
      {
        "internalType": "uint256",
        "name": "updatedAt",
        "type": "uint256"
      },
      {
        "internalType": "uint80",
        "name": "answeredInRound",
        "type": "uint80"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "latestRoundData",
    "outputs": [
      {
        "internalType": "uint80",
        "name": "roundId",
        "type": "uint80"
      },
      {
        "internalType": "int256",
        "name": "answer",
        "type": "int256"
      },
      {
        "internalType": "uint256",
        "name": "startedAt",
        "type": "uint256"
      },
      {
        "internalType": "uint256",
        "name": "updatedAt",
        "type": "uint256"
      },
      {
        "internalType": "uint80",
        "name": "answeredInRound",
        "type": "uint80"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "version",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  }
]



================================================
FILE: src/abi/chainlink/FeedRegistryInterface.json
================================================
[
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "address",
        "name": "asset",
        "type": "address"
      },
      {
        "indexed": true,
        "internalType": "address",
        "name": "denomination",
        "type": "address"
      },
      {
        "indexed": true,
        "internalType": "address",
        "name": "latestAggregator",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "address",
        "name": "previousAggregator",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "uint16",
        "name": "nextPhaseId",
        "type": "uint16"
      },
      {
        "indexed": false,
        "internalType": "address",
        "name": "sender",
        "type": "address"
      }
    ],
    "name": "FeedConfirmed",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "address",
        "name": "asset",
        "type": "address"
      },
      {
        "indexed": true,
        "internalType": "address",
        "name": "denomination",
        "type": "address"
      },
      {
        "indexed": true,
        "internalType": "address",
        "name": "proposedAggregator",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "address",
        "name": "currentAggregator",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "address",
        "name": "sender",
        "type": "address"
      }
    ],
    "name": "FeedProposed",
    "type": "event"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "base",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "quote",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "aggregator",
        "type": "address"
      }
    ],
    "name": "confirmFeed",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "base",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "quote",
        "type": "address"
      }
    ],
    "name": "decimals",
    "outputs": [
      {
        "internalType": "uint8",
        "name": "",
        "type": "uint8"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "base",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "quote",
        "type": "address"
      }
    ],
    "name": "description",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "base",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "quote",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "roundId",
        "type": "uint256"
      }
    ],
    "name": "getAnswer",
    "outputs": [
      {
        "internalType": "int256",
        "name": "answer",
        "type": "int256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "base",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "quote",
        "type": "address"
      }
    ],
    "name": "getCurrentPhaseId",
    "outputs": [
      {
        "internalType": "uint16",
        "name": "currentPhaseId",
        "type": "uint16"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "base",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "quote",
        "type": "address"
      }
    ],
    "name": "getFeed",
    "outputs": [
      {
        "internalType": "contract AggregatorV2V3Interface",
        "name": "aggregator",
        "type": "address"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "base",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "quote",
        "type": "address"
      },
      {
        "internalType": "uint80",
        "name": "roundId",
        "type": "uint80"
      }
    ],
    "name": "getNextRoundId",
    "outputs": [
      {
        "internalType": "uint80",
        "name": "nextRoundId",
        "type": "uint80"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "base",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "quote",
        "type": "address"
      },
      {
        "internalType": "uint16",
        "name": "phaseId",
        "type": "uint16"
      }
    ],
    "name": "getPhase",
    "outputs": [
      {
        "components": [
          {
            "internalType": "uint16",
            "name": "phaseId",
            "type": "uint16"
          },
          {
            "internalType": "uint80",
            "name": "startingAggregatorRoundId",
            "type": "uint80"
          },
          {
            "internalType": "uint80",
            "name": "endingAggregatorRoundId",
            "type": "uint80"
          }
        ],
        "internalType": "struct FeedRegistryInterface.Phase",
        "name": "phase",
        "type": "tuple"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "base",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "quote",
        "type": "address"
      },
      {
        "internalType": "uint16",
        "name": "phaseId",
        "type": "uint16"
      }
    ],
    "name": "getPhaseFeed",
    "outputs": [
      {
        "internalType": "contract AggregatorV2V3Interface",
        "name": "aggregator",
        "type": "address"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "base",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "quote",
        "type": "address"
      },
      {
        "internalType": "uint16",
        "name": "phaseId",
        "type": "uint16"
      }
    ],
    "name": "getPhaseRange",
    "outputs": [
      {
        "internalType": "uint80",
        "name": "startingRoundId",
        "type": "uint80"
      },
      {
        "internalType": "uint80",
        "name": "endingRoundId",
        "type": "uint80"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "base",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "quote",
        "type": "address"
      },
      {
        "internalType": "uint80",
        "name": "roundId",
        "type": "uint80"
      }
    ],
    "name": "getPreviousRoundId",
    "outputs": [
      {
        "internalType": "uint80",
        "name": "previousRoundId",
        "type": "uint80"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "base",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "quote",
        "type": "address"
      }
    ],
    "name": "getProposedFeed",
    "outputs": [
      {
        "internalType": "contract AggregatorV2V3Interface",
        "name": "proposedAggregator",
        "type": "address"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "base",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "quote",
        "type": "address"
      },
      {
        "internalType": "uint80",
        "name": "_roundId",
        "type": "uint80"
      }
    ],
    "name": "getRoundData",
    "outputs": [
      {
        "internalType": "uint80",
        "name": "roundId",
        "type": "uint80"
      },
      {
        "internalType": "int256",
        "name": "answer",
        "type": "int256"
      },
      {
        "internalType": "uint256",
        "name": "startedAt",
        "type": "uint256"
      },
      {
        "internalType": "uint256",
        "name": "updatedAt",
        "type": "uint256"
      },
      {
        "internalType": "uint80",
        "name": "answeredInRound",
        "type": "uint80"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "base",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "quote",
        "type": "address"
      },
      {
        "internalType": "uint80",
        "name": "roundId",
        "type": "uint80"
      }
    ],
    "name": "getRoundFeed",
    "outputs": [
      {
        "internalType": "contract AggregatorV2V3Interface",
        "name": "aggregator",
        "type": "address"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "base",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "quote",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "roundId",
        "type": "uint256"
      }
    ],
    "name": "getTimestamp",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "timestamp",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "aggregator",
        "type": "address"
      }
    ],
    "name": "isFeedEnabled",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "base",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "quote",
        "type": "address"
      }
    ],
    "name": "latestAnswer",
    "outputs": [
      {
        "internalType": "int256",
        "name": "answer",
        "type": "int256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "base",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "quote",
        "type": "address"
      }
    ],
    "name": "latestRound",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "roundId",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "base",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "quote",
        "type": "address"
      }
    ],
    "name": "latestRoundData",
    "outputs": [
      {
        "internalType": "uint80",
        "name": "roundId",
        "type": "uint80"
      },
      {
        "internalType": "int256",
        "name": "answer",
        "type": "int256"
      },
      {
        "internalType": "uint256",
        "name": "startedAt",
        "type": "uint256"
      },
      {
        "internalType": "uint256",
        "name": "updatedAt",
        "type": "uint256"
      },
      {
        "internalType": "uint80",
        "name": "answeredInRound",
        "type": "uint80"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "base",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "quote",
        "type": "address"
      }
    ],
    "name": "latestTimestamp",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "timestamp",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "base",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "quote",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "aggregator",
        "type": "address"
      }
    ],
    "name": "proposeFeed",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "base",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "quote",
        "type": "address"
      },
      {
        "internalType": "uint80",
        "name": "roundId",
        "type": "uint80"
      }
    ],
    "name": "proposedGetRoundData",
    "outputs": [
      {
        "internalType": "uint80",
        "name": "id",
        "type": "uint80"
      },
      {
        "internalType": "int256",
        "name": "answer",
        "type": "int256"
      },
      {
        "internalType": "uint256",
        "name": "startedAt",
        "type": "uint256"
      },
      {
        "internalType": "uint256",
        "name": "updatedAt",
        "type": "uint256"
      },
      {
        "internalType": "uint80",
        "name": "answeredInRound",
        "type": "uint80"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "base",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "quote",
        "type": "address"
      }
    ],
    "name": "proposedLatestRoundData",
    "outputs": [
      {
        "internalType": "uint80",
        "name": "id",
        "type": "uint80"
      },
      {
        "internalType": "int256",
        "name": "answer",
        "type": "int256"
      },
      {
        "internalType": "uint256",
        "name": "startedAt",
        "type": "uint256"
      },
      {
        "internalType": "uint256",
        "name": "updatedAt",
        "type": "uint256"
      },
      {
        "internalType": "uint80",
        "name": "answeredInRound",
        "type": "uint80"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "base",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "quote",
        "type": "address"
      }
    ],
    "name": "version",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  }
]



================================================
FILE: src/abi/optimism/L1Block.json
================================================
[
  {
    "inputs": [],
    "name": "number",
    "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }],
    "stateMutability": "view",
    "type": "function"
  }
]



================================================
FILE: src/api/address-resolver/address-resolver.ts
================================================
import { AbstractProvider } from "ethers";
import React from "react";

export abstract class AddressResolver<T> {
  abstract resolveAddress(
    provider: AbstractProvider,
    address: string,
  ): Promise<T | undefined>;

  abstract resolveToString(resolvedAddress: T | undefined): string | undefined;
  abstract trusted(resolvedAddress: T | undefined): boolean | undefined;
}

export abstract class BasicAddressResolver extends AddressResolver<string> {
  resolveToString(resolvedAddress: string | undefined): string | undefined {
    return resolvedAddress;
  }
}

export type ResolvedAddressRenderer<T> = (
  chainId: bigint,
  address: string,
  resolvedAddress: T,
  linkable: boolean,
  dontOverrideColors: boolean,
) => React.ReactElement;



================================================
FILE: src/api/address-resolver/CompositeAddressResolver.ts
================================================
import { AbstractProvider } from "ethers";
import { AddressResolver } from "./address-resolver";

export type SelectedResolvedName<T> = [AddressResolver<T>, T] | null;

export class CompositeAddressResolver<T = any>
  implements AddressResolver<SelectedResolvedName<T>>
{
  private resolvers: AddressResolver<T>[] = [];

  addResolver(resolver: AddressResolver<T>) {
    this.resolvers.push(resolver);
  }

  async resolveAddress(
    provider: AbstractProvider,
    address: string,
  ): Promise<SelectedResolvedName<T> | undefined> {
    for (const r of this.resolvers) {
      try {
        const resolvedAddress = await r.resolveAddress(provider, address);
        if (resolvedAddress !== undefined) {
          return [r, resolvedAddress];
        }
      } catch (err) {
        console.warn(`Error while trying to resolve addr ${address}`);
        console.warn(err);
      }
    }

    return null;
  }

  resolveToString(
    resolvedAddress: SelectedResolvedName<T> | undefined,
  ): string | undefined {
    if (!resolvedAddress) {
      return undefined;
    }
    return resolvedAddress[0].resolveToString(resolvedAddress[1]);
  }

  trusted(
    resolvedAddress: SelectedResolvedName<T> | undefined,
  ): boolean | undefined {
    if (!resolvedAddress) {
      return undefined;
    }
    return resolvedAddress[0].trusted(resolvedAddress[1]);
  }
}



================================================
FILE: src/api/address-resolver/CustomLabelResolver.ts
================================================
import { JsonRpcApiProvider } from "ethers";
import { BasicAddressResolver } from "./address-resolver";

type AddressMap = Record<string, string | undefined>;

/*
    A singleton class so addresses aren't fetched more than once
*/
export class CustomLabelFetcher {
  private static instance: CustomLabelFetcher;
  private fetchedLabels: Map<string, string> = new Map();
  private localStorageLabels: Map<string, string> = new Map();
  private fetched: boolean = false;
  // List of URLs from which address-label mappings are fetched
  // TODO: Potentially populate from the config file
  private defaultLabelSources: string[] = [];

  private constructor() {}

  public static getInstance(): CustomLabelFetcher {
    if (!CustomLabelFetcher.instance) {
      CustomLabelFetcher.instance = new CustomLabelFetcher();
    }
    return CustomLabelFetcher.instance;
  }

  public async fetchLabels(localOnly: boolean = false) {
    // Fetch labels from label sources
    if (!localOnly) {
      const _this = this;
      async function fetchLabels(url: string) {
        try {
          const response = await fetch(url);
          const data = (await response.json()) as {
            [key: string]: string;
          };
          Object.entries(data).forEach(([key, value]: [string, string]) =>
            _this.fetchedLabels.set(key, value),
          );
        } catch (e) {
          console.error(`Error loading address labels from ${url}:`, e);
        }
      }

      await Promise.all(
        this.defaultLabelSources.map((url: string) => fetchLabels(url)),
      );
    }

    // Load labels from localStorage
    this.localStorageLabels.clear();
    const localStorageAddrsString = localStorage.getItem("customAddressLabels");
    if (typeof localStorageAddrsString === "string") {
      try {
        const localLabels = JSON.parse(localStorageAddrsString) as [
          string,
          string,
        ][];
        for (let addressTag of localLabels) {
          this.localStorageLabels.set(addressTag[0], addressTag[1]);
        }
      } catch (e) {
        console.error(e);
      }
    }

    if (!localOnly) {
      this.fetched = true;
    }
  }

  public async updateLabels(newItem: { [address: string]: string }) {
    // Update our view of the localStorage addresses
    await this.fetchLabels(true);
    Object.entries(newItem).forEach(([key, value]) => {
      if (value === "") {
        this.localStorageLabels.delete(key);
      } else {
        this.localStorageLabels.set(key, value);
      }
    });
    localStorage.setItem(
      "customAddressLabels",
      JSON.stringify([...this.localStorageLabels]),
    );
  }

  public async getItem(key: string): Promise<string | undefined> {
    if (!this.fetched) {
      await this.fetchLabels();
    }
    // localStorage labels have priority
    if (this.localStorageLabels.has(key)) {
      return this.localStorageLabels.get(key);
    } else if (this.fetchedLabels.has(key)) {
      return this.fetchedLabels.get(key);
    } else {
      return undefined;
    }
  }

  public getAllAddresses(): string[] {
    return Array.from(this.localStorageLabels.keys());
  }

  public clearAll() {
    this.localStorageLabels.clear();
    this.localStorageLabels.clear();
  }
}

export class CustomLabelResolver extends BasicAddressResolver {
  async resolveAddress(
    provider: JsonRpcApiProvider,
    address: string,
  ): Promise<string | undefined> {
    const labelFetcher = CustomLabelFetcher.getInstance();
    const label = await labelFetcher.getItem(address);
    return label;
  }

  trusted(resolvedAddress: string | undefined): boolean | undefined {
    return true;
  }
}



================================================
FILE: src/api/address-resolver/ENSAddressResolver.ts
================================================
import { AbstractProvider } from "ethers";
import { BasicAddressResolver } from "./address-resolver";

export class ENSAddressResolver extends BasicAddressResolver {
  async resolveAddress(
    provider: AbstractProvider,
    address: string,
  ): Promise<string | undefined> {
    const name = await provider.lookupAddress(address);
    if (name === null) {
      return undefined;
    }
    return name;
  }

  trusted(resolvedAddress: string | undefined): boolean | undefined {
    return true;
  }
}



================================================
FILE: src/api/address-resolver/ERCTokenResolver.ts
================================================
import { AbstractProvider, Contract, ZeroAddress } from "ethers";
import erc20 from "../../abi/erc20.json";
import { TokenMeta } from "../../types";
import { AddressResolver } from "./address-resolver";

const ERC20_PROTOTYPE = new Contract(ZeroAddress, erc20);

export class ERCTokenResolver implements AddressResolver<TokenMeta> {
  async resolveAddress(
    provider: AbstractProvider,
    address: string,
  ): Promise<TokenMeta | undefined> {
    // TODO: Remove "as Contract" workaround for https://github.com/ethers-io/ethers.js/issues/4183
    const erc20Contract = ERC20_PROTOTYPE.connect(provider).attach(
      address,
    ) as Contract;
    try {
      const name = (await erc20Contract.name()) as string;
      if (!name.trim()) {
        return undefined;
      }

      const [symbol, decimals] = (await Promise.all([
        erc20Contract.symbol(),
        erc20Contract.decimals(),
      ])) as [string, number];

      // Prevent faulty tokens with empty name/symbol
      if (!symbol.trim()) {
        return undefined;
      }

      return {
        name,
        symbol,
        decimals,
      };
    } catch (err) {
      // Ignore on purpose; this indicates the probe failed and the address
      // is not a token
    }
    return undefined;
  }

  resolveToString(resolvedAddress: TokenMeta | undefined): string | undefined {
    if (resolvedAddress === undefined) {
      return undefined;
    }
    return `${resolvedAddress.name} (${resolvedAddress.symbol})`;
  }

  trusted(resolvedAddress: TokenMeta | undefined): boolean | undefined {
    return true;
  }
}



================================================
FILE: src/api/address-resolver/HardcodedAddressResolver.ts
================================================
import { JsonRpcApiProvider } from "ethers";
import { BasicAddressResolver } from "./address-resolver";

type HardcodedAddressMap = Record<string, string | undefined>;

export class HardcodedAddressResolver extends BasicAddressResolver {
  async resolveAddress(
    provider: JsonRpcApiProvider,
    address: string,
  ): Promise<string | undefined> {
    try {
      const addressMap: HardcodedAddressMap = (
        await import(`./hardcoded-addresses/${provider._network.chainId}.json`)
      ).default;

      return addressMap[address];
    } catch (err) {
      // Ignore on purpose
      return undefined;
    }
  }

  trusted(resolvedAddress: string | undefined): boolean | undefined {
    return true;
  }
}



================================================
FILE: src/api/address-resolver/index.ts
================================================
import { ensRenderer } from "../../execution/address/renderer/ENSName";
import { plainStringRenderer } from "../../execution/address/renderer/PlainString";
import { tokenRenderer } from "../../execution/address/renderer/TokenName";
import { uniswapV1PairRenderer } from "../../execution/address/renderer/UniswapV1ExchangeName";
import { uniswapV2PairRenderer } from "../../execution/address/renderer/UniswapV2PairName";
import { uniswapV3PairRenderer } from "../../execution/address/renderer/UniswapV3PoolName";
import {
  CompositeAddressResolver,
  SelectedResolvedName,
} from "./CompositeAddressResolver";
import { CustomLabelResolver } from "./CustomLabelResolver";
import { ENSAddressResolver } from "./ENSAddressResolver";
import { ERCTokenResolver } from "./ERCTokenResolver";
import { HardcodedAddressResolver } from "./HardcodedAddressResolver";
import { UniswapV1Resolver } from "./UniswapV1Resolver";
import { UniswapV2Resolver } from "./UniswapV2Resolver";
import { UniswapV3Resolver } from "./UniswapV3Resolver";
import { AddressResolver, ResolvedAddressRenderer } from "./address-resolver";

export type ResolvedAddresses = Record<string, SelectedResolvedName<any>>;

// Create and configure the main resolver
const ensResolver = new ENSAddressResolver();
const uniswapV1Resolver = new UniswapV1Resolver();
const uniswapV2Resolver = new UniswapV2Resolver();
const uniswapV3Resolver = new UniswapV3Resolver();
const ercTokenResolver = new ERCTokenResolver();
const hardcodedResolver = new HardcodedAddressResolver();
export const customLabelResolver = new CustomLabelResolver();

const _mainnetResolver = new CompositeAddressResolver();
_mainnetResolver.addResolver(customLabelResolver);
_mainnetResolver.addResolver(ensResolver);
_mainnetResolver.addResolver(uniswapV3Resolver);
_mainnetResolver.addResolver(uniswapV2Resolver);
_mainnetResolver.addResolver(uniswapV1Resolver);
_mainnetResolver.addResolver(ercTokenResolver);
_mainnetResolver.addResolver(hardcodedResolver);

const _defaultResolver = new CompositeAddressResolver();
_defaultResolver.addResolver(customLabelResolver);
_defaultResolver.addResolver(ercTokenResolver);
_defaultResolver.addResolver(hardcodedResolver);

const resolvers: Record<string, AddressResolver<SelectedResolvedName<any>>> = {
  "1": _mainnetResolver,
  "0": _defaultResolver,
};

export const getResolver = (
  chainId: bigint,
): AddressResolver<SelectedResolvedName<any>> => {
  const res = resolvers[chainId.toString()];
  if (res === undefined) {
    return resolvers["0"]; // default MAGIC NUMBER
  }
  return res;
};

export const resolverRendererRegistry = new Map<
  AddressResolver<any>,
  ResolvedAddressRenderer<any>
>();
resolverRendererRegistry.set(ensResolver, ensRenderer);
resolverRendererRegistry.set(uniswapV1Resolver, uniswapV1PairRenderer);
resolverRendererRegistry.set(uniswapV2Resolver, uniswapV2PairRenderer);
resolverRendererRegistry.set(uniswapV3Resolver, uniswapV3PairRenderer);
resolverRendererRegistry.set(ercTokenResolver, tokenRenderer);
resolverRendererRegistry.set(hardcodedResolver, plainStringRenderer);
resolverRendererRegistry.set(customLabelResolver, plainStringRenderer);



================================================
FILE: src/api/address-resolver/UniswapV1Resolver.ts
================================================
import { AbstractProvider, Contract } from "ethers";
import { ChecksummedAddress, TokenMeta } from "../../types";
import { ERCTokenResolver } from "./ERCTokenResolver";
import { AddressResolver } from "./address-resolver";

const UNISWAP_V1_FACTORY = "0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95";

const UNISWAP_V1_FACTORY_ABI = [
  "function getToken(address exchange) external view returns (address token)",
];

const NULL_ADDRESS = "0x0000000000000000000000000000000000000000";

const UNISWAP_V1_FACTORY_PROTOTYPE = new Contract(
  UNISWAP_V1_FACTORY,
  UNISWAP_V1_FACTORY_ABI,
);

export type UniswapV1TokenMeta = {
  address: ChecksummedAddress;
} & TokenMeta;

export type UniswapV1PairMeta = {
  exchange: ChecksummedAddress;
  token: UniswapV1TokenMeta;
};

const ercResolver = new ERCTokenResolver();

export class UniswapV1Resolver extends AddressResolver<UniswapV1PairMeta> {
  async resolveAddress(
    provider: AbstractProvider,
    address: string,
  ): Promise<UniswapV1PairMeta | undefined> {
    // TODO: Remove "as Contract" workaround for https://github.com/ethers-io/ethers.js/issues/4183
    const factoryContract = UNISWAP_V1_FACTORY_PROTOTYPE.connect(
      provider,
    ) as Contract;

    try {
      // First, probe the getToken() function; if it responds with an UniswapV1 exchange
      // address, it is a LP
      const token = (await factoryContract.getToken(address)) as string;
      if (token === NULL_ADDRESS) {
        return undefined;
      }

      const metadata = await ercResolver.resolveAddress(provider, token);
      if (metadata === undefined) {
        return undefined;
      }

      return {
        exchange: address,
        token: { address: token, ...metadata },
      };
    } catch (err) {
      // Ignore on purpose; this indicates the probe failed and the address
      // is not a token
    }
    return undefined;
  }

  resolveToString(
    resolvedAddress: UniswapV1PairMeta | undefined,
  ): string | undefined {
    if (resolvedAddress === undefined) {
      return undefined;
    }
    return `Uniswap V1: ${resolvedAddress.token.symbol}`;
  }

  trusted(resolvedAddress: UniswapV1PairMeta | undefined): boolean | undefined {
    return true;
  }
}



================================================
FILE: src/api/address-resolver/UniswapV2Resolver.ts
================================================
import { AbstractProvider, Contract, ZeroAddress } from "ethers";
import { ChecksummedAddress, TokenMeta } from "../../types";
import { ERCTokenResolver } from "./ERCTokenResolver";
import { AddressResolver } from "./address-resolver";

const UNISWAP_V2_FACTORY = "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f";

const UNISWAP_V2_FACTORY_ABI = [
  "function getPair(address tokenA, address tokenB) external view returns (address pair)",
];

const UNISWAP_V2_PAIR_ABI = [
  "function factory() external view returns (address)",
  "function token0() external view returns (address)",
  "function token1() external view returns (address)",
];

const UNISWAP_V2_FACTORY_PROTOTYPE = new Contract(
  UNISWAP_V2_FACTORY,
  UNISWAP_V2_FACTORY_ABI,
);

const UNISWAP_V2_PAIR_PROTOTYPE = new Contract(
  ZeroAddress,
  UNISWAP_V2_PAIR_ABI,
);

export type UniswapV2TokenMeta = {
  address: ChecksummedAddress;
} & TokenMeta;

export type UniswapV2PairMeta = {
  pair: ChecksummedAddress;
  token0: UniswapV2TokenMeta;
  token1: UniswapV2TokenMeta;
};

const ercResolver = new ERCTokenResolver();

export class UniswapV2Resolver extends AddressResolver<UniswapV2PairMeta> {
  async resolveAddress(
    provider: AbstractProvider,
    address: string,
  ): Promise<UniswapV2PairMeta | undefined> {
    // TODO: Remove "as Contract" workaround for https://github.com/ethers-io/ethers.js/issues/4183
    const pairContract = UNISWAP_V2_PAIR_PROTOTYPE.connect(provider).attach(
      address,
    ) as Contract;
    // TODO: Remove "as Contract" workaround for https://github.com/ethers-io/ethers.js/issues/4183
    const factoryContract = UNISWAP_V2_FACTORY_PROTOTYPE.connect(
      provider,
    ) as Contract;

    try {
      // First, probe the factory() function; if it responds with UniswapV2 factory
      // address, it may be a pair
      const factoryAddress = (await pairContract.factory()) as string;
      if (factoryAddress !== UNISWAP_V2_FACTORY) {
        return undefined;
      }

      // Probe the token0/token1
      const [token0, token1] = await Promise.all([
        pairContract.token0() as Promise<string>,
        pairContract.token1() as Promise<string>,
      ]);

      // Probe the factory to ensure it is a legit pair
      const expectedPairAddress = await factoryContract.getPair(token0, token1);
      if (expectedPairAddress !== address) {
        return undefined;
      }

      const [meta0, meta1] = await Promise.all([
        ercResolver.resolveAddress(provider, token0),
        ercResolver.resolveAddress(provider, token1),
      ]);
      if (meta0 === undefined || meta1 === undefined) {
        return undefined;
      }

      return {
        pair: address,
        token0: { address: token0, ...meta0 },
        token1: { address: token1, ...meta1 },
      };
    } catch (err) {
      // Ignore on purpose; this indicates the probe failed and the address
      // is not a token
    }
    return undefined;
  }

  resolveToString(
    resolvedAddress: UniswapV2PairMeta | undefined,
  ): string | undefined {
    if (resolvedAddress === undefined) {
      return undefined;
    }
    return `Uniswap V2 LP: ${resolvedAddress.token0.symbol}/${resolvedAddress.token1.symbol}`;
  }

  trusted(resolvedAddress: UniswapV2PairMeta | undefined): boolean | undefined {
    return true;
  }
}



================================================
FILE: src/api/address-resolver/UniswapV3Resolver.ts
================================================
import { AbstractProvider, Contract, ZeroAddress } from "ethers";
import { ChecksummedAddress, TokenMeta } from "../../types";
import { ERCTokenResolver } from "./ERCTokenResolver";
import { AddressResolver } from "./address-resolver";

const UNISWAP_V3_FACTORY = "0x1F98431c8aD98523631AE4a59f267346ea31F984";

const UNISWAP_V3_FACTORY_ABI = [
  "function getPool(address tokenA, address tokenB, uint24 fee) external view returns (address pool)",
];

const UNISWAP_V3_PAIR_ABI = [
  "function factory() external view returns (address)",
  "function token0() external view returns (address)",
  "function token1() external view returns (address)",
  "function fee() external view returns (uint24)",
];

const UNISWAP_V3_FACTORY_PROTOTYPE = new Contract(
  UNISWAP_V3_FACTORY,
  UNISWAP_V3_FACTORY_ABI,
);

const UNISWAP_V3_PAIR_PROTOTYPE = new Contract(
  ZeroAddress,
  UNISWAP_V3_PAIR_ABI,
);

export type UniswapV3TokenMeta = {
  address: ChecksummedAddress;
} & TokenMeta;

export type UniswapV3PairMeta = {
  pair: ChecksummedAddress;
  token0: UniswapV3TokenMeta;
  token1: UniswapV3TokenMeta;
  fee: bigint;
};

const ercResolver = new ERCTokenResolver();

export class UniswapV3Resolver implements AddressResolver<UniswapV3PairMeta> {
  async resolveAddress(
    provider: AbstractProvider,
    address: string,
  ): Promise<UniswapV3PairMeta | undefined> {
    // TODO: Remove "as Contract" workaround for https://github.com/ethers-io/ethers.js/issues/4183
    const poolContract = UNISWAP_V3_PAIR_PROTOTYPE.connect(provider).attach(
      address,
    ) as Contract;
    // TODO: Remove "as Contract" workaround for https://github.com/ethers-io/ethers.js/issues/4183
    const factoryContract = UNISWAP_V3_FACTORY_PROTOTYPE.connect(
      provider,
    ) as Contract;

    try {
      // First, probe the factory() function; if it responds with UniswapV2 factory
      // address, it may be a pair
      const factoryAddress = (await poolContract.factory()) as string;
      if (factoryAddress !== UNISWAP_V3_FACTORY) {
        return undefined;
      }

      // Probe the token0/token1/fee
      const [token0, token1, fee] = await Promise.all([
        poolContract.token0() as Promise<string>,
        poolContract.token1() as Promise<string>,
        poolContract.fee() as Promise<bigint>,
      ]);

      // Probe the factory to ensure it is a legit pair
      const expectedPoolAddress = await factoryContract.getPool(
        token0,
        token1,
        fee,
      );
      if (expectedPoolAddress !== address) {
        return undefined;
      }

      const [meta0, meta1] = await Promise.all([
        ercResolver.resolveAddress(provider, token0),
        ercResolver.resolveAddress(provider, token1),
      ]);
      if (meta0 === undefined || meta1 === undefined) {
        return undefined;
      }

      return {
        pair: address,
        token0: { address: token0, ...meta0 },
        token1: { address: token1, ...meta1 },
        fee,
      };
    } catch (err) {
      // Ignore on purpose; this indicates the probe failed and the address
      // is not a token
    }
    return undefined;
  }

  resolveToString(
    resolvedAddress: UniswapV3PairMeta | undefined,
  ): string | undefined {
    if (resolvedAddress === undefined) {
      return undefined;
    }
    return `Uniswap V3 LP: ${resolvedAddress.token0.symbol}/${resolvedAddress.token1.symbol}/${Number(resolvedAddress.fee) / 10000}%`;
  }

  trusted(resolvedAddress: UniswapV3PairMeta | undefined): boolean | undefined {
    return true;
  }
}



================================================
FILE: src/api/address-resolver/hardcoded-addresses/1.json
================================================
{
  "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e": "ENS: Registry",
  "0xFaC7BEA255a6990f749363002136aF6556b31e04": "ENS: Old .eth Registrar",
  "0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85": "ENS: .eth Registrar",
  "0x6109DD117AA5486605FC85e040ab00163a75c662": "ENS: Migration Contract",
  "0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41": "ENS: Public Resolver",
  "0x00000000219ab540356cBB839Cbe05303d7705Fa": "ETH2: Deposit Contract",
  "0x7d655c57f71464B6f83811C55D84009Cd9f5221C": "Gitcoin: Bulk Checkout",
  "0xf2354570bE2fB420832Fb7Ff6ff0AE0dF80CF2c6": "Gitcoin: GR8 Matching Payout",
  "0x3342E3737732D879743f2682A3953a730ae4F47C": "Gitcoin: GR9 Matching Payout",
  "0x3ebAFfe01513164e638480404c651E885cCA0AA4": "Gitcoin: GR10 Matching Payout",
  "0x0EbD2E2130b73107d0C45fF2E16c93E7e2e10e3a": "Gitcoin: GR11 Matching Payout",
  "0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95": "Uniswap V1: Factory",
  "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f": "Uniswap V2: Factory",
  "0xf164fC0Ec4E93095b804a4795bBe1e041497b92a": "Uniswap V2: Router 1",
  "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D": "Uniswap V2: Router 2",
  "0x1F98431c8aD98523631AE4a59f267346ea31F984": "Uniswap V3: Factory",
  "0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696": "Uniswap V3: Multicall2",
  "0xB753548F6E010e7e680BA186F9Ca1BdAB2E90cf2": "Uniswap V3: ProxyAdmin",
  "0xbfd8137f7d1516D3ea5cA83523914859ec47F573": "Uniswap V3: TickLens",
  "0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6": "Uniswap V3: Quoter",
  "0xE592427A0AEce92De3Edee1F18E0157C05861564": "Uniswap V3: Router",
  "0x42B24A95702b9986e82d421cC3568932790A48Ec": "Uniswap V3: NFT Descriptor",
  "0x91ae842A5Ffd8d12023116943e72A606179294f3": "Uniswap V3: NFT Position Descriptor",
  "0xEe6A57eC80ea46401049E92587E52f5Ec1c24785": "Uniswap V3: Transparent Upgradeable Proxy",
  "0xC36442b4a4522E871399CD717aBDD847Ab11FE88": "Uniswap V3: Nonfungible Position Manager",
  "0xA5644E29708357803b5A882D272c41cC0dF92B34": "Uniswap V3: V3 Migrator",
  "0x722122dF12D4e14e13Ac3b6895a86e84145b6967": "Tornado Cash: Proxy",
  "0x12D66f87A04A9E220743712cE6d9bB1B5616B8Fc": "Tornado Cash: 0.1 ETH",
  "0x47CE0C6eD5B0Ce3d3A51fdb1C52DC66a7c3c2936": "Tornado Cash: 1 ETH",
  "0x910Cbd523D972eb0a6f4cAe4618aD62622b39DbF": "Tornado Cash: 10 ETH",
  "0xA160cdAB225685dA1d56aa342Ad8841c3b53f291": "Tornado Cash: 100 ETH",
  "0xD4B88Df4D29F5CedD6857912842cff3b20C8Cfa3": "Tornado Cash: 100 DAI",
  "0xFD8610d20aA15b7B2E3Be39B396a1bC3516c7144": "Tornado Cash: 1K DAI",
  "0x07687e702b410Fa43f4cB4Af7FA097918ffD2730": "Tornado Cash: 10K DAI",
  "0x23773E65ed146A459791799d01336DB287f25334": "Tornado Cash: 100K DAI",
  "0x22aaA7720ddd5388A3c0A3333430953C68f1849b": "Tornado Cash: 5K cDAI",
  "0x03893a7c7463AE47D46bc7f091665f1893656003": "Tornado Cash: 50K cDAI",
  "0x2717c5e28cf931547B621a5dddb772Ab6A35B701": "Tornado Cash: 500K cDAI",
  "0xD21be7248e0197Ee08E0c20D4a96DEBdaC3D20Af": "Tornado Cash: 5M cDAI",
  "0xd96f2B1c14Db8458374d9Aca76E26c3D18364307": "Tornado Cash: 100 USDC",
  "0x4736dCf1b7A3d580672CcE6E7c65cd5cc9cFBa9D": "Tornado Cash: 1K USDC",
  "0x169AD27A470D064DEDE56a2D3ff727986b15D52B": "Tornado Cash: 100 USDT",
  "0x0836222F2B2B24A3F36f98668Ed8F0B38D1a872f": "Tornado Cash: 1K USDT",
  "0x178169B423a011fff22B9e3F3abeA13414dDD0F1": "Tornado Cash: 0.1 WBTC",
  "0x610B717796ad172B316836AC95a2ffad065CeaB4": "Tornado Cash: 1 WBTC",
  "0xbB93e510BbCD0B7beb5A853875f9eC60275CF498": "Tornado Cash: 10 WBTC",
  "0x94A1B5CdB22c43faab4AbEb5c74999895464Ddaf": "Tornado Cash: Old Proxy",
  "0xCa0840578f57fE71599D29375e16783424023357": "Tornado Cash: Nova",
  "0x56Eddb7aa87536c09CCc2793473599fD21A8b17F": "Binance: 0x56Ed",
  "0x9696f59E4d72E237BE84fFD425DCaD154Bf96976": "Binance: 0x9696",
  "0x229047fed2591dbec1eF1118d64F7aF3dB9EB290": "Optimism: System Config",
  "0xFF00000000000000000000000000000000000010": "Optimism: Batch Inbox",
  "0x73a79Fab69143498Ed3712e519A88a918e1f4072": "Base: System Config",
  "0xFf00000000000000000000000000000000008453": "Base: Batch Inbox",
  "0xA3cAB0126d5F504B071b81a3e8A2BBBF17930d86": "Zora: System Config",
  "0x6F54Ca6F6EdE96662024Ffd61BFd18f3f4e34DFf": "Zora: Batch Inbox",
  "0x0e4C4CDd01ceCB01070E9Fdfe7600871e4ae996e": "Lyra: System Config",
  "0x5f7f7f6DB967F0ef10BdA0678964DBA185d16c50": "Lyra: Batch Inbox",
  "0x5e6432F18Bc5d497B1Ab2288a025Fbf9D69E2221": "Mode: System Config",
  "0x24E59d9d3Bd73ccC28Dc54062AF7EF7bFF58Bd67": "Mode: Batch Inbox",
  "0x886B187C3D293B1449A3A0F23Ca9e2269E0f2664": "Orderly: System Config",
  "0x08aA34cC843CeEBcC88A627F18430294aA9780be": "Orderly: Batch Inbox",
  "0x7Df716EAD1d83a2BF35B416B7BC84bd0700357C9": "PGN: System Config",
  "0xC1B90E1e459aBBDcEc4DCF90dA45ba077d83BFc5": "PGN: Batch Inbox"
}



================================================
FILE: src/api/address-resolver/hardcoded-addresses/10.json
================================================
{
  "0xDeaDDEaDDeAdDeAdDEAdDEaddeAddEAdDEAd0001": "L1: Attributes Depositor",
  "0x4200000000000000000000000000000000000015": "L1: Attributes Predeploy"
}



================================================
FILE: src/api/address-resolver/hardcoded-addresses/11155111.json
================================================
{
  "0xcFe95817aC44C3f8CE75F1EE6EC1431F586AB5A3": "Faucet: FaucETH",
  "0xf272670eb55e895584501d564AfEB048bEd26194": "Base: System Config",
  "0xfF00000000000000000000000000000000084532": "Base: Batch Inbox",
  "0x034edD2A225f7f429A63E0f1D2084B9E0A93b538": "Optimism: System Config",
  "0xff00000000000000000000000000000011155420": "Optimism: Batch Inbox",
  "0x4BCCC52151f0ad7C62D45Ce0aA77d9d8ffCE534e": "PGN: System Config",
  "0x454A2A86132C937AD4eFc8721f1b85418f92cbCe": "PGN: Batch Inbox",
  "0xB54c7BFC223058773CF9b739cC5bd4095184Fb08": "Zora: System Config",
  "0xCd734290E4bd0200dAC631c7D4b9E8a33234e91f": "Zora: Batch Inbox"
}



================================================
FILE: src/api/address-resolver/hardcoded-addresses/11155420.json
================================================
{
  "0xDeaDDEaDDeAdDeAdDEAdDEaddeAddEAdDEAd0001": "L1: Attributes Depositor",
  "0x4200000000000000000000000000000000000015": "L1: Attributes Predeploy"
}



================================================
FILE: src/api/address-resolver/hardcoded-addresses/1337.json
================================================
{
  "0x67b1d87101671b127f5f8714789C7192f7ad340e": "Erigon devnet address"
}



================================================
FILE: src/api/token-price-resolver/token-price-resolver.ts
================================================
import { AbstractProvider, BlockTag } from "ethers";

export type PriceOracleSource = "Chainlink" | "Uniswap" | "Equivalence";

export abstract class TokenPriceResolver {
  /**
   * Fetches the current token price in the reference token per 1e18 of the target token
   * @param provider - The provider to the make calls
   * @param referenceTokenAddress - Token address of the reference token, e.g. WETH
   * @param targetTokenAddress - Token address for which we want to fetch price data
   * @returns A promise resolving into an object containing price, a bigint representing
     the reference token value of 1e18 units of the target token, and confidence, a
     measure of the estimated amount of pair liquidity in the pool to back the price.
     If no such price can be calculated, promise instead resolves to undefined.
   */
  abstract resolveTokenPrice(
    provider: AbstractProvider,
    referenceTokenAddress: string,
    targetTokenAddress: string,
    blockTag?: BlockTag,
  ): Promise<{ price: bigint; confidence: bigint } | undefined>;

  // Indicates where the price data came from
  public abstract readonly source: PriceOracleSource;
}



================================================
FILE: src/api/token-price-resolver/resolvers/UniswapV2PriceResolver.ts
================================================
import { AbstractProvider, BlockTag, Contract } from "ethers";
import { PriceOracleSource, TokenPriceResolver } from "../token-price-resolver";

export default class UniswapV2PriceResolver implements TokenPriceResolver {
  factoryAddress: string;
  minEthInPool: bigint;
  source: PriceOracleSource = "Uniswap";

  constructor(factoryAddress: string, minEthInPool: bigint = 10n ** 17n) {
    this.factoryAddress = factoryAddress;
    this.minEthInPool = minEthInPool;
  }

  async resolveTokenPrice(
    provider: AbstractProvider,
    referenceTokenAddress: string,
    targetTokenAddress: string,
    blockTag: BlockTag = "latest",
  ): Promise<{ price: bigint; confidence: bigint } | undefined> {
    const factoryAbi = [
      "function getPair(address tokenA, address tokenB) view returns (address pair)",
    ];
    const factoryContract = new Contract(
      this.factoryAddress,
      factoryAbi,
      provider,
    );

    let pairAddress;
    try {
      pairAddress = await factoryContract.getPair(
        targetTokenAddress,
        referenceTokenAddress,
      );
    } catch (err) {
      return undefined;
    }

    const abiPair = [
      "function getReserves() view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast)",
    ];

    const pairContract = new Contract(pairAddress, abiPair, provider);

    let reserves: [bigint, bigint];
    try {
      reserves = await pairContract.getReserves({ blockTag });
    } catch (err) {
      return undefined;
    }

    const targetTokenIndex =
      BigInt(targetTokenAddress) < BigInt(referenceTokenAddress) ? 0 : 1;
    if (reserves[1 - targetTokenIndex] < this.minEthInPool) {
      // Not enough liquidity
      return undefined;
    }
    return {
      price:
        (10n ** 18n * reserves[1 - targetTokenIndex]) /
        reserves[targetTokenIndex],
      confidence: reserves[1 - targetTokenIndex],
    };
  }
}



================================================
FILE: src/api/token-price-resolver/resolvers/UniswapV3PriceResolver.ts
================================================
import { AbstractProvider, BlockTag, Contract, ZeroAddress } from "ethers";
import erc20 from "../../../abi/erc20.json";
import { PriceOracleSource, TokenPriceResolver } from "../token-price-resolver";

const ERC20_PROTOTYPE = new Contract(ZeroAddress, erc20);

export default class UniswapV3PriceResolver implements TokenPriceResolver {
  factoryAddress: string;
  minEthInPool: bigint;
  source: PriceOracleSource = "Uniswap";

  constructor(factoryAddress: string, minEthInPool: bigint = 10n ** 17n) {
    this.factoryAddress = factoryAddress;
    this.minEthInPool = minEthInPool;
  }

  async resolveTokenPrice(
    provider: AbstractProvider,
    referenceTokenAddress: string,
    targetTokenAddress: string,
    blockTag: BlockTag = "latest",
  ): Promise<{ price: bigint; confidence: bigint } | undefined> {
    const factoryAbi = [
      "function getPool(address tokenA, address tokenB, uint24 feeTier) view returns (address pair)",
    ];
    const factoryContract = new Contract(
      this.factoryAddress,
      factoryAbi,
      provider,
    );

    let poolAddresses: string[];
    try {
      poolAddresses = await Promise.all(
        [100n, 500n, 3000n, 10000n].map((feeTier) =>
          factoryContract.getPool(
            targetTokenAddress,
            referenceTokenAddress,
            feeTier,
            { blockTag },
          ),
        ),
      );
      poolAddresses = poolAddresses.filter(
        (poolAddress) =>
          poolAddress !== "0x0000000000000000000000000000000000000000",
      );
    } catch (err) {
      return undefined;
    }

    const abiPool = [
      "function slot0() view returns (uint160 sqrtPriceX96, int24 tick, uint16 observationIndex, uint16 observationCardinality, uint16 observationCardinalityNext, uint8 feeProtocol, bool unlocked)",
    ];

    const poolContracts = poolAddresses.map(
      (poolAddress) => new Contract(poolAddress, abiPool, provider),
    );

    let sqrtPriceX96s: bigint[];
    try {
      sqrtPriceX96s = await Promise.all(
        poolContracts.map((poolContract) => poolContract.slot0({ blockTag })),
      ).then((slot0Values) =>
        slot0Values.map((slot0Value) => slot0Value.sqrtPriceX96),
      );
    } catch (err) {
      return undefined;
    }

    // Use whichever pool has the most reference tokens available, regardless of positions.
    // This approach may include pools with no available liquidity if all positions fall outside
    // the actual token price.
    const referenceToken = ERC20_PROTOTYPE.connect(provider).attach(
      referenceTokenAddress,
    ) as Contract;
    let refTokenLiquidity: bigint[];
    try {
      refTokenLiquidity = await Promise.all(
        poolAddresses.map((poolAddress) =>
          referenceToken.balanceOf(poolAddress),
        ),
      );
    } catch (err) {
      return undefined;
    }

    if (refTokenLiquidity.length === 0) {
      return undefined;
    }

    const findLargestValue = (arr: bigint[]): [number, bigint] =>
      arr.reduce(
        (acc, cur, idx) => (cur > acc[1] ? [idx, cur] : acc),
        [0, -1n],
      );
    const [largestIndex, largestLiquidity]: [number, bigint] =
      findLargestValue(refTokenLiquidity);

    if (largestLiquidity < this.minEthInPool) {
      return undefined;
    }

    const targetTokenIndex =
      BigInt(targetTokenAddress) < BigInt(referenceTokenAddress) ? 0 : 1;
    // sqrtPriceX96 = (x / y)^0.5 / 2^96, so (x / y) = sqrtPriceX96^2 / (2^96)^2
    if (targetTokenIndex === 0) {
      return {
        price:
          (10n ** 18n * sqrtPriceX96s[largestIndex] ** 2n) / 2n ** (96n * 2n),
        confidence: largestLiquidity / 2n,
      };
    } else {
      return {
        price:
          (10n ** 18n * 2n ** (96n * 2n)) / sqrtPriceX96s[largestIndex] ** 2n,
        confidence: largestLiquidity / 2n,
      };
    }
  }
}



================================================
FILE: src/components/AddressHighlighter.tsx
================================================
import React from "react";
import SelectionHighlighter, {
  addressSelector,
} from "../selection/SelectionHighlighter";

type AddressHighlighterProps = React.PropsWithChildren<{
  address: string;
}>;

// TODO: replace all occurrences with SelectionHighlighter and remove this component
const AddressHighlighter: React.FC<AddressHighlighterProps> = ({
  address,
  children,
}) => (
  <div className="truncate">
    <SelectionHighlighter
      myType="address"
      myContent={address}
      selector={addressSelector}
    >
      {children}
    </SelectionHighlighter>
  </div>
);

export default AddressHighlighter;



================================================
FILE: src/components/AddressLegend.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import AddressLegend from "./AddressLegend";

const meta = {
  component: AddressLegend,
} satisfies Meta<typeof AddressLegend>;

export default meta;
type Story = StoryObj<typeof meta>;

export const ERC20: Story = {
  args: {
    uniqueId: "erc20",
  },
  render: (args) => <AddressLegend {...args}>[ERC20]</AddressLegend>,
};



================================================
FILE: src/components/AddressLegend.tsx
================================================
import { FC, PropsWithChildren } from "react";

type AddressLegendProps = {
  title?: string;
  full?: boolean;
  uniqueId: string;
};

const AddressLegend: FC<PropsWithChildren<AddressLegendProps>> = ({
  title,
  full,
  children,
}) => (
  // TODO: fix sizing of highlight boxes
  // <SelectionHighlighter
  //   myType="tag"
  //   myContent={uniqueId}
  //   selector={tagSelector}
  // >
  <span
    className={`font-code ${
      full ? "text-sm text-gray-500/70" : "text-xs text-gray-400/70"
    } text-clip not-italic`}
    title={title}
  >
    {children}
  </span>
  // </SelectionHighlighter>
);

export default AddressLegend;



================================================
FILE: src/components/AddressLink.tsx
================================================
import React from "react";
import { NavLink } from "react-router-dom";

type AddressLinkProps = {
  address: string;
  text?: string;
  dontOverrideColors?: boolean;
};

const AddressLink: React.FC<AddressLinkProps> = ({
  address,
  text,
  dontOverrideColors,
}) => (
  <NavLink
    className={`${
      dontOverrideColors ? "" : "text-link-blue hover:text-link-blue-hover"
    } truncate font-address`}
    to={`/address/${address}`}
  >
    <span className="truncate" title={text ?? address}>
      {text ?? address}
    </span>
  </NavLink>
);

export default AddressLink;



================================================
FILE: src/components/AddressOrENSNameInvalidNonce.tsx
================================================
import React from "react";
import DecoratedAddressLink from "../execution/components/DecoratedAddressLink";
import ContentFrame from "./ContentFrame";
import StandardSubtitle from "./StandardSubtitle";

type AddressOrENSNameInvalidNonceProps = {
  addressOrENSName: string;
  nonce: string;
};

const AddressOrENSNameInvalidNonce: React.FC<
  AddressOrENSNameInvalidNonceProps
> = ({ addressOrENSName, nonce }) => (
  <>
    <StandardSubtitle>Transaction Details</StandardSubtitle>
    <ContentFrame>
      <div className="flex py-4 text-sm">
        <DecoratedAddressLink address={addressOrENSName} />
        <span>: no transaction found for nonce="{nonce}".</span>
      </div>
    </ContentFrame>
  </>
);

export default React.memo(AddressOrENSNameInvalidNonce);



================================================
FILE: src/components/AddressOrENSNameNotFound.tsx
================================================
import React from "react";
import ContentFrame from "./ContentFrame";
import StandardSubtitle from "./StandardSubtitle";

type AddressOrENSNameNotFoundProps = {
  addressOrENSName: string;
  supportsENS: boolean;
};

const AddressOrENSNameNotFound: React.FC<AddressOrENSNameNotFoundProps> = ({
  addressOrENSName,
  supportsENS,
}) => (
  <>
    <StandardSubtitle>Transaction Details</StandardSubtitle>
    <ContentFrame>
      <div className="py-4 text-sm">
        "{addressOrENSName}" is not an ETH address
        {supportsENS && " or ENS name"}.
      </div>
    </ContentFrame>
  </>
);

export default React.memo(AddressOrENSNameNotFound);



================================================
FILE: src/components/AddressOrENSNameNoTx.tsx
================================================
import React from "react";
import DecoratedAddressLink from "../execution/components/DecoratedAddressLink";
import ContentFrame from "./ContentFrame";
import StandardSubtitle from "./StandardSubtitle";

type AddressOrENSNameNoTxProps = {
  addressOrENSName: string;
};

const AddressOrENSNameNoTx: React.FC<AddressOrENSNameNoTxProps> = ({
  addressOrENSName,
}) => (
  <>
    <StandardSubtitle>Transaction Details</StandardSubtitle>
    <ContentFrame>
      <div className="flex py-4 text-sm">
        <DecoratedAddressLink address={addressOrENSName} />
        <span>: no outbound transactions found.</span>
      </div>
    </ContentFrame>
  </>
);

export default React.memo(AddressOrENSNameNoTx);



================================================
FILE: src/components/AddressSwap.tsx
================================================
import { faRetweet } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import React, { useEffect, useState } from "react";

import { toBech32Address } from "@zilliqa-js/crypto";
import Copy from "./Copy";

type AddressSwapProps = {
  addr: string;
};

const AddressSwap: React.FC<AddressSwapProps> = ({ addr }) => {
  const [addrPair, setAddrPair] = useState<string[] | null>(null); // [bech32, hex]
  const [toggle, setToggle] = useState(0);

  useEffect(() => {
    try {
      setAddrPair([addr, toBech32Address(addr)]);
    } catch (e) {
      setAddrPair([addr, "Invalid hex-encoded address"]);
    }
  }, [addr]);

  return (
    addrPair && (
      <>
        <span className="font-address text-base text-gray-500">
          {addrPair[toggle]}&nbsp;
        </span>
        <button
          className={`space-x-1 text-gray-500 focus:outline-none 
        transition-colors transition-shadows bg-gray-200 hover:bg-gray-500 hover:text-gray-200 hover:shadow w-7 h-7 rounded-full text-xs`}
          title="Switch Address Form"
          onClick={() => {
            setToggle((prevToggle) => (prevToggle === 0 ? 1 : 0));
          }}
        >
          <FontAwesomeIcon size="sm" icon={faRetweet} />
        </button>
        <Copy value={addrPair[toggle]} rounded />
      </>
    )
  );
};

export default React.memo(AddressSwap);



================================================
FILE: src/components/Age.tsx
================================================
import { FC, memo } from "react";
import { ageString } from "../utils/utils";

type AgeProps = {
  durationInSecs: number;
  title?: string;
};

const Age: FC<AgeProps> = ({ durationInSecs, title }) => {
  const desc = ageString(durationInSecs);

  return (
    <span className="truncate" title={title ?? desc}>
      {desc}
    </span>
  );
};

export default memo(Age);



================================================
FILE: src/components/AutoRefreshAge.tsx
================================================
import {
  FC,
  memo,
  PropsWithChildren,
  useCallback,
  useEffect,
  useState,
} from "react";
import {
  FastTickerContext,
  SlowTickerContext,
  useCurrentTimeFastRefresh,
  useCurrentTimeSlowRefresh,
  useTicker,
} from "../useTicker";
import Age from "./Age";

const ONE_SECOND = 1_000;
const ONE_MINUTE = 60_000;

// Before/after 1 minute switch to slow refresh
const FAST_2_SLOW_THREASHOLD = 60;

type AutoRefreshAgeProps = {
  timestamp: number;
};

const AutoRefreshAge: FC<AutoRefreshAgeProps> = ({ timestamp }) => {
  const [last, setLast] = useState<Date>(new Date());
  const newSetLast = useCallback(
    (newLast: Date) => {
      setLast((prev: Date) => {
        if (prev.getTime() > newLast.getTime()) {
          return prev;
        }
        return newLast;
      });
    },
    [setLast],
  );

  const lastInSecs = Math.round(last.getTime() / 1000);
  const durationInSecs = lastInSecs - timestamp;

  return Math.abs(durationInSecs) <= FAST_2_SLOW_THREASHOLD ? (
    <FastRefreshTriggerAge
      setLast={newSetLast}
      durationInSecs={durationInSecs}
    />
  ) : (
    <SlowRefreshTriggerAge
      setLast={newSetLast}
      durationInSecs={durationInSecs}
    />
  );
};

export const TickerContextProvider: FC<PropsWithChildren> = ({ children }) => {
  const nowFastRefresh = useTicker(ONE_SECOND);
  const nowSlowRefresh = useTicker(ONE_MINUTE);

  return (
    <FastTickerContext.Provider value={nowFastRefresh}>
      <SlowTickerContext.Provider value={nowSlowRefresh}>
        {children}
      </SlowTickerContext.Provider>
    </FastTickerContext.Provider>
  );
};

type RefreshTriggerAgeProps = {
  setLast: (newLast: Date) => void;
  durationInSecs: number;
};

const FastRefreshTriggerAge: FC<RefreshTriggerAgeProps> = ({
  setLast,
  durationInSecs,
}) => {
  const now = useCurrentTimeFastRefresh();
  useEffect(() => {
    setLast(now);
  }, [now]);

  return <Age durationInSecs={durationInSecs} />;
};

const SlowRefreshTriggerAge: FC<RefreshTriggerAgeProps> = ({
  setLast,
  durationInSecs,
}) => {
  const now = useCurrentTimeSlowRefresh();
  useEffect(() => {
    setLast(now);
  }, [now]);

  return <Age durationInSecs={durationInSecs} />;
};

export default memo(AutoRefreshAge);



================================================
FILE: src/components/BCInfoToolTip.tsx
================================================
import { faInfoCircle } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { Menu } from "@headlessui/react";

type BCInfoToolTipProps = {
  child: React.ReactNode;
};

const BCInfoToolTip: React.FC<BCInfoToolTipProps> = ({ child }) => {
  return (
    <Menu>
      <span>
        <Menu.Button className="rounded">
          <FontAwesomeIcon icon={faInfoCircle} size="1x" />
        </Menu.Button>
        <Menu.Items className="absolute mt-2 flex min-w-max flex-col rounded-b border bg-white p-1 text-sm">
          <div className="w-60 text-xs">{child}</div>
        </Menu.Items>
      </span>
    </Menu>
  );
};

export default BCInfoToolTip;



================================================
FILE: src/components/BlockConfirmations.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import BlockConfirmations from "./BlockConfirmations";

const meta = {
  component: BlockConfirmations,
} satisfies Meta<typeof BlockConfirmations>;

export default meta;
type Story = StoryObj<typeof meta>;

export const OneConfirmation: Story = {
  args: {
    confirmations: 1,
  },
};

export const LotsOfConfirmations: Story = {
  args: {
    confirmations: 123_456,
  },
};



================================================
FILE: src/components/BlockConfirmations.tsx
================================================
import { FC, memo } from "react";
import { commify } from "../utils/utils";

type BlockConfirmationsProps = {
  confirmations: number;
};

const BlockConfirmations: FC<BlockConfirmationsProps> = ({ confirmations }) => (
  <span className="rounded bg-gray-100 px-2 py-1 text-xs text-gray-500 whitespace-nowrap">
    {commify(confirmations)} Block{" "}
    {confirmations === 1 ? "Confirmation" : "Confirmations"}
  </span>
);

export default memo(BlockConfirmations);



================================================
FILE: src/components/BlockLink.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import BlockLink from "./BlockLink";

const meta = {
  component: BlockLink,
} satisfies Meta<typeof BlockLink>;

export default meta;
type Story = StoryObj<typeof meta>;

export const GenesisBlock: Story = {
  args: {
    blockTag: 0,
  },
};

export const BlockOneThousand: Story = {
  args: {
    blockTag: 1_000,
  },
};

export const RecentMainnetBlockNumber: Story = {
  args: {
    blockTag: 16_500_123,
  },
};

export const BigBlockNumber: Story = {
  args: {
    blockTag: 16_500_123_456,
  },
};

export const BlockHash: Story = {
  args: {
    blockTag:
      "0xf75189cac9fa1017fd7ddcacfb75e2d77ce5bd40cf2cfeff9203ec156b650a34",
  },
};



================================================
FILE: src/components/BlockLink.tsx
================================================
import { faCube } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { BlockTag } from "ethers";
import { FC, memo } from "react";
import { NavLink } from "react-router-dom";
import { blockURL } from "../url";
import { commify } from "../utils/utils";

type BlockLinkProps = {
  blockTag: BlockTag;
};

const BlockLink: FC<BlockLinkProps> = ({ blockTag }) => {
  let text = blockTag;
  let isNum = typeof blockTag === "bigint" || typeof blockTag === "number";
  if (isNum) {
    text = commify(blockTag);
  }

  return (
    <NavLink
      className={`flex-inline items-baseline space-x-1 break-all text-link-blue hover:text-link-blue-hover ${
        isNum ? "font-blocknum whitespace-nowrap" : "font-hash"
      }`}
      to={blockURL(blockTag)}
    >
      <span className="text-black">
        <FontAwesomeIcon className="self-center" icon={faCube} size="1x" />
      </span>
      <span>{text.toString()}</span>
    </NavLink>
  );
};

export default memo(BlockLink);



================================================
FILE: src/components/BlockNotFound.tsx
================================================
import React from "react";
import ContentFrame from "./ContentFrame";

type BlockNotFoundProps = {
  blockNumberOrHash: string;
};

const BlockNotFound: React.FC<BlockNotFoundProps> = ({ blockNumberOrHash }) => (
  <ContentFrame>
    <div className="py-4 text-sm">Block "{blockNumberOrHash}" not found.</div>
  </ContentFrame>
);

export default React.memo(BlockNotFound);



================================================
FILE: src/components/CanBeEmptyText.tsx
================================================
import { FC, memo } from "react";

type CanBeEmptyTextProps = {
  text: string;
};

const CanBeEmptyText: FC<CanBeEmptyTextProps> = ({ text }) => {
  if (text.trim() === "") {
    return <span className="text-gray-300">empty</span>;
  }
  return <span>{text}</span>;
};

export default memo(CanBeEmptyText);



================================================
FILE: src/components/ChainInfoHeader.tsx
================================================
import { FC, memo } from "react";

type RecentNavBarProps = {
  isLoading: boolean;
};

const ChainInfoHeader: FC<RecentNavBarProps> = ({ isLoading }) => (
  <div className="flex items-baseline justify-between py-3">
    <div className="text-sm text-gray-500">
      {isLoading ? "Waiting for blocks..." : "Chain Info"}
    </div>
  </div>
);

export default memo(ChainInfoHeader);



================================================
FILE: src/components/ChainInfoItem.tsx
================================================
type ChainInfoItemProps = {
  title: React.ReactNode;
  data: React.ReactNode;
};

const ChainInfoItem: React.FC<ChainInfoItemProps> = ({ title, data }) => {
  return (
    <span className="">
      <span className="px-2 py-1 font-bold text-gray-500">{title}</span>
      <br />
      <span className="px-2 py-1">{data}</span>
    </span>
  );
};

export default ChainInfoItem;



================================================
FILE: src/components/ContentFrame.tsx
================================================
import { FC, PropsWithChildren } from "react";

type ContentFrameProps = {
  tabs?: boolean;
  isLoading?: boolean;
};

const ContentFrame: FC<PropsWithChildren<ContentFrameProps>> = ({
  tabs,
  isLoading,
  children,
}) => {
  return tabs ? (
    <div
      className={`divide-y rounded-b-lg border bg-white px-3 ${
        isLoading && "opacity-50 transition-opacity"
      }`}
    >
      {children}
    </div>
  ) : (
    <div
      className={`divide-y rounded-lg border bg-white px-3 ${
        isLoading && "opacity-50 transition-opacity"
      }`}
    >
      {children}
    </div>
  );
};

export default ContentFrame;



================================================
FILE: src/components/Copy.tsx
================================================
import { faCheckCircle, faCopy } from "@fortawesome/free-regular-svg-icons";
import { faCheck } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import React, { useState } from "react";

type CopyProps = {
  value: string;
  rounded?: boolean;
};

const Copy: React.FC<CopyProps> = ({ value, rounded }) => {
  const [copying, setCopying] = useState<boolean>(false);
  const doCopy = () => {
    navigator.clipboard.writeText(value);
    setCopying(true);

    setTimeout(() => {
      setCopying(false);
    }, 1000);
  };

  return (
    <button
      className={`space-x-1 self-center text-gray-500 focus:outline-none ${
        rounded
          ? "transition-shadows h-7 w-7 rounded-full bg-gray-200 text-xs transition-colors hover:bg-gray-500 hover:text-gray-200 hover:shadow"
          : "text-sm"
      }`}
      title="Click to copy to clipboard"
      onClick={doCopy}
    >
      {copying ? (
        rounded ? (
          <FontAwesomeIcon icon={faCheck} size="1x" />
        ) : (
          <>
            <FontAwesomeIcon icon={faCheckCircle} size="1x" />
            <span className="self-baseline">Copied</span>
          </>
        )
      ) : (
        <FontAwesomeIcon icon={faCopy} size="1x" />
      )}
    </button>
  );
};

export default React.memo(Copy);



================================================
FILE: src/components/DisplayInteger.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import DisplayInteger from "./DisplayInteger";

const meta = {
  component: DisplayInteger,
} satisfies Meta<typeof DisplayInteger>;

export default meta;
type Story = StoryObj<typeof meta>;

export const One: Story = {
  args: {
    numberStr: "1",
  },
};

export const MultipleCommas: Story = {
  args: {
    numberStr: "1234567",
  },
};

export const NegativeNumber: Story = {
  args: {
    numberStr: "-123456789",
  },
};

export const EighteenDecimals: Story = {
  args: {
    numberStr: "11000000000000000000",
  },
};



================================================
FILE: src/components/DisplayInteger.tsx
================================================
import { FC } from "react";

type DisplayIntegerProps = {
  numberStr: string;
};

const DisplayInteger: FC<DisplayIntegerProps> = ({ numberStr }) => {
  const parts = [];
  const isNegative = numberStr[0] == "-";
  let n = isNegative ? numberStr.slice(1) : numberStr;
  let groupNum = 0;
  for (var pos = n.length; pos > 0; pos -= 3) {
    const firstGroup = pos - 3 <= 0;
    const part = n.slice(firstGroup ? 0 : pos - 3, pos);
    parts.unshift(
      <span key={pos} className={firstGroup ? "" : "before:content-[',']"}>
        {part}
      </span>,
    );
    groupNum += 1;
  }
  return (
    <>
      {isNegative ? "-" : ""}
      {parts}
    </>
  );
};

export default DisplayInteger;



================================================
FILE: src/components/DSBlockLink.tsx
================================================
import { faCube } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { BlockTag } from "ethers";
import { FC, memo } from "react";
import { NavLink } from "react-router-dom";
import { dsBlockURL } from "../url";
import { commify } from "../utils/utils";

type DSBlockLinkProps = {
  blockTag: BlockTag;
};

const DSBlockLink: FC<DSBlockLinkProps> = ({ blockTag }) => {
  const isNum = typeof blockTag === "number";
  const isText = typeof blockTag === "string";
  let text = "";
  if (isNum) {
    text = commify(blockTag);
  } else if (isText) {
    text = blockTag;
  } else {
    text = "0x";
  }

  return (
    <NavLink
      className={`flex-inline items-baseline space-x-1 text-link-blue hover:text-link-blue-hover ${
        isNum ? "font-blocknum" : "font-hash"
      }`}
      to={dsBlockURL(blockTag)}
    >
      <span className="text-black">
        <FontAwesomeIcon className="self-center" icon={faCube} size="1x" />
      </span>
      <span>{text}</span>
    </NavLink>
  );
};

export default memo(DSBlockLink);



================================================
FILE: src/components/DSBlockNotFound.tsx
================================================
import React from "react";
import ContentFrame from "./ContentFrame";

type DSBlockNotFoundProps = {
  blockNumberOrHash: string;
};

const DSBlockNotFound: React.FC<DSBlockNotFoundProps> = ({
  blockNumberOrHash,
}) => (
  <ContentFrame>
    <div className="py-4 text-sm">
      DS Block "{blockNumberOrHash}" not found.
    </div>
  </ContentFrame>
);

export default React.memo(DSBlockNotFound);



================================================
FILE: src/components/ElementDiff.tsx
================================================
import React from "react";

type ElementDiffProps = {
  oldElem: React.ReactNode | null;
  newElem: React.ReactNode | null;
  diffElem: React.ReactNode | null;
};

const ElementDiff: React.FC<ElementDiffProps> = ({
  oldElem,
  newElem,
  diffElem,
}) => (
  <div className="flex flex-row overflow-hidden items-center gap-3">
    <div className="flex flex-col rounded overflow-hidden">
      {oldElem !== null && (
        <div className="bg-opacity-10 dark:bg-opacity-30 bg-red-500 px-2 py-1">
          <div className="flex items-start">
            <span className="text-gray-500 mr-4 font-data select-none">-</span>
            {oldElem}
          </div>
        </div>
      )}
      {newElem !== null && (
        <div className="bg-opacity-20 dark:bg-green-300 bg-green-300 px-2 py-1">
          <div className="flex items-start">
            <span className="text-gray-500 mr-4 font-data select-none">+</span>
            {newElem}
          </div>
        </div>
      )}
    </div>
    {diffElem && <div>{diffElem}</div>}
  </div>
);

export default ElementDiff;



================================================
FILE: src/components/ErrorFallback.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import ErrorFallback from "./ErrorFallback";

const meta = {
  component: ErrorFallback,
} satisfies Meta<typeof ErrorFallback>;

export default meta;
type Story = StoryObj<typeof meta>;

export const ExampleError: Story = {
  args: {
    error: new Error("Example error"),
    resetErrorBoundary: () => {},
  },
};



================================================
FILE: src/components/ErrorFallback.tsx
================================================
import React from "react";
import { FallbackProps } from "react-error-boundary";
import StandardSubtitle from "../components/StandardSubtitle";
import ContentFrame from "./ContentFrame";
import ExternalLink from "./ExternalLink";
import StandardFrame from "./StandardFrame";

const ErrorFallback: React.FC<FallbackProps> = ({ error }) => (
  <StandardFrame>
    <ContentFrame>
      <div className="pt-2">
        <StandardSubtitle>Something went wrong!</StandardSubtitle>
      </div>

      <div className="p-2">
        <div className="text-lg pb-2">Otterscan encountered an error.</div>

        <div>
          Please help us fix this error by creating a new issue at{" "}
          <ExternalLink href={"https://github.com/otterscan/otterscan/issues"}>
            the Otterscan issue tracker
          </ExternalLink>
          . In the issue description, include both the network name/chain ID and
          the following error trace:
        </div>

        <pre className="bg-red-100 text-xs mt-2 rounded p-2 border border-red-500 mb-2">
          {document.location.pathname + "\n\n" + error.toString() + "\n\n"}

          {error.stack}
        </pre>
      </div>
    </ContentFrame>
  </StandardFrame>
);

export default ErrorFallback;



================================================
FILE: src/components/ExpanderSwitch.tsx
================================================
import { Switch } from "@headlessui/react";
import React from "react";

type ExpanderSwitchProps = {
  expanded: boolean;
  setExpanded: React.Dispatch<React.SetStateAction<boolean>>;
};

const ExpanderSwitch: React.FC<ExpanderSwitchProps> = ({
  expanded,
  setExpanded,
}) => (
  <Switch
    className="font-code text-xs"
    checked={expanded}
    onChange={setExpanded}
  >
    {expanded ? <span className="text-gray-400">[-]</span> : <>[...]</>}
  </Switch>
);

export default ExpanderSwitch;



================================================
FILE: src/components/ExternalBlockLink.tsx
================================================
import { faCube } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { BlockTag } from "ethers";
import { FC, memo } from "react";
import { blockURL } from "../url";
import { commify } from "../utils/utils";
import ExternalLink from "./ExternalLink";

type ExternalBlockLinkProps = {
  blockTag: BlockTag;
  explorerUrl?: string;
};

const ExternalBlockLink: FC<ExternalBlockLinkProps> = ({
  explorerUrl,
  blockTag,
}) => {
  let text = blockTag;
  let isNum = typeof blockTag === "bigint" || typeof blockTag === "number";
  if (isNum) {
    text = commify(blockTag);
  }

  const interior = (
    <div
      className={`flex-inline items-baseline space-x-1 break-all ${isNum ? "font-blocknum" : "font-hash"}`}
    >
      <span className="text-blue-400">
        <FontAwesomeIcon className="self-center" icon={faCube} size="1x" />
      </span>
      <span>{text.toString()}</span>
    </div>
  );

  if (explorerUrl) {
    return (
      <ExternalLink href={explorerUrl + blockURL(blockTag)}>
        {interior}
      </ExternalLink>
    );
  }

  return interior;
};

export default memo(ExternalBlockLink);



================================================
FILE: src/components/ExternalLink.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import ExternalLink from "./ExternalLink";

const meta = {
  component: ExternalLink,
} satisfies Meta<typeof ExternalLink>;

export default meta;
type Story = StoryObj<typeof meta>;

export const SimpleLink: Story = {
  args: {
    href: "https://otterscan.io",
  },
  render: (args) => <ExternalLink {...args}>Otterscan website</ExternalLink>,
};



================================================
FILE: src/components/ExternalLink.tsx
================================================
import { faExternalLinkAlt } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { FC, PropsWithChildren } from "react";

type ExternalLinkProps = {
  href: string;
};

const ExternalLink: FC<PropsWithChildren<ExternalLinkProps>> = ({
  href,
  children,
}) => (
  <a
    className="text-link-blue hover:text-link-blue-hover"
    href={href}
    target="_blank"
    rel="noopener noreferrer"
  >
    <span className="inline-flex items-baseline space-x-1">
      <span>{children}</span>
      <FontAwesomeIcon icon={faExternalLinkAlt} size="sm" />
    </span>
  </a>
);

export default ExternalLink;



================================================
FILE: src/components/Faucet.tsx
================================================
import { faFaucetDrip } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { FC, memo } from "react";
import { NavLink } from "react-router-dom";
import { AddressAwareComponentProps } from "../execution/types";

type FaucetProps = AddressAwareComponentProps & {
  rounded?: boolean;
};

const Faucet: FC<FaucetProps> = ({ address, rounded }) => (
  <NavLink
    className={`flex-no-wrap flex items-center justify-center space-x-1 self-center text-gray-500 focus:outline-none ${
      rounded
        ? "transition-shadows h-7 w-7 rounded-full bg-gray-200 text-xs transition-colors hover:bg-gray-500 hover:text-gray-200 hover:shadow"
        : "text-sm"
    }`}
    to={`/faucets?address=${address}`}
    title="Click to go to faucets page"
  >
    <FontAwesomeIcon icon={faFaucetDrip} size="1x" />
  </NavLink>
);

export default memo(Faucet);



================================================
FILE: src/components/FiatValue.tsx
================================================
import { FixedNumber } from "ethers";
import { FC, memo } from "react";
import { PriceOracleSource } from "../api/token-price-resolver/token-price-resolver";
import { formatFiatValue } from "../usePriceOracle";

const DEFAULT_DECIMALS = 2;

export type FiatBoxProps = {
  borderColor?: string;
  bgColor?: string;
  fgColor?: string;
  explicitPlus?: boolean;
};

export const feePreset = {
  borderColor: "border-skin-from",
  bgColor: "bg-skin-from",
  fgColor: "text-skin-from",
} satisfies FiatBoxProps;

export const balancePreset = {
  borderColor: "border-emerald-200",
  bgColor: "bg-emerald-100",
  fgColor: "text-emerald-600",
} satisfies FiatBoxProps;

export const neutralPreset = {
  borderColor: "border-gray-200",
  bgColor: "bg-gray-100",
  fgColor: "text-gray-600",
} satisfies FiatBoxProps;

export const rewardPreset = {
  borderColor: "border-amber-200",
  bgColor: "bg-amber-100",
  fgColor: "text-amber-600",
} satisfies FiatBoxProps;

export const uniswapPreset = {
  borderColor: "border-fuchsia-200",
  bgColor: "bg-fuchsia-100",
  fgColor: "text-fuchsia-600",
} satisfies FiatBoxProps;

export function getPriceOraclePreset(
  source: PriceOracleSource | undefined,
): FiatBoxProps {
  switch (source) {
    case "Chainlink":
    case "Equivalence":
      return neutralPreset;
    case "Uniswap":
      return uniswapPreset;
  }
  return neutralPreset;
}

type FiatValueProps = FiatBoxProps & {
  value: FixedNumber;
  decimals?: number;
};

/**
 * USD amounts are displayed commified with 2 decimals places and $ prefix,
 * i.e., "$1,000.00".
 */
const FiatValue: FC<FiatValueProps> = ({
  value,
  decimals = DEFAULT_DECIMALS,
  borderColor,
  bgColor,
  fgColor,
  explicitPlus = false,
}) => (
  <span
    className={`px-2 ${borderColor ?? ""} rounded-lg border ${
      bgColor ?? ""
    } text-xs ${fgColor ?? ""}`}
  >
    {(explicitPlus || value.isNegative()) && !value.isZero() ? (
      <span className="font-balance">{value.isNegative() ? "-" : "+"}</span>
    ) : null}
    $
    <span className="font-balance">
      {formatFiatValue(
        value.isNegative() ? value.mul(FixedNumber.fromValue(-1n)) : value,
        decimals,
      )}
    </span>
  </span>
);

export default memo(FiatValue);



================================================
FILE: src/components/FormattedBalance.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import FormattedBalance from "./FormattedBalance";

const meta = {
  component: FormattedBalance,
} satisfies Meta<typeof FormattedBalance>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Zero: Story = {
  args: {
    value: 0n,
  },
};

export const OneGweiAsEther: Story = {
  args: {
    value: 1000000000n,
  },
};

export const OneGweiWithSymbol: Story = {
  args: {
    ...OneGweiAsEther.args,
    decimals: 9,
    symbol: "gwei",
  },
};

export const OneEther: Story = {
  args: {
    value: 1000000000000000000n,
  },
};

export const OneEtherWithSymbol: Story = {
  args: {
    ...OneEther.args,
    symbol: "ETH",
  },
};

export const OneMillionEther: Story = {
  args: {
    value: 1000000000000000000000000n,
    symbol: "ETH",
  },
};



================================================
FILE: src/components/FormattedBalance.tsx
================================================
import { FC, memo } from "react";
import { formatValue } from "./formatter";

const DEFAULT_DECIMALS = 18;

export type FormattedBalanceProps = {
  value: bigint;
  decimals?: number;
  symbol?: string | undefined;
};

// TODO: rename it to more generic name, not for balances only
const FormattedBalance: FC<FormattedBalanceProps> = ({
  value,
  decimals = DEFAULT_DECIMALS,
  symbol,
}) => {
  const formattedValue = formatValue(value, decimals);

  return (
    <span title={`${formattedValue} ${symbol !== undefined ? symbol : ""}`}>
      <span className={`font-balance`}>{formattedValue}</span>
      {symbol !== undefined && ` ${symbol}`}
    </span>
  );
};

export default memo(FormattedBalance);



================================================
FILE: src/components/formatter.ts
================================================
import { BigNumberish, formatUnits } from "ethers";
import { commify } from "../utils/utils";

export const formatValue = (value: BigNumberish, decimals: number): string => {
  const formatted = commify(formatUnits(value, decimals));
  return formatted.endsWith(".0")
    ? formatted.slice(0, formatted.length - 2)
    : formatted;
};



================================================
FILE: src/components/HelpButton.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import HelpButton from "./HelpButton";

const meta = {
  component: HelpButton,
} satisfies Meta<typeof HelpButton>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Unchecked: Story = {
  args: {
    checked: false,
    onChange: (newValue: boolean) => {},
  },
};

export const Checked: Story = {
  args: {
    checked: true,
    onChange: (newValue: boolean) => {},
  },
};



================================================
FILE: src/components/HelpButton.tsx
================================================
import React from "react";

import { faQuestionCircle } from "@fortawesome/free-regular-svg-icons";
import { faQuestionCircle as faQuestionCircleSolid } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { Switch } from "@headlessui/react";

type HelpButtonProps = {
  checked: boolean;
  onChange: (newValue: boolean) => void;
};

const HelpButton: React.FC<HelpButtonProps> = ({ checked, onChange }) => (
  <Switch
    checked={checked}
    onChange={onChange}
    className="self-center text-gray-500 pr-2"
  >
    <FontAwesomeIcon
      icon={checked ? faQuestionCircleSolid : faQuestionCircle}
      size="1x"
    />
  </Switch>
);

export default HelpButton;



================================================
FILE: src/components/HexValue.tsx
================================================
import React from "react";

type HexValueProps = {
  value: string;
};

const HexValue: React.FC<HexValueProps> = ({ value }) => (
  <span className="break-all font-hash text-black">{value}</span>
);

export default HexValue;



================================================
FILE: src/components/HighlightedCode.tsx
================================================
import { faCopy } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { FC, PropsWithChildren } from "react";
import docco from "react-syntax-highlighter/dist/esm/styles/hljs/docco";
import { SyntaxHighlighter } from "../highlight-init.ts";

type HighlightedCodeProps = {
  language: string;
  content: string;
};

export const HighlightedCode: FC<PropsWithChildren<HighlightedCodeProps>> = ({
  language,
  content,
}) => {
  const handleCopy = () => {
    navigator.clipboard.writeText(content ?? "");
  };
  return (
    <div className="relative">
      <SyntaxHighlighter language={language} style={docco} showLineNumbers>
        {content ?? ""}
      </SyntaxHighlighter>
      <button
        className="absolute top-2 right-2 border bg-skin-button-fill px-2 py-1 text-sm text-skin-button hover:bg-skin-button-hover-fill focus:outline-none"
        type="button"
        onClick={handleCopy}
        title="Copy to clipboard"
      >
        <FontAwesomeIcon icon={faCopy} />
      </button>
    </div>
  );
};

export default HighlightedCode;



================================================
FILE: src/components/InfoRow.tsx
================================================
import React from "react";

type InfoRowProps = React.PropsWithChildren<{
  title: React.ReactNode;
}>;

const InfoRow: React.FC<InfoRowProps> = ({ title, children }) => (
  <div className="grid grid-cols-4 py-4 text-sm">
    <div>{title}:</div>
    <div className="col-span-3">{children}</div>
  </div>
);

export default React.memo(InfoRow);



================================================
FILE: src/components/InlineCode.tsx
================================================
import React from "react";

type InlineCodeProps = React.PropsWithChildren<{
  children: React.ReactNode;
}>;

const InlineCode: React.FC<InlineCodeProps> = ({ children }) => (
  <code className="px-1 py-0.5 rounded bg-gray-100 text-gray-800 font-mono text-sm">
    {children}
  </code>
);

export default React.memo(InlineCode);



================================================
FILE: src/components/InternalCreate.tsx
================================================
import { faAngleRight, faCaretRight } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import React from "react";
import DecoratedAddressLink from "../execution/components/DecoratedAddressLink";
import TransactionAddress from "../execution/components/TransactionAddress";
import { InternalOperation } from "../types";
import AddressHighlighter from "./AddressHighlighter";

type InternalCreateProps = {
  internalOp: InternalOperation;
};

const InternalCreate: React.FC<InternalCreateProps> = ({ internalOp }) => (
  <div className="flex items-baseline space-x-1 whitespace-nowrap">
    <span className="text-gray-500">
      <FontAwesomeIcon icon={faAngleRight} size="1x" /> CREATE
    </span>
    <span className="flex items-baseline text-gray-400">
      <TransactionAddress address={internalOp.from} showCodeIndicator />
    </span>
    <span className="text-gray-500">
      <FontAwesomeIcon icon={faCaretRight} size="1x" />
    </span>
    <div className="flex items-baseline">
      <AddressHighlighter address={internalOp.to}>
        <DecoratedAddressLink address={internalOp.to} creation />
      </AddressHighlighter>
    </div>
  </div>
);

export default InternalCreate;



================================================
FILE: src/components/InternalSelfDestruct.tsx
================================================
import { faAngleRight } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { formatEther } from "ethers";
import React, { useContext } from "react";
import DecoratedAddressLink from "../execution/components/DecoratedAddressLink";
import TransactionAddress from "../execution/components/TransactionAddress";
import { InternalOperation, TransactionData } from "../types";
import { useChainInfo } from "../useChainInfo";
import { useBlockDataFromTransaction } from "../useErigonHooks";
import { RuntimeContext } from "../useRuntime";
import AddressHighlighter from "./AddressHighlighter";

type InternalSelfDestructProps = {
  txData: TransactionData;
  internalOp: InternalOperation;
};

const InternalSelfDestruct: React.FC<InternalSelfDestructProps> = ({
  txData,
  internalOp,
}) => {
  const { provider } = useContext(RuntimeContext);
  const block = useBlockDataFromTransaction(provider, txData);
  const {
    nativeCurrency: { symbol },
  } = useChainInfo();
  const toMiner = block?.miner !== undefined && internalOp.to === block.miner;

  return (
    <>
      <div className="flex items-baseline space-x-1 whitespace-nowrap">
        <span className="text-gray-500">
          <FontAwesomeIcon icon={faAngleRight} size="1x" /> SELF DESTRUCT
        </span>
        <div className="flex items-baseline">
          <AddressHighlighter address={internalOp.from}>
            <DecoratedAddressLink address={internalOp.from} selfDestruct />
          </AddressHighlighter>
        </div>
        {internalOp.value === 0n && (
          <div className="flex items-baseline text-gray-400">
            (To: <TransactionAddress address={internalOp.to} />)
          </div>
        )}
      </div>
      {internalOp.value !== 0n && (
        <div className="ml-5 flex items-baseline space-x-1">
          <span className="text-gray-500">
            <FontAwesomeIcon icon={faAngleRight} size="1x" /> TRANSFER
          </span>
          <span>
            {formatEther(internalOp.value)} {symbol}
          </span>
          <div className="flex items-baseline">
            <span className="text-gray-500">To</span>
            <AddressHighlighter address={internalOp.to}>
              <div
                className={`flex items-baseline space-x-1 ${
                  toMiner ? "rounded bg-amber-100 px-2 py-1" : ""
                }`}
              >
                <DecoratedAddressLink address={internalOp.to} miner={toMiner} />
              </div>
            </AddressHighlighter>
          </div>
        </div>
      )}
    </>
  );
};

export default InternalSelfDestruct;



================================================
FILE: src/components/InternalTransactionOperation.tsx
================================================
import React from "react";
import { InternalOperation, OperationType, TransactionData } from "../types";
import InternalCreate from "./InternalCreate";
import InternalSelfDestruct from "./InternalSelfDestruct";
import InternalTransfer from "./InternalTransfer";

type InternalTransactionOperationProps = {
  txData: TransactionData;
  internalOp: InternalOperation;
};

const InternalTransactionOperation: React.FC<
  InternalTransactionOperationProps
> = ({ txData, internalOp }) => (
  <>
    {internalOp.type === OperationType.TRANSFER && (
      <InternalTransfer txData={txData} internalOp={internalOp} />
    )}
    {internalOp.type === OperationType.SELF_DESTRUCT && (
      <InternalSelfDestruct txData={txData} internalOp={internalOp} />
    )}
    {(internalOp.type === OperationType.CREATE ||
      internalOp.type === OperationType.CREATE2) && (
      <InternalCreate internalOp={internalOp} />
    )}
  </>
);

export default React.memo(InternalTransactionOperation);



================================================
FILE: src/components/InternalTransfer.tsx
================================================
import {
  faAngleRight,
  faCaretRight,
  faSackDollar,
} from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { formatEther } from "ethers";
import { FC, useContext } from "react";
import DecoratedAddressLink from "../execution/components/DecoratedAddressLink";
import { InternalOperation, TransactionData } from "../types";
import { useChainInfo } from "../useChainInfo";
import { useBlockDataFromTransaction, useHasCode } from "../useErigonHooks";
import { useETHUSDOracle } from "../usePriceOracle";
import { RuntimeContext } from "../useRuntime";
import AddressHighlighter from "./AddressHighlighter";
import USDAmount from "./USDAmount";

type InternalTransferProps = {
  txData: TransactionData;
  internalOp: InternalOperation;
};

const InternalTransfer: FC<InternalTransferProps> = ({
  txData,
  internalOp,
}) => {
  const { provider } = useContext(RuntimeContext);
  const block = useBlockDataFromTransaction(provider, txData);

  const {
    nativeCurrency: { symbol, decimals },
  } = useChainInfo();
  const fromMiner =
    block?.miner !== undefined && internalOp.from === block.miner;
  const toMiner = block?.miner !== undefined && internalOp.to === block.miner;

  const { price: blockETHUSDPrice, decimals: ethPriceDecimals } =
    useETHUSDOracle(provider, txData.confirmedData?.blockNumber);
  const fromHasCode = useHasCode(
    provider,
    internalOp.from,
    txData.confirmedData ? txData.confirmedData.blockNumber - 1 : undefined,
  );
  const toHasCode = useHasCode(
    provider,
    internalOp.to,
    txData.confirmedData ? txData.confirmedData.blockNumber - 1 : undefined,
  );

  return (
    <div className="flex items-baseline space-x-1 truncate">
      <div className="grid w-full grid-cols-6 items-baseline gap-x-1">
        <div className="col-span-2 flex items-baseline space-x-1">
          <span className="text-gray-500">
            <FontAwesomeIcon icon={faAngleRight} size="1x" /> TRANSFER
          </span>
          <div className="flex items-baseline truncate">
            <AddressHighlighter address={internalOp.from}>
              <div
                className={`flex items-baseline space-x-1 ${
                  fromMiner ? "rounded bg-amber-100 px-2 py-1" : ""
                }`}
              >
                <DecoratedAddressLink
                  address={internalOp.from}
                  miner={fromMiner}
                  txFrom={internalOp.from === txData.from}
                  txTo={internalOp.from === txData.to}
                  eoa={fromHasCode === undefined ? undefined : !fromHasCode}
                />
              </div>
            </AddressHighlighter>
          </div>
        </div>
        <div className="col-span-2 flex items-baseline space-x-1">
          <span className="text-gray-500">
            <FontAwesomeIcon icon={faCaretRight} size="1x" />
          </span>
          <AddressHighlighter address={internalOp.to}>
            <div
              className={`flex items-baseline space-x-1 ${
                toMiner ? "rounded bg-amber-100 px-2 py-1" : ""
              }`}
            >
              <DecoratedAddressLink
                address={internalOp.to}
                miner={toMiner}
                txFrom={internalOp.to === txData.from}
                txTo={internalOp.to === txData.to}
                eoa={toHasCode === undefined ? undefined : !toHasCode}
              />
            </div>
          </AddressHighlighter>
        </div>
        <div className="col-span-2 flex items-baseline space-x-1">
          <span className="text-gray-500">
            <FontAwesomeIcon icon={faSackDollar} size="1x" />
          </span>
          <span>
            {formatEther(internalOp.value)} {symbol}
          </span>
          {blockETHUSDPrice !== undefined && (
            <USDAmount
              amount={internalOp.value}
              amountDecimals={decimals}
              quote={blockETHUSDPrice}
              quoteDecimals={Number(ethPriceDecimals)}
            />
          )}
        </div>
      </div>
    </div>
  );
};

export default InternalTransfer;



================================================
FILE: src/components/LabeledSwitch.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import LabeledSwitch from "./LabeledSwitch";

const meta = {
  component: LabeledSwitch,
} satisfies Meta<typeof LabeledSwitch>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Enabled: Story = {
  args: {
    defaultEnabled: true,
    onToggle: (newValue: boolean) => {},
  },
};

export const Disabled: Story = {
  args: {
    defaultEnabled: false,
    onToggle: (newValue: boolean) => {},
  },
};



================================================
FILE: src/components/LabeledSwitch.tsx
================================================
import { Switch } from "@headlessui/react";
import React, { PropsWithChildren, useState } from "react";

interface LabeledSwitchProps extends PropsWithChildren {
  defaultEnabled?: boolean;
  onToggle: (newValue: boolean) => void;
}

const LabeledSwitch: React.FC<LabeledSwitchProps> = ({
  defaultEnabled = false,
  onToggle,
  children,
}) => {
  const [enabled, setEnabled] = useState<boolean>(defaultEnabled);
  return (
    <div className="pb-4 flex">
      <Switch
        checked={enabled}
        onChange={(newValue: boolean) => {
          setEnabled(newValue);
          onToggle(newValue);
        }}
        className={`${
          enabled ? "bg-link-blue/100" : "bg-gray-200"
        } relative inline-flex h-6 w-11 items-center rounded-full mr-2 transition-colors`}
      >
        <span
          className={`${
            enabled ? "translate-x-6" : "translate-x-1"
          } inline-block h-4 w-4 transform rounded-full bg-white transition`}
        />
      </Switch>{" "}
      {children}
    </div>
  );
};
export default LabeledSwitch;



================================================
FILE: src/components/MethodName.tsx
================================================
import React from "react";
import { useMethodSelector } from "../use4Bytes";

type MethodNameProps = {
  data: string;
  to?: string;
};

const MethodName: React.FC<MethodNameProps> = ({ data, to = undefined }) => {
  const [isSimpleTransfer, methodName, methodTitle, fromVerifiedContract] =
    useMethodSelector(data, to);

  return (
    <div
      className={`${
        isSimpleTransfer ? "bg-amber-100" : "bg-blue-50"
      } flex min-h-full max-w-max items-baseline rounded-lg px-3 py-1 text-xs`}
    >
      <p
        className={`truncate ${
          fromVerifiedContract ? "text-verified-contract" : ""
        }`}
        title={methodTitle}
      >
        {methodName}
      </p>
    </div>
  );
};

export default React.memo(MethodName);



================================================
FILE: src/components/ModeTab.stories.tsx
================================================
import { TabGroup } from "@headlessui/react";
import { Meta, StoryObj } from "@storybook/react";
import ModeTab from "./ModeTab";

const meta = {
  component: ModeTab,
  decorators: [
    (Story) => (
      <TabGroup>
        <Story />
      </TabGroup>
    ),
  ],
} satisfies Meta<typeof ModeTab>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    children: "Press me",
  },
};

export const Disabled: Story = {
  args: {
    children: "Can't press me :(",
    disabled: true,
  },
};



================================================
FILE: src/components/ModeTab.tsx
================================================
import { Tab } from "@headlessui/react";
import { FC, PropsWithChildren } from "react";

type ModeTabProps = {
  disabled?: boolean | undefined;
};

const ModeTab: FC<PropsWithChildren<ModeTabProps>> = ({
  disabled,
  children,
}) => (
  <Tab
    className={({ selected }) =>
      `rounded-lg border bg-gray-100 px-2 py-1 ${
        disabled
          ? "cursor-default border-gray-100 text-gray-300"
          : "text-gray-500 hover:bg-gray-200 hover:text-gray-600 hover:shadow"
      } text-xs ${selected ? "border-blue-300" : ""}`
    }
    disabled={disabled}
  >
    {children}
  </Tab>
);

export default ModeTab;



================================================
FILE: src/components/NativeTokenAmount.tsx
================================================
import { FC, memo } from "react";
import { useChainInfo } from "../useChainInfo";
import FormattedBalance from "./FormattedBalance";

type NativeTokenAmountProps = {
  value: bigint;
  hideUnit?: boolean;
};

/**
 * Standard component for displaying a certain amount of native chain token
 * (i.e. ETH). It:
 *
 * - Commify non-decimal parts, i.e., 1,000,000.00
 * - Light gray absolute zero values
 * - Cut out decimal part if it is 0 to reduce UI clutter, i.e., show
 * 123 instead of 123.00
 */
const NativeTokenAmount: FC<NativeTokenAmountProps> = ({
  value,
  hideUnit,
  ...rest
}) => {
  const {
    nativeCurrency: { symbol, decimals },
  } = useChainInfo();

  return (
    <span className={`text-sm ${value === 0n ? "opacity-30" : ""}`} {...rest}>
      <FormattedBalance
        value={value}
        decimals={decimals}
        symbol={hideUnit ? undefined : symbol}
      />
    </span>
  );
};

export default memo(NativeTokenAmount);



================================================
FILE: src/components/NativeTokenAmountAndFiat.tsx
================================================
import { BlockTag } from "ethers";
import { FC } from "react";
import { useFiatValue } from "../usePriceOracle";
import FiatValue, { FiatBoxProps } from "./FiatValue";
import NativeTokenAmount from "./NativeTokenAmount";

type NativeTokenAmountAndFiatProps = FiatBoxProps & {
  value: bigint;
  blockTag?: BlockTag;
};

/**
 * Standard box combining the display of a certain amount of native tokens
 * (i.e. ETH) followed by its equivalent in fiat (given the chain has an on-chain
 * oracle available).
 */
const NativeTokenAmountAndFiat: FC<NativeTokenAmountAndFiatProps> = ({
  value,
  blockTag = "latest",
  ...rest
}) => {
  const fiatValue = useFiatValue(value, blockTag);

  return (
    <span className="space-x-2">
      <NativeTokenAmount value={value} />
      {fiatValue && <FiatValue value={fiatValue} {...rest} />}
    </span>
  );
};

export default NativeTokenAmountAndFiat;



================================================
FILE: src/components/NativeTokenPrice.tsx
================================================
import { BlockTag } from "ethers";
import { FC, memo } from "react";
import { useChainInfo } from "../useChainInfo";
import { formatFiatValue, useFiatValue } from "../usePriceOracle";

type NativeTokenPriceProps = {
  blockTag: BlockTag | undefined;
};

/**
 * This component displays the fiat price of the native chain token along with formatting, e.g.,
 * "$1,500.00 /ETH".
 *
 * The quote is get from internal oracle system.
 */
const NativeTokenPrice: FC<NativeTokenPriceProps> = ({ blockTag }) => {
  const {
    nativeCurrency: { symbol, decimals },
  } = useChainInfo();

  // One unit of native token, considering decimals
  const nativeTokenPrice = useFiatValue(10n ** BigInt(decimals), blockTag);
  const value = formatFiatValue(nativeTokenPrice);

  return (
    <span className="text-sm">
      {value ? (
        <>
          $<span className="font-balance">{value}</span>
          <span className="text-xs opacity-50"> / {symbol}</span>
        </>
      ) : (
        "N/A"
      )}
    </span>
  );
};

export default memo(NativeTokenPrice);



================================================
FILE: src/components/NavBlock.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import NavBlock from "./NavBlock";

const meta = {
  component: NavBlock,
} satisfies Meta<typeof NavBlock>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    entityNum: 5,
    latestEntityNum: 100,
    urlBuilder: (_) => "",
  },
};

export const Empty: Story = {
  args: {
    ...Default.args,
    entityNum: 0,
    latestEntityNum: 0,
  },
};

export const First: Story = {
  args: {
    ...Default.args,
    entityNum: 0,
    latestEntityNum: 100,
  },
};

export const Last: Story = {
  args: {
    ...Default.args,
    entityNum: 100,
    latestEntityNum: 100,
  },
};



================================================
FILE: src/components/NavBlock.tsx
================================================
import {
  faChevronLeft,
  faChevronRight,
} from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { FC, memo } from "react";
import NavButton from "./NavButton";

type NavBlockProps = {
  entityNum: number;
  latestEntityNum: number | undefined;
  urlBuilder: (n: number) => string;
  showFirstLink?: boolean;
};

const NavBlock: FC<NavBlockProps> = ({
  entityNum,
  latestEntityNum,
  urlBuilder,
  showFirstLink = false,
}) => (
  <div className="flex flex-no-wrap space-x-1 self-center pl-2">
    {showFirstLink && (
      <NavButton href={urlBuilder(0)} disabled={entityNum === 0}>
        <div className="whitespace-nowrap">
          <FontAwesomeIcon icon={faChevronLeft} />
          <FontAwesomeIcon icon={faChevronLeft} />
        </div>
      </NavButton>
    )}
    <NavButton href={urlBuilder(entityNum - 1)} disabled={entityNum === 0}>
      <FontAwesomeIcon icon={faChevronLeft} />
    </NavButton>
    <NavButton
      href={urlBuilder(entityNum + 1)}
      disabled={latestEntityNum === undefined || entityNum >= latestEntityNum}
    >
      <FontAwesomeIcon icon={faChevronRight} />
    </NavButton>
    <NavButton
      href={urlBuilder(latestEntityNum!)}
      disabled={latestEntityNum === undefined || entityNum >= latestEntityNum}
    >
      <div className="whitespace-nowrap">
        <FontAwesomeIcon icon={faChevronRight} />
        <FontAwesomeIcon icon={faChevronRight} />
      </div>
    </NavButton>
  </div>
);

export default memo(NavBlock);



================================================
FILE: src/components/NavButton.stories.tsx
================================================
import { faChevronRight } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { Meta, StoryObj } from "@storybook/react";
import NavButton from "./NavButton";

const meta = {
  component: NavButton,
} satisfies Meta<typeof NavButton>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    href: "",
    children: (
      <>
        <FontAwesomeIcon icon={faChevronRight} />
        <FontAwesomeIcon icon={faChevronRight} />
      </>
    ),
  },
};

export const Disabled: Story = {
  args: {
    ...Default.args,
    disabled: true,
  },
};



================================================
FILE: src/components/NavButton.tsx
================================================
import { FC, MouseEventHandler, PropsWithChildren } from "react";
import { NavLink } from "react-router-dom";

type NavButtonProps = {
  href: string;
  disabled?: boolean;
  onMouseOver?: MouseEventHandler<HTMLAnchorElement> | undefined;
};

const NavButton: FC<PropsWithChildren<NavButtonProps>> = ({
  href,
  disabled,
  onMouseOver,
  children,
}) => {
  if (disabled) {
    return (
      <span className="rounded bg-link-blue/10 px-2 py-1 text-xs text-gray-400">
        {children}
      </span>
    );
  }

  return (
    <NavLink
      className="rounded bg-link-blue/10 px-2 py-1 text-xs text-link-blue transition-colors hover:bg-link-blue/100 hover:text-white disabled:cursor-default disabled:bg-link-blue disabled:text-gray-400"
      to={href}
      onMouseOver={onMouseOver}
    >
      {children}
    </NavLink>
  );
};

export default NavButton;



================================================
FILE: src/components/NavTab.tsx
================================================
import { Tab } from "@headlessui/react";
import React, { Fragment, PropsWithChildren } from "react";
import { NavLink } from "react-router-dom";

type NavTabProps = {
  href: string;
};

const NavTab: React.FC<PropsWithChildren<NavTabProps>> = ({
  href,
  children,
}) => (
  <Tab as={Fragment}>
    <NavLink
      className={({ isActive }) =>
        `${
          isActive
            ? "border-link-blue text-link-blue"
            : "border-transparent text-gray-500"
        } border-b-2 px-3 py-3 text-sm font-bold hover:text-link-blue`
      }
      to={href}
      end
      replace
    >
      {children}
    </NavLink>
  </Tab>
);

export default NavTab;



================================================
FILE: src/components/Nonce.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import Nonce from "./Nonce";

const meta = {
  component: Nonce,
} satisfies Meta<typeof Nonce>;

export default meta;
type Story = StoryObj<typeof meta>;

export const NeverSent: Story = {
  args: {
    value: 0n,
  },
};

export const BigNonce: Story = {
  args: {
    value: 1_000n,
  },
};

export const ProbablyBot: Story = {
  args: {
    value: 1_234_567n,
  },
};



================================================
FILE: src/components/Nonce.tsx
================================================
import { faArrowUp } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { FC, memo } from "react";
import { commify } from "../utils/utils";

type NonceProps = {
  value: bigint;
};

const Nonce: FC<NonceProps> = ({ value }) => (
  <span
    className="flex-inline items-baseline space-x-2 rounded-lg bg-emerald-50 px-2 py-1 text-xs"
    title="Nonce"
  >
    <span className="text-emerald-400">
      <FontAwesomeIcon icon={faArrowUp} size="1x" />
    </span>
    <span className="text-emerald-600">{commify(value)}</span>
  </span>
);

export default memo(Nonce);



================================================
FILE: src/components/PercentageBar.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import PercentageBar from "./PercentageBar";

const meta = {
  component: PercentageBar,
} satisfies Meta<typeof PercentageBar>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Zero: Story = {
  args: {
    perc: 0,
  },
};

export const Fifty: Story = {
  args: {
    perc: 50,
  },
};

export const OneHundred: Story = {
  args: {
    perc: 100,
  },
};



================================================
FILE: src/components/PercentageBar.tsx
================================================
import { FC, memo } from "react";

type PercentageBarProps = {
  perc: number;
};

// TODO: fix horizontal misaligment between app and storybook
const PercentageBar: FC<PercentageBarProps> = ({ perc }) => (
  <div className="w-40 self-center rounded border border-gray-200">
    <div className="relative h-5 w-full rounded bg-gradient-to-r from-red-400 via-amber-300 to-emerald-400">
      <div
        className="absolute right-0 top-0 h-full rounded-r bg-white"
        style={{ width: `${100 - perc}%` }}
      ></div>
      <div className="text-sans absolute flex h-full w-full text-gray-600 mix-blend-multiply">
        <span className="m-auto">{perc}%</span>
      </div>
    </div>
  </div>
);

export default memo(PercentageBar);



================================================
FILE: src/components/PercentageGauge.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import PercentageGauge from "./PercentageGauge";

const meta = {
  component: PercentageGauge,
} satisfies Meta<typeof PercentageGauge>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Zero: Story = {
  args: {
    perc: 0,
    bgColor: "bg-gray-300",
    bgColorPerc: "bg-gray-700",
    textColor: "bg-gray-700",
  },
};

export const Fifty: Story = {
  args: {
    ...Zero.args,
    perc: 50,
  },
};

export const OneHundred: Story = {
  args: {
    ...Zero.args,
    perc: 100,
  },
};



================================================
FILE: src/components/PercentageGauge.tsx
================================================
import { FC, memo } from "react";

type PercentageGaugeProps = {
  perc: number;
  bgColor: string;
  bgColorPerc: string;
  textColor: string;
};

const PercentageGauge: FC<PercentageGaugeProps> = ({
  perc,
  bgColor,
  bgColorPerc,
  textColor,
}) => (
  <div className="relative h-6 w-60 border-l-2 border-gray-400">
    <div className="absolute flex h-full w-full">
      <div className={`my-auto h-5 w-full rounded-r-lg ${bgColor}`}></div>
    </div>
    <div className="absolute flex h-full w-full">
      <div
        className={`my-auto h-5 rounded-r-lg ${bgColorPerc}`}
        style={{ width: `${perc}%` }}
      ></div>
    </div>
    <div
      className={`text-sans absolute flex h-full w-full mix-blend-multiply ${textColor}`}
    >
      <span className="m-auto">{perc}%</span>
    </div>
  </div>
);

export default memo(PercentageGauge);



================================================
FILE: src/components/PercentagePosition.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import PercentagePosition from "./PercentagePosition";

const meta = {
  component: PercentagePosition,
} satisfies Meta<typeof PercentagePosition>;

export default meta;
type Story = StoryObj<typeof meta>;

export const First: Story = {
  args: {
    perc: 0,
  },
};

export const Middle: Story = {
  args: {
    perc: 0.5,
  },
};

export const Last: Story = {
  args: {
    perc: 1,
  },
};



================================================
FILE: src/components/PercentagePosition.tsx
================================================
import { FC, memo } from "react";

type PercentagePositionProps = {
  perc: number;
};

const PercentagePosition: FC<PercentagePositionProps> = ({ perc }) => (
  <div className="w-40 self-center">
    <div className="relative h-5 w-full rounded border border-zq-darkblue">
      <div className="absolute h-1/2 w-full border-b"></div>
      <div className="absolute top-1/4 h-1/2 w-full border-l-2 border-r-2 border-gray-300"></div>
      <div className="absolute top-1/4 h-1/2 w-1/2 border-r-2 border-gray-300"></div>
      <div className="absolute top-1/4 h-1/2 w-1/4 border-r-2 border-gray-300"></div>
      <div className="absolute top-1/4 h-1/2 w-3/4 border-r-2 border-gray-300"></div>
      <div
        className="absolute h-full border-r-4 border-black"
        style={{ width: `${perc * 100}%` }}
      ></div>
    </div>
  </div>
);

export default memo(PercentagePosition);



================================================
FILE: src/components/RelativePosition.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import RelativePosition from "./RelativePosition";

const meta = {
  component: RelativePosition,
} satisfies Meta<typeof RelativePosition>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Simple: Story = {
  args: {
    pos: 20,
    total: 50,
  },
};



================================================
FILE: src/components/RelativePosition.tsx
================================================
import { FC, memo, ReactNode } from "react";

type RelativePositionProps = {
  pos: ReactNode;
  total: ReactNode;
};

const RelativePosition: FC<RelativePositionProps> = ({ pos, total }) => (
  <span className="text-xs whitespace-nowrap">
    {pos}
    <span className="text-sm text-gray-600"> / {total}</span>
  </span>
);

export default memo(RelativePosition);



================================================
FILE: src/components/RelevantNumericValue.tsx
================================================
import { FC, memo } from "react";
import FormattedBalance from "./FormattedBalance";

type RelevantNumericValueProps = {
  value: number;
};

/**
 * Standard component for displaying amounts. It:
 *
 * - Commify non-decimal parts, i.e., 1,000,000.00
 * - Light gray absolute zero values
 */
const RelevantNumericValue: FC<RelevantNumericValueProps> = ({ value }) => (
  <FormattedBalance value={BigInt(value)} decimals={0} />
);

export default memo(RelevantNumericValue);



================================================
FILE: src/components/StandardFrame.tsx
================================================
import React, { PropsWithChildren } from "react";

const StandardFrame: React.FC<PropsWithChildren> = ({ children }) => (
  <div className="grow bg-gray-100 px-3 lg:px-9 pb-12 pt-3">{children}</div>
);

export default StandardFrame;



================================================
FILE: src/components/StandardScrollableTable.tsx
================================================
import { FC, PropsWithChildren } from "react";

interface StandardScrollableTableProps {
  isAuto?: boolean;
}

// TODO: replace all usage of StandardTable with this component
const StandardScrollableTable: FC<
  StandardScrollableTableProps & PropsWithChildren
> = ({ children, isAuto = false }) => (
  <div className="overflow-x-scroll">
    <table
      className={`w-full ${isAuto ? "table-auto" : "table-fixed"} border-gray-200 px-2 py-2 text-left text-sm [&>*>tr]:items-baseline`}
    >
      {children}
    </table>
  </div>
);

export default StandardScrollableTable;



================================================
FILE: src/components/StandardSubtitle.tsx
================================================
import React, { PropsWithChildren } from "react";

const StandardSubtitle: React.FC<PropsWithChildren> = ({ children }) => (
  <div className="pb-2 text-xl text-gray-700">{children}</div>
);

export default StandardSubtitle;



================================================
FILE: src/components/StandardTable.tsx
================================================
import { FC, PropsWithChildren } from "react";

const StandardTable: FC<PropsWithChildren> = ({ children }) => (
  <table className="w-full table-fixed border-b border-t border-gray-200 px-2 py-2 text-left text-sm [&>*>tr]:items-baseline">
    {children}
  </table>
);

export default StandardTable;



================================================
FILE: src/components/StandardTBody.tsx
================================================
import { FC, PropsWithChildren } from "react";

const StandardTBody: FC<PropsWithChildren> = ({ children }) => (
  <tbody className="[&>tr>td]:truncate [&>tr>td]:px-1 [&>tr>td:first-child]:pl-2 [&>tr>td:last-child]:pr-2 [&>tr>td]:py-3 [&>tr]:border-t [&>tr]:border-gray-200 hover:[&>tr]:bg-skin-table-hover">
    {children}
  </tbody>
);

export default StandardTBody;



================================================
FILE: src/components/StandardTextarea.tsx
================================================
import { FC, TextareaHTMLAttributes } from "react";

interface StandardTextareaProps
  extends TextareaHTMLAttributes<HTMLTextAreaElement> {
  readOnly?: boolean;
}

const StandardTextarea: FC<StandardTextareaProps> = ({
  readOnly = true,
  ...rest
}) => (
  <textarea
    className={`h-40 w-full rounded border font-mono ${readOnly ? "bg-gray-50 text-gray-500" : "text-gray-800"} p-2 focus:outline-none`}
    {...rest}
    readOnly={readOnly}
  />
);

export default StandardTextarea;



================================================
FILE: src/components/StandardTHead.tsx
================================================
import { FC, PropsWithChildren } from "react";

const StandardTHead: FC<PropsWithChildren> = ({ children }) => (
  <thead>
    <tr className="bg-gray-100 text-gray-500 [&>th]:truncate [&>th:first-child]:pl-2 [&>th:last-child]:pr-2 [&>th]:px-1 [&>th]:py-2">
      {children}
    </tr>
  </thead>
);

export default StandardTHead;



================================================
FILE: src/components/SwitchTab.tsx
================================================
import { Tab } from "@headlessui/react";
import React, { PropsWithChildren } from "react";

type SwitchTabProps = {
  disabled?: boolean | undefined;
  children: any;
};

const SwitchTab: React.FC<PropsWithChildren<SwitchTabProps>> = ({
  disabled,
  children,
}) => (
  <Tab
    className={({ selected }) =>
      `${
        disabled
          ? "cursor-default border-gray-100 text-gray-300"
          : selected
            ? "border-link-blue text-link-blue"
            : "border-transparent text-gray-500"
      } border-b-2 px-3 py-3 text-sm font-bold hover:text-link-blue`
    }
    disabled={disabled}
  >
    {children}
  </Tab>
);

export default SwitchTab;



================================================
FILE: src/components/ThemeToggler.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import ThemeToggler from "./ThemeToggler";

const meta = {
  component: ThemeToggler,
} satisfies Meta<typeof ThemeToggler>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {};



================================================
FILE: src/components/ThemeToggler.tsx
================================================
import { faMoon, faSun } from "@fortawesome/free-regular-svg-icons";
import { faDisplay } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import React, { useEffect, useState } from "react";
import { SourcifyMenuItem, SourcifyMenuTitle } from "../SourcifyMenu";

type Theme = "light" | "dark" | "system";

function updateTheme(theme: Theme) {
  const darkModeQuery = window.matchMedia("(prefers-color-scheme: dark)");
  const isDarkMode =
    theme === "dark" || (theme === "system" && darkModeQuery.matches);
  if (isDarkMode) {
    document.documentElement.classList.add("dark");
  } else {
    document.documentElement.classList.remove("dark");
  }
}

const ThemeToggler: React.FC = () => {
  const [theme, setTheme] = useState<Theme>(localStorage.theme ?? "system");
  const [updated, setUpdated] = useState<number | null>(null);

  const darkModeQuery = window.matchMedia("(prefers-color-scheme: dark)");
  useEffect(() => {
    const mediaQueryListener = (event: MediaQueryListEvent) => {
      if (theme === "system") {
        setUpdated(Date.now());
      }
    };
    darkModeQuery.addEventListener("change", mediaQueryListener);

    return () => {
      darkModeQuery.removeEventListener("change", mediaQueryListener);
    };
  }, [theme, setTheme, setUpdated]);

  useEffect(() => {
    updateTheme(theme);
  }, [theme, updated]);

  const handleThemeChange = (newTheme: Theme) => {
    if (newTheme === "system") {
      localStorage.removeItem("theme");
    } else {
      localStorage.theme = newTheme;
    }
    setTheme(newTheme);
    updateTheme(newTheme);
  };

  return (
    <>
      <SourcifyMenuTitle>Theme</SourcifyMenuTitle>
      <SourcifyMenuItem
        checked={theme === "light"}
        onClick={() => handleThemeChange("light")}
      >
        <FontAwesomeIcon icon={faSun} className="w-4 mr-0.5" /> Light
      </SourcifyMenuItem>
      <SourcifyMenuItem
        checked={theme === "dark"}
        onClick={() => handleThemeChange("dark")}
      >
        <FontAwesomeIcon icon={faMoon} className="w-4 mr-0.5" /> Dark
      </SourcifyMenuItem>
      <SourcifyMenuItem
        checked={theme === "system"}
        onClick={() => handleThemeChange("system")}
      >
        <FontAwesomeIcon icon={faDisplay} className="w-4 mr-0.5" /> System
      </SourcifyMenuItem>
    </>
  );
};

export default ThemeToggler;



================================================
FILE: src/components/Timestamp.tsx
================================================
import { faClock } from "@fortawesome/free-regular-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import React from "react";
import TimestampAge from "./TimestampAge";

type TimestampProps = {
  value: number;
  age?: boolean;
};

const months = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec",
];

const Timestamp: React.FC<TimestampProps> = ({ value, age }) => {
  const d = new Date(value * 1000);
  let hour = d.getUTCHours() % 12;
  if (hour === 0) {
    hour = 12;
  }
  const am = d.getUTCHours() < 12;

  const tsString = `${months[d.getUTCMonth()]}-${d
    .getUTCDate()
    .toLocaleString(undefined, {
      minimumIntegerDigits: 2,
    })}-${d.getUTCFullYear()} ${hour.toLocaleString(undefined, {
    minimumIntegerDigits: 2,
  })}:${d.getUTCMinutes().toLocaleString(undefined, {
    minimumIntegerDigits: 2,
  })}:${d.getUTCSeconds().toLocaleString(undefined, {
    minimumIntegerDigits: 2,
  })} ${am ? "AM" : "PM"} +UTC`;

  let snippet;
  if (age === undefined || age) {
    snippet = (
      <span>
        <TimestampAge timestamp={value} /> ({tsString})
      </span>
    );
  } else {
    snippet = <span>{tsString}</span>;
  }

  return (
    <div className="flex items-baseline space-x-1">
      <FontAwesomeIcon className="self-center" icon={faClock} size="sm" />
      {snippet}
    </div>
  );
};

export default React.memo(Timestamp);



================================================
FILE: src/components/TimestampAge.tsx
================================================
import { FC, memo } from "react";
import { useCurrentTimeFastRefresh } from "../useTicker";
import Age from "./Age";

type TimestampAgeProps = {
  timestamp: number;
};

const TimestampAge: FC<TimestampAgeProps> = ({ timestamp }) => {
  const now = useCurrentTimeFastRefresh();
  const nowInSecs = Math.round((now?.getTime() ?? Date.now()) / 1000);
  const durationInSecs = nowInSecs - timestamp;
  const timestampDateStr = new Date(timestamp * 1000).toLocaleString();

  return <Age durationInSecs={durationInSecs} title={timestampDateStr} />;
};

export default memo(TimestampAge);



================================================
FILE: src/components/TransactionDirection.tsx
================================================
import {
  faCoins,
  faLongArrowAltRight,
} from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import React from "react";

export enum Direction {
  IN,
  OUT,
  SELF,
  INTERNAL,
}

export enum Flags {
  // Means the transaction internal sends ETH to the miner, e.g. flashbots
  MINER,
}

type TransactionDirectionProps = {
  direction?: Direction;
  flags?: Flags;
};

const TransactionDirection: React.FC<TransactionDirectionProps> = ({
  direction,
  flags,
}) => {
  let bgColor = "bg-emerald-50";
  let fgColor = "text-emerald-500";
  let msg: string | null = null;

  if (direction === Direction.IN) {
    msg = "IN";
  } else if (direction === Direction.OUT) {
    bgColor = "bg-amber-100";
    fgColor = "text-amber-600";
    msg = "OUT";
  } else if (direction === Direction.SELF) {
    bgColor = "bg-gray-200";
    fgColor = "text-gray-500";
    msg = "SELF";
  } else if (direction === Direction.INTERNAL) {
    msg = "INT";
    bgColor = "bg-emerald-100";
  }

  if (flags === Flags.MINER) {
    bgColor = "bg-amber-50";
    fgColor = "text-amber-400";
  }

  return (
    <span
      className={`${bgColor} ${fgColor} ${
        direction !== undefined
          ? "rounded-lg px-2 py-1"
          : "flex h-5 w-5 items-center justify-center rounded-full"
      } text-xs font-bold`}
    >
      {flags === Flags.MINER ? (
        <FontAwesomeIcon icon={faCoins} size="1x" />
      ) : (
        (msg ?? (
          <span>
            <FontAwesomeIcon icon={faLongArrowAltRight} />
          </span>
        ))
      )}
    </span>
  );
};

export default React.memo(TransactionDirection);



================================================
FILE: src/components/TransactionLink.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import TransactionLink from "./TransactionLink";

const meta = {
  component: TransactionLink,
} satisfies Meta<typeof TransactionLink>;

export default meta;
type Story = StoryObj<typeof meta>;

export const SimpleTx: Story = {
  args: {
    txHash:
      "0x91298d449f193df13d1ba23e6ea55e9f50b88b4fb9b373571b8cb33a07c2f879",
  },
};

export const FailedTx: Story = {
  args: {
    ...SimpleTx.args,
    fail: true,
  },
};

export const BlobTx: Story = {
  args: {
    ...SimpleTx.args,
    blob: true,
  },
};

export const DepositTx: Story = {
  args: {
    ...SimpleTx.args,
    deposit: true,
  },
};



================================================
FILE: src/components/TransactionLink.tsx
================================================
import {
  faExclamationCircle,
  faSplotch,
  faTurnDown,
} from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { FC, memo } from "react";
import { NavLink } from "react-router-dom";
import { transactionURL } from "../url";

type TransactionLinkProps = {
  txHash: string;
  fail?: boolean;
  blob?: boolean;
  deposit?: boolean;
};

const TransactionLink: FC<TransactionLinkProps> = ({
  txHash,
  fail,
  blob,
  deposit,
}) => (
  <span className="flex-no-wrap flex space-x-1">
    {fail && (
      <span className="text-red-600" title="Transaction reverted">
        <FontAwesomeIcon icon={faExclamationCircle} />
      </span>
    )}
    {blob && (
      <span className="text-rose-400" title="Blob transaction">
        <FontAwesomeIcon icon={faSplotch} />
      </span>
    )}
    {deposit && (
      <span className="text-emerald-600" title="Deposit transaction">
        <FontAwesomeIcon icon={faTurnDown} />
      </span>
    )}
    <span className="truncate">
      <NavLink
        className="font-hash text-link-blue hover:text-link-blue-hover"
        to={transactionURL(txHash)}
      >
        <p className="truncate" data-test="tx-hash">
          {txHash}
        </p>
      </NavLink>
    </span>
  </span>
);

export default memo(TransactionLink);



================================================
FILE: src/components/TransactionType.tsx
================================================
import React from "react";
import ExternalLink from "./ExternalLink";

type TransactionTypeProps = {
  type: number;
};

const TransactionType: React.FC<TransactionTypeProps> = ({ type }) => {
  let description: React.ReactNode;
  switch (type) {
    case 0:
      description = "legacy";
      break;
    case 1:
      description = (
        <ExternalLink href="https://eips.ethereum.org/EIPS/eip-2930">
          EIP-2930
        </ExternalLink>
      );
      break;
    case 2:
      description = (
        <ExternalLink href="https://eips.ethereum.org/EIPS/eip-1559">
          EIP-1559
        </ExternalLink>
      );
      break;
    case 3:
      description = (
        <ExternalLink href="https://eips.ethereum.org/EIPS/eip-4844">
          EIP-4844 (Blob)
        </ExternalLink>
      );
      break;
    case 126:
      description = (
        <ExternalLink href="https://specs.optimism.io/protocol/deposits.html#the-deposited-transaction-type">
          Optimism: Deposit
        </ExternalLink>
      );
      break;
    default:
      description = "unknown";
  }

  return (
    <span>
      {type} <span className="font-bold">({description})</span>
    </span>
  );
};

export default React.memo(TransactionType);



================================================
FILE: src/components/USDAmount.tsx
================================================
import { FixedNumber } from "ethers";
import { FC, memo } from "react";
import FiatValue, { FiatBoxProps, neutralPreset } from "./FiatValue";

type USDAmountProps = {
  amount: bigint;
  amountDecimals: number;
  quote: bigint;
  quoteDecimals: number;
  colorScheme?: FiatBoxProps;
};

// TODO: fix the duplication mess with other currency display components

/**
 * USD amounts are displayed commified with 2 decimals places and $ prefix,
 * i.e., "$1,000.00".
 */
const USDAmount: FC<USDAmountProps> = ({
  amount,
  amountDecimals,
  quote,
  quoteDecimals,
  colorScheme = neutralPreset,
}) => {
  const value = amount * quote;
  const decimals = amountDecimals + quoteDecimals;
  const fiatAmount = FixedNumber.fromValue(
    value,
    decimals,
    `ufixed512x${decimals}`,
  );

  return <FiatValue value={fiatAmount} {...colorScheme} />;
};

export default memo(USDAmount);



================================================
FILE: src/consensus/Epoch.tsx
================================================
import { FC, memo } from "react";
import { useParams } from "react-router-dom";
import StandardFrame from "../components/StandardFrame";
import SlotItem from "./epoch/SlotItem";

const Epoch: FC = () => {
  const { epochNumber } = useParams();
  return <StandardFrame>Zilliqa is epochless</StandardFrame>;
};

type SlotListProps = {
  slots: number[];
};

const SlotList: FC<SlotListProps> = memo(({ slots }) => (
  <>
    {slots.map((s) => (
      <SlotItem key={s} slotNumber={s} />
    ))}
  </>
));

export default Epoch;



================================================
FILE: src/consensus/Slot.tsx
================================================
import { TabGroup, TabList } from "@headlessui/react";
import { FC, Suspense } from "react";
import { Route, Routes, useParams } from "react-router-dom";
import NavTab from "../components/NavTab";
import StandardFrame from "../components/StandardFrame";
import StandardSelectionBoundary from "../selection/StandardSelectionBoundary";
import Attestations from "./slot/Attestations";
import AttestationsTabTitle from "./slot/AttestationsTabTitle";
import Overview from "./slot/Overview";
import SlotSubtitle from "./slot/SlotSubtitle";

const Slot: FC = () => {
  const { slotNumber } = useParams();
  if (slotNumber === undefined) {
    throw new Error("slotNumber couldn't be undefined here");
  }
  const slotAsNumber = parseInt(slotNumber);

  return (
    <StandardFrame>
      <SlotSubtitle slotNumber={slotAsNumber} />
      <StandardSelectionBoundary>
        <TabGroup>
          <TabList className="flex space-x-2 rounded-t-lg border-l border-r border-t bg-white">
            <NavTab href=".">Overview</NavTab>
            <NavTab href="attestations">
              <AttestationsTabTitle slotNumber={slotAsNumber} />
            </NavTab>
          </TabList>
        </TabGroup>
        <Suspense fallback={null}>
          <Routes>
            <Route index element={<Overview />} />
            <Route path="attestations" element={<Attestations />} />
          </Routes>
        </Suspense>
      </StandardSelectionBoundary>
    </StandardFrame>
  );
};

export default Slot;



================================================
FILE: src/consensus/types.ts
================================================
/**
 * Component is associated with a CL epoch
 */
export type EpochAwareComponentProps = {
  epochNumber: number;
};

/**
 * Component is associated with a CL slot
 */
export type SlotAwareComponentProps = {
  slotNumber: number;
};

/**
 * Withdrawal details
 */
export type Withdrawal = {
  index: string;
  validator_index: string;
  address: string;
  amount: string;
};



================================================
FILE: src/consensus/Validator.tsx
================================================
import { TabGroup, TabList } from "@headlessui/react";
import { isHexString } from "ethers";
import { FC, Suspense } from "react";
import { Route, Routes, useParams } from "react-router-dom";
import NavTab from "../components/NavTab";
import StandardFrame from "../components/StandardFrame";
import StandardSelectionBoundary from "../selection/StandardSelectionBoundary";
import { useValidator } from "../useConsensus";
import Overview from "./validator/Overview";
import ValidatorSubtitle from "./validator/ValidatorSubtitle";

const Validator: FC = () => {
  const { validatorIndex } = useParams();
  if (validatorIndex === undefined) {
    throw new Error("validatorIndex couldn't be undefined here");
  }
  const idx = parseValidatorIndex(validatorIndex);
  if (idx === undefined) {
    throw new Error("Invalid validator index or public key");
  }

  const validator = useValidator(idx);

  return (
    <StandardFrame>
      {validator && (
        <>
          <ValidatorSubtitle
            validatorIndex={validator.data.index}
            slashed={validator.data.validator.slashed}
          />
          <StandardSelectionBoundary>
            <TabGroup>
              <TabList className="flex space-x-2 rounded-t-lg border-l border-r border-t bg-white">
                <NavTab href=".">Overview</NavTab>
              </TabList>
            </TabGroup>
            <Suspense fallback={null}>
              <Routes>
                <Route
                  index
                  element={<Overview validatorIndex={validator.data.index} />}
                />
              </Routes>
            </Suspense>
          </StandardSelectionBoundary>
        </>
      )}
    </StandardFrame>
  );
};

const parseValidatorIndex = (
  validatorIndex: string,
): number | string | undefined => {
  // Validator by index
  if (validatorIndex.match(/^\d+$/)) {
    return parseInt(validatorIndex);
  }

  // Validator by public key
  if (validatorIndex.length === 98 && isHexString(validatorIndex, 48)) {
    return validatorIndex;
  }

  return undefined;
};

export default Validator;



================================================
FILE: src/consensus/components/CheckedValidatorLink.tsx
================================================
import { FC, memo } from "react";
import { useValidator } from "../../useConsensus";
import RawValidatorLink from "./ValidatorLink";

type CheckedValidatorLinkProps = {
  validatorIndex: number;
};

const CheckedValidatorLink: FC<CheckedValidatorLinkProps> = ({
  validatorIndex,
}) => {
  const validator = useValidator(validatorIndex);
  const slashed = validator?.data.validator.slashed;

  return <RawValidatorLink validatorIndex={validatorIndex} slashed={slashed} />;
};

export default memo(CheckedValidatorLink);



================================================
FILE: src/consensus/components/EpochLink.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import EpochLink from "./EpochLink";

const meta = {
  component: EpochLink,
} satisfies Meta<typeof EpochLink>;

export default meta;
type Story = StoryObj<typeof meta>;

export const GenesisEpoch: Story = {
  args: {
    epochNumber: 0,
  },
};

export const RecentMainnetEpoch: Story = {
  args: {
    epochNumber: 180_500,
  },
};

export const BigEpochNumber: Story = {
  args: {
    epochNumber: 1_200_200,
  },
};



================================================
FILE: src/consensus/components/EpochLink.tsx
================================================
import { faList } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { FC } from "react";
import { NavLink } from "react-router-dom";
import { epochURL } from "../../url";
import { commify } from "../../utils/utils";
import { EpochAwareComponentProps } from "../types";

const EpochLink: FC<EpochAwareComponentProps> = ({ epochNumber }) => {
  let text = commify(epochNumber);

  return (
    <NavLink
      className="flex items-baseline space-x-1 font-blocknum text-link-blue hover:text-link-blue-hover"
      to={epochURL(epochNumber)}
    >
      <FontAwesomeIcon className="self-center" icon={faList} size="1x" />
      <span>{text}</span>
    </NavLink>
  );
};

export default EpochLink;



================================================
FILE: src/consensus/components/EpochNavBlock.tsx
================================================
import { FC } from "react";
import NavBlock from "../../components/NavBlock";
import { epochURL } from "../../url";
import { EPOCHS_AFTER_HEAD, useHeadEpochNumber } from "../../useConsensus";
import { EpochAwareComponentProps } from "../types";

const EpochNavBlock: FC<EpochAwareComponentProps> = ({ epochNumber }) => {
  const headEpochNumber = useHeadEpochNumber();

  return (
    <>
      {headEpochNumber !== undefined && (
        <NavBlock
          entityNum={epochNumber}
          latestEntityNum={headEpochNumber + EPOCHS_AFTER_HEAD}
          urlBuilder={epochURL}
        />
      )}
    </>
  );
};

export default EpochNavBlock;



================================================
FILE: src/consensus/components/Finalized.tsx
================================================
import { faCheckCircle } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { FC, memo } from "react";

const Finalized: FC = () => (
  <span className="flex w-min items-baseline space-x-1 rounded-lg bg-emerald-50 px-3 py-1 text-xs text-emerald-500">
    <FontAwesomeIcon className="self-center" icon={faCheckCircle} size="1x" />
    <span>Yes</span>
  </span>
);

export default memo(Finalized);



================================================
FILE: src/consensus/components/NotFinalized.tsx
================================================
import { faTimesCircle } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { FC, memo } from "react";

const NotFinalized: FC = () => (
  <span className="flex w-min items-baseline space-x-1 rounded-lg bg-amber-50 px-3 py-1 text-xs text-amber-500">
    <FontAwesomeIcon className="self-center" icon={faTimesCircle} size="1x" />
    <span>No</span>
  </span>
);

export default memo(NotFinalized);



================================================
FILE: src/consensus/components/SlashingCount.tsx
================================================
import { FC, memo } from "react";
import RelevantNumericValue from "../../components/RelevantNumericValue";

type SlashingCountProps = {
  slot: any;
};

const SlashingCount: FC<SlashingCountProps> = ({ slot }) => (
  <>
    <span className="text-gray-400">
      <span className="text-red-600">
        <RelevantNumericValue
          value={slot.data.message.body.attester_slashings.length}
        />
      </span>{" "}
      /{" "}
      <span className="text-red-600">
        <RelevantNumericValue
          value={slot.data.message.body.proposer_slashings.length}
        />
      </span>
    </span>
  </>
);

export default memo(SlashingCount);



================================================
FILE: src/consensus/components/SlotAttestationsLink.tsx
================================================
import { faCircleCheck } from "@fortawesome/free-regular-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { FC, memo, PropsWithChildren } from "react";
import { NavLink } from "react-router-dom";
import { slotAttestationsURL } from "../../url";
import { SlotAwareComponentProps } from "../types";

const SlotAttestationsLink: FC<PropsWithChildren<SlotAwareComponentProps>> = ({
  slotNumber,
  children,
}) => (
  <NavLink
    className={`flex items-baseline space-x-1 font-blocknum text-link-blue hover:text-link-blue-hover`}
    to={slotAttestationsURL(slotNumber)}
  >
    <FontAwesomeIcon className="self-center" icon={faCircleCheck} size="1x" />
    <span>{children}</span>
  </NavLink>
);

export default memo(SlotAttestationsLink);



================================================
FILE: src/consensus/components/SlotLink.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import SlotLink from "./SlotLink";

const meta = {
  component: SlotLink,
} satisfies Meta<typeof SlotLink>;

export default meta;
type Story = StoryObj<typeof meta>;

export const GenesisSlot: Story = {
  args: {
    slot: 0,
  },
};

export const RecentMainnetSlotNumber: Story = {
  args: {
    slot: 5_700_000,
  },
};

export const BigSlotNumber: Story = {
  args: {
    slot: 5_700_000_000,
  },
};

export const MissedSlot: Story = {
  args: {
    ...RecentMainnetSlotNumber.args,
    missed: true,
  },
};

export const FutureScheduleSlot: Story = {
  args: {
    ...RecentMainnetSlotNumber.args,
    scheduled: true,
  },
};

export const SlotContainingSlashing: Story = {
  args: {
    ...RecentMainnetSlotNumber.args,
    slashings: true,
  },
};

export const BlockRoot: Story = {
  args: {
    slot: "0x1baac88e41f597e21a780e89dfe7add5da50e522ee4b535e7799995d807ad743",
  },
};



================================================
FILE: src/consensus/components/SlotLink.tsx
================================================
import { faSquare as faSquareRegular } from "@fortawesome/free-regular-svg-icons";
import { faSquare } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { FC, memo } from "react";
import { NavLink } from "react-router-dom";
import { slotURL } from "../../url";
import { commify } from "../../utils/utils";

type SlotLinkProps = {
  slot: number | string;
  missed?: boolean;
  scheduled?: boolean;
  slashings?: boolean;
};

const SlotLink: FC<SlotLinkProps> = ({
  slot,
  missed,
  scheduled,
  slashings,
}) => {
  const isNum = typeof slot === "number";
  let text = isNum ? commify(slot) : slot;

  return (
    <NavLink
      className={`flex items-baseline ${
        missed
          ? "text-red-500 line-through hover:text-red-800"
          : "text-link-blue hover:text-link-blue-hover"
      } ${isNum ? "font-blocknum space-x-2" : "font-hash space-x-1"}`}
      to={slotURL(slot)}
    >
      <FontAwesomeIcon
        className={`self-center ${slashings ? "text-red-600" : ""}`}
        icon={missed || scheduled ? faSquareRegular : faSquare}
        size="1x"
      />
      <span>{text}</span>
    </NavLink>
  );
};

export default memo(SlotLink);



================================================
FILE: src/consensus/components/UncheckedValidatorLink.tsx
================================================
import { FC, memo } from "react";
import RawValidatorLink from "./ValidatorLink";

type UncheckedValidatorLinkProps = {
  validatorIndex: number;
};

// Shows a validator link without reading whether the validator was slashed
const UncheckedValidatorLink: FC<UncheckedValidatorLinkProps> = ({
  validatorIndex,
}) => {
  return <RawValidatorLink validatorIndex={validatorIndex} slashed={false} />;
};

export default memo(UncheckedValidatorLink);



================================================
FILE: src/consensus/components/ValidatorLink.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import ValidatorLink from "./ValidatorLink";

const meta = {
  component: ValidatorLink,
} satisfies Meta<typeof ValidatorLink>;

export default meta;
type Story = StoryObj<typeof meta>;

export const GenesisValidator: Story = {
  args: {
    validatorIndex: 0,
  },
};

export const RecentMainnetValidatorIndex: Story = {
  args: {
    validatorIndex: 560_000,
  },
};

export const DisabledValidatorLink: Story = {
  args: {
    ...RecentMainnetValidatorIndex.args,
    disabled: true,
  },
};

export const SlashedValidator: Story = {
  args: {
    ...RecentMainnetValidatorIndex.args,
    slashed: true,
  },
};



================================================
FILE: src/consensus/components/ValidatorLink.tsx
================================================
import { faUser, faUserSlash } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { FC, memo } from "react";
import { NavLink } from "react-router-dom";
import { validatorURL } from "../../url";
import { commify } from "../../utils/utils";

type ValidatorLinkProps = {
  validatorIndex: number;
  slashed?: boolean;
  disabled?: boolean;
};

const ValidatorLink: FC<ValidatorLinkProps> = ({
  validatorIndex,
  slashed,
  disabled = false,
}) => {
  const labelElement = (
    <>
      {slashed ? (
        <span className="text-red-600 hover:text-red-800">
          <FontAwesomeIcon
            className="self-center"
            icon={faUserSlash}
            size="1x"
          />
        </span>
      ) : (
        <span className={disabled ? "text-gray-500" : "text-cyan-600"}>
          <FontAwesomeIcon className="self-center" icon={faUser} size="1x" />
        </span>
      )}
      <span>{commify(validatorIndex)}</span>
    </>
  );

  if (disabled) {
    return (
      <span className={`flex items-baseline space-x-1 font-blocknum`}>
        {labelElement}
      </span>
    );
  }
  return (
    <NavLink
      className={`flex items-baseline space-x-1 font-blocknum ${
        slashed
          ? "text-red-600 line-through hover:text-red-800"
          : "text-link-blue hover:text-link-blue-hover"
      }`}
      to={validatorURL(validatorIndex)}
    >
      {labelElement}
    </NavLink>
  );
};

export default memo(ValidatorLink);



================================================
FILE: src/consensus/epoch/EpochSubtitle.tsx
================================================
import { FC, memo } from "react";
import StandardSubtitle from "../../components/StandardSubtitle";
import EpochNavBlock from "../components/EpochNavBlock";
import { EpochAwareComponentProps } from "../types";

const EpochSubtitle: FC<EpochAwareComponentProps> = ({ epochNumber }) => (
  <StandardSubtitle>
    <div className="flex items-baseline space-x-1">
      <span>Epoch</span>
      <span className="text-base text-gray-500">#{epochNumber}</span>
      <EpochNavBlock epochNumber={epochNumber} />
    </div>
  </StandardSubtitle>
);

export default memo(EpochSubtitle);



================================================
FILE: src/consensus/epoch/LoadingSlotItem.tsx
================================================
import { FC, memo } from "react";
import ContentLoader from "react-content-loader";
import { useProposerMap, useSlotToEpoch } from "../../useConsensus";
import CheckedValidatorLink from "../components/CheckedValidatorLink";
import SlotLink from "../components/SlotLink";
import { SlotAwareComponentProps } from "../types";
import SlotTimestamp from "./SlotTimestamp";

const LoadingSlotItem: FC<SlotAwareComponentProps> = ({ slotNumber }) => {
  const epochNumber = useSlotToEpoch(slotNumber);
  const proposers = useProposerMap(epochNumber);
  const expectedProposer = proposers && parseInt(proposers?.[slotNumber]);

  return (
    <tr>
      <td>
        <SlotLink slot={slotNumber} scheduled />
      </td>
      <td>
        <ContentLoader viewBox="0 0 30 4">
          <rect x="0" y="0" rx="1" ry="1" width="30" height="4" />
        </ContentLoader>
      </td>
      <td></td>
      <td>
        <SlotTimestamp slotNumber={slotNumber} />
      </td>
      {expectedProposer !== undefined ? (
        <td>
          <CheckedValidatorLink validatorIndex={expectedProposer} />
        </td>
      ) : (
        <td className="self-center">
          <ContentLoader viewBox="0 0 60 15" width={60} height={15}>
            <rect x="0" y="0" rx="3" ry="3" width="60" height="15" />
          </ContentLoader>
        </td>
      )}
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
    </tr>
  );
};

export default memo(LoadingSlotItem);



================================================
FILE: src/consensus/epoch/NotFoundSlotItem.tsx
================================================
import { FC, memo } from "react";
import { useFinalizedSlotNumber } from "../../useConsensus";
import { SlotAwareComponentProps } from "../types";
import ScheduledOrMissedSlotItem from "./ScheduledOrMissedSlotItem";

type NotFoundSlotItemProps = SlotAwareComponentProps & {
  isValidating: boolean;
};

const NotFoundSlotItem: FC<NotFoundSlotItemProps> = ({
  slotNumber,
  isValidating,
}) => {
  const finalizedSlotNumber = useFinalizedSlotNumber();
  if (finalizedSlotNumber === undefined || slotNumber > finalizedSlotNumber) {
    return (
      <ScheduledOrMissedSlotItem
        slotNumber={slotNumber}
        isValidating={isValidating}
        scheduled
      />
    );
  }
  return (
    <ScheduledOrMissedSlotItem
      slotNumber={slotNumber}
      isValidating={isValidating}
      missed
    />
  );
};

export default memo(NotFoundSlotItem);



================================================
FILE: src/consensus/epoch/ScheduledOrMissedSlotItem.tsx
================================================
import { FC, memo } from "react";
import ContentLoader from "react-content-loader";
import { useProposerMap, useSlotToEpoch } from "../../useConsensus";
import CheckedValidatorLink from "../components/CheckedValidatorLink";
import SlotLink from "../components/SlotLink";
import { SlotAwareComponentProps } from "../types";
import SlotTimestamp from "./SlotTimestamp";

type ScheduledOrMissedSlotItemProps = SlotAwareComponentProps & {
  missed?: boolean;
  scheduled?: boolean;
  isValidating: boolean;
};

const ScheduledOrMissedSlotItem: FC<ScheduledOrMissedSlotItemProps> = ({
  slotNumber,
  missed,
  scheduled,
  isValidating,
}) => {
  const epochNumber = useSlotToEpoch(slotNumber);
  const proposers = useProposerMap(epochNumber);
  const expectedProposer = proposers && parseInt(proposers?.[slotNumber]);

  return (
    <tr>
      <td>
        <SlotLink slot={slotNumber} missed={missed} scheduled={scheduled} />
      </td>
      <td className={`${isValidating ? "italic text-gray-400" : ""}`}>
        {missed && "Missed"}
        {scheduled && "Scheduled"}
      </td>
      <td>-</td>
      <td>
        <SlotTimestamp slotNumber={slotNumber} />
      </td>
      {expectedProposer !== undefined ? (
        <td>
          <CheckedValidatorLink validatorIndex={expectedProposer} />
        </td>
      ) : (
        <td className="self-center">
          <ContentLoader viewBox="0 0 60 15" width={60} height={15}>
            <rect x="0" y="0" rx="3" ry="3" width="60" height="15" />
          </ContentLoader>
        </td>
      )}
      <td>-</td>
      <td>-</td>
      <td></td>
      <td>-</td>
      <td>-</td>
      <td>-</td>
    </tr>
  );
};

export default memo(ScheduledOrMissedSlotItem);



================================================
FILE: src/consensus/epoch/SlotItem.tsx
================================================
import { FC, memo } from "react";
import { useSlot } from "../../useConsensus";
import { SlotAwareComponentProps } from "../types";
import LoadingSlotItem from "./LoadingSlotItem";
import NotFoundSlotItem from "./NotFoundSlotItem";
import StoredSlotItem from "./StoredSlotItem";

const SlotItem: FC<SlotAwareComponentProps> = ({ slotNumber }) => {
  const { error, isLoading, isValidating } = useSlot(slotNumber);

  if (isLoading) {
    return <LoadingSlotItem slotNumber={slotNumber} />;
  }
  if (error) {
    return (
      <NotFoundSlotItem slotNumber={slotNumber} isValidating={isValidating} />
    );
  }

  return <StoredSlotItem slotNumber={slotNumber} />;
};

export default memo(SlotItem);



================================================
FILE: src/consensus/epoch/SlotTimestamp.tsx
================================================
import { FC } from "react";
import AutoRefreshAge from "../../components/AutoRefreshAge";
import { useSlotTimestamp } from "../../useConsensus";
import { SlotAwareComponentProps } from "../types";

const SlotTimestamp: FC<SlotAwareComponentProps> = ({ slotNumber }) => {
  const slotTimestamp = useSlotTimestamp(slotNumber);
  if (slotTimestamp === undefined) {
    return <></>;
  }

  return <AutoRefreshAge timestamp={slotTimestamp} />;
};

export default SlotTimestamp;



================================================
FILE: src/consensus/epoch/StoredSlotItem.tsx
================================================
import { FC, memo } from "react";
import BlockLink from "../../components/BlockLink";
import RelevantNumericValue from "../../components/RelevantNumericValue";
import { useSlot } from "../../useConsensus";
import { commify } from "../../utils/utils";
import CheckedValidatorLink from "../components/CheckedValidatorLink";
import SlashingCount from "../components/SlashingCount";
import SlotAttestationsLink from "../components/SlotAttestationsLink";
import SlotLink from "../components/SlotLink";
import AggregationParticipation from "../slot/AggregationParticipation";
import BlockRoot from "../slot/BlockRoot";
import { SlotAwareComponentProps } from "../types";
import SlotTimestamp from "./SlotTimestamp";

const StoredSlotItem: FC<SlotAwareComponentProps> = ({ slotNumber }) => {
  const { slot } = useSlot(slotNumber);

  return (
    <tr>
      <td>
        <SlotLink
          slot={slotNumber}
          slashings={
            slot.data.message.body.attester_slashings.length !== 0 ||
            slot.data.message.body.proposer_slashings.length !== 0
          }
        />
      </td>
      <td>Proposed</td>
      <td>
        {slot.data.message.body.execution_payload && (
          <BlockLink
            blockTag={parseInt(
              slot.data.message.body.execution_payload.block_number,
            )}
          />
        )}
      </td>
      <td>
        <SlotTimestamp slotNumber={slotNumber} />
      </td>
      <td>
        <CheckedValidatorLink
          validatorIndex={slot.data.message.proposer_index}
        />
      </td>
      <td>
        <BlockRoot slotNumber={slotNumber} />
      </td>
      <td>
        <SlotAttestationsLink slotNumber={slotNumber}>
          {commify(slot.data.message.body.attestations.length.toString())}
        </SlotAttestationsLink>
      </td>
      <td className="self-center">
        {slot.data.message.body.sync_aggregate && (
          <AggregationParticipation
            hex={slot.data.message.body.sync_aggregate.sync_committee_bits}
          />
        )}
      </td>
      <td>
        <RelevantNumericValue value={slot.data.message.body.deposits.length} />{" "}
        /{" "}
        {slot.data.message.body.execution_payload &&
        slot.data.message.body.execution_payload.withdrawals ? (
          <RelevantNumericValue
            value={slot.data.message.body.execution_payload.withdrawals.length}
          />
        ) : (
          "-"
        )}
      </td>
      <td>
        <SlashingCount slot={slot} />
      </td>
      <td>
        <RelevantNumericValue
          value={slot.data.message.body.voluntary_exits.length}
        />
      </td>
    </tr>
  );
};

export default memo(StoredSlotItem);



================================================
FILE: src/consensus/slot/AggregationBits.tsx
================================================
import { getBytes } from "ethers";
import { FC } from "react";

type AggregationBitsProps = {
  hex: string;
};

const AggregationBits: FC<AggregationBitsProps> = ({ hex }) => {
  const bm = Array.from(getBytes(hex));
  return (
    <div className="grid w-fit grid-cols-8 gap-2 font-hash">
      {bm.map((b, i) => (
        <Bitmap key={i} b={b} />
      ))}
    </div>
  );
};

type BitmapProps = {
  b: number;
};

const Bitmap: FC<BitmapProps> = ({ b }) => {
  const elems = [];
  for (let i = 0; i < 8; i++) {
    elems.push(
      b & (1 << i) ? (
        <span key={i}>1</span>
      ) : (
        <span key={i} className="text-red-500">
          0
        </span>
      ),
    );
  }
  return <span>{elems}</span>;
};

export default AggregationBits;



================================================
FILE: src/consensus/slot/AggregationParticipation.tsx
================================================
import { getBytes } from "ethers";
import { FC, memo } from "react";
import PercentageBar from "../../components/PercentageBar";

type AggregationParticipationProps = {
  hex: string;
};

const AggregationParticipation: FC<AggregationParticipationProps> = ({
  hex,
}) => {
  const bm = Array.from(getBytes(hex));
  const total = bm.length * 8;
  let participation = 0;

  for (let i = 0; i < bm.length; i++) {
    const b = bm.at(i);
    for (let j = 0; j < 8; j++) {
      if (b! & (1 << j)) {
        participation++;
      }
    }
  }

  const perc = Math.round(((participation * 100) / total) * 100) / 100;
  return <PercentageBar perc={perc} />;
};

export default memo(AggregationParticipation);



================================================
FILE: src/consensus/slot/Attestation.tsx
================================================
import { FC } from "react";
import { useInView } from "react-intersection-observer";
import HexValue from "../../components/HexValue";
import InfoRow from "../../components/InfoRow";
import { commify } from "../../utils/utils";
import EpochLink from "../components/EpochLink";
import AggregationBits from "./AggregationBits";
import ValidatorList from "./ValidatorList";

type AttestationProps = {
  idx: number;
  att: any;
};

const Attestation: FC<AttestationProps> = ({ idx, att }) => {
  const { ref, inView } = useInView({ triggerOnce: true });

  return (
    <div className="flex space-x-10 py-5" ref={ref}>
      <div>
        <span className="flex h-12 w-12 items-center justify-center rounded-full bg-emerald-50 text-emerald-500">
          {idx}
        </span>
      </div>
      <div className="w-full divide-y bg-white px-3">
        <InfoRow title="Slot">{commify(att.data.slot.toString())}</InfoRow>
        <InfoRow title="Committee Index">
          {commify(att.data.index.toString())}
        </InfoRow>
        {inView && (
          <>
            <InfoRow title="Aggregation Bits">
              <AggregationBits hex={att.aggregation_bits} />
            </InfoRow>
            <InfoRow title="Validators">
              <ValidatorList
                slotNumber={att.data.slot}
                committeeIndex={att.data.index}
              />
            </InfoRow>
          </>
        )}
        <InfoRow title="Beacon Block Root">
          <HexValue value={att.data.beacon_block_root} />
        </InfoRow>
        <InfoRow title="Source">
          <div className="flex space-x-2">
            <EpochLink epochNumber={att.data.source.epoch} />
            <span>/</span>
            <HexValue value={att.data.source.root} />
          </div>
        </InfoRow>
        <InfoRow title="Target">
          <div className="flex space-x-2">
            <EpochLink epochNumber={att.data.target.epoch} />
            <span>/</span>
            <HexValue value={att.data.target.root} />
          </div>
        </InfoRow>
        <InfoRow title="Signature">
          <HexValue value={att.signature} />
        </InfoRow>
      </div>
    </div>
  );
};

export default Attestation;



================================================
FILE: src/consensus/slot/Attestations.tsx
================================================
import { FC } from "react";
import { useParams } from "react-router-dom";
import ContentFrame from "../../components/ContentFrame";
import { useSlot } from "../../useConsensus";
import { usePageTitle } from "../../useTitle";
import Attestation from "./Attestation";
import OverviewSkeleton from "./OverviewSkeleton";
import SlotNotFound from "./SlotNotFound";

const Attestations: FC = () => {
  const { slotNumber } = useParams();
  if (slotNumber === undefined) {
    throw new Error("slotNumber couldn't be undefined here");
  }
  const slotAsNumber = parseInt(slotNumber);
  const { slot, error, isLoading } = useSlot(slotAsNumber);
  usePageTitle(
    slotNumber === undefined ? undefined : `Attestations for #${slotNumber}`,
  );

  return (
    <ContentFrame tabs>
      {isLoading ? (
        <OverviewSkeleton />
      ) : error ? (
        <SlotNotFound slot={slotAsNumber} />
      ) : (
        <>
          {slot.data.message.body.attestations.map((att: any, i: any) => (
            <Attestation key={i} idx={i} att={att} />
          ))}
        </>
      )}
    </ContentFrame>
  );
};

export default Attestations;



================================================
FILE: src/consensus/slot/AttestationsTabTitle.tsx
================================================
import { FC } from "react";
import { useSlot } from "../../useConsensus";
import { SlotAwareComponentProps } from "../types";

const AttestationsTabTitle: FC<SlotAwareComponentProps> = ({ slotNumber }) => {
  const { slot, error, isLoading } = useSlot(slotNumber);

  return (
    <>
      Attestations
      {slot && ` (${slot.data.message.body.attestations.length ?? 0})`}
    </>
  );
};

export default AttestationsTabTitle;



================================================
FILE: src/consensus/slot/BlockRoot.tsx
================================================
import { FC } from "react";
import HexValue from "../../components/HexValue";
import { useBlockRoot } from "../../useConsensus";
import { SlotAwareComponentProps } from "../types";

const BlockRoot: FC<SlotAwareComponentProps> = ({ slotNumber }) => {
  const { blockRoot } = useBlockRoot(slotNumber);
  if (blockRoot === undefined) {
    return <></>;
  }

  return <HexValue value={blockRoot} />;
};

export default BlockRoot;



================================================
FILE: src/consensus/slot/Overview.tsx
================================================
import { getAddress, toUtf8String } from "ethers";
import { FC, useMemo } from "react";
import { useParams } from "react-router-dom";
import BlockLink from "../../components/BlockLink";
import ContentFrame from "../../components/ContentFrame";
import HexValue from "../../components/HexValue";
import InfoRow from "../../components/InfoRow";
import RelevantNumericValue from "../../components/RelevantNumericValue";
import StandardTBody from "../../components/StandardTBody";
import StandardTHead from "../../components/StandardTHead";
import StandardTable from "../../components/StandardTable";
import Timestamp from "../../components/Timestamp";
import { useSlot, useSlotTimestamp, useSlotToEpoch } from "../../useConsensus";
import { usePageTitle } from "../../useTitle";
import CheckedValidatorLink from "../components/CheckedValidatorLink";
import EpochLink from "../components/EpochLink";
import SlashingCount from "../components/SlashingCount";
import { Withdrawal } from "../types";
import AggregationBits from "./AggregationBits";
import AggregationParticipation from "./AggregationParticipation";
import BlockRoot from "./BlockRoot";
import OverviewSkeleton from "./OverviewSkeleton";
import SlotNotFound from "./SlotNotFound";
import WithdrawalDetailsRow from "./WithdrawalDetailsRow";

const GWEI = 10n ** 9n;

const Overview: FC = () => {
  const { slotNumber } = useParams();
  if (slotNumber === undefined) {
    throw new Error("slotNumber couldn't be undefined here");
  }
  const slotAsNumber = parseInt(slotNumber);
  const { slot, error, isLoading } = useSlot(slotAsNumber);
  usePageTitle(slotNumber === undefined ? undefined : `Slot #${slotNumber}`);

  const epoch = useSlotToEpoch(slotAsNumber);
  const slotTimestamp = useSlotTimestamp(slotAsNumber);

  const graffiti = useMemo(() => {
    try {
      return slot && toUtf8String(slot.data.message.body.graffiti);
    } catch (err) {
      console.info("Error while converting slot graffiti to string");
      console.info(err);
    }
  }, [slot]);

  return (
    <ContentFrame tabs>
      {isLoading ? (
        <OverviewSkeleton />
      ) : error ? (
        <SlotNotFound slot={slotAsNumber} />
      ) : (
        <>
          <InfoRow title="Timestamp">
            {slotTimestamp && <Timestamp value={slotTimestamp} />}
          </InfoRow>
          <InfoRow title="Epoch">
            <EpochLink epochNumber={epoch} />
          </InfoRow>
          {slot.data.message.body.execution_payload && (
            <InfoRow title="Block Number">
              <BlockLink
                blockTag={slot.data.message.body.execution_payload.block_number}
              />
            </InfoRow>
          )}
          <InfoRow title="Proposer">
            <CheckedValidatorLink
              validatorIndex={slot.data.message.proposer_index}
            />
          </InfoRow>
          <InfoRow title="Block Root">
            <BlockRoot slotNumber={slotAsNumber} />
          </InfoRow>
          <InfoRow title="Parent Root">
            <HexValue value={slot.data.message.parent_root} />
          </InfoRow>
          <InfoRow title="State Root">
            <HexValue value={slot.data.message.state_root} />
          </InfoRow>
          <InfoRow title="Signature">
            <HexValue value={slot.data.signature} />
          </InfoRow>
          <InfoRow title="Randao Reveal">
            <HexValue value={slot.data.message.body.randao_reveal} />
          </InfoRow>
          <InfoRow title="Graffiti">
            {graffiti} (Hex:{" "}
            <HexValue value={slot.data.message.body.graffiti} />)
          </InfoRow>
          <InfoRow title="ETH1 Block Hash">
            <BlockLink blockTag={slot.data.message.body.eth1_data.block_hash} />
          </InfoRow>
          <InfoRow title="ETH1 Deposit Root">
            <HexValue value={slot.data.message.body.eth1_data.deposit_root} />
          </InfoRow>
          <InfoRow title="ETH1 Deposit Count">
            <RelevantNumericValue
              value={slot.data.message.body.eth1_data.deposit_count}
            />
          </InfoRow>
          {slot.data.message.body.sync_aggregate && (
            <>
              <InfoRow title="Sync Aggregate Participation">
                <AggregationParticipation
                  hex={
                    slot.data.message.body.sync_aggregate.sync_committee_bits
                  }
                />
              </InfoRow>
              <InfoRow title="Sync Aggregate Bits">
                <AggregationBits
                  hex={
                    slot.data.message.body.sync_aggregate.sync_committee_bits
                  }
                />
              </InfoRow>
              <InfoRow title="Sync Aggregate Signature">
                <HexValue
                  value={
                    slot.data.message.body.sync_aggregate
                      .sync_committee_signature
                  }
                />
              </InfoRow>
            </>
          )}
          <InfoRow title="Voluntary Exits">
            <RelevantNumericValue
              value={slot.data.message.body.voluntary_exits.length}
            />
          </InfoRow>
          <InfoRow title="Slashings (Attester/Proposer)">
            <SlashingCount slot={slot} />
          </InfoRow>
          <InfoRow title="Deposits">
            <RelevantNumericValue
              value={slot.data.message.body.deposits.length}
            />
          </InfoRow>
          {slot.data.message.body.execution_payload &&
            slot.data.message.body.execution_payload.withdrawals && (
              <InfoRow title="Withdrawals">
                <RelevantNumericValue
                  value={
                    slot.data.message.body.execution_payload.withdrawals.length
                  }
                />
                {slot.data.message.body.execution_payload.withdrawals.length >
                  0 && (
                  <div className="mt-3">
                    <StandardTable>
                      <StandardTHead>
                        <th className="w-10">Validator</th>
                        <th className="w-28">Withdrawal Address</th>
                        <th className="w-20">Amount</th>
                      </StandardTHead>
                      <StandardTBody>
                        {slot.data.message.body.execution_payload.withdrawals.map(
                          (withdrawal: Withdrawal) => (
                            <WithdrawalDetailsRow
                              key={withdrawal.index}
                              validatorIndex={Number(
                                withdrawal.validator_index,
                              )}
                              address={getAddress(withdrawal.address)}
                              amount={BigInt(withdrawal.amount) * GWEI}
                            />
                          ),
                        )}
                      </StandardTBody>
                    </StandardTable>
                  </div>
                )}
              </InfoRow>
            )}
        </>
      )}
    </ContentFrame>
  );
};

export default Overview;



================================================
FILE: src/consensus/slot/OverviewSkeleton.tsx
================================================
import { FC } from "react";
import ContentLoader from "react-content-loader";

const OverviewSkeleton: FC = () => (
  <ContentLoader viewBox="0 0 300 12">
    <rect x="0" y="4" rx="1" ry="1" width="70" height="4" />
    <rect x="75" y="4" rx="1" ry="1" width="100" height="4" />
  </ContentLoader>
);

export default OverviewSkeleton;



================================================
FILE: src/consensus/slot/SlotByBlockRoot.tsx
================================================
import React, { useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import StandardFrame from "../../components/StandardFrame";
import { useSlot } from "../../useConsensus";
import SlotNotFound from "./SlotNotFound";

const SlotByBlockRoot: React.FC = () => {
  const { blockRoot } = useParams();
  if (blockRoot === undefined) {
    throw new Error("SlotByBlockRoot: blockRoot is undefined");
  }
  const { slot, error, isLoading } = useSlot(blockRoot);
  const navigate = useNavigate();
  useEffect(() => {
    if (slot && slot.data.message.slot) {
      navigate("/slot/" + slot.data.message.slot, {
        replace: true,
      });
    }
  }, [slot]);

  return (
    <StandardFrame>
      {(!slot && !isLoading) || error ? (
        <SlotNotFound slot={blockRoot} />
      ) : (
        <></>
      )}
    </StandardFrame>
  );
};

export default React.memo(SlotByBlockRoot);



================================================
FILE: src/consensus/slot/SlotNotFound.tsx
================================================
import { FC, memo } from "react";
import { useHeadSlotNumber } from "../../useConsensus";
import { commify } from "../../utils/utils";
import SlotLink from "../components/SlotLink";

interface SlotNotFoundProps {
  slot: number | string;
}

const SlotNotFound: FC<SlotNotFoundProps> = ({ slot }) => {
  const headSlotNumber = useHeadSlotNumber();

  return (
    <div className="space-y-2 py-4 text-sm">
      <p>
        Slot {typeof slot === "number" ? commify(slot) : slot} data not found.
      </p>
      {headSlotNumber !== undefined &&
      typeof slot === "number" &&
      slot > headSlotNumber ? (
        <p className="flex space-x-2">
          <span>Head slot is:</span>
          <SlotLink slot={headSlotNumber} />
        </p>
      ) : (
        <>
          <p>Possible causes:</p>
          <ul className="list-inside list-disc">
            <li>Missed slot</li>
            <li>CL does not have the slot data</li>
          </ul>
        </>
      )}
    </div>
  );
};

export default memo(SlotNotFound);



================================================
FILE: src/consensus/slot/SlotSubtitle.tsx
================================================
import { FC, memo } from "react";
import NavBlock from "../../components/NavBlock";
import StandardSubtitle from "../../components/StandardSubtitle";
import { slotURL } from "../../url";
import { useHeadSlotNumber } from "../../useConsensus";
import { SlotAwareComponentProps } from "../types";

const SlotSubtitle: FC<SlotAwareComponentProps> = ({ slotNumber }) => {
  const headSlotNumber = useHeadSlotNumber();

  return (
    <StandardSubtitle>
      <div className="flex items-baseline space-x-1">
        <span>Slot</span>
        <span className="text-base text-gray-500">#{slotNumber}</span>
        {headSlotNumber !== undefined && (
          <NavBlock
            entityNum={slotNumber}
            latestEntityNum={headSlotNumber}
            urlBuilder={slotURL}
          />
        )}
      </div>
    </StandardSubtitle>
  );
};

export default memo(SlotSubtitle);



================================================
FILE: src/consensus/slot/ValidatorList.tsx
================================================
import { FC, memo } from "react";
import { useCommittee } from "../../useConsensus";
import UncheckedValidatorLink from "../components/UncheckedValidatorLink";
import { SlotAwareComponentProps } from "../types";

type ValidatorListProps = SlotAwareComponentProps & {
  committeeIndex: number;
};

const ValidatorList: FC<ValidatorListProps> = ({
  slotNumber,
  committeeIndex,
}) => {
  const validators = useCommittee(slotNumber, committeeIndex);
  if (!validators) {
    return <></>;
  }

  return (
    <div className="grid grid-cols-8 ">
      {validators.data[0].validators.map((v: any) => (
        <UncheckedValidatorLink key={v} validatorIndex={v} />
      ))}
    </div>
  );
};

export default memo(ValidatorList);



================================================
FILE: src/consensus/slot/WithdrawalDetailsRow.tsx
================================================
import { FC, memo } from "react";
import { balancePreset } from "../../components/FiatValue";
import NativeTokenAmountAndFiat from "../../components/NativeTokenAmountAndFiat";
import TransactionAddress from "../../execution/components/TransactionAddress";
import CheckedValidatorLink from "../components/CheckedValidatorLink";

const GWEI = 10n ** 9n;

interface WithdrawalDetailsRowProps {
  validatorIndex: number;
  address: string;
  amount: bigint;
}

const WithdrawalDetailsRow: FC<WithdrawalDetailsRowProps> = ({
  validatorIndex,
  address,
  amount,
}) => {
  return (
    <tr>
      <td>
        <CheckedValidatorLink validatorIndex={validatorIndex} />
      </td>
      <td className="flex">
        <TransactionAddress address={address} />
      </td>
      <td>
        <NativeTokenAmountAndFiat value={amount} {...balancePreset} />
      </td>
    </tr>
  );
};

export default memo(WithdrawalDetailsRow);



================================================
FILE: src/consensus/validator/Overview.tsx
================================================
import { FC } from "react";
import ContentFrame from "../../components/ContentFrame";
import { balancePreset } from "../../components/FiatValue";
import HexValue from "../../components/HexValue";
import InfoRow from "../../components/InfoRow";
import NativeTokenAmountAndFiat from "../../components/NativeTokenAmountAndFiat";
import Timestamp from "../../components/Timestamp";
import { useValidator } from "../../useConsensus";
import { usePageTitle } from "../../useTitle";
import { commify } from "../../utils/utils";
import EpochLink from "../components/EpochLink";
import WithdrawalCredentials from "./WithdrawalCredentials";

const GWEI = 10n ** 9n;

type OverviewProps = {
  validatorIndex: string;
};

const Overview: FC<OverviewProps> = ({ validatorIndex }) => {
  const validator = useValidator(validatorIndex);

  usePageTitle(validator ? `Validator #${validator.data.index}` : undefined);

  const eligibleTimestamp = 0;
  const activationTimestamp = 0;
  const exitTimestamp = 0;
  const withdrawableTimestamp = 0;

  return (
    <ContentFrame tabs>
      {validator && (
        <>
          <InfoRow title="Index">
            {commify(validator.data.index.toString())}
          </InfoRow>
          <InfoRow title="Public Key">
            <HexValue value={validator.data.validator.pubkey} />
          </InfoRow>
          <InfoRow title="Withdrawal Credentials">
            <WithdrawalCredentials
              credentials={validator.data.validator.withdrawal_credentials}
            />
          </InfoRow>
          <InfoRow title="Balance">
            <NativeTokenAmountAndFiat
              value={BigInt(validator.data.balance) * GWEI}
              {...balancePreset}
            />
          </InfoRow>
          <InfoRow title="Effective Balance">
            <NativeTokenAmountAndFiat
              value={BigInt(validator.data.validator.effective_balance) * GWEI}
              {...balancePreset}
            />
          </InfoRow>
          <InfoRow title="Status">{validator.data.status}</InfoRow>
          {eligibleTimestamp && (
            <InfoRow title="Eligible Epoch">
              <div className="flex space-x-2">
                <EpochLink
                  epochNumber={
                    validator.data.validator.activation_eligibility_epoch
                  }
                />
                {eligibleTimestamp && <Timestamp value={eligibleTimestamp} />}
              </div>
            </InfoRow>
          )}
          {activationTimestamp && (
            <InfoRow title="Activation Epoch">
              <div className="flex space-x-2">
                <EpochLink
                  epochNumber={validator.data.validator.activation_epoch}
                />
                {activationTimestamp && (
                  <Timestamp value={activationTimestamp} />
                )}
              </div>
            </InfoRow>
          )}
          {exitTimestamp && (
            <InfoRow title="Exit Epoch">
              <div className="flex space-x-2">
                <EpochLink epochNumber={validator.data.validator.exit_epoch} />
                <Timestamp value={exitTimestamp} />
              </div>
            </InfoRow>
          )}
          {withdrawableTimestamp && (
            <InfoRow title="Withdrawable Epoch">
              <div className="flex space-x-2">
                <EpochLink
                  epochNumber={validator.data.validator.withdrawable_epoch}
                />
                <Timestamp value={withdrawableTimestamp} />
              </div>
            </InfoRow>
          )}
        </>
      )}
    </ContentFrame>
  );
};

export default Overview;



================================================
FILE: src/consensus/validator/ValidatorSubtitle.tsx
================================================
import { faUserSlash } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { FC, memo } from "react";
import StandardSubtitle from "../../components/StandardSubtitle";

type ValidatorSubtitleProps = {
  validatorIndex: number | string;
  slashed?: boolean;
};

const ValidatorSubtitle: FC<ValidatorSubtitleProps> = ({
  validatorIndex,
  slashed,
}) => (
  <StandardSubtitle>
    <div className="flex items-baseline space-x-1">
      <span>Validator</span>
      <span className="text-base text-gray-500">#{validatorIndex}</span>
      {slashed && (
        <span className="space-x-2 rounded-xl border border-red-600 bg-red-200 px-2 py-1 text-sm text-red-600">
          <span className="">
            <FontAwesomeIcon
              className="self-center"
              icon={faUserSlash}
              size="1x"
            />
          </span>
          <span>slashed</span>
        </span>
      )}
    </div>
  </StandardSubtitle>
);

export default memo(ValidatorSubtitle);



================================================
FILE: src/consensus/validator/WithdrawalCredentials.tsx
================================================
import { dataSlice, getAddress, toBeArray } from "ethers";
import { FC, memo } from "react";
import HexValue from "../../components/HexValue";
import DecoratedAddressLink from "../../execution/components/DecoratedAddressLink";

type WithdrawalCredentialsProps = {
  credentials: string;
};

const WithdrawalCredentials: FC<WithdrawalCredentialsProps> = ({
  credentials,
}) => {
  const credentialsType = toBeArray(credentials)[0];

  switch (credentialsType) {
    case 1: {
      // Extract the last 20 bytes to form the address
      const checksummedAddress = getAddress(
        dataSlice(credentials, 32 - 20, 32),
      );
      return (
        <div className="flex space-x-2">
          <HexValue value={"0x01"} />
          {": "}
          <DecoratedAddressLink address={checksummedAddress} />
        </div>
      );
    }
    default:
      return (
        <div className="flex space-x-2">
          <HexValue value={dataSlice(credentials, 0, 1)} />
          {": "}
          <HexValue value={credentials} />
        </div>
      );
  }
};

export default memo(WithdrawalCredentials);



================================================
FILE: src/execution/Address.tsx
================================================
import { FC, lazy } from "react";
import { useSearchParams } from "react-router-dom";
import AddressMainPage from "./AddressMainPage";

const AddressTransactionByNonce = lazy(
  () => import("./AddressTransactionByNonce"),
);

/**
 * This is the default handler for /address/* URL path.
 *
 * It can redirect to different child components depending on search
 * query params, so it is not possible to use default path routing
 * mechanisms to declarative-model them.
 */
const Address: FC = () => {
  // Search address by nonce === transaction @ nonce
  const [searchParams] = useSearchParams();
  const rawNonce = searchParams.get("nonce");
  if (rawNonce !== null) {
    return <AddressTransactionByNonce rawNonce={rawNonce} />;
  }

  // Standard address main page with tabs
  return <AddressMainPage />;
};

export default Address;



================================================
FILE: src/execution/AddressMainPage.tsx
================================================
import { faQuestionCircle } from "@fortawesome/free-regular-svg-icons";
import { faCircleNotch } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { TabGroup, TabList, TabPanels } from "@headlessui/react";
import { fromBech32Address } from "@zilliqa-js/crypto";
import { validation } from "@zilliqa-js/util";
import React, { useCallback, useContext } from "react";
import {
  Outlet,
  useNavigate,
  useParams,
  useSearchParams,
} from "react-router-dom";
import AddressOrENSNameNotFound from "../components/AddressOrENSNameNotFound";
import NavTab from "../components/NavTab";
import StandardFrame from "../components/StandardFrame";
import { useProxyAttributes } from "../ots2/usePrototypeTransferHooks";
import SourcifyLogo from "../sourcify/SourcifyLogo";
import { Match, useSourcifyMetadata } from "../sourcify/useSourcify";
import { useWhatsabiMetadata } from "../sourcify/useWhatsabi";
import { ChecksummedAddress } from "../types";
import { useERC1967ProxyAttributes } from "../useERC1967";
import { useHasCode } from "../useErigonHooks";
import { useAddressOrENS } from "../useResolvedAddresses";
import { RuntimeContext } from "../useRuntime";
import AddressSubtitle from "./address/AddressSubtitle";
import { AddressAwareComponentProps } from "./types";

const ProxyTabs: React.FC<AddressAwareComponentProps> = ({ address }) => {
  const { addressOrName } = useParams();
  const { provider } = useContext(RuntimeContext);
  const proxyAttrs = useProxyAttributes(provider, address);
  return (
    <>
      {proxyAttrs.proxyHasCode && proxyAttrs.proxyMatch && (
        <NavTab href={`/address/${addressOrName}/proxyLogicContract`}>
          <span className={`flex items-baseline space-x-2`}>
            <span>Logic Contract</span>
            <SourcifyLogo />
          </span>
        </NavTab>
      )}
      {proxyAttrs.logicAddress && proxyAttrs.proxyMatch && (
        <NavTab href={`/address/${addressOrName}/readContractAsProxy`}>
          <span>Read as Proxy</span>
        </NavTab>
      )}
    </>
  );
};

export type AddressOutletContext = {
  address: string;
  hasCode: boolean | undefined;
  match: Match | null | undefined;
  whatsabiMatch: Match | null | undefined;
};

const AddressMainPage: React.FC = () => {
  const { uncheckedAddressOrName, direction } = useParams();
  if (uncheckedAddressOrName === undefined) {
    throw new Error("uncheckedAddressOrName couldn't be undefined here");
  }
  const addressOrName = validation.isBech32(uncheckedAddressOrName)
    ? fromBech32Address(uncheckedAddressOrName).toLowerCase()
    : uncheckedAddressOrName;

  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const urlFixer = useCallback(
    (address: ChecksummedAddress) => {
      navigate(
        `/address/${address}${
          direction ? "/" + direction : ""
        }?${searchParams.toString()}`,
        { replace: true },
      );
    },
    [navigate, direction, searchParams],
  );
  const [checksummedAddress, isENS, error] = useAddressOrENS(
    addressOrName,
    urlFixer,
  );

  const { config, provider } = useContext(RuntimeContext);
  const hasCode = useHasCode(provider, checksummedAddress);

  const match = useSourcifyMetadata(
    hasCode ? checksummedAddress : undefined,
    provider._network.chainId,
  );
  const whatsabiMatch = useWhatsabiMetadata(
    match === null && hasCode ? checksummedAddress : undefined,
    provider._network.chainId,
    provider,
    config.assetsURLPrefix,
  );

  const eip1967ProxyAttrs = useERC1967ProxyAttributes(
    provider,
    checksummedAddress,
  );

  return (
    <StandardFrame>
      {error ? (
        <AddressOrENSNameNotFound
          addressOrENSName={addressOrName}
          supportsENS={
            provider._network.getPlugin("org.ethers.plugins.network.Ens") !==
            null
          }
        />
      ) : (
        checksummedAddress && (
          <>
            <AddressSubtitle
              addressOrName={addressOrName}
              address={checksummedAddress}
              isENS={isENS}
            />
            <TabGroup>
              <TabList className="flex space-x-2 rounded-t-lg border-l border-r border-t bg-white">
                <NavTab href={`/address/${addressOrName}`}>Overview</NavTab>
                {config?.experimental && (
                  <>
                    <NavTab href={`/address/${addressOrName}/erc20`}>
                      ERC20 Transfers
                    </NavTab>
                    <NavTab href={`/address/${addressOrName}/erc721`}>
                      ERC721 Transfers
                    </NavTab>
                    <NavTab href={`/address/${addressOrName}/tokens`}>
                      Token Balances
                    </NavTab>
                    <NavTab href={`/address/${addressOrName}/withdrawals`}>
                      Withdrawals
                    </NavTab>
                    <NavTab href={`/address/${addressOrName}/blocksRewarded`}>
                      Blocks Rewarded
                    </NavTab>
                  </>
                )}
                {hasCode && (
                  <>
                    <NavTab href={`/address/${addressOrName}/contract`}>
                      <span
                        className={`flex items-baseline space-x-2 ${
                          match === undefined ? "italic opacity-50" : ""
                        }`}
                      >
                        <span>Contract</span>
                        {match === undefined ? (
                          <span className="self-center">
                            <FontAwesomeIcon
                              className="animate-spin"
                              icon={faCircleNotch}
                            />
                          </span>
                        ) : match === null ? (
                          <span className="self-center text-red-500">
                            <FontAwesomeIcon icon={faQuestionCircle} />
                          </span>
                        ) : (
                          <span className="self-center">
                            <SourcifyLogo />
                          </span>
                        )}
                      </span>
                    </NavTab>
                    {(match || whatsabiMatch) && (
                      <NavTab href={`/address/${addressOrName}/readContract`}>
                        <span className={`flex items-baseline space-x-2`}>
                          <span>Read Contract</span>
                        </span>
                      </NavTab>
                    )}
                    {(match || whatsabiMatch) &&
                      eip1967ProxyAttrs?.delegate && (
                        <NavTab
                          href={`/address/${addressOrName}/readContractAs1967Proxy`}
                        >
                          <span className={`flex items-baseline space-x-2`}>
                            <span>Read As Proxy</span>
                          </span>
                        </NavTab>
                      )}
                  </>
                )}
                {config?.experimental && (
                  <ProxyTabs address={checksummedAddress} />
                )}
              </TabList>
              <TabPanels>
                <Outlet
                  context={{
                    address: checksummedAddress,
                    hasCode,
                    match,
                    whatsabiMatch,
                  }}
                />
              </TabPanels>
            </TabGroup>
          </>
        )
      )}
    </StandardFrame>
  );
};

export default AddressMainPage;



================================================
FILE: src/execution/AddressTransactionByNonce.tsx
================================================
import React, {
  useCallback,
  useContext,
  useEffect,
  useState,
  useTransition,
} from "react";
import { useNavigate, useParams, useSearchParams } from "react-router-dom";
import AddressOrENSNameInvalidNonce from "../components/AddressOrENSNameInvalidNonce";
import AddressOrENSNameNoTx from "../components/AddressOrENSNameNoTx";
import AddressOrENSNameNotFound from "../components/AddressOrENSNameNotFound";
import StandardFrame from "../components/StandardFrame";
import { ChecksummedAddress } from "../types";
import { transactionURL } from "../url";
import { useTransactionBySenderAndNonce } from "../useErigonHooks";
import { useAddressOrENS } from "../useResolvedAddresses";
import { RuntimeContext } from "../useRuntime";

type AddressTransactionByNonceProps = {
  rawNonce: string;
};

const AddressTransactionByNonce: React.FC<AddressTransactionByNonceProps> = ({
  rawNonce,
}) => {
  const { provider } = useContext(RuntimeContext);
  const [_, startTransition] = useTransition();

  const { addressOrName, direction } = useParams();
  if (addressOrName === undefined) {
    throw new Error("addressOrName couldn't be undefined here");
  }

  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const urlFixer = useCallback(
    (address: ChecksummedAddress) => {
      navigate(
        `/address/${address}${
          direction ? "/" + direction : ""
        }?${searchParams.toString()}`,
        { replace: true },
      );
    },
    [navigate, direction, searchParams],
  );
  const [checksummedAddress, , ensError] = useAddressOrENS(
    addressOrName,
    urlFixer,
  );

  // Calculate txCount ONLY when asked for latest nonce
  const [txCount, setTxCount] = useState<bigint | undefined>();
  useEffect(() => {
    if (!checksummedAddress || rawNonce !== "latest") {
      setTxCount(undefined);
      return;
    }

    const readTxCount = async () => {
      const count = BigInt(
        await provider.getTransactionCount(checksummedAddress),
      );
      setTxCount(count);
    };
    readTxCount();
  }, [provider, checksummedAddress, rawNonce]);

  // Determine desired nonce from parse int query param or txCount - 1 nonce
  // in case of latest
  // TODO: Double check behavior
  let nonce: bigint | undefined | null;
  if (rawNonce === "latest") {
    if (txCount !== undefined) {
      nonce = txCount - 1n;
    }
  } else {
    nonce = BigInt(parseInt(rawNonce, 10));
    if (nonce < 0n) {
      nonce = null;
    }
  }

  // Given all base params are determined, get the corresponding tx
  const txHash = useTransactionBySenderAndNonce(
    provider,
    checksummedAddress,
    nonce !== undefined && nonce === null ? undefined : nonce,
  );

  // Success; replace and render filler
  useEffect(() => {
    if (txHash === undefined || txHash === null) {
      return;
    }

    startTransition(() => {
      navigate(transactionURL(txHash), { replace: true });
    });
  }, [txHash, navigate, startTransition]);

  // Invalid ENS
  if (ensError) {
    return (
      <StandardFrame>
        <AddressOrENSNameNotFound
          addressOrENSName={addressOrName}
          supportsENS={
            provider._network.getPlugin("org.ethers.plugins.network.Ens") !==
            null
          }
        />
      </StandardFrame>
    );
  }

  // Loading...
  if (checksummedAddress === undefined || nonce === undefined) {
    return <StandardFrame />;
  }

  // Address hasn't made the first outbound tx yet
  if (nonce !== null && nonce !== undefined && nonce < 0n) {
    return (
      <StandardFrame>
        <AddressOrENSNameNoTx addressOrENSName={checksummedAddress} />
      </StandardFrame>
    );
  }

  // Garbage nonce
  if (nonce === null) {
    return (
      <StandardFrame>
        <AddressOrENSNameInvalidNonce
          addressOrENSName={checksummedAddress}
          nonce={rawNonce}
        />
      </StandardFrame>
    );
  }

  // Valid nonce, waiting tx load
  if (txHash === undefined) {
    return <StandardFrame />;
  }

  // Valid nonce, but no tx found
  if (txHash === null) {
    return (
      <StandardFrame>
        <AddressOrENSNameInvalidNonce
          addressOrENSName={checksummedAddress}
          nonce={nonce.toString()}
        />
      </StandardFrame>
    );
  }

  return <StandardFrame />;
};

export default AddressTransactionByNonce;



================================================
FILE: src/execution/Block.tsx
================================================
import { isHexString } from "ethers";
import React, { useContext } from "react";
import { useParams } from "react-router";
import NavBlock from "../components/NavBlock";
import StandardFrame from "../components/StandardFrame";
import StandardSubtitle from "../components/StandardSubtitle";
import { blockURL } from "../url";
import { useBlockData } from "../useErigonHooks";
import { useLatestBlockNumber } from "../useLatestBlock";
import { RuntimeContext } from "../useRuntime";
import { useBlockPageTitle } from "../useTitle";
import BlockDetails from "./BlockDetails";

const Block: React.FC = () => {
  const { provider } = useContext(RuntimeContext);
  const { blockNumberOrHash } = useParams();
  if (blockNumberOrHash === undefined) {
    throw new Error("blockNumberOrHash couldn't be undefined here");
  }
  const { data: block, isLoading } = useBlockData(provider, blockNumberOrHash);
  let blockNumber = isHexString(blockNumberOrHash)
    ? block && block.number !== undefined
      ? block.number
      : undefined
    : parseInt(blockNumberOrHash);
  let latestBlockNumber = useLatestBlockNumber(provider);
  if (blockNumber === undefined) {
    // Disable navigation while the block hash's block number is unknown
    blockNumber = 0;
    latestBlockNumber = undefined;
  }

  useBlockPageTitle(blockNumberOrHash);

  return (
    <StandardFrame>
      <StandardSubtitle>
        <div className="flex items-baseline space-x-1">
          <span>TxBlock</span>
          <span className="text-base text-gray-500" data-test="block-number">
            #{blockNumberOrHash}
          </span>
          <NavBlock
            entityNum={blockNumber}
            latestEntityNum={latestBlockNumber}
            urlBuilder={blockURL}
          />
        </div>
      </StandardSubtitle>
      <BlockDetails blockNumberOrHash={blockNumberOrHash} />
    </StandardFrame>
  );
};

export default Block;



================================================
FILE: src/execution/BlockDetails.tsx
================================================
import { faBurn } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { Utf8ErrorFuncs, formatUnits, toUtf8String } from "ethers";
import { FC, useContext, useMemo } from "react";
import { NavLink } from "react-router-dom";
import BlockLink from "../components/BlockLink";
import BlockNotFound from "../components/BlockNotFound";
import ContentFrame from "../components/ContentFrame";
import ExternalBlockLink from "../components/ExternalBlockLink";
import FormattedBalance from "../components/FormattedBalance";
import HexValue from "../components/HexValue";
import InfoRow from "../components/InfoRow";
import NativeTokenAmount from "../components/NativeTokenAmount";
import NativeTokenPrice from "../components/NativeTokenPrice";
import PercentageBar from "../components/PercentageBar";
import RelativePosition from "../components/RelativePosition";
import Timestamp from "../components/Timestamp";
import SlotLink from "../consensus/components/SlotLink";
import { blockTxsURL } from "../url";
import { useChainInfo } from "../useChainInfo";
import { useBlockData, useL1Epoch } from "../useErigonHooks";
import { RuntimeContext } from "../useRuntime";
import { useBlockPageTitle } from "../useTitle";
import { commify } from "../utils/utils";
import BlockReward from "./components/BlockReward";
import DecoratedAddressLink from "./components/DecoratedAddressLink";

interface BlockDetailsProps {
  blockNumberOrHash: undefined | string;
}

const BlockDetails: FC<BlockDetailsProps> = ({ blockNumberOrHash }) => {
  const { config, provider } = useContext(RuntimeContext);
  if (blockNumberOrHash === undefined) {
    throw new Error("blockNumberOrHash couldn't be undefined here");
  }
  const {
    nativeCurrency: { name, symbol },
  } = useChainInfo();

  const { data: block, isLoading } = useBlockData(provider, blockNumberOrHash);
  useBlockPageTitle(blockNumberOrHash);

  const extraStr = useMemo(() => {
    return block && toUtf8String(block.extraData, Utf8ErrorFuncs.replace);
  }, [block]);
  // gasUsedDepositTx: Optimism-specific; "gas used" by the deposit transaction which does
  // not pay the basefee
  const gasUsedWithoutDepositTx = block
    ? block.gasUsed - (block.gasUsedDepositTx ?? 0n)
    : 0n;
  const burntFees =
    block?.baseFeePerGas && block.baseFeePerGas * gasUsedWithoutDepositTx;
  const gasUsedPerc =
    block && Number((block.gasUsed * 10000n) / block.gasLimit) / 100;

  const l1Epoch = useL1Epoch(provider, block ? block.number : null);
  const l1ExplorerUrl: string | undefined =
    config.opChainSettings?.l1ExplorerURL;

  return (
    <>
      {block === null && (
        <BlockNotFound blockNumberOrHash={blockNumberOrHash} />
      )}
      {block === undefined && (
        <ContentFrame>
          <InfoRow title="Block Height">Loading block data...</InfoRow>
        </ContentFrame>
      )}
      {block && (
        <ContentFrame isLoading={isLoading}>
          <InfoRow title="Block Height">
            <span className="font-bold" data-test="block-height-text">
              {commify(block.number)}
            </span>
          </InfoRow>
          <InfoRow title="Timestamp">
            <Timestamp value={block.timestamp} />
          </InfoRow>
          <InfoRow title="Transactions">
            <NavLink
              className="rounded-lg bg-link-blue/10 px-2 py-1 text-xs text-link-blue hover:bg-link-blue/100 hover:text-white"
              to={blockTxsURL(block.number)}
            >
              {block.transactionCount} transaction
              {block.transactionCount !== 1 ? "s" : ""}
            </NavLink>{" "}
            in this block
          </InfoRow>
          <InfoRow title="Mined by">
            <DecoratedAddressLink address={block.miner} miner />
          </InfoRow>
          <InfoRow title="Block Reward">
            <BlockReward block={block} />
          </InfoRow>
          <InfoRow title="Uncles Reward">
            <NativeTokenAmount value={block.unclesReward} />
          </InfoRow>
          <InfoRow title="Size">{commify(block.size)} bytes</InfoRow>
          {block.baseFeePerGas !== null &&
            block.baseFeePerGas !== undefined && (
              <InfoRow title="Base Fee">
                <span>
                  <FormattedBalance
                    value={block.baseFeePerGas}
                    decimals={9}
                    symbol="Gwei"
                  />{" "}
                  (
                  <FormattedBalance
                    value={block.baseFeePerGas}
                    decimals={0}
                    symbol="wei"
                  />
                  )
                </span>
              </InfoRow>
            )}
          {burntFees !== null && burntFees !== undefined && (
            <InfoRow title="Burnt Fees">
              <div className="flex items-baseline space-x-1">
                <span className="flex space-x-1 text-black">
                  <span title="Burnt fees">
                    <FontAwesomeIcon icon={faBurn} size="1x" />
                  </span>
                  <span>
                    <span className="line-through">
                      <FormattedBalance value={burntFees} />
                    </span>{" "}
                    {symbol}
                  </span>
                </span>
              </div>
            </InfoRow>
          )}
          <InfoRow title="Gas Used/Limit">
            <div className="flex items-baseline space-x-3">
              <div>
                <RelativePosition
                  pos={commify(formatUnits(block.gasUsed, 0))}
                  total={commify(formatUnits(block.gasLimit, 0))}
                />
              </div>
              <PercentageBar perc={gasUsedPerc!} />
            </div>
          </InfoRow>
          {block.blobGasUsed !== null && block.blobGasUsed !== undefined && (
            <InfoRow title="Blob Gas Used">
              {commify(block.blobGasUsed)}
            </InfoRow>
          )}
          {block.excessBlobGas !== null &&
            block.excessBlobGas !== undefined && (
              <InfoRow title="Excess Blob Gas">
                {commify(block.excessBlobGas)}
              </InfoRow>
            )}
          <InfoRow title="Extra Data">
            {extraStr} (Hex:{" "}
            <span className="break-all font-data">{block.extraData}</span>)
          </InfoRow>
          <InfoRow title={`${name} Price`}>
            <NativeTokenPrice blockTag={block.number} />
          </InfoRow>
          <InfoRow title="Difficulty">
            {commify(block.difficulty.toString())}
          </InfoRow>
          <InfoRow title="Total Difficulty">
            {block.totalDifficulty !== undefined
              ? commify(block.totalDifficulty.toString())
              : "N/A"}
          </InfoRow>
          <InfoRow title="Hash">
            <HexValue value={block.hash ?? "<unknown>"} />
          </InfoRow>
          <InfoRow title="Parent Hash">
            <BlockLink blockTag={block.parentHash} />
          </InfoRow>
          {block.parentBeaconBlockRoot && (
            <InfoRow title="Parent Beacon Block Root">
              {config?.beaconAPI === undefined ? (
                <HexValue value={block.parentBeaconBlockRoot} />
              ) : (
                <SlotLink slot={block.parentBeaconBlockRoot} />
              )}
            </InfoRow>
          )}
          {l1Epoch !== undefined && l1Epoch !== null && (
            <InfoRow title="L1 Epoch">
              <ExternalBlockLink
                blockTag={l1Epoch}
                explorerUrl={l1ExplorerUrl}
              />
            </InfoRow>
          )}
          <InfoRow title="Sha3Uncles">
            <HexValue value={block.sha3Uncles} />
          </InfoRow>
          <InfoRow title="State Root">
            <HexValue value={block.stateRoot} />
          </InfoRow>
          {block.receiptsRoot !== null && block.receiptsRoot !== undefined && (
            <InfoRow title="Receipts Root">
              <HexValue value={block.receiptsRoot} />
            </InfoRow>
          )}
          <InfoRow title="Nonce">
            <span className="font-data">{block.nonce}</span>
          </InfoRow>
        </ContentFrame>
      )}
    </>
  );
};

export default BlockDetails;



================================================
FILE: src/execution/BlockList.tsx
================================================
import React, { useContext } from "react";
import { useSearchParams } from "react-router-dom";
import ContentFrame from "../components/ContentFrame";
import StandardFrame from "../components/StandardFrame";
import StandardSubtitle from "../components/StandardSubtitle";
import { PAGE_SIZE } from "../params";
import BlockItem from "../search/BlockItem";
import BlockResultHeader from "../search/BlockResultHeader";
import { PendingBlockResults } from "../search/PendingResults";
import SearchResultNavBar from "../search/SearchResultNavBar";
import { totalBlocksFormatter } from "../search/messages";
import {
  EmptyBlocksDisplay,
  useEmptyBlocksToggler,
} from "../search/useEmptyBlocksToggler";
import { useFeeToggler } from "../search/useFeeToggler";
import { useMultiColumnDisplayToggler } from "../search/useMultiColumnDisplayToggler";
import StandardSelectionBoundary from "../selection/StandardSelectionBoundary";
import { useRecentBlocks } from "../useErigonHooks";
import { useLatestBlockNumber } from "../useLatestBlock";
import { RuntimeContext } from "../useRuntime";

const BlockList: React.FC = () => {
  const { provider } = useContext(RuntimeContext);

  const latestBlockNum = useLatestBlockNumber(provider);
  const [feeDisplay, feeDisplayToggler] = useFeeToggler();
  const [emptyBlocksDisplay, emptyBlocksDisplayToggler] =
    useEmptyBlocksToggler();
  const [multiColumnDisplay, multiColumnDisplayToggler] =
    useMultiColumnDisplayToggler();

  const [searchParams] = useSearchParams();
  let pageNumber = 1;
  const p = searchParams.get("p");
  if (p) {
    try {
      pageNumber = parseInt(p);
    } catch (err) {}
  }
  const { data, isLoading } = useRecentBlocks(
    provider,
    latestBlockNum,
    pageNumber - 1,
    PAGE_SIZE,
  );

  return (
    <StandardFrame>
      <StandardSubtitle>
        <div className="flex items-baseline space-x-1">Tx Block List</div>
      </StandardSubtitle>
      <ContentFrame isLoading={isLoading}>
        <SearchResultNavBar
          pageNumber={pageNumber}
          pageSize={PAGE_SIZE}
          total={latestBlockNum}
          totalFormatter={totalBlocksFormatter}
        />
        <BlockResultHeader
          feeDisplay={feeDisplay}
          feeDisplayToggler={feeDisplayToggler}
          emptyBlocksDisplay={emptyBlocksDisplay}
          emptyBlocksDisplayToggler={emptyBlocksDisplayToggler}
          multiColumnDisplay={multiColumnDisplay}
          multiColumnDisplayToggler={multiColumnDisplayToggler}
        />
        {data ? (
          <StandardSelectionBoundary>
            {data
              .map((block) =>
                block &&
                (emptyBlocksDisplay === EmptyBlocksDisplay.SHOW_EMPTY_BLOCKS ||
                  block.transactionCount != 0) ? (
                  <BlockItem
                    key={block.number}
                    block={block}
                    feeDisplay={feeDisplay}
                    multiColumnDisplay={multiColumnDisplay}
                  />
                ) : undefined,
              )
              .filter((blk) => blk !== undefined)}
          </StandardSelectionBoundary>
        ) : (
          <PendingBlockResults />
        )}
      </ContentFrame>
    </StandardFrame>
  );
};

export default BlockList;



================================================
FILE: src/execution/BlockTransactions.tsx
================================================
import React, { useContext } from "react";
import { useParams } from "react-router";
import { useSearchParams } from "react-router-dom";
import StandardFrame from "../components/StandardFrame";
import { PAGE_SIZE } from "../params";
import { useBlockTransactions } from "../useErigonHooks";
import { RuntimeContext } from "../useRuntime";
import { useBlockTransactionsPageTitle } from "../useTitle";
import BlockTransactionHeader from "./block/BlockTransactionHeader";
import BlockTransactionResults from "./block/BlockTransactionResults";

const BlockTransactions: React.FC = () => {
  const { provider } = useContext(RuntimeContext);
  const params = useParams();
  if (params.blockNumber === undefined) {
    throw new Error("blockNumber couldn't be undefined here");
  }
  const blockNumber = parseInt(params.blockNumber);

  const [searchParams] = useSearchParams();
  let pageNumber = 1;
  const p = searchParams.get("p");
  if (p) {
    try {
      pageNumber = parseInt(p);
    } catch (err) {}
  }

  const { data, isLoading } = useBlockTransactions(
    provider,
    blockNumber,
    pageNumber - 1,
    PAGE_SIZE,
  );
  const txs = data?.txs;
  const totalTxs = data?.total;

  useBlockTransactionsPageTitle(
    blockNumber,
    pageNumber,
    totalTxs === undefined ? undefined : Math.ceil(totalTxs / PAGE_SIZE),
  );

  return (
    <StandardFrame>
      <BlockTransactionHeader blockTag={blockNumber} />
      <BlockTransactionResults
        page={txs}
        total={totalTxs ?? 0}
        pageNumber={pageNumber}
        isLoading={isLoading}
      />
    </StandardFrame>
  );
};

export default BlockTransactions;



================================================
FILE: src/execution/BroadcastTransactionPage.tsx
================================================
import React, { useContext, useRef, useState } from "react";
import ContentFrame from "../components/ContentFrame";
import StandardFrame from "../components/StandardFrame";
import StandardSubtitle from "../components/StandardSubtitle";
import StandardTextarea from "../components/StandardTextarea";
import TransactionLink from "../components/TransactionLink";
import { RuntimeContext } from "../useRuntime";

const BroadcastTransactionPage: React.FC = () => {
  const { provider } = useContext(RuntimeContext);
  const txFieldRef = useRef<HTMLTextAreaElement>(null);
  const [rawTx, setRawTx] = useState<string>("");
  const [resultState, setResultState] = useState<{
    success: boolean | null;
    result: string;
  }>({ success: null, result: "" });

  async function submitTx() {
    const trimmedRawTx = rawTx.trim();
    if (trimmedRawTx.length > 2) {
      try {
        const txHash = await provider.send("eth_sendRawTransaction", [
          trimmedRawTx,
        ]);
        setResultState({ success: true, result: txHash });
      } catch (e: any) {
        setResultState({ success: false, result: e.toString() });
      }
    } else {
      setResultState({
        success: false,
        result: "Please enter a raw signed transaction.",
      });
    }
  }

  return (
    <StandardFrame>
      <StandardSubtitle>Broadcast Transaction</StandardSubtitle>
      <ContentFrame>
        <div className="space-y-3 py-4">
          <div>
            This page lets you broadcast a raw signed transaction to the
            network. Enter the transaction in hexadecimal format below:
          </div>
          <StandardTextarea
            onChange={(e) => setRawTx(e.target.value)}
            readOnly={false}
            placeholder={"0x..."}
          ></StandardTextarea>
          <div>
            <button
              className="bg-skin-button-fill text-skin-button hover:bg-skin-button-hover-fill py-1 px-2 rounded border inline-flex items-center"
              onClick={submitTx}
            >
              Send Transaction
            </button>
          </div>
          {resultState.success === false && (
            <div>
              <div
                className="bg-red-100 border border-red-400 text-red-700 px-4 py-2.5 rounded relative break-words"
                role="alert"
              >
                <strong className="font-bold">Error!</strong> Failed to
                broadcast transaction:{" "}
                <div className="font-mono">{resultState.result}</div>
              </div>
            </div>
          )}
          {resultState.success && (
            <div
              className="bg-green-100 border border-green-300 text-green-700 px-4 py-2.5 rounded relative"
              role="alert"
            >
              <strong className="font-bold">Success!</strong> Transaction hash:{" "}
              <span className="flex">
                <TransactionLink txHash={resultState.result} />
              </span>
            </div>
          )}
        </div>
      </ContentFrame>
    </StandardFrame>
  );
};

export default BroadcastTransactionPage;



================================================
FILE: src/execution/ChainInfo.tsx
================================================
import { FC, memo, useContext } from "react";
import BCInfoToolTip from "../components/BCInfoToolTip";
import BlockLink from "../components/BlockLink";
import ChainInfoHeader from "../components/ChainInfoHeader";
import ChainInfoItem from "../components/ChainInfoItem";
import ContentFrame from "../components/ContentFrame";
import { PendingChainInfoResults } from "../search/PendingResults";
import { useBCInfoStateInfo, useLatestBlockChainInfo } from "../useLatestBlock";
import { useQuirks } from "../useQuirks";
import { RuntimeContext } from "../useRuntime";

const ChainInfo: FC = () => {
  const { zilliqa, provider } = useContext(RuntimeContext);
  const quirks = useQuirks(provider);

  const latestBlockChainInfo = useLatestBlockChainInfo(zilliqa);

  const BCInfo = useBCInfoStateInfo(latestBlockChainInfo);

  let gridValues = "grid-rows-2 grid-cols-4";
  if (quirks?.isZilliqa1) {
    gridValues = "grid-rows-3 grid-cols-4";
  }
  gridValues =
    "grid items-baseline gap-x-1 border-t border-b border-gray-200 bg-gray-100 text-sm " +
    gridValues;
  // Return a table with rows containing the basic information of the most recent RECENT_SIZE blocks
  return (
    <ContentFrame isLoading={latestBlockChainInfo === undefined}>
      <div className="pb-3">
        <ChainInfoHeader isLoading={latestBlockChainInfo === undefined} />
        {latestBlockChainInfo ? (
          <div className={gridValues}>
            <span>
              <ChainInfoItem
                title="Current Tx Epoch:"
                data={latestBlockChainInfo.NumTxBlocks}
              />
            </span>
            <span>
              <ChainInfoItem
                title="Number of Transactions:"
                data={latestBlockChainInfo.NumTransactions}
              />
            </span>
            {quirks?.isZilliqa1 && (
              <span>
                <ChainInfoItem
                  title="Peers:"
                  data={latestBlockChainInfo.NumPeers}
                />
              </span>
            )}
            {quirks?.isZilliqa1 && (
              <span>
                <ChainInfoItem
                  title="Sharding Structure:"
                  data={`[${latestBlockChainInfo.ShardingStructure.NumPeers.toString()}]`}
                />
              </span>
            )}
            {quirks?.isZilliqa1 && (
              <span>
                <ChainInfoItem
                  title="Current DS Epoch:"
                  data={latestBlockChainInfo.CurrentDSEpoch}
                />
              </span>
            )}
            {quirks?.isZilliqa1 && (
              <span>
                <ChainInfoItem
                  title="DS Block Rate:"
                  data={latestBlockChainInfo.DSBlockRate.toFixed(5)}
                />
              </span>
            )}
            <span>
              <ChainInfoItem
                title="Tx Block Rate:"
                data={latestBlockChainInfo.TxBlockRate.toFixed(5)}
              />
            </span>
            <span>
              <ChainInfoItem
                title="TPS:"
                data={latestBlockChainInfo.TransactionRate.toFixed(5)}
              />
            </span>
            {quirks?.isZilliqa1 && (
              <span>
                <ChainInfoItem
                  title="Number of Txns in DS Epoch:"
                  data={latestBlockChainInfo.NumTxnsDSEpoch}
                />
              </span>
            )}
            {quirks?.isZilliqa1 && (
              <span>
                <ChainInfoItem
                  title="Number of Txns in Txn Epoch:"
                  data={latestBlockChainInfo.NumTxnsTxEpoch}
                />
              </span>
            )}
            <span>
              <ChainInfoItem
                title={
                  <span>
                    <BCInfoToolTip
                      child={`This statistic is accurate from TxBlock ${BCInfo?.startTxBlock}. Requires user to stay on the Home Page`}
                    />{" "}
                    Recent Max Observed TPS:
                  </span>
                }
                data={
                  <span>
                    {BCInfo?.maxTPS.toFixed(5)}{" "}
                    {BCInfo?.startTxBlock && (
                      <span className="text-xs">
                        <span className="text-gray-500">
                          (on TxBlock{" "}
                          <BlockLink blockTag={BCInfo?.startTxBlock} />)
                        </span>
                      </span>
                    )}
                  </span>
                }
              />
            </span>
            <span>
              <ChainInfoItem
                title={
                  <span>
                    <BCInfoToolTip
                      child={`This statistic is accurate from TxBlock ${BCInfo?.startTxBlock}. Requires user to stay on the Home Page`}
                    />{" "}
                    Recent Max Observed Txn Count:
                  </span>
                }
                data={
                  <span>
                    {BCInfo?.maxTxnCount}{" "}
                    {BCInfo?.startTxBlock && (
                      <span className="text-xs">
                        <span className="text-gray-500">
                          (on TxBlock{" "}
                          <BlockLink blockTag={BCInfo?.startTxBlock} />)
                        </span>
                      </span>
                    )}
                  </span>
                }
              />
            </span>
          </div>
        ) : (
          <PendingChainInfoResults />
        )}
      </div>
    </ContentFrame>
  );
};

export default memo(ChainInfo);



================================================
FILE: src/execution/DSBlock.tsx
================================================
import { FC, useContext } from "react";
import { useParams } from "react-router-dom";
import BlockLink from "../components/BlockLink";
import BlockNotFound from "../components/BlockNotFound";
import ContentFrame from "../components/ContentFrame";
import InfoRow from "../components/InfoRow";
import NavBlock from "../components/NavBlock";
import StandardFrame from "../components/StandardFrame";
import StandardSubtitle from "../components/StandardSubtitle";
import Timestamp from "../components/Timestamp";
import { dsBlockURL } from "../url";
import { useLatestBlockChainInfo } from "../useLatestBlock";
import { RuntimeContext } from "../useRuntime";
import { useBlockPageTitle } from "../useTitle";
import { useDSBlockData } from "../useZilliqaHooks";
import {
  commify,
  pubKeyToAddr,
  zilliqaToOtterscanTimestamp,
} from "../utils/utils";
import DecoratedAddressLink from "./components/DecoratedAddressLink";

// TODO: Figure out what we want to do with the previous Hash field
const DSBlock: FC = () => {
  const { zilliqa } = useContext(RuntimeContext);
  const { dsBlockNumberOrHash } = useParams();
  if (dsBlockNumberOrHash === undefined) {
    throw new Error("dsBlockNumberOrHash couldn't be undefined here");
  }

  const { data: dsBlock, isLoading } = useDSBlockData(
    zilliqa,
    dsBlockNumberOrHash,
  );
  useBlockPageTitle(parseInt(dsBlockNumberOrHash));

  const latestBlockChainInfo = useLatestBlockChainInfo(zilliqa);
  const latestDSBlockNum = latestBlockChainInfo?.CurrentDSEpoch;

  return (
    <StandardFrame>
      <StandardSubtitle>
        <div className="flex items-baseline space-x-1">
          <span>DS Block</span>
          <span className="text-base text-gray-500">
            #{dsBlockNumberOrHash}
          </span>
          {dsBlock && (
            <NavBlock
              entityNum={parseInt(dsBlock.header.BlockNum)}
              latestEntityNum={
                latestDSBlockNum !== undefined
                  ? parseInt(latestDSBlockNum)
                  : undefined
              }
              urlBuilder={dsBlockURL}
            />
          )}
        </div>
      </StandardSubtitle>
      {dsBlock === null && (
        <BlockNotFound blockNumberOrHash={dsBlockNumberOrHash} />
      )}
      {dsBlock === undefined && (
        <ContentFrame>
          <InfoRow title="Block Height">Loading DS Block data...</InfoRow>
        </ContentFrame>
      )}
      {dsBlock && (
        <ContentFrame isLoading={isLoading}>
          <InfoRow title="Block Height">
            <span className="font-bold">
              {commify(dsBlock.header.BlockNum)}
            </span>
          </InfoRow>
          <InfoRow title="Timestamp">
            <Timestamp
              value={zilliqaToOtterscanTimestamp(dsBlock.header.Timestamp)}
            />
          </InfoRow>
          <InfoRow title="DS Leader">
            <DecoratedAddressLink
              address={pubKeyToAddr(dsBlock.header.LeaderPubKey)}
              miner
            />
          </InfoRow>
          <InfoRow title="Gas Used/Limit">
            {commify(dsBlock.header.GasPrice)}
          </InfoRow>
          <InfoRow title="Difficulty">
            {commify(dsBlock.header.Difficulty.toString())}
          </InfoRow>
          <InfoRow title="Total Difficulty">
            {commify(dsBlock.header.DifficultyDS.toString())}
          </InfoRow>
          <InfoRow title="Previous Hash">
            <BlockLink blockTag={dsBlock.header.PrevHash} />
          </InfoRow>
        </ContentFrame>
      )}
    </StandardFrame>
  );
};

export default DSBlock;



================================================
FILE: src/execution/DSBlockList.tsx
================================================
import React, { useContext } from "react";
import { useSearchParams } from "react-router-dom";
import ContentFrame from "../components/ContentFrame";
import StandardFrame from "../components/StandardFrame";
import StandardSubtitle from "../components/StandardSubtitle";
import { PAGE_SIZE } from "../params";
import DSBlockItem from "../search/DSBlockItem";
import DSBlockResultHeader from "../search/DSBlockResultHeader";
import { PendingRecentDSBlockResults } from "../search/PendingResults";
import SearchResultNavBar from "../search/SearchResultNavBar";
import { totalBlocksFormatter } from "../search/messages";
import StandardSelectionBoundary from "../selection/StandardSelectionBoundary";
import { useLatestBlockChainInfo } from "../useLatestBlock";
import { RuntimeContext } from "../useRuntime";
import { useDSBlocksData } from "../useZilliqaHooks";

const DSBlockList: React.FC = () => {
  const { zilliqa } = useContext(RuntimeContext);

  const latestBlockChainInfo = useLatestBlockChainInfo(zilliqa);
  const latestBlockNum = latestBlockChainInfo?.CurrentDSEpoch;
  const latestBlockNumInt =
    latestBlockNum !== undefined ? parseInt(latestBlockNum, 10) : undefined;

  const [searchParams] = useSearchParams();
  let pageNumber = 1;
  const p = searchParams.get("p");
  if (p) {
    try {
      pageNumber = parseInt(p);
    } catch (err) {}
  }

  const { data, isLoading } = useDSBlocksData(
    zilliqa,
    latestBlockNumInt,
    pageNumber - 1,
    PAGE_SIZE,
  );

  return (
    <StandardFrame>
      <StandardSubtitle>
        <div className="flex items-baseline space-x-1">DS Block List</div>
      </StandardSubtitle>
      <ContentFrame isLoading={isLoading}>
        <SearchResultNavBar
          pageNumber={pageNumber}
          pageSize={PAGE_SIZE}
          total={latestBlockNumInt}
          totalFormatter={totalBlocksFormatter}
        />
        <DSBlockResultHeader />
        {data ? (
          <StandardSelectionBoundary>
            {data.map((block) =>
              block ? (
                <DSBlockItem key={block.header.BlockNum} block={block} />
              ) : (
                <></>
              ),
            )}
          </StandardSelectionBoundary>
        ) : (
          <PendingRecentDSBlockResults />
        )}
      </ContentFrame>
    </StandardFrame>
  );
};

export default DSBlockList;



================================================
FILE: src/execution/feeCalc.ts
================================================
import { TransactionData } from "../types";

const feeTypes = ["blob", "burned", "tip", "opL1Fee"];
type FeeType = (typeof feeTypes)[number];
export function calculateFee(
  txData: TransactionData,
  block: { baseFeePerGas: bigint | null } | null | undefined,
): { totalFees: bigint; feeDist: Record<FeeType, bigint> } {
  // Require receipt
  if (!txData.confirmedData || !block) {
    return {
      totalFees: 0n,
      feeDist: feeTypes.reduce(
        (obj: Partial<Record<FeeType, bigint>>, newType: FeeType) => {
          obj[newType] = 0n;
          return obj;
        },
        {} as Partial<Record<FeeType, bigint>>,
      ) as Record<FeeType, bigint>,
    };
  }
  const blobFee =
    txData.confirmedData!.blobGasUsed && txData.confirmedData!.blobGasPrice
      ? txData.confirmedData!.blobGasUsed! * txData.confirmedData!.blobGasPrice!
      : 0n;
  const paidFees = txData.gasPrice! * txData.confirmedData!.gasUsed;
  const burntFees =
    block && block.baseFeePerGas
      ? block.baseFeePerGas * txData.confirmedData!.gasUsed
      : 0n;
  let opL1Fee = 0n;
  if (txData.confirmedData && txData.confirmedData.l1Fee !== undefined) {
    opL1Fee = txData.confirmedData.l1Fee;
  }

  const fees: Record<FeeType, bigint> = {
    blob: blobFee,
    burned: burntFees,
    tip: paidFees - burntFees,
    opL1Fee,
  };
  const totalFees = Object.values(fees).reduce((a, b) => a + b, 0n);

  return {
    totalFees,
    feeDist: fees,
  };
}

export function getFeePercents(
  feeDist: Record<FeeType, bigint>,
): Record<FeeType, number> {
  const totalFees = Object.values(feeDist).reduce((a, b) => a + b, 0n);
  if (totalFees === 0n) {
    return feeTypes.reduce(
      (obj: Partial<Record<FeeType, number>>, newType: FeeType) => {
        obj[newType] = 0;
        return obj;
      },
      {} as Partial<Record<FeeType, number>>,
    ) as Record<FeeType, number>;
  }
  const feePerc: { [K in FeeType]: number } = Object.keys(feeDist).reduce(
    (acc, key) => ({
      ...acc,
      [key]: Number((feeDist[key] * 10000n) / totalFees) / 100,
    }),
    {} as Partial<{ [K in FeeType]: number }>,
  ) as { [K in FeeType]: number };
  return feePerc;
}



================================================
FILE: src/execution/op-tx-calculation.ts
================================================
export function isOptimisticChain(chainId: bigint | undefined): boolean {
  if (chainId === undefined) {
    return false;
  }
  return chainId === 10n || chainId === 11155420n;
}

export function getOpFeeData(
  txType: number,
  gasPrice: bigint,
  gasUsed: bigint,
  l1Fee: bigint,
): { fee: bigint; gasPrice: bigint } {
  if (txType === 0x7e) {
    return { gasPrice: 0n, fee: 0n };
  }
  return {
    gasPrice,
    fee: gasUsed * gasPrice + l1Fee,
  };
}



================================================
FILE: src/execution/Transaction.tsx
================================================
import { TabGroup, TabList } from "@headlessui/react";
import { FC, Suspense, lazy, useContext } from "react";
import { Route, Routes, useParams } from "react-router-dom";
import ContentFrame from "../components/ContentFrame";
import NavTab from "../components/NavTab";
import StandardFrame from "../components/StandardFrame";
import StandardSubtitle from "../components/StandardSubtitle";
import StandardSelectionBoundary from "../selection/StandardSelectionBoundary";
import { BlockNumberContext } from "../useBlockTagContext";
import { useTxData } from "../useErigonHooks";
import { RuntimeContext } from "../useRuntime";
import { SelectedTransactionContext } from "../useSelectedTransaction";
import { usePageTitle } from "../useTitle";

const Details = lazy(() => import("./transaction/Details"));
const Logs = lazy(() => import("./transaction/Logs"));
const Trace = lazy(() => import("./transaction/Trace"));
const Receipt = lazy(() => import("./transaction/Receipt"));
const StateDiff = lazy(() => import("./transaction/StateDiff"));

const Transaction: FC = () => {
  const { txhash: txHash } = useParams();
  if (txHash === undefined) {
    throw new Error("txhash couldn't be undefined here");
  }

  const { provider } = useContext(RuntimeContext);
  const txData = useTxData(provider, txHash);

  usePageTitle(txData ? `Transaction ${txData.transactionHash}` : undefined);

  return (
    <SelectedTransactionContext.Provider value={txData}>
      <BlockNumberContext.Provider value={txData?.confirmedData?.blockNumber}>
        <StandardFrame>
          <StandardSubtitle>Transaction Details</StandardSubtitle>
          {txData === null && (
            <ContentFrame>
              <div className="py-4 text-sm">
                Transaction <span className="font-hash">{txHash}</span> not
                found.
              </div>
            </ContentFrame>
          )}
          {txData && (
            <StandardSelectionBoundary>
              <TabGroup>
                <TabList className="flex space-x-2 rounded-t-lg border-l border-r border-t bg-white">
                  <NavTab href=".">Overview</NavTab>
                  {txData.confirmedData?.blockNumber !== undefined && (
                    <NavTab href="logs">
                      Logs
                      {` (${txData.confirmedData?.logs?.length ?? 0})`}
                    </NavTab>
                  )}
                  <NavTab href="trace">Trace</NavTab>
                  <NavTab href="receipt">Receipt</NavTab>
                  <NavTab href="statediff">State Diff</NavTab>
                </TabList>
              </TabGroup>
              <Suspense fallback={null}>
                <Routes>
                  <Route index element={<Details txData={txData} />} />
                  <Route
                    path="logs"
                    element={<Logs logs={txData.confirmedData?.logs} />}
                  />
                  <Route path="trace" element={<Trace txData={txData} />} />
                  <Route path="receipt" element={<Receipt txData={txData} />} />
                  <Route
                    path="statediff"
                    element={<StateDiff txData={txData} />}
                  />
                </Routes>
              </Suspense>
            </StandardSelectionBoundary>
          )}
        </StandardFrame>
      </BlockNumberContext.Provider>
    </SelectedTransactionContext.Provider>
  );
};

export default Transaction;



================================================
FILE: src/execution/types.ts
================================================
import { ChecksummedAddress } from "../types";

/**
 * Component is intrinsically associated with an address
 */
export type AddressAwareComponentProps = {
  address: ChecksummedAddress;
  bech32Address?: string | undefined;
};

/**
 * Component is related to an entire contract ABI;
 * the abi prop is the abi element from metadata.json.
 */
export type ABIAwareComponentProps = {
  abi: any[];
  unknownSelectors?: string[];
};



================================================
FILE: src/execution/address/AddressAttributes.tsx
================================================
import { FC, useContext } from "react";
import AddressLegend from "../../components/AddressLegend";
import { useAddressAttributes } from "../../ots2/usePrototypeTransferHooks";
import { RuntimeContext } from "../../useRuntime";
import { AddressAwareComponentProps } from "../types";

type AddressAttributesProps = AddressAwareComponentProps & {
  full?: boolean;
};

const AddressAttributes: FC<AddressAttributesProps> = ({ address, full }) => {
  const { provider } = useContext(RuntimeContext);
  const attr = useAddressAttributes(provider, address);

  return (
    <>
      {attr?.erc20 && (
        <AddressLegend full={full} title="ERC20 token" uniqueId="erc20">
          [{full ? "ERC20" : "20"}]
        </AddressLegend>
      )}
      {attr?.erc165 && (
        <AddressLegend full={full} title="ERC165 contract" uniqueId="erc165">
          [{full ? "ERC165" : "165"}]
        </AddressLegend>
      )}
      {attr?.erc721 && (
        <AddressLegend full={full} title="ERC721 token" uniqueId="erc721">
          [{full ? "ERC721" : "721"}]
        </AddressLegend>
      )}
      {attr?.erc1155 && (
        <AddressLegend full={full} title="ERC1155 token" uniqueId="erc1155">
          [{full ? "ERC1155" : "1155"}]
        </AddressLegend>
      )}
      {attr?.erc1167 && (
        <AddressLegend
          full={full}
          title="ERC1167 minimal proxy"
          uniqueId="erc1167"
        >
          [{full ? "ERC1167" : "1167"}]
        </AddressLegend>
      )}
      {attr?.erc1167Logic && (
        <AddressLegend
          full={full}
          title="ERC1167 logic contract"
          uniqueId="erc1167logic"
        >
          [{full ? "ERC1167-Logic" : "1167-L"}]
        </AddressLegend>
      )}
      {attr?.erc1167 && (
        <AddressLegend full={full} title="Proxy" uniqueId="proxy">
          [P]
        </AddressLegend>
      )}
      {attr?.erc1167Logic && (
        <AddressLegend full={full} title="Logic" uniqueId="logic">
          [L]
        </AddressLegend>
      )}
    </>
  );
};

export default AddressAttributes;



================================================
FILE: src/execution/address/AddressContract.tsx
================================================
import { FC } from "react";
import { useOutletContext } from "react-router-dom";
import { type AddressOutletContext } from "../AddressMainPage";
import Contracts from "./Contracts";

const AddressContract: FC = () => {
  const { address, match, whatsabiMatch } =
    useOutletContext() as AddressOutletContext;
  return (
    <Contracts checksummedAddress={address} match={match ?? whatsabiMatch} />
  );
};

export default AddressContract;



================================================
FILE: src/execution/address/AddressERC20Results.tsx
================================================
import { useQuery } from "@tanstack/react-query";
import { FC, useContext, useMemo } from "react";
import { useOutletContext } from "react-router-dom";
import StandardTHead from "../../components/StandardTHead";
import {
  genericTransactionCountQuery,
  genericTransactionListQuery,
} from "../../ots2/usePrototypeTransferHooks";
import { usePageNumber } from "../../ots2/useUIHooks";
import { PAGE_SIZE } from "../../params";
import { findTokenTransfersInLogs } from "../../useErigonHooks";
import { RuntimeContext } from "../../useRuntime";
import { usePageTitle } from "../../useTitle";
import { type AddressOutletContext } from "../AddressMainPage";
import ERC20Item, { ERC20ItemProps } from "./ERC20Item";
import GenericTransactionSearchResult from "./GenericTransactionSearchResult";

const tableHeader = (
  <StandardTHead>
    <th className="w-56">Txn Hash</th>
    <th className="w-28">Method</th>
    <th className="w-28">Block</th>
    <th className="w-28">Age</th>
    <th>From</th>
    <th>To</th>
    <th className="w-48">Token</th>
    <th>Value</th>
  </StandardTHead>
);

const AddressERC20Results: FC = () => {
  const { address } = useOutletContext() as AddressOutletContext;
  const { provider } = useContext(RuntimeContext);

  const pageNumber = usePageNumber();
  const { data: total } = useQuery(
    genericTransactionCountQuery(provider, "ERC20Transfer", address),
  );
  const { data: results } = useQuery(
    genericTransactionListQuery(
      provider,
      "ERC20Transfer",
      address,
      pageNumber,
      PAGE_SIZE,
      total,
    ),
  );
  const items = useMemo(
    () =>
      results?.results.map(
        (m): ERC20ItemProps => ({
          address,
          blockNumber: m.receipt.blockNumber,
          timestamp:
            results.blocksSummary.get(m.receipt.blockNumber)?.timestamp ?? 0, // TODO: fix get
          hash: m.transaction.hash,
          status: m.receipt.status!,
          data: m.transaction.data,
          from: m.receipt.from,
          to: m.receipt.to,
          value: m.transaction.value,
          type: m.transaction.type,
          tokenTransfers: findTokenTransfersInLogs(m.receipt.logs),
        }),
      ),
    [results],
  );

  usePageTitle("ERC20 Transfers");

  return (
    <GenericTransactionSearchResult
      pageNumber={pageNumber}
      total={total}
      items={items}
      Item={(i) => <ERC20Item {...i} />}
      header={tableHeader}
      columns={8}
    />
  );
};

export default AddressERC20Results;



================================================
FILE: src/execution/address/AddressERC721Results.tsx
================================================
import { useQuery } from "@tanstack/react-query";
import { FC, useContext, useMemo } from "react";
import { useOutletContext } from "react-router-dom";
import {
  genericTransactionCountQuery,
  genericTransactionListQuery,
} from "../../ots2/usePrototypeTransferHooks";
import { usePageNumber } from "../../ots2/useUIHooks";
import { PAGE_SIZE } from "../../params";
import { RuntimeContext } from "../../useRuntime";
import { usePageTitle } from "../../useTitle";
import { type AddressOutletContext } from "../AddressMainPage";
import ERC20Item, { ERC20ItemProps } from "./ERC20Item";
import GenericTransactionSearchResult from "./GenericTransactionSearchResult";

const AddressERC721Results: FC = () => {
  const { address } = useOutletContext() as AddressOutletContext;
  const { provider } = useContext(RuntimeContext);

  const pageNumber = usePageNumber();
  const { data: total } = useQuery(
    genericTransactionCountQuery(provider, "ERC721Transfer", address),
  );
  const { data: results } = useQuery(
    genericTransactionListQuery(
      provider,
      "ERC721Transfer",
      address,
      pageNumber,
      PAGE_SIZE,
      total,
    ),
  );
  const items = useMemo(
    () =>
      results?.results.map(
        (m): ERC20ItemProps => ({
          address,
          blockNumber: m.receipt.blockNumber,
          timestamp:
            results.blocksSummary.get(m.receipt.blockNumber)?.timestamp ?? 0, // TODO: fix get
          hash: m.transaction.hash,
          status: m.receipt.status!,
          data: m.transaction.data,
          from: m.receipt.from,
          to: m.receipt.to,
          value: m.transaction.value,
          type: m.transaction.type,
          // TODO: Token transfers for ERC-721 tokens
          tokenTransfers: [],
        }),
      ),
    [results],
  );

  usePageTitle("ERC721 Transfers");

  return (
    <GenericTransactionSearchResult
      pageNumber={pageNumber}
      total={total}
      items={items}
      Item={(i) => <ERC20Item {...i} />}
    />
  );
};

export default AddressERC721Results;



================================================
FILE: src/execution/address/AddressReadContract.tsx
================================================
import { FC } from "react";
import { useOutletContext } from "react-router-dom";
import { type AddressOutletContext } from "../AddressMainPage";
import ReadContract from "./contract/ReadContract";

const AddressReadContract: FC = () => {
  const { address, match, whatsabiMatch } =
    useOutletContext() as AddressOutletContext;
  return (
    <ReadContract checksummedAddress={address} match={match ?? whatsabiMatch} />
  );
};

export default AddressReadContract;



================================================
FILE: src/execution/address/AddressReadContractAsProxy.tsx
================================================
import { FC, useContext } from "react";
import { NavLink, useOutletContext } from "react-router-dom";
import ContentFrame from "../../components/ContentFrame";
import { useSourcifyMetadata } from "../../sourcify/useSourcify";
import { useWhatsabiMetadata } from "../../sourcify/useWhatsabi";
import { addressURL } from "../../url.ts";
import { useERC1967ProxyAttributes } from "../../useERC1967";
import { RuntimeContext } from "../../useRuntime";
import { type AddressOutletContext } from "../AddressMainPage";
import ReadContract from "./contract/ReadContract";

const AddressReadContractAsProxy: FC = () => {
  const { address } = useOutletContext() as AddressOutletContext;
  const { config, provider } = useContext(RuntimeContext);
  const proxyAttributes = useERC1967ProxyAttributes(provider, address);
  const match = useSourcifyMetadata(
    proxyAttributes?.delegate,
    provider._network.chainId,
  );
  const whatsabiMatch = useWhatsabiMetadata(
    match === null ? proxyAttributes?.delegate : undefined,
    provider._network.chainId,
    provider,
    config.assetsURLPrefix,
  );

  return (
    <ContentFrame tabs>
      <div>
        <p className="py-6">
          {" "}
          Reading ERC-1967 proxy
          <NavLink
            className="rounded-lg bg-link-blue/10 px-2 py-1 text-xs text-link-blue hover:bg-link-blue/100 hover:text-white"
            to={addressURL(address)}
          >
            {address}
          </NavLink>
          whose implementation is at
          <NavLink
            className="rounded-lg bg-link-blue/10 px-2 py-1 text-xs text-link-blue hover:bg-link-blue/100 hover:text-white"
            to={addressURL(proxyAttributes!.delegate)}
          >
            {proxyAttributes?.delegate}
          </NavLink>
          .
        </p>
      </div>
      <ReadContract
        checksummedAddress={address}
        match={match ?? whatsabiMatch}
      />
    </ContentFrame>
  );
};

export default AddressReadContractAsProxy;



================================================
FILE: src/execution/address/AddressSubtitle.tsx
================================================
import {
  faPencil,
  faTag,
  faTimes,
  faTrash,
} from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { FC, useContext, useState } from "react";
import Blockies from "react-blockies";
import AddressSwap from "../../components/AddressSwap";
import Faucet from "../../components/Faucet";
import StandardSubtitle from "../../components/StandardSubtitle";
import { useChainInfo } from "../../useChainInfo";
import { useResolvedAddress } from "../../useResolvedAddresses";
import { RuntimeContext } from "../../useRuntime";
import { AddressAwareComponentProps } from "../types";
import AddressAttributes from "./AddressAttributes";
import EditableAddressTag, { clearAllLabels } from "./EditableAddressTag";

type AddressSubtitleProps = AddressAwareComponentProps & {
  isENS: boolean | undefined;
  addressOrName: string;
};

const AddressSubtitle: FC<AddressSubtitleProps> = ({
  address,
  isENS,
  addressOrName,
}) => {
  const { config, provider } = useContext(RuntimeContext);
  const { faucets } = useChainInfo();

  const resolvedAddress = useResolvedAddress(provider, address);
  let resolvedName = resolvedAddress
    ? resolvedAddress[0].resolveToString(resolvedAddress[1])
    : undefined;
  let resolvedNameTrusted = resolvedAddress
    ? resolvedAddress[0].trusted(resolvedAddress[1])
    : undefined;
  if (isENS && !resolvedName) {
    resolvedName = "ENS: " + addressOrName;
    resolvedNameTrusted = true;
  }

  const [editingAddressTag, setEditingAddressTag] = useState<boolean>(false);

  return (
    <StandardSubtitle>
      <div className="flex items-baseline space-x-2">
        <Blockies
          className="self-center rounded"
          seed={address.toLowerCase()}
          scale={3}
        />
        <span data-test="address">
          <AddressSwap addr={address} />
        </span>
        {/* Only display faucets for testnets who actually have any */}
        {faucets && faucets.length > 0 && <Faucet address={address} rounded />}
        {config.experimental && <AddressAttributes address={address} full />}
        {resolvedName && resolvedNameTrusted && !editingAddressTag && (
          <div className="rounded-lg bg-gray-200 px-2 py-1 text-sm text-gray-500 text-nowrap">
            <FontAwesomeIcon icon={faTag} size="1x" />
            <span className="pl-1 text-nowrap">{resolvedName}</span>
          </div>
        )}
        {config.WIP_customAddressLabels && (
          <div className="flex flex-no-wrap space-x-1">
            {editingAddressTag && (
              <EditableAddressTag
                address={address}
                defaultTag={resolvedName}
                editedCallback={(address: string) =>
                  setEditingAddressTag(false)
                }
              />
            )}
            <button
              className={`flex-no-wrap flex items-center justify-center space-x-1 self-center text-gray-500 focus:outline-none transition-shadows h-7 w-7 rounded-full bg-gray-200 text-xs transition-colors hover:bg-gray-500 hover:text-gray-200 hover:shadow`}
              title={
                editingAddressTag ? "Cancel changes" : "Edit address label"
              }
              onClick={() => setEditingAddressTag(!editingAddressTag)}
            >
              <FontAwesomeIcon
                icon={editingAddressTag ? faTimes : faPencil}
                size="1x"
              />
            </button>
            {/* For debugging only; we'll want to create an address label management page. */}
            <button
              className={`flex-no-wrap flex items-center justify-center space-x-1 self-center text-red-500 focus:outline-none transition-shadows h-7 w-7 rounded-full bg-red-200 text-xs transition-colors hover:bg-red-500 hover:text-gray-200 hover:shadow`}
              title={"Delete all labels"}
              onClick={clearAllLabels}
            >
              <FontAwesomeIcon icon={faTrash} size="1x" />
            </button>
          </div>
        )}
      </div>
    </StandardSubtitle>
  );
};

export default AddressSubtitle;



================================================
FILE: src/execution/address/AddressTokens.tsx
================================================
import { Switch } from "@headlessui/react";
import { useQuery } from "@tanstack/react-query";
import { getAddress } from "ethers";
import { FC, useContext, useMemo, useState } from "react";
import { useOutletContext } from "react-router-dom";
import ContentFrame from "../../components/ContentFrame";
import StandardScrollableTable from "../../components/StandardScrollableTable";
import StandardTBody from "../../components/StandardTBody";
import StandardTHead from "../../components/StandardTHead";
import { useTokenSet } from "../../kleros/useTokenList";
import { erc20HoldingsQuery } from "../../ots2/usePrototypeTransferHooks";
import SearchResultNavBar from "../../search/SearchResultNavBar";
import StandardSelectionBoundary from "../../selection/StandardSelectionBoundary";
import { RuntimeContext } from "../../useRuntime";
import { usePageTitle } from "../../useTitle";
import { type AddressOutletContext } from "../AddressMainPage";
import TokenBalance from "./TokenBalance";

const AddressTokens: FC = () => {
  const { address } = useOutletContext() as AddressOutletContext;
  const { provider } = useContext(RuntimeContext);
  const { data: erc20List } = useQuery(erc20HoldingsQuery(provider, address));
  usePageTitle(`Token Balances | ${address}`);

  const [enabled, setEnabled] = useState<boolean>(true);
  const tokenSet = useTokenSet(provider._network.chainId);
  const filteredList = useMemo(() => {
    if (erc20List === undefined) {
      return undefined;
    }
    return erc20List.filter((t) => tokenSet.has(getAddress(t)));
  }, [erc20List, tokenSet]);
  const tokenList = enabled ? filteredList : erc20List;

  return (
    <ContentFrame tabs>
      {erc20List && filteredList && tokenList && (
        <StandardSelectionBoundary>
          <TotalBar
            erc20List={erc20List}
            filteredList={filteredList}
            filterApplied={enabled}
            applyFilter={setEnabled}
          />
          <StandardScrollableTable>
            <StandardTHead>
              <th className="w-96">Token</th>
              <th className="w-80">Balance</th>
            </StandardTHead>
            <StandardTBody>
              {tokenList.map((t) => (
                <TokenBalance
                  key={t}
                  holderAddress={address}
                  tokenAddress={t}
                />
              ))}
            </StandardTBody>
          </StandardScrollableTable>
          <TotalBar
            erc20List={erc20List}
            filteredList={filteredList}
            filterApplied={enabled}
            applyFilter={setEnabled}
          />
        </StandardSelectionBoundary>
      )}
    </ContentFrame>
  );
};

type TotalBarProps = {
  erc20List: ReadonlyArray<unknown>;
  filteredList: ReadonlyArray<unknown>;
  filterApplied: boolean;
  applyFilter: (apply: boolean) => void;
};

const TotalBar: FC<TotalBarProps> = ({
  erc20List,
  filteredList,
  filterApplied,
  applyFilter,
}) => (
  <SearchResultNavBar
    total={filterApplied ? filteredList?.length : erc20List?.length}
    totalFormatter={(total: number) => (
      <>
        {`${total} ${total !== 1 ? "tokens" : "token"} found`} (
        <Switch
          className="hover:cursor-pointer hover:underline"
          onChange={() => applyFilter(!filterApplied)}
        >
          {filterApplied
            ? `${erc20List.length - filteredList.length} hidden`
            : "hide spam"}
        </Switch>
        )
      </>
    )}
  />
);

export default AddressTokens;



================================================
FILE: src/execution/address/AddressTransactionResults.tsx
================================================
import { useQuery } from "@tanstack/react-query";
import { FC, useContext, useEffect, useMemo, useState } from "react";
import { useOutletContext, useParams, useSearchParams } from "react-router-dom";
import ContentFrame from "../../components/ContentFrame";
import { balancePreset } from "../../components/FiatValue";
import InfoRow from "../../components/InfoRow";
import NativeTokenAmountAndFiat from "../../components/NativeTokenAmountAndFiat";
import StandardScrollableTable from "../../components/StandardScrollableTable";
import StandardTBody from "../../components/StandardTBody";
import TransactionLink from "../../components/TransactionLink";
import { useProxyAttributes } from "../../ots2/usePrototypeTransferHooks";
import { PendingTransactionResults } from "../../search/PendingResults";
import TransactionItem from "../../search/TransactionItem";
import TransactionResultHeader from "../../search/TransactionResultHeader";
import UndefinedPageControl from "../../search/UndefinedPageControl";
import { SearchController } from "../../search/search";
import { useFeeToggler } from "../../search/useFeeToggler";
import StandardSelectionBoundary from "../../selection/StandardSelectionBoundary";
import { ProcessedTransaction } from "../../types";
import { BlockNumberContext } from "../../useBlockTagContext";
import {
  getBalanceQuery,
  useContractCreator,
  useTransactionCount,
} from "../../useErigonHooks";
import { useResolvedAddress } from "../../useResolvedAddresses";
import { RuntimeContext } from "../../useRuntime";
import { usePageTitle } from "../../useTitle";
import { commify } from "../../utils/utils";
import { type AddressOutletContext } from "../AddressMainPage";
import DecoratedAddressLink from "../components/DecoratedAddressLink";
import TransactionAddressWithCopy from "../components/TransactionAddressWithCopy";
import { AddressAwareComponentProps } from "../types";
import PendingItem from "./PendingItem";
import PendingPage from "./PendingPage";

const ProxyInfo: FC<AddressAwareComponentProps> = ({ address }) => {
  const { provider } = useContext(RuntimeContext);
  const proxyAttributes = useProxyAttributes(provider, address);
  return (
    <>
      {proxyAttributes && proxyAttributes.proxyType && (
        <InfoRow title="Proxy type">{proxyAttributes.proxyType}</InfoRow>
      )}
      {proxyAttributes && proxyAttributes.logicAddress && (
        <InfoRow title="Logic contract">
          <DecoratedAddressLink address={proxyAttributes.logicAddress} />
        </InfoRow>
      )}
    </>
  );
};

const AddressTransactionResults: FC = () => {
  const { address, hasCode } = useOutletContext() as AddressOutletContext;
  const { config, provider } = useContext(RuntimeContext);
  const [feeDisplay, feeDisplayToggler] = useFeeToggler();

  const { uncheckedAddressOrName, direction } = useParams();
  if (uncheckedAddressOrName === undefined) {
    throw new Error("uncheckedAddressOrName couldn't be undefined here");
  }

  usePageTitle(`Address ${uncheckedAddressOrName}`);
  const [searchParams] = useSearchParams();
  const hash = searchParams.get("h");

  const [controller, setController] = useState<SearchController>();

  const transactionCount = useTransactionCount(
    provider,
    hasCode === false ? address : undefined,
  );

  useEffect(() => {
    if (!address) {
      return;
    }

    const readFirstPage = async () => {
      const _controller = await SearchController.firstPage(provider, address);
      setController(_controller);
    };
    const readMiddlePage = async (next: boolean) => {
      const _controller = await SearchController.middlePage(
        provider,
        address,
        hash!,
        next,
      );
      setController(_controller);
    };
    const readLastPage = async () => {
      const _controller = await SearchController.lastPage(provider, address);
      setController(_controller);
    };
    const prevPage = async () => {
      const _controller = await controller!.prevPage(provider, hash!);
      setController(_controller);
    };
    const nextPage = async () => {
      const _controller = await controller!.nextPage(provider, hash!);
      setController(_controller);
    };

    // Page load from scratch
    if (direction === "first" || direction === undefined) {
      if (!controller?.isFirst || controller.address !== address) {
        readFirstPage();
      }
    } else if (direction === "prev") {
      if (controller && controller.address === address) {
        prevPage();
      } else {
        readMiddlePage(false);
      }
    } else if (direction === "next") {
      if (controller && controller.address === address) {
        nextPage();
      } else {
        readMiddlePage(true);
      }
    } else if (direction === "last") {
      if (!controller?.isLast || controller.address !== address) {
        readLastPage();
      }
    }
  }, [provider, address, direction, hash, controller]);

  const page = useMemo(() => controller?.getPage(), [controller]);

  const creator = useContractCreator(provider, address);
  const resolvedAddress = useResolvedAddress(provider, address);
  const resolvedName = resolvedAddress
    ? resolvedAddress[0].resolveToString(resolvedAddress[1])
    : undefined;
  const resolvedNameTrusted = resolvedAddress
    ? resolvedAddress[0].trusted(resolvedAddress[1])
    : undefined;

  usePageTitle(
    resolvedName && resolvedNameTrusted
      ? `${resolvedName} | Address ${uncheckedAddressOrName}`
      : `Address ${uncheckedAddressOrName}`,
  );

  const { data: balance } = useQuery(getBalanceQuery(provider, address));

  return (
    <ContentFrame tabs>
      <StandardSelectionBoundary>
        <BlockNumberContext.Provider value="latest">
          <InfoRow title="Balance">
            <div className="grid grid-cols-3 flex divide-x-2 divide-dotted divide-gray-300 text-sm">
              <div
                className={`${transactionCount !== undefined ? "col-span-1" : "col-span-3"}`}
              >
                {balance === undefined ? (
                  <div className="w-80">
                    <PendingItem />
                  </div>
                ) : (
                  <NativeTokenAmountAndFiat
                    value={balance}
                    {...balancePreset}
                  />
                )}
              </div>
              {transactionCount !== undefined && (
                <div className="pl-4 col-span-2 grid grid-cols-2">
                  <div className="col-span-1">Transactions sent:</div>
                  <div className="col-span-1">
                    {commify(transactionCount.toString())}
                  </div>
                </div>
              )}
            </div>
          </InfoRow>
          {creator && (
            <InfoRow title="Contract creator">
              <div className="flex flex-col md:flex-row divide-x-2 divide-dotted divide-gray-300">
                <TransactionAddressWithCopy
                  address={creator.creator}
                  showCodeIndicator
                />
                <div className="md:ml-3 flex items-baseline pl-3 truncate">
                  <div className="truncate">
                    <TransactionLink txHash={creator.hash} />
                  </div>
                </div>
              </div>
            </InfoRow>
          )}
          {config.experimental && <ProxyInfo address={address} />}
        </BlockNumberContext.Provider>
        <NavBar address={address} page={page} controller={controller} />
        <StandardScrollableTable isAuto={true}>
          <TransactionResultHeader
            feeDisplay={feeDisplay}
            feeDisplayToggler={feeDisplayToggler}
          />
          {page ? (
            <StandardTBody>
              {page.map((tx) => (
                <TransactionItem
                  key={tx.hash}
                  tx={tx}
                  selectedAddress={address}
                  feeDisplay={feeDisplay}
                />
              ))}
            </StandardTBody>
          ) : (
            <PendingPage rows={1} cols={8} />
          )}
        </StandardScrollableTable>
        <NavBar address={address} page={page} controller={controller} />
        <PendingTransactionResults />
      </StandardSelectionBoundary>
    </ContentFrame>
  );
};

type NavBarProps = AddressAwareComponentProps & {
  page: ProcessedTransaction[] | undefined;
  controller: SearchController | undefined;
};

const NavBar: FC<NavBarProps> = ({ address, page, controller }) => (
  <div className="flex items-baseline justify-between py-3">
    <div className="text-sm text-gray-500">
      {page === undefined ? (
        <>Waiting for search results...</>
      ) : (
        <>
          <span data-test="page-count">{page.length}</span> transaction
          {page.length !== 1 && "s"} on this page
        </>
      )}
    </div>
    <UndefinedPageControl
      address={address}
      isFirst={controller?.isFirst}
      isLast={controller?.isLast}
      prevHash={page?.[0]?.hash ?? ""}
      nextHash={page?.[page.length - 1]?.hash ?? ""}
      disabled={controller === undefined}
    />
  </div>
);

export default AddressTransactionResults;



================================================
FILE: src/execution/address/AddressWithdrawals.tsx
================================================
import { useQuery } from "@tanstack/react-query";
import { FC, useContext, useMemo } from "react";
import { useOutletContext } from "react-router-dom";
import StandardTHead from "../../components/StandardTHead";
import {
  genericTransactionCountQuery,
  genericTransactionListQuery,
} from "../../ots2/usePrototypeTransferHooks";
import { usePageNumber } from "../../ots2/useUIHooks";
import { PAGE_SIZE } from "../../params";
import { RuntimeContext } from "../../useRuntime";
import { usePageTitle } from "../../useTitle";
import { type AddressOutletContext } from "../AddressMainPage";
import GenericTransactionSearchResult from "./GenericTransactionSearchResult";
import WithdrawalItem, { WithdrawalItemProps } from "./WithdrawalItem";

const withdrawalSearchHeader = (
  <StandardTHead>
    <th className="w-28">Index</th>
    <th className="w-28">Block</th>
    <th className="w-36">Age</th>
    <th className="w-32">Validator</th>
    <th className="w-52">To</th>
    <th className="w-44">Value</th>
  </StandardTHead>
);

const AddressWithdrawalsResults: FC = () => {
  const { address } = useOutletContext() as AddressOutletContext;
  const { provider } = useContext(RuntimeContext);

  const pageNumber = usePageNumber();
  const { data: total } = useQuery(
    genericTransactionCountQuery(provider, "Withdrawals", address),
  );
  const { data: results } = useQuery(
    genericTransactionListQuery(
      provider,
      "Withdrawals",
      address,
      pageNumber,
      PAGE_SIZE,
      total,
    ),
  );

  const items = useMemo(
    () =>
      results?.results.map(
        (withdrawal): WithdrawalItemProps & { hash: string } => ({
          address,
          index: withdrawal.index,
          blockNumber: withdrawal.blockNumber,
          timestamp:
            results.blocksSummary.get(withdrawal.blockNumber)?.timestamp ?? 0, // TODO: fix get
          validatorIndex: withdrawal.validatorIndex,
          amount: withdrawal.amount,
          hash: withdrawal.index.toString(),
        }),
      ),
    [results],
  );

  usePageTitle(`Withdrawals | ${address}`);

  return (
    <GenericTransactionSearchResult
      pageNumber={pageNumber}
      total={total}
      items={items}
      Item={(i) => <WithdrawalItem {...i} />}
      header={withdrawalSearchHeader}
      typeName="withdrawal"
      columns={6}
    />
  );
};

export default AddressWithdrawalsResults;



================================================
FILE: src/execution/address/BlockRewardedItem.tsx
================================================
import { FC, memo, useContext } from "react";
import BlockLink from "../../components/BlockLink";
import NativeTokenAmount from "../../components/NativeTokenAmount";
import TimestampAge from "../../components/TimestampAge";
import SlotLink from "../../consensus/components/SlotLink";
import ValidatorLink from "../../consensus/components/ValidatorLink";
import { BlockNumberContext } from "../../useBlockTagContext";
import { useSlotHeader } from "../../useConsensus";
import { useBlockData } from "../../useErigonHooks";
import { RuntimeContext } from "../../useRuntime";
import { AddressAwareComponentProps } from "../types";
import PendingItem from "./PendingItem";

export type BlockRewardedItemProps = AddressAwareComponentProps & {
  blockNumber: number;
  timestamp: number;
  totalFees: bigint;
};

const BlockRewardedItem: FC<BlockRewardedItemProps> = ({
  address,
  blockNumber,
  timestamp,
  totalFees,
}) => {
  const { config, provider } = useContext(RuntimeContext);
  const { data: nextBlock, isLoading: isLoadingBlockData } = useBlockData(
    provider,
    (blockNumber + 1).toString(),
  );
  const { slot, isLoading: isLoadingSlotData } = useSlotHeader(
    nextBlock?.parentBeaconBlockRoot ?? null,
  );

  const proposerIndex = slot?.data?.header?.message?.["proposer_index"];
  return (
    <BlockNumberContext.Provider value={blockNumber}>
      <tr>
        <td>
          <BlockLink blockTag={blockNumber} />
        </td>
        <td>
          <TimestampAge timestamp={timestamp} />
        </td>
        <td>
          <NativeTokenAmount value={totalFees} />
        </td>
        {config.beaconAPI !== undefined && (
          <>
            <td>
              {isLoadingBlockData || isLoadingSlotData ? (
                <div className="w-80">
                  <PendingItem />
                </div>
              ) : slot && slot?.data?.header?.message?.slot ? (
                <div>
                  <SlotLink slot={Number(slot?.data?.header?.message?.slot)} />
                </div>
              ) : (
                <span className="text-gray-400">Not available</span>
              )}
            </td>
            <td>
              {isLoadingBlockData || isLoadingSlotData ? (
                <div className="w-80">
                  <PendingItem />
                </div>
              ) : (
                <div>
                  {proposerIndex !== undefined ? (
                    <ValidatorLink validatorIndex={proposerIndex} />
                  ) : (
                    <span className="text-gray-400">Not available</span>
                  )}
                </div>
              )}
            </td>
          </>
        )}
      </tr>
    </BlockNumberContext.Provider>
  );
};

export default memo(BlockRewardedItem);



================================================
FILE: src/execution/address/BlocksRewarded.tsx
================================================
import { useQuery } from "@tanstack/react-query";
import { FC, useContext, useMemo } from "react";
import { useOutletContext } from "react-router-dom";
import StandardTHead from "../../components/StandardTHead";
import { BlockRewardedSummary } from "../../ots2/usePrototypeHooks";
import {
  genericTransactionCountQuery,
  genericTransactionListQuery,
} from "../../ots2/usePrototypeTransferHooks";
import { usePageNumber } from "../../ots2/useUIHooks";
import { PAGE_SIZE } from "../../params";
import { RuntimeContext } from "../../useRuntime";
import { usePageTitle } from "../../useTitle";
import { type AddressOutletContext } from "../AddressMainPage";
import BlockRewardedItem, { BlockRewardedItemProps } from "./BlockRewardedItem";
import GenericTransactionSearchResult from "./GenericTransactionSearchResult";

const BlocksRewarded: FC = () => {
  const { address } = useOutletContext() as AddressOutletContext;
  const { config, provider } = useContext(RuntimeContext);

  const pageNumber = usePageNumber();
  const { data: total } = useQuery(
    genericTransactionCountQuery(provider, "BlocksRewarded", address),
  );
  const { data: results } = useQuery(
    genericTransactionListQuery<"BlocksRewarded", BlockRewardedSummary>(
      provider,
      "BlocksRewarded",
      address,
      pageNumber,
      PAGE_SIZE,
      total,
    ),
  );

  const items = useMemo(
    () =>
      results?.results.map(
        (BlockRewarded): BlockRewardedItemProps & { hash: string } => ({
          address,
          blockNumber: BlockRewarded.blockNumber,
          timestamp:
            results.blocksSummary.get(BlockRewarded.blockNumber)?.timestamp ??
            0, // TODO: fix get
          hash: BlockRewarded.blockNumber.toString(),
          totalFees:
            results.blocksSummary.get(BlockRewarded.blockNumber)?.totalFees ??
            0n,
        }),
      ),
    [results],
  );

  const searchHeader = (
    <StandardTHead>
      <th className="w-28">Block</th>
      <th className="w-32">Age</th>
      <th className="w-36">Block fees</th>
      {config.beaconAPI && (
        <>
          <th className="w-28">Slot</th>
          <th className="w-28">Validator</th>
        </>
      )}
    </StandardTHead>
  );

  usePageTitle(`Blocks Rewarded | ${address}`);

  return (
    <GenericTransactionSearchResult
      pageNumber={pageNumber}
      total={total}
      items={items}
      Item={(i) => <BlockRewardedItem {...i} />}
      header={searchHeader}
      typeName="block"
      columns={config.beaconAPI === undefined ? 3 : 5}
    />
  );
};

export default BlocksRewarded;



================================================
FILE: src/execution/address/ContractFromRepo.tsx
================================================
import { faCircleNotch } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import React, { lazy } from "react";
import { MatchType, useContract } from "../../sourcify/useSourcify";
import { useAppConfigContext } from "../../useAppConfig";

const HighlightedSolidity = lazy(
  () => import("./contract/HighlightedSolidity"),
);

type ContractFromRepoProps = {
  checksummedAddress: string;
  networkId: bigint;
  filename: string;
  fileHash: string;
  type: MatchType;
};

const ContractFromRepo: React.FC<ContractFromRepoProps> = ({
  checksummedAddress,
  networkId,
  filename,
  fileHash,
  type,
}) => {
  const { sourcifySource } = useAppConfigContext();
  const content = useContract(
    checksummedAddress,
    networkId,
    filename,
    fileHash,
    sourcifySource,
    type,
  );

  return (
    <>
      {content === undefined && (
        <div className="flex h-80 w-full flex-col justify-center border text-center text-gray-500">
          <span>
            <FontAwesomeIcon
              className="animate-spin"
              icon={faCircleNotch}
              size="2x"
            />
          </span>
        </div>
      )}
      {content !== undefined && <HighlightedSolidity source={content} />}
    </>
  );
};

export default React.memo(ContractFromRepo);



================================================
FILE: src/execution/address/Contracts.tsx
================================================
import { faChevronDown } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { Menu, MenuButton, MenuItem, MenuItems } from "@headlessui/react";
import { useQuery } from "@tanstack/react-query";
import React, { lazy, useContext, useEffect, useState } from "react";
import ContentFrame from "../../components/ContentFrame";
import ExternalLink from "../../components/ExternalLink";
import InfoRow from "../../components/InfoRow";
import StandardTextarea from "../../components/StandardTextarea";
import { Match, MatchType } from "../../sourcify/useSourcify";
import { openInRemixURL } from "../../url";
import { getCodeQuery } from "../../useErigonHooks";
import { RuntimeContext } from "../../useRuntime";
import { usePageTitle } from "../../useTitle";
import { useIsScillaCode } from "../../useZilliqa";
import { commify } from "../../utils/utils";
import ContractFromRepo from "./ContractFromRepo";
import ScillaContract from "./ScillaContract";
import WhatsabiWarning from "./WhatsabiWarning";
import ContractABI from "./contract/ContractABI";

const HighlightedSolidity = lazy(
  () => import("./contract/HighlightedSolidity"),
);

type ContractsProps = {
  checksummedAddress: string;
  match: Match | null | undefined;
};

const Contracts: React.FC<ContractsProps> = ({ checksummedAddress, match }) => {
  const { provider } = useContext(RuntimeContext);
  const { data: code } = useQuery(
    getCodeQuery(provider, checksummedAddress, "latest"),
  );
  const scillaCode = useIsScillaCode(provider, checksummedAddress);
  usePageTitle(`Contract | ${checksummedAddress}`);

  const [selected, setSelected] = useState<string>();
  useEffect(() => {
    if (match) {
      const targetSource = match.metadata.settings?.compilationTarget;
      if (targetSource !== undefined && Object.keys(targetSource)[0] !== "") {
        setSelected(Object.keys(targetSource)[0]);
      } else {
        setSelected(Object.keys(match.metadata.sources)[0]);
      }
    }
  }, [match]);
  const optimizer = match?.metadata.settings?.optimizer;

  return (
    <ContentFrame tabs>
      {match && match.type === MatchType.WHATSABI_GUESS && !scillaCode && (
        <WhatsabiWarning />
      )}
      {match && match.type !== MatchType.WHATSABI_GUESS && (
        <>
          {match.metadata.settings?.compilationTarget && (
            <InfoRow title="Name">
              {Object.values(match.metadata.settings.compilationTarget)[0]}
            </InfoRow>
          )}
          <InfoRow title="Match">
            {match.type === MatchType.FULL_MATCH ? "Full" : "Partial"}
          </InfoRow>
          <InfoRow title="Language">
            <span>{match.metadata.language}</span>
          </InfoRow>
          <InfoRow title="Compiler">
            <span>{match.metadata.compiler.version}</span>
          </InfoRow>
          <InfoRow title="Optimizer Enabled">
            {optimizer?.enabled ? (
              <span>
                <span className="font-bold text-emerald-600">Yes</span> with{" "}
                <span className="font-bold text-emerald-600">
                  {commify(optimizer?.runs)}
                </span>{" "}
                runs
              </span>
            ) : (
              <span className="font-bold text-red-600">No</span>
            )}
          </InfoRow>
        </>
      )}
      {!scillaCode && (
        <div className="py-5">
          {match === undefined && (
            <span>Getting data from Sourcify repository...</span>
          )}
          {match === null && (
            <span>
              Address is not a contract or could not find contract metadata in
              Sourcify repository.
            </span>
          )}
          {match !== undefined && match !== null && (
            <>
              {match.metadata.output.abi && (
                <ContractABI
                  abi={match.metadata.output.abi}
                  unknownSelectors={match.unknownSelectors}
                />
              )}
              {match.type !== MatchType.WHATSABI_GUESS && (
                <div>
                  <Menu>
                    <div className="flex items-baseline justify-between space-x-2">
                      <MenuButton className="flex space-x-2 rounded-t border-l border-r border-t px-2 py-1 text-sm">
                        <span>{selected}</span>
                        <span className="self-center">
                          <FontAwesomeIcon icon={faChevronDown} size="xs" />
                        </span>
                      </MenuButton>
                      {provider && (
                        <div className="text-sm">
                          <ExternalLink
                            href={openInRemixURL(
                              checksummedAddress,
                              provider._network.chainId,
                            )}
                          >
                            Open in Remix
                          </ExternalLink>
                        </div>
                      )}
                    </div>
                    <div className="relative">
                      <MenuItems className="absolute z-10 flex flex-col rounded-b border bg-white p-1">
                        {Object.entries(match.metadata.sources).map(([k]) => (
                          <MenuItem key={k}>
                            <button
                              className={`flex px-2 py-1 text-sm ${
                                selected === k
                                  ? "bg-gray-200 font-bold text-gray-500"
                                  : "text-gray-400 transition-colors duration-75 hover:text-gray-500"
                              }`}
                              onClick={() => setSelected(k)}
                            >
                              {k}
                            </button>
                          </MenuItem>
                        ))}
                      </MenuItems>
                    </div>
                  </Menu>
                  {selected && (
                    <>
                      {match.metadata.sources[selected].content ? (
                        <HighlightedSolidity
                          source={match.metadata.sources[selected].content}
                        />
                      ) : (
                        <ContractFromRepo
                          checksummedAddress={checksummedAddress}
                          networkId={provider!._network.chainId}
                          filename={selected}
                          fileHash={match.metadata.sources[selected].keccak256}
                          type={match.type}
                        />
                      )}
                    </>
                  )}
                </div>
              )}
            </>
          )}
        </div>
      )}
      <div className="py-5">
        {code === undefined && <span>Getting contract bytecode...</span>}
        {scillaCode && (
          <ScillaContract address={checksummedAddress} content={scillaCode} />
        )}
        {!scillaCode && code && (
          <>
            <div className="pb-2">Contract Bytecode</div>
            <StandardTextarea value={code} />
          </>
        )}
      </div>
    </ContentFrame>
  );
};

export default React.memo(Contracts);



================================================
FILE: src/execution/address/EditableAddressTag.tsx
================================================
import { faCheck, faTag } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import React, { FC, useEffect } from "react";
import { mutate } from "swr";
import { customLabelResolver } from "../../api/address-resolver";
import { CustomLabelFetcher } from "../../api/address-resolver/CustomLabelResolver";
import { AddressAwareComponentProps } from "../types";

type EditableAddressTagProps = AddressAwareComponentProps & {
  defaultTag: string | undefined;
  editedCallback?: (newLabel: string) => void;
};

async function setAddressLabel(address: string, label: string | null) {
  if (label === null) {
    return;
  }
  const trimmedLabel = label.trim();
  await CustomLabelFetcher.getInstance().updateLabels({
    [address]: trimmedLabel,
  });
  // Update the SWR entry so that all components using this label are invalidated
  mutate(address, [customLabelResolver, trimmedLabel]);
}

export async function clearAllLabels() {
  const customLabelFetcher = CustomLabelFetcher.getInstance();
  const addresses: string[] = customLabelFetcher.getAllAddresses();
  await customLabelFetcher.updateLabels(
    addresses.reduce(
      (obj: Record<string, string>, key: string) => ({ ...obj, [key]: "" }),
      {},
    ),
  );
  addresses.forEach((address) => mutate(address));
}

const EditableAddressTag: FC<EditableAddressTagProps> = ({
  address,
  defaultTag,
  editedCallback,
}) => {
  const inputRef = React.createRef<HTMLInputElement>();
  const formRef = React.createRef<HTMLFormElement>();

  useEffect(() => {
    if (inputRef.current) {
      inputRef.current.focus();
    }
  }, []);

  return (
    <form
      onSubmit={(event) => {
        event.preventDefault();
        setAddressLabel(
          address,
          inputRef.current ? inputRef.current.value : null,
        );
        if (editedCallback && inputRef.current) {
          editedCallback(inputRef.current.value);
        }
      }}
      className="flex space-x-1 text-sm"
      ref={formRef}
    >
      <div className="rounded-lg bg-gray-200 px-2 py-1 text-sm text-gray-500 space-x-1">
        <FontAwesomeIcon icon={faTag} size="1x" />
        <input
          type="text"
          data-address={address}
          placeholder={defaultTag ?? "Address"}
          defaultValue={defaultTag}
          ref={inputRef}
        />
      </div>
      <button
        className={`flex-no-wrap flex items-center justify-center space-x-1 self-center text-gray-500 ${"transition-shadows h-7 w-7 rounded-full bg-gray-200 text-xs transition-colors hover:bg-gray-500 hover:text-gray-200 hover:shadow"}`}
        title="Submit address label"
        type="submit"
      >
        <FontAwesomeIcon icon={faCheck} size="1x" />
      </button>
    </form>
  );
};

export default EditableAddressTag;



================================================
FILE: src/execution/address/ERC20Item.tsx
================================================
import { FC, memo } from "react";
import BlockLink from "../../components/BlockLink";
import MethodName from "../../components/MethodName";
import NativeTokenAmount from "../../components/NativeTokenAmount";
import TimestampAge from "../../components/TimestampAge";
import TransactionDirection from "../../components/TransactionDirection";
import TransactionLink from "../../components/TransactionLink";
import { TokenTransfer } from "../../types";
import { BlockNumberContext } from "../../useBlockTagContext";
import TransactionAddress from "../components/TransactionAddress";
import { AddressAwareComponentProps } from "../types";
import TokenAmount from "./TokenAmount";

export type ERC20ItemProps = AddressAwareComponentProps & {
  blockNumber: number;
  timestamp: number;
  hash: string;
  status: number;
  data: string;
  from: string | undefined;
  to: string | null;
  value: bigint;
  type: number;
  tokenTransfers: TokenTransfer[];
};

const ERC20Item: FC<ERC20ItemProps> = ({
  address,
  blockNumber,
  timestamp,
  hash,
  status,
  data,
  from,
  to,
  value,
  type,
  tokenTransfers,
}) => {
  return (
    <BlockNumberContext.Provider value={blockNumber}>
      <tr>
        <td>
          <TransactionLink
            txHash={hash}
            fail={status === 0}
            blob={type === 3}
            deposit={type === 126}
          />
        </td>
        <td>{to !== null && <MethodName data={data} to={to} />}</td>
        <td>
          <BlockLink blockTag={blockNumber} />
        </td>
        <td>
          <TimestampAge timestamp={timestamp} />
        </td>
        <td>
          <span className="col-span-2 flex items-baseline justify-between space-x-2 pr-2">
            <span className="truncate">
              {from && (
                <TransactionAddress address={from} selectedAddress={address} />
              )}
            </span>
            <span>
              <TransactionDirection
              // direction={undefined}
              // flags={sendsToMiner ? Flags.MINER : undefined}
              />
            </span>
          </span>
        </td>
        <td>
          {to && (
            <TransactionAddress
              address={to}
              selectedAddress={address}
              showCodeIndicator
            />
          )}
        </td>
        <td></td>
        <td>
          <NativeTokenAmount value={value} />
        </td>
      </tr>
      {tokenTransfers &&
        tokenTransfers.map((transfer: TokenTransfer, index: number) =>
          transfer.from === address || transfer.to === address ? (
            <tr key={index}>
              <td></td>
              <td></td>
              <td></td>
              <td></td>
              <td>
                <span className="col-span-2 flex items-baseline justify-between space-x-2 pr-2">
                  <span className="truncate">
                    <TransactionAddress
                      address={transfer.from}
                      selectedAddress={address}
                    />
                  </span>
                  <span>
                    <TransactionDirection />
                  </span>
                </span>
              </td>
              <td>
                <TransactionAddress
                  address={transfer.to}
                  selectedAddress={address}
                  showCodeIndicator
                />
              </td>
              <TokenAmount
                tokenAddress={transfer.token}
                amount={transfer.value}
              />
            </tr>
          ) : null,
        )}
    </BlockNumberContext.Provider>
  );
};

export default memo(ERC20Item);



================================================
FILE: src/execution/address/GenericTransactionSearchResult.tsx
================================================
import { FC } from "react";
import ContentFrame from "../../components/ContentFrame";
import StandardScrollableTable from "../../components/StandardScrollableTable";
import StandardTBody from "../../components/StandardTBody";
import StandardTHead from "../../components/StandardTHead";
import { PAGE_SIZE } from "../../params";
import SearchResultNavBar from "../../search/SearchResultNavBar";
import { getTotalFormatter } from "../../search/messages";
import StandardSelectionBoundary from "../../selection/StandardSelectionBoundary";
import PendingPage from "./PendingPage";

type GenericTransactionSearchResultProps<T> = {
  /**
   * 1-based page number.
   */
  pageNumber: number;

  /**
   * The total number of results in the scope of the search.
   */
  total: number | undefined;

  /**
   * Represents 1 page of search results. The entire page will be rendered
   * by this component.
   */
  items: T[] | undefined;

  /**
   * Renders 1 page result. It should be a fragment with the result <td> columns.
   */
  Item: FC<T>;

  /**
   * Table header; customize for pseudotransactions
   */
  header?: JSX.Element;

  /**
   * Name of the transaction type, e.g. 'transaction' or 'withdrawal'
   */
  typeName?: string;

  /**
   * Number of columns to fill when results are pending
   */
  columns?: number;
};

const defaultHeader = (
  <StandardTHead>
    <th className="w-56">Txn Hash</th>
    <th className="w-28">Method</th>
    <th className="w-28">Block</th>
    <th className="w-28">Age</th>
    <th>From</th>
    <th>To</th>
    <th className="w-44">Value</th>
  </StandardTHead>
);

const GenericTransactionSearchResult = <T extends { hash: string }>({
  pageNumber,
  total,
  items,
  Item,
  header = defaultHeader,
  typeName = "transaction",
  columns = 7,
}: GenericTransactionSearchResultProps<T>) => {
  const totalFormatter = getTotalFormatter(typeName);
  return (
    <ContentFrame key={pageNumber} tabs>
      {total === 0 ? (
        <div className="py-3 text-sm text-gray-500">No {typeName}s found</div>
      ) : (
        <>
          <SearchResultNavBar
            pageNumber={pageNumber}
            pageSize={PAGE_SIZE}
            total={total}
            totalFormatter={totalFormatter}
          />
          <StandardScrollableTable>
            {header}
            {items !== undefined ? (
              <StandardSelectionBoundary>
                <StandardTBody>
                  {items.map((i) => (
                    <Item key={i.hash} {...i} />
                  ))}
                </StandardTBody>
              </StandardSelectionBoundary>
            ) : (
              <PendingPage rows={PAGE_SIZE} cols={columns} />
            )}
          </StandardScrollableTable>
          {total !== undefined && (
            <SearchResultNavBar
              pageNumber={pageNumber}
              pageSize={PAGE_SIZE}
              total={total}
              totalFormatter={totalFormatter}
            />
          )}
        </>
      )}
    </ContentFrame>
  );
};

export default GenericTransactionSearchResult;



================================================
FILE: src/execution/address/PendingItem.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import PendingItem from "./PendingItem";

const meta = {
  component: PendingItem,
} satisfies Meta<typeof PendingItem>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {},
};



================================================
FILE: src/execution/address/PendingItem.tsx
================================================
import { FC } from "react";
import ContentLoader from "react-content-loader";

const PendingItem: FC = () => (
  <div className="p-1">
    <ContentLoader
      className="h-4 w-full"
      viewBox="0 0 100 100"
      speed={2}
      backgroundColor="#f3f3f3"
      foregroundColor="#ecebeb"
      preserveAspectRatio="none"
    >
      <rect x="0" y="0" width="100" height="100" rx="4" ry="4" />
    </ContentLoader>
  </div>
);

export default PendingItem;



================================================
FILE: src/execution/address/PendingPage.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import StandardTHead from "../../components/StandardTHead";
import PendingPage from "./PendingPage";

const meta = {
  component: PendingPage,
} satisfies Meta<typeof PendingPage>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    rows: 5,
    cols: 10,
  },
  decorators: [
    (Story) => (
      <table>
        <StandardTHead>
          {[...new Array(10).keys()].map((_, i) => (
            <th className="w-40">Column {i + 1}</th>
          ))}
        </StandardTHead>
        <Story />
      </table>
    ),
  ],
};



================================================
FILE: src/execution/address/PendingPage.tsx
================================================
import { FC, memo } from "react";
import StandardTBody from "../../components/StandardTBody";
import PendingItem from "./PendingItem";

type PendingPageProps = {
  rows: number;
  cols: number;
};

const PendingPage: FC<PendingPageProps> = ({ rows, cols }) => (
  <StandardTBody>
    {[...new Array(rows).keys()].map((_, i) => (
      <tr key={i}>
        {[...new Array(cols).keys()].map((_, j) => (
          <td key={j}>
            <PendingItem />
          </td>
        ))}
      </tr>
    ))}
  </StandardTBody>
);

export default memo(PendingPage);



================================================
FILE: src/execution/address/ProxyContract.tsx
================================================
import { FC, useContext } from "react";
import { useOutletContext } from "react-router-dom";
import { useProxyAttributes } from "../../ots2/usePrototypeTransferHooks";
import { RuntimeContext } from "../../useRuntime";
import { type AddressOutletContext } from "../AddressMainPage";
import Contracts from "./Contracts";

const ProxyContract: FC = () => {
  const { address } = useOutletContext() as AddressOutletContext;
  const { provider } = useContext(RuntimeContext);
  const proxyAttrs = useProxyAttributes(provider, address);
  return (
    <Contracts
      checksummedAddress={proxyAttrs.logicAddress!}
      match={proxyAttrs.proxyMatch}
    />
  );
};

export default ProxyContract;



================================================
FILE: src/execution/address/ProxyReadContract.tsx
================================================
import { FC, useContext } from "react";
import { useOutletContext } from "react-router-dom";
import { useProxyAttributes } from "../../ots2/usePrototypeTransferHooks";
import { RuntimeContext } from "../../useRuntime";
import { type AddressOutletContext } from "../AddressMainPage";
import ReadContract from "./contract/ReadContract";

const ProxyReadContract: FC = () => {
  const { address } = useOutletContext() as AddressOutletContext;
  const { provider } = useContext(RuntimeContext);
  const proxyAttrs = useProxyAttributes(provider, address);
  return (
    <ReadContract checksummedAddress={address} match={proxyAttrs.proxyMatch} />
  );
};

export default ProxyReadContract;



================================================
FILE: src/execution/address/ScillaContract.tsx
================================================
import { Tab } from "@headlessui/react";
import React from "react";
import { HighlightedCode } from "../../components/HighlightedCode";
import SwitchTab from "../../components/SwitchTab";
import { ScillaInitParams } from "./ScillaInitParams";
import { ScillaState } from "./ScillaState";

type ContractProps = {
  address: string;
  content: any;
};

const ScillaContract: React.FC<ContractProps> = ({ address, content }) => {
  let [loadContractState, setLoadContractState] = React.useState<number>(0);

  return (
    <div>
      <Tab.Group>
        <Tab.List>
          <SwitchTab>Code</SwitchTab>
          <SwitchTab>Init Params</SwitchTab>
          <SwitchTab>State</SwitchTab>
        </Tab.List>
        <Tab.Panels>
          <Tab.Panel>
            <HighlightedCode language="scilla" content={content ?? ""} />
          </Tab.Panel>
          <Tab.Panel>
            {" "}
            <ScillaInitParams address={address} />
          </Tab.Panel>
          <Tab.Panel>
            <ScillaState
              address={address}
              loadContractState={loadContractState}
              setLoadContractState={setLoadContractState}
            />
          </Tab.Panel>
        </Tab.Panels>
      </Tab.Group>
    </div>
  );
};

export default React.memo(ScillaContract);



================================================
FILE: src/execution/address/ScillaInitParams.tsx
================================================
import { faCopy } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { FC, useContext } from "react";
import { RuntimeContext } from "../../useRuntime";
import { useSmartContractInit } from "../../useZilliqaHooks";

type ScillaInitParamsProps = {
  address: string;
};

type ScillaInitParamRowProps = {
  name: string;
  valueType: string;
  value: string;
};

const formatJsonValue = (value: any): string => {
  if (typeof value == "object") {
    return JSON.stringify(value, null, 2);
  } else {
    return value;
  }
};

const ScillaInitParamRow: FC<ScillaInitParamRowProps> = ({
  name,
  valueType,
  value,
}) => {
  return (
    <>
      <tr className="grid grid-cols-12 gap-x-2 py-2 hover:bg-gray-100">
        <td className="col-span-3 pl-1">
          <span className="text-gray-600">{name}</span>
        </td>
        <td className="col-span-1 text-gray-500">{valueType}</td>
        <td className="col-span-8 text-gray-500">{formatJsonValue(value)}</td>
      </tr>
    </>
  );
};

export const ScillaInitParams: FC<ScillaInitParamsProps> = ({ address }) => {
  const { zilliqa } = useContext(RuntimeContext);
  const { data, isLoading } = useSmartContractInit(zilliqa, address);
  const handleCopy = () => {
    navigator.clipboard.writeText(JSON.stringify(data) ?? "");
  };

  if (isLoading) {
    return (
      <div className="mt-6">
        Loading (or cannot retrieve) contract init parameters
      </div>
    );
  } else {
    return (
      <div className="mt-6">
        <button
          className="absolute hover:bg-skin-button-hover-fill focus:outline-none"
          type="button"
          onClick={handleCopy}
          title="Copy to clipboard"
        >
          <FontAwesomeIcon icon={faCopy} />
        </button>
        <div className="h-8"></div>

        <table className="w-ful border">
          <thead>
            <tr className="grid grid-cols-12 gap-x-2 bg-gray-100 py-2 text-left">
              <th className="col-span-3 pl-1">name</th>
              <th className="col-span-1 pl-1">type</th>
              <th className="col-span-8 pr-1">value</th>
            </tr>
          </thead>
          <tbody className="divide-y">
            {data
              ? data.map((val) => (
                  <ScillaInitParamRow
                    key={val.vname}
                    name={val.vname}
                    valueType={val.type}
                    value={val.value}
                  />
                ))
              : undefined}
          </tbody>
        </table>
      </div>
    );
  }
};



================================================
FILE: src/execution/address/ScillaState.tsx
================================================
import { faCopy } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { FC, useContext, useState } from "react";
import { RuntimeContext } from "../../useRuntime";
import { ContractState, useSmartContractState } from "../../useZilliqaHooks";

type ScillaStateProps = {
  address: string;
  loadContractState: number | undefined;
  setLoadContractState: React.Dispatch<React.SetStateAction<number>>;
};

type ScillaStateRowProps = {
  name: string;
  value: string;
};

const ScillaStateParamRow: FC<ScillaStateRowProps> = ({ name, value }) => {
  return (
    <>
      <tr className="grid grid-cols-12 gap-x-2 py-2 hover:bg-gray-100">
        <td className="col-span-3 pl-1">
          <span className="text-gray-600">{name}</span>
        </td>
        <td className="col-span-8 text-gray-500">{value}</td>
      </tr>
    </>
  );
};

const formatJsonValue = (value: any): string => {
  if (typeof value == "object") {
    return JSON.stringify(value, null, 2);
  } else {
    return value;
  }
};

export const ScillaState: FC<ScillaStateProps> = ({
  address,
  loadContractState,
  setLoadContractState,
}) => {
  const { zilliqa } = useContext(RuntimeContext);
  const [contractState, setContractState] = useState<ContractState | null>(
    null,
  );
  const { data, isLoading } = useSmartContractState(
    loadContractState ? zilliqa : undefined,
    address,
    loadContractState ?? 0,
  );
  if (data && contractState == null) {
    setContractState(data);
  }

  if (!loadContractState && !contractState) {
    return (
      <div className="mt-6">
        <button
          className="text-link-blue hover:text-link-blue-hover"
          onClick={() => setLoadContractState((prev: number) => prev + 1)}
        >
          Load Contract State
        </button>
      </div>
    );
  }

  if (!contractState) {
    return <div className="mt-6"> Loading contract state </div>;
  }

  const handleCopy = () => {
    navigator.clipboard.writeText(JSON.stringify(contractState) ?? "");
  };

  return (
    <div className="mt-6">
      <button
        className="text-link-blue hover:text-link-blue-hover"
        onClick={() => {
          setContractState(null);
          setLoadContractState((prev: number) => prev + 1);
        }}
      >
        Refresh
      </button>

      <div className="inline-block w-16"></div>
      <button
        className="absolute hover:bg-skin-button-hover-fill focus:outline-none"
        type="button"
        onClick={handleCopy}
        title="Copy to clipboard"
      >
        <FontAwesomeIcon icon={faCopy} />
      </button>

      <div className={isLoading ? "opacity-50" : ""}>
        <table className="w-ful border">
          <thead>
            <tr className="grid grid-cols-12 gap-x-2 bg-gray-100 py-2 text-left">
              <th className="col-span-3 pl-1">name</th>
              <th className="col-span-8 pr-1">value</th>
            </tr>
          </thead>
          <tbody className="divide-y">
            {contractState
              ? Object.keys(contractState).map((val) => (
                  <ScillaStateParamRow
                    key={val}
                    name={val}
                    value={formatJsonValue(contractState[val])}
                  />
                ))
              : undefined}
          </tbody>
        </table>
      </div>
    </div>
  );
};



================================================
FILE: src/execution/address/TokenAmount.tsx
================================================
import { FC, useContext } from "react";
import { getPriceOraclePreset } from "../../components/FiatValue";
import USDAmount from "../../components/USDAmount";
import FormattedBalanceHighlighter from "../../selection/FormattedBalanceHighlighter";
import { ChecksummedAddress } from "../../types";
import { useTokenMetadata } from "../../useErigonHooks";
import { useTokenUSDOracle } from "../../usePriceOracle";
import { RuntimeContext } from "../../useRuntime";
import TransactionAddressWithCopy from "../components/TransactionAddressWithCopy";

type TokenAmountProps = {
  tokenAddress: ChecksummedAddress;
  amount?: bigint | null;
};

const TokenAmount: FC<TokenAmountProps> = ({ tokenAddress, amount }) => {
  const { provider } = useContext(RuntimeContext);
  const metadata = useTokenMetadata(provider, tokenAddress);
  const {
    price: quote,
    decimals,
    source: priceSource,
  } = useTokenUSDOracle(
    provider,
    "latest",
    tokenAddress,
    metadata?.decimals !== undefined ? BigInt(metadata?.decimals) : undefined,
  );

  return (
    <>
      <td>
        <TransactionAddressWithCopy address={tokenAddress} />
      </td>
      <td>
        {amount !== null && amount !== undefined && (
          <FormattedBalanceHighlighter
            value={amount}
            decimals={metadata?.decimals ?? 0}
          />
        )}
        {amount !== null &&
          amount !== undefined &&
          metadata &&
          quote !== undefined &&
          decimals !== undefined && (
            <USDAmount
              amount={amount}
              amountDecimals={metadata.decimals}
              quote={quote}
              quoteDecimals={Number(decimals) ?? 0}
              colorScheme={getPriceOraclePreset(priceSource)}
            />
          )}
      </td>
    </>
  );
};

export default TokenAmount;



================================================
FILE: src/execution/address/TokenBalance.tsx
================================================
import { useQuery } from "@tanstack/react-query";
import { FC, useContext } from "react";
import { erc20BalanceQuery } from "../../ots2/usePrototypeTransferHooks";
import { ChecksummedAddress } from "../../types";
import { RuntimeContext } from "../../useRuntime";
import TokenAmount from "./TokenAmount";

type TokenBalanceProps = {
  holderAddress: ChecksummedAddress;
  tokenAddress: ChecksummedAddress;
};

const TokenBalance: FC<TokenBalanceProps> = ({
  holderAddress,
  tokenAddress,
}) => {
  const { provider } = useContext(RuntimeContext);
  const { data: balance } = useQuery(
    erc20BalanceQuery(provider, holderAddress, tokenAddress),
  );

  return (
    <tr>
      <TokenAmount tokenAddress={tokenAddress} amount={balance} />
    </tr>
  );
};

export default TokenBalance;



================================================
FILE: src/execution/address/WhatsabiWarning.tsx
================================================
import { faWarning } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import React from "react";

const WhatsabiWarning: React.FC = () => (
  <div
    className="bg-orange-100 border-l-4 border-orange-500 text-orange-700 px-3 py-2.5 mb-4 rounded mt-2"
    role="alert"
  >
    <FontAwesomeIcon icon={faWarning} className="mr-2" />
    <span className="text-md">
      Contract not found in Sourcify respository. Below is an estimate of the
      ABI from its bytecode.
    </span>
  </div>
);

export default WhatsabiWarning;



================================================
FILE: src/execution/address/WithdrawalItem.tsx
================================================
import { FC, memo, useContext } from "react";
import BlockLink from "../../components/BlockLink";
import NativeTokenAmount from "../../components/NativeTokenAmount";
import TimestampAge from "../../components/TimestampAge";
import TransactionDirection from "../../components/TransactionDirection";
import ValidatorLink from "../../consensus/components/ValidatorLink";
import { BlockNumberContext } from "../../useBlockTagContext";
import { RuntimeContext } from "../../useRuntime";
import { commify } from "../../utils/utils";
import TransactionAddress from "../components/TransactionAddress";
import { AddressAwareComponentProps } from "../types";

export type WithdrawalItemProps = AddressAwareComponentProps & {
  index: bigint;
  blockNumber: number;
  timestamp: number;
  validatorIndex: number;
  amount: bigint;
};

const WithdrawalItem: FC<WithdrawalItemProps> = ({
  address,
  index,
  blockNumber,
  timestamp,
  validatorIndex,
  amount,
}) => {
  const { config } = useContext(RuntimeContext);
  const hasConsensusClient = config.beaconAPI !== undefined;
  return (
    <BlockNumberContext.Provider value={blockNumber}>
      <tr>
        <td>{commify(index)}</td>
        <td>
          <BlockLink blockTag={blockNumber} />
        </td>
        <td>
          <TimestampAge timestamp={timestamp} />
        </td>
        <td>
          <span className="col-span-2 flex items-baseline justify-between space-x-2 pr-2">
            <span className="truncate">
              <ValidatorLink
                validatorIndex={validatorIndex}
                disabled={!hasConsensusClient}
              />
            </span>
            <span>
              <TransactionDirection
              // direction={undefined}
              />
            </span>
          </span>
        </td>
        <td>
          <TransactionAddress
            address={address}
            selectedAddress={address}
            showCodeIndicator
          />
        </td>
        <td>
          <NativeTokenAmount value={amount * 1_000_000_000n} />
        </td>
      </tr>
    </BlockNumberContext.Provider>
  );
};

export default memo(WithdrawalItem);



================================================
FILE: src/execution/address/contract/contract-input-grammar
================================================
// To parse all arguments at once, separated by commas, start with Values instead
Start := _ valueObj=Value _ $
    .value = string | bigint | boolean | any[] { return this.valueObj.value; }

ValuesArray := '\[' _ elements=Values? _ '\]'
    .value = any[] { return this.elements ? this.elements.value : []; }

Values := head=Value _ tail={',' _ vals=Values}?
    .value = any[] { return (this.tail !== null) ? [this.head.value, ...this.tail.vals.value] : [this.head.value]; }

HexValue := value={'0x[a-f0-9]*'i}

UnsignedInteger := value={'[0-9]+'}
Integer := parts={sign='-'? abs=UnsignedInteger}
    .value = bigint { return BigInt((this.parts.sign ?? '') + this.parts.abs.value); }
FixedBig := integer=Integer decimal={'\.' value=UnsignedInteger}? 'e' exponent=UnsignedInteger
    .value = bigint {
        return (this.integer.value * 10n ** BigInt(this.exponent.value)) + (this.decimal !== null ? (BigInt(this.decimal.value.value) * 10n ** BigInt(BigInt(this.exponent.value) - BigInt(this.decimal.value.value.length))) * (this.integer.parts.sign === '-' ? -1n : 1n) : 0n);
    }

EscapeSequence := escaped={'\\' label='[n"\'\\]'}
    .char = string {
        switch (escaped.label) {
            case 'n':
                return '\n';
            case '"':
                return '"';
            case '\'':
                return '\'';
            case '\\':
                return '\\';
        }
        throw new Error('Unknown escape');
    }
Character := !'["\n\\]' char='.' | EscapeSequence

UnquotedString := chars={Character}*
    .value = string { return chars.map(c => c.char).join(''); }
QuotedString := '"' str=UnquotedString '"'
    .value = string { return str.value; }

Boolean := boolVal={'true' | 'false'}
    .value = boolean { return boolVal === 'true'; }

Value := ValuesArray | HexValue | FixedBig | Integer | QuotedString | Boolean

_ := '[ \t]*'



================================================
FILE: src/execution/address/contract/ContractABI.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import erc20 from "../../../abi/erc20.json";
import ContractABI from "./ContractABI";

const meta = {
  component: ContractABI,
} satisfies Meta<typeof ContractABI>;

export default meta;
type Story = StoryObj<typeof meta>;

export const ERC20: Story = {
  args: {
    abi: erc20,
  },
};



================================================
FILE: src/execution/address/contract/ContractABI.tsx
================================================
import { TabGroup, TabList, TabPanel, TabPanels } from "@headlessui/react";
import { FC, memo } from "react";
import Copy from "../../../components/Copy";
import ModeTab from "../../../components/ModeTab";
import { ABIAwareComponentProps } from "../../types";
import DecodedABI from "./DecodedABI";
import RawABI from "./RawABI";

const ContractABI: FC<ABIAwareComponentProps> = ({ abi, unknownSelectors }) => (
  <div className="mb-3">
    <TabGroup>
      <TabList className="mb-1 flex items-baseline space-x-1">
        <div className="flex items-baseline space-x-2 py-1 pr-2 text-sm">
          <span>ABI</span>
          <Copy value={JSON.stringify(abi)} />
        </div>
        <ModeTab>Decoded</ModeTab>
        <ModeTab>Raw</ModeTab>
      </TabList>
      <TabPanels>
        <TabPanel>
          <DecodedABI abi={abi} unknownSelectors={unknownSelectors} />
        </TabPanel>
        <TabPanel>
          <RawABI abi={abi} />
        </TabPanel>
      </TabPanels>
    </TabGroup>
  </div>
);

export default memo(ContractABI);



================================================
FILE: src/execution/address/contract/contractInputDataParser.test.ts
================================================
import { describe, expect } from "@jest/globals";
import { parse } from "./contractInputDataParser";

describe("contract input data parser", () => {
  test("booleans", () => {
    expect(parse("true").ast?.value).toEqual(true);
    expect(parse("[false,true]").ast?.value).toEqual([false, true]);
  });
  test("number types", () => {
    expect(parse("0").ast?.value).toEqual(0n);
    expect(parse("42978156640340513088189666230157").ast?.value).toEqual(
      42978156640340513088189666230157n,
    );
    expect(parse("[-343, -35]").ast?.value).toEqual([-343n, -35n]);
    expect(parse("-5234008651920315").ast?.value).toEqual(-5234008651920315n);
  });
  test("fixed decimal numbers", () => {
    expect(parse("3e18").ast?.value).toEqual(3000000000000000000n);
    expect(parse("0.3e1").ast?.value).toEqual(3n);
    expect(parse("0.012345678901234567899876543210e32").ast?.value).toEqual(
      1234567890123456789987654321000n,
    );
    expect(parse("-1e0").ast?.value).toEqual(-1n);
    expect(parse("-0.1e1").ast?.value).toEqual(-1n);
  });
  test("address types", () => {
    expect(
      parse("0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326").ast?.value,
    ).toEqual("0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326");
  });
  test("hex types", () => {
    expect(parse("0x1ea372").ast?.value).toEqual("0x1ea372");
  });
  test("strings", () => {
    expect(parse('"USDC"').ast?.value).toEqual("USDC");
    expect(parse('"Quote \\"this\\""').ast?.value).toEqual('Quote "this"');
    expect(parse('"newline\\nhere"').ast?.value).toEqual("newline\nhere");
  });
  test("tuple", () => {
    expect(parse('[0x34, -1e3, "mars"]').ast?.value).toEqual([
      "0x34",
      -1000n,
      "mars",
    ]);
  });
  test("arrays", () => {
    expect(parse("[1, 2, 3]").ast?.value).toEqual([1n, 2n, 3n]);
  });
  test("several nested arrays", () => {
    expect(
      parse(
        '[[["USDC", 0.99e6], ["DAI", 1.011e18], ["USDT", 0.9947e6]],[1, 2, 3e0] ]',
      ).ast?.value,
    ).toEqual([
      [
        ["USDC", 990000n],
        ["DAI", 1011000000000000000n],
        ["USDT", 994700n],
      ],
      [1n, 2n, 3n],
    ]);
  });
  test("empty arrays", () => {
    expect(parse("[]").ast?.value).toEqual([]);
    expect(parse("[[],[[],[]], [[[]]]]").ast?.value).toEqual([
      [],
      [[], []],
      [[[]]],
    ]);
  });
});



================================================
FILE: src/execution/address/contract/contractInputDataParser.ts
================================================
/* AutoGenerated Code, changes may be overwritten
 * INPUT GRAMMAR:
 * // To parse all arguments at once, separated by commas, start with Values instead
 * Start := _ valueObj=Value _ $
 *     .value = string | bigint | boolean | any[] { return this.valueObj.value; }
 * ValuesArray := '\[' _ elements=Values? _ '\]'
 *     .value = any[] { return this.elements ? this.elements.value : []; }
 * Values := head=Value _ tail={',' _ vals=Values}?
 *     .value = any[] { return (this.tail !== null) ? [this.head.value, ...this.tail.vals.value] : [this.head.value]; }
 * HexValue := value={'0x[a-f0-9]*'i}
 * UnsignedInteger := value={'[0-9]+'}
 * Integer := parts={sign='-'? abs=UnsignedInteger}
 *     .value = bigint { return BigInt((this.parts.sign ?? '') + this.parts.abs.value); }
 * FixedBig := integer=Integer decimal={'\.' value=UnsignedInteger}? 'e' exponent=UnsignedInteger
 *     .value = bigint {
 *         return (this.integer.value * 10n ** BigInt(this.exponent.value)) + (this.decimal !== null ? (BigInt(this.decimal.value.value) * 10n ** BigInt(BigInt(this.exponent.value) - BigInt(this.decimal.value.value.length))) * (this.integer.parts.sign === '-' ? -1n : 1n) : 0n);
 *     }
 * EscapeSequence := escaped={'\\' label='[n"\'\\]'}
 *     .char = string {
 *         switch (escaped.label) {
 *             case 'n':
 *                 return '\n';
 *             case '"':
 *                 return '"';
 *             case '\'':
 *                 return '\'';
 *             case '\\':
 *                 return '\\';
 *         }
 *         throw new Error('Unknown escape');
 *     }
 * Character := !'["\n\\]' char='.' | EscapeSequence
 * UnquotedString := chars={Character}*
 *     .value = string { return chars.map(c => c.char).join(''); }
 * QuotedString := '"' str=UnquotedString '"'
 *     .value = string { return str.value; }
 * Boolean := boolVal={'true' | 'false'}
 *     .value = boolean { return boolVal === 'true'; }
 * Value := ValuesArray | HexValue | FixedBig | Integer | QuotedString | Boolean
 * _ := '[ \t]*'
 */
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
  kind: ASTKinds;
}
export enum ASTKinds {
  Start = "Start",
  ValuesArray = "ValuesArray",
  Values = "Values",
  Values_$0 = "Values_$0",
  HexValue = "HexValue",
  HexValue_$0 = "HexValue_$0",
  UnsignedInteger = "UnsignedInteger",
  UnsignedInteger_$0 = "UnsignedInteger_$0",
  Integer = "Integer",
  Integer_$0 = "Integer_$0",
  FixedBig = "FixedBig",
  FixedBig_$0 = "FixedBig_$0",
  EscapeSequence = "EscapeSequence",
  EscapeSequence_$0 = "EscapeSequence_$0",
  Character_1 = "Character_1",
  Character_2 = "Character_2",
  UnquotedString = "UnquotedString",
  UnquotedString_$0 = "UnquotedString_$0",
  QuotedString = "QuotedString",
  Boolean = "Boolean",
  Boolean_$0_1 = "Boolean_$0_1",
  Boolean_$0_2 = "Boolean_$0_2",
  Value_1 = "Value_1",
  Value_2 = "Value_2",
  Value_3 = "Value_3",
  Value_4 = "Value_4",
  Value_5 = "Value_5",
  Value_6 = "Value_6",
  _ = "_",
  $EOF = "$EOF",
}
export class Start {
  public kind: ASTKinds.Start = ASTKinds.Start;
  public valueObj: Value;
  public value: string | bigint | boolean | any[];
  constructor(valueObj: Value) {
    this.valueObj = valueObj;
    this.value = ((): string | bigint | boolean | any[] => {
      return this.valueObj.value;
    })();
  }
}
export class ValuesArray {
  public kind: ASTKinds.ValuesArray = ASTKinds.ValuesArray;
  public elements: Nullable<Values>;
  public value: any[];
  constructor(elements: Nullable<Values>) {
    this.elements = elements;
    this.value = ((): any[] => {
      return this.elements ? this.elements.value : [];
    })();
  }
}
export class Values {
  public kind: ASTKinds.Values = ASTKinds.Values;
  public head: Value;
  public tail: Nullable<Values_$0>;
  public value: any[];
  constructor(head: Value, tail: Nullable<Values_$0>) {
    this.head = head;
    this.tail = tail;
    this.value = ((): any[] => {
      return this.tail !== null
        ? [this.head.value, ...this.tail.vals.value]
        : [this.head.value];
    })();
  }
}
export interface Values_$0 {
  kind: ASTKinds.Values_$0;
  vals: Values;
}
export interface HexValue {
  kind: ASTKinds.HexValue;
  value: HexValue_$0;
}
export type HexValue_$0 = string;
export interface UnsignedInteger {
  kind: ASTKinds.UnsignedInteger;
  value: UnsignedInteger_$0;
}
export type UnsignedInteger_$0 = string;
export class Integer {
  public kind: ASTKinds.Integer = ASTKinds.Integer;
  public parts: Integer_$0;
  public value: bigint;
  constructor(parts: Integer_$0) {
    this.parts = parts;
    this.value = ((): bigint => {
      return BigInt((this.parts.sign ?? "") + this.parts.abs.value);
    })();
  }
}
export interface Integer_$0 {
  kind: ASTKinds.Integer_$0;
  sign: Nullable<string>;
  abs: UnsignedInteger;
}
export class FixedBig {
  public kind: ASTKinds.FixedBig = ASTKinds.FixedBig;
  public integer: Integer;
  public decimal: Nullable<FixedBig_$0>;
  public exponent: UnsignedInteger;
  public value: bigint;
  constructor(
    integer: Integer,
    decimal: Nullable<FixedBig_$0>,
    exponent: UnsignedInteger,
  ) {
    this.integer = integer;
    this.decimal = decimal;
    this.exponent = exponent;
    this.value = ((): bigint => {
      return (
        this.integer.value * 10n ** BigInt(this.exponent.value) +
        (this.decimal !== null
          ? BigInt(this.decimal.value.value) *
            10n **
              BigInt(
                BigInt(this.exponent.value) -
                  BigInt(this.decimal.value.value.length),
              ) *
            (this.integer.parts.sign === "-" ? -1n : 1n)
          : 0n)
      );
    })();
  }
}
export interface FixedBig_$0 {
  kind: ASTKinds.FixedBig_$0;
  value: UnsignedInteger;
}
export class EscapeSequence {
  public kind: ASTKinds.EscapeSequence = ASTKinds.EscapeSequence;
  public escaped: EscapeSequence_$0;
  public char: string;
  constructor(escaped: EscapeSequence_$0) {
    this.escaped = escaped;
    this.char = ((): string => {
      switch (escaped.label) {
        case "n":
          return "\n";
        case '"':
          return '"';
        case "'":
          return "'";
        case "\\":
          return "\\";
      }
      throw new Error("Unknown escape");
    })();
  }
}
export interface EscapeSequence_$0 {
  kind: ASTKinds.EscapeSequence_$0;
  label: string;
}
export type Character = Character_1 | Character_2;
export interface Character_1 {
  kind: ASTKinds.Character_1;
  char: string;
}
export type Character_2 = EscapeSequence;
export class UnquotedString {
  public kind: ASTKinds.UnquotedString = ASTKinds.UnquotedString;
  public chars: UnquotedString_$0[];
  public value: string;
  constructor(chars: UnquotedString_$0[]) {
    this.chars = chars;
    this.value = ((): string => {
      return chars.map((c) => c.char).join("");
    })();
  }
}
export type UnquotedString_$0 = Character;
export class QuotedString {
  public kind: ASTKinds.QuotedString = ASTKinds.QuotedString;
  public str: UnquotedString;
  public value: string;
  constructor(str: UnquotedString) {
    this.str = str;
    this.value = ((): string => {
      return str.value;
    })();
  }
}
export class Boolean {
  public kind: ASTKinds.Boolean = ASTKinds.Boolean;
  public boolVal: Boolean_$0;
  public value: boolean;
  constructor(boolVal: Boolean_$0) {
    this.boolVal = boolVal;
    this.value = ((): boolean => {
      return boolVal === "true";
    })();
  }
}
export type Boolean_$0 = Boolean_$0_1 | Boolean_$0_2;
export type Boolean_$0_1 = string;
export type Boolean_$0_2 = string;
export type Value = Value_1 | Value_2 | Value_3 | Value_4 | Value_5 | Value_6;
export type Value_1 = ValuesArray;
export type Value_2 = HexValue;
export type Value_3 = FixedBig;
export type Value_4 = Integer;
export type Value_5 = QuotedString;
export type Value_6 = Boolean;
export type _ = string;
export class Parser {
  private readonly input: string;
  private pos: PosInfo;
  private negating: boolean = false;
  private memoSafe: boolean = true;
  constructor(input: string) {
    this.pos = { overallPos: 0, line: 1, offset: 0 };
    this.input = input;
  }
  public reset(pos: PosInfo) {
    this.pos = pos;
  }
  public finished(): boolean {
    return this.pos.overallPos === this.input.length;
  }
  public clearMemos(): void {}
  public matchStart($$dpth: number, $$cr?: ErrorTracker): Nullable<Start> {
    return this.run<Start>($$dpth, () => {
      let $scope$valueObj: Nullable<Value>;
      let $$res: Nullable<Start> = null;
      if (
        true &&
        this.match_($$dpth + 1, $$cr) !== null &&
        ($scope$valueObj = this.matchValue($$dpth + 1, $$cr)) !== null &&
        this.match_($$dpth + 1, $$cr) !== null &&
        this.match$EOF($$cr) !== null
      ) {
        $$res = new Start($scope$valueObj);
      }
      return $$res;
    });
  }
  public matchValuesArray(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<ValuesArray> {
    return this.run<ValuesArray>($$dpth, () => {
      let $scope$elements: Nullable<Nullable<Values>>;
      let $$res: Nullable<ValuesArray> = null;
      if (
        true &&
        this.regexAccept(String.raw`(?:\[)`, "", $$dpth + 1, $$cr) !== null &&
        this.match_($$dpth + 1, $$cr) !== null &&
        (($scope$elements = this.matchValues($$dpth + 1, $$cr)) || true) &&
        this.match_($$dpth + 1, $$cr) !== null &&
        this.regexAccept(String.raw`(?:\])`, "", $$dpth + 1, $$cr) !== null
      ) {
        $$res = new ValuesArray($scope$elements);
      }
      return $$res;
    });
  }
  public matchValues($$dpth: number, $$cr?: ErrorTracker): Nullable<Values> {
    return this.run<Values>($$dpth, () => {
      let $scope$head: Nullable<Value>;
      let $scope$tail: Nullable<Nullable<Values_$0>>;
      let $$res: Nullable<Values> = null;
      if (
        true &&
        ($scope$head = this.matchValue($$dpth + 1, $$cr)) !== null &&
        this.match_($$dpth + 1, $$cr) !== null &&
        (($scope$tail = this.matchValues_$0($$dpth + 1, $$cr)) || true)
      ) {
        $$res = new Values($scope$head, $scope$tail);
      }
      return $$res;
    });
  }
  public matchValues_$0(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<Values_$0> {
    return this.run<Values_$0>($$dpth, () => {
      let $scope$vals: Nullable<Values>;
      let $$res: Nullable<Values_$0> = null;
      if (
        true &&
        this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null &&
        this.match_($$dpth + 1, $$cr) !== null &&
        ($scope$vals = this.matchValues($$dpth + 1, $$cr)) !== null
      ) {
        $$res = { kind: ASTKinds.Values_$0, vals: $scope$vals };
      }
      return $$res;
    });
  }
  public matchHexValue(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<HexValue> {
    return this.run<HexValue>($$dpth, () => {
      let $scope$value: Nullable<HexValue_$0>;
      let $$res: Nullable<HexValue> = null;
      if (
        true &&
        ($scope$value = this.matchHexValue_$0($$dpth + 1, $$cr)) !== null
      ) {
        $$res = { kind: ASTKinds.HexValue, value: $scope$value };
      }
      return $$res;
    });
  }
  public matchHexValue_$0(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<HexValue_$0> {
    return this.regexAccept(String.raw`(?:0x[a-f0-9]*)`, "i", $$dpth + 1, $$cr);
  }
  public matchUnsignedInteger(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<UnsignedInteger> {
    return this.run<UnsignedInteger>($$dpth, () => {
      let $scope$value: Nullable<UnsignedInteger_$0>;
      let $$res: Nullable<UnsignedInteger> = null;
      if (
        true &&
        ($scope$value = this.matchUnsignedInteger_$0($$dpth + 1, $$cr)) !== null
      ) {
        $$res = { kind: ASTKinds.UnsignedInteger, value: $scope$value };
      }
      return $$res;
    });
  }
  public matchUnsignedInteger_$0(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<UnsignedInteger_$0> {
    return this.regexAccept(String.raw`(?:[0-9]+)`, "", $$dpth + 1, $$cr);
  }
  public matchInteger($$dpth: number, $$cr?: ErrorTracker): Nullable<Integer> {
    return this.run<Integer>($$dpth, () => {
      let $scope$parts: Nullable<Integer_$0>;
      let $$res: Nullable<Integer> = null;
      if (
        true &&
        ($scope$parts = this.matchInteger_$0($$dpth + 1, $$cr)) !== null
      ) {
        $$res = new Integer($scope$parts);
      }
      return $$res;
    });
  }
  public matchInteger_$0(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<Integer_$0> {
    return this.run<Integer_$0>($$dpth, () => {
      let $scope$sign: Nullable<Nullable<string>>;
      let $scope$abs: Nullable<UnsignedInteger>;
      let $$res: Nullable<Integer_$0> = null;
      if (
        true &&
        (($scope$sign = this.regexAccept(
          String.raw`(?:-)`,
          "",
          $$dpth + 1,
          $$cr,
        )) ||
          true) &&
        ($scope$abs = this.matchUnsignedInteger($$dpth + 1, $$cr)) !== null
      ) {
        $$res = {
          kind: ASTKinds.Integer_$0,
          sign: $scope$sign,
          abs: $scope$abs,
        };
      }
      return $$res;
    });
  }
  public matchFixedBig(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<FixedBig> {
    return this.run<FixedBig>($$dpth, () => {
      let $scope$integer: Nullable<Integer>;
      let $scope$decimal: Nullable<Nullable<FixedBig_$0>>;
      let $scope$exponent: Nullable<UnsignedInteger>;
      let $$res: Nullable<FixedBig> = null;
      if (
        true &&
        ($scope$integer = this.matchInteger($$dpth + 1, $$cr)) !== null &&
        (($scope$decimal = this.matchFixedBig_$0($$dpth + 1, $$cr)) || true) &&
        this.regexAccept(String.raw`(?:e)`, "", $$dpth + 1, $$cr) !== null &&
        ($scope$exponent = this.matchUnsignedInteger($$dpth + 1, $$cr)) !== null
      ) {
        $$res = new FixedBig($scope$integer, $scope$decimal, $scope$exponent);
      }
      return $$res;
    });
  }
  public matchFixedBig_$0(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<FixedBig_$0> {
    return this.run<FixedBig_$0>($$dpth, () => {
      let $scope$value: Nullable<UnsignedInteger>;
      let $$res: Nullable<FixedBig_$0> = null;
      if (
        true &&
        this.regexAccept(String.raw`(?:\.)`, "", $$dpth + 1, $$cr) !== null &&
        ($scope$value = this.matchUnsignedInteger($$dpth + 1, $$cr)) !== null
      ) {
        $$res = { kind: ASTKinds.FixedBig_$0, value: $scope$value };
      }
      return $$res;
    });
  }
  public matchEscapeSequence(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<EscapeSequence> {
    return this.run<EscapeSequence>($$dpth, () => {
      let $scope$escaped: Nullable<EscapeSequence_$0>;
      let $$res: Nullable<EscapeSequence> = null;
      if (
        true &&
        ($scope$escaped = this.matchEscapeSequence_$0($$dpth + 1, $$cr)) !==
          null
      ) {
        $$res = new EscapeSequence($scope$escaped);
      }
      return $$res;
    });
  }
  public matchEscapeSequence_$0(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<EscapeSequence_$0> {
    return this.run<EscapeSequence_$0>($$dpth, () => {
      let $scope$label: Nullable<string>;
      let $$res: Nullable<EscapeSequence_$0> = null;
      if (
        true &&
        this.regexAccept(String.raw`(?:\\)`, "", $$dpth + 1, $$cr) !== null &&
        ($scope$label = this.regexAccept(
          String.raw`(?:[n"\'\\])`,
          "",
          $$dpth + 1,
          $$cr,
        )) !== null
      ) {
        $$res = { kind: ASTKinds.EscapeSequence_$0, label: $scope$label };
      }
      return $$res;
    });
  }
  public matchCharacter(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<Character> {
    return this.choice<Character>([
      () => this.matchCharacter_1($$dpth + 1, $$cr),
      () => this.matchCharacter_2($$dpth + 1, $$cr),
    ]);
  }
  public matchCharacter_1(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<Character_1> {
    return this.run<Character_1>($$dpth, () => {
      let $scope$char: Nullable<string>;
      let $$res: Nullable<Character_1> = null;
      if (
        true &&
        this.negate(() =>
          this.regexAccept(String.raw`(?:["\n\\])`, "", $$dpth + 1, $$cr),
        ) !== null &&
        ($scope$char = this.regexAccept(
          String.raw`(?:.)`,
          "",
          $$dpth + 1,
          $$cr,
        )) !== null
      ) {
        $$res = { kind: ASTKinds.Character_1, char: $scope$char };
      }
      return $$res;
    });
  }
  public matchCharacter_2(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<Character_2> {
    return this.matchEscapeSequence($$dpth + 1, $$cr);
  }
  public matchUnquotedString(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<UnquotedString> {
    return this.run<UnquotedString>($$dpth, () => {
      let $scope$chars: Nullable<UnquotedString_$0[]>;
      let $$res: Nullable<UnquotedString> = null;
      if (
        true &&
        ($scope$chars = this.loop<UnquotedString_$0>(
          () => this.matchUnquotedString_$0($$dpth + 1, $$cr),
          0,
          -1,
        )) !== null
      ) {
        $$res = new UnquotedString($scope$chars);
      }
      return $$res;
    });
  }
  public matchUnquotedString_$0(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<UnquotedString_$0> {
    return this.matchCharacter($$dpth + 1, $$cr);
  }
  public matchQuotedString(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<QuotedString> {
    return this.run<QuotedString>($$dpth, () => {
      let $scope$str: Nullable<UnquotedString>;
      let $$res: Nullable<QuotedString> = null;
      if (
        true &&
        this.regexAccept(String.raw`(?:")`, "", $$dpth + 1, $$cr) !== null &&
        ($scope$str = this.matchUnquotedString($$dpth + 1, $$cr)) !== null &&
        this.regexAccept(String.raw`(?:")`, "", $$dpth + 1, $$cr) !== null
      ) {
        $$res = new QuotedString($scope$str);
      }
      return $$res;
    });
  }
  public matchBoolean($$dpth: number, $$cr?: ErrorTracker): Nullable<Boolean> {
    return this.run<Boolean>($$dpth, () => {
      let $scope$boolVal: Nullable<Boolean_$0>;
      let $$res: Nullable<Boolean> = null;
      if (
        true &&
        ($scope$boolVal = this.matchBoolean_$0($$dpth + 1, $$cr)) !== null
      ) {
        $$res = new Boolean($scope$boolVal);
      }
      return $$res;
    });
  }
  public matchBoolean_$0(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<Boolean_$0> {
    return this.choice<Boolean_$0>([
      () => this.matchBoolean_$0_1($$dpth + 1, $$cr),
      () => this.matchBoolean_$0_2($$dpth + 1, $$cr),
    ]);
  }
  public matchBoolean_$0_1(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<Boolean_$0_1> {
    return this.regexAccept(String.raw`(?:true)`, "", $$dpth + 1, $$cr);
  }
  public matchBoolean_$0_2(
    $$dpth: number,
    $$cr?: ErrorTracker,
  ): Nullable<Boolean_$0_2> {
    return this.regexAccept(String.raw`(?:false)`, "", $$dpth + 1, $$cr);
  }
  public matchValue($$dpth: number, $$cr?: ErrorTracker): Nullable<Value> {
    return this.choice<Value>([
      () => this.matchValue_1($$dpth + 1, $$cr),
      () => this.matchValue_2($$dpth + 1, $$cr),
      () => this.matchValue_3($$dpth + 1, $$cr),
      () => this.matchValue_4($$dpth + 1, $$cr),
      () => this.matchValue_5($$dpth + 1, $$cr),
      () => this.matchValue_6($$dpth + 1, $$cr),
    ]);
  }
  public matchValue_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Value_1> {
    return this.matchValuesArray($$dpth + 1, $$cr);
  }
  public matchValue_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Value_2> {
    return this.matchHexValue($$dpth + 1, $$cr);
  }
  public matchValue_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Value_3> {
    return this.matchFixedBig($$dpth + 1, $$cr);
  }
  public matchValue_4($$dpth: number, $$cr?: ErrorTracker): Nullable<Value_4> {
    return this.matchInteger($$dpth + 1, $$cr);
  }
  public matchValue_5($$dpth: number, $$cr?: ErrorTracker): Nullable<Value_5> {
    return this.matchQuotedString($$dpth + 1, $$cr);
  }
  public matchValue_6($$dpth: number, $$cr?: ErrorTracker): Nullable<Value_6> {
    return this.matchBoolean($$dpth + 1, $$cr);
  }
  public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
    return this.regexAccept(String.raw`(?:[ \t]*)`, "", $$dpth + 1, $$cr);
  }
  public test(): boolean {
    const mrk = this.mark();
    const res = this.matchStart(0);
    const ans = res !== null;
    this.reset(mrk);
    return ans;
  }
  public parse(): ParseResult {
    const mrk = this.mark();
    const res = this.matchStart(0);
    if (res) return { ast: res, errs: [] };
    this.reset(mrk);
    const rec = new ErrorTracker();
    this.clearMemos();
    this.matchStart(0, rec);
    const err = rec.getErr();
    return { ast: res, errs: err !== null ? [err] : [] };
  }
  public mark(): PosInfo {
    return this.pos;
  }
  // @ts-ignore: loopPlus may not be called
  private loopPlus<T>(func: $$RuleType<T>): Nullable<[T, ...T[]]> {
    return this.loop(func, 1, -1) as Nullable<[T, ...T[]]>;
  }
  private loop<T>(func: $$RuleType<T>, lb: number, ub: number): Nullable<T[]> {
    const mrk = this.mark();
    const res: T[] = [];
    while (ub === -1 || res.length < ub) {
      const preMrk = this.mark();
      const t = func();
      if (t === null || this.pos.overallPos === preMrk.overallPos) {
        break;
      }
      res.push(t);
    }
    if (res.length >= lb) {
      return res;
    }
    this.reset(mrk);
    return null;
  }
  private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
    const mrk = this.mark();
    const res = fn();
    if (res !== null) return res;
    this.reset(mrk);
    return null;
  }
  // @ts-ignore: choice may not be called
  private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
    for (const f of fns) {
      const res = f();
      if (res !== null) {
        return res;
      }
    }
    return null;
  }
  private regexAccept(
    match: string,
    mods: string,
    dpth: number,
    cr?: ErrorTracker,
  ): Nullable<string> {
    return this.run<string>(dpth, () => {
      const reg = new RegExp(match, "y" + mods);
      const mrk = this.mark();
      reg.lastIndex = mrk.overallPos;
      const res = this.tryConsume(reg);
      if (cr) {
        cr.record(mrk, res, {
          kind: "RegexMatch",
          // We substring from 3 to len - 1 to strip off the
          // non-capture group syntax added as a WebKit workaround
          literal: match.substring(3, match.length - 1),
          negated: this.negating,
        });
      }
      return res;
    });
  }
  private tryConsume(reg: RegExp): Nullable<string> {
    const res = reg.exec(this.input);
    if (res) {
      let lineJmp = 0;
      let lind = -1;
      for (let i = 0; i < res[0].length; ++i) {
        if (res[0][i] === "\n") {
          ++lineJmp;
          lind = i;
        }
      }
      this.pos = {
        overallPos: reg.lastIndex,
        line: this.pos.line + lineJmp,
        offset:
          lind === -1
            ? this.pos.offset + res[0].length
            : res[0].length - lind - 1,
      };
      return res[0];
    }
    return null;
  }
  // @ts-ignore: noConsume may not be called
  private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
    const mrk = this.mark();
    const res = fn();
    this.reset(mrk);
    return res;
  }
  // @ts-ignore: negate may not be called
  private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
    const mrk = this.mark();
    const oneg = this.negating;
    this.negating = !oneg;
    const res = fn();
    this.negating = oneg;
    this.reset(mrk);
    return res === null ? true : null;
  }
  // @ts-ignore: Memoise may not be used
  private memoise<K>(
    rule: $$RuleType<K>,
    memo: Map<number, [Nullable<K>, PosInfo]>,
  ): Nullable<K> {
    const $scope$pos = this.mark();
    const $scope$memoRes = memo.get($scope$pos.overallPos);
    if (this.memoSafe && $scope$memoRes !== undefined) {
      this.reset($scope$memoRes[1]);
      return $scope$memoRes[0];
    }
    const $scope$result = rule();
    if (this.memoSafe)
      memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
    return $scope$result;
  }
  private match$EOF(et?: ErrorTracker): Nullable<{ kind: ASTKinds.$EOF }> {
    const res: { kind: ASTKinds.$EOF } | null = this.finished()
      ? { kind: ASTKinds.$EOF }
      : null;
    if (et)
      et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
    return res;
  }
}
export function parse(s: string): ParseResult {
  const p = new Parser(s);
  return p.parse();
}
export interface ParseResult {
  ast: Nullable<Start>;
  errs: SyntaxErr[];
}
export interface PosInfo {
  readonly overallPos: number;
  readonly line: number;
  readonly offset: number;
}
export interface RegexMatch {
  readonly kind: "RegexMatch";
  readonly negated: boolean;
  readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
  public pos: PosInfo;
  public expmatches: MatchAttempt[];
  constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
    this.pos = pos;
    this.expmatches = [...expmatches];
  }
  public toString(): string {
    return `Syntax Error at line ${this.pos.line}:${
      this.pos.offset
    }. Expected one of ${this.expmatches.map((x) =>
      x.kind === "EOF" ? " EOF" : ` ${x.negated ? "not " : ""}'${x.literal}'`,
    )}`;
  }
}
class ErrorTracker {
  private mxpos: PosInfo = { overallPos: -1, line: -1, offset: -1 };
  private regexset: Set<string> = new Set();
  private pmatches: MatchAttempt[] = [];
  public record(pos: PosInfo, result: any, att: MatchAttempt) {
    if ((result === null) === att.negated) return;
    if (pos.overallPos > this.mxpos.overallPos) {
      this.mxpos = pos;
      this.pmatches = [];
      this.regexset.clear();
    }
    if (this.mxpos.overallPos === pos.overallPos) {
      if (att.kind === "RegexMatch") {
        if (!this.regexset.has(att.literal)) this.pmatches.push(att);
        this.regexset.add(att.literal);
      } else {
        this.pmatches.push(att);
      }
    }
  }
  public getErr(): SyntaxErr | null {
    if (this.mxpos.overallPos !== -1)
      return new SyntaxErr(this.mxpos, this.pmatches);
    return null;
  }
}



================================================
FILE: src/execution/address/contract/DecodedABI.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import erc20 from "../../../abi/erc20.json";
import DecodedABI from "./DecodedABI";

const meta = {
  component: DecodedABI,
} satisfies Meta<typeof DecodedABI>;

export default meta;
type Story = StoryObj<typeof meta>;

export const ERC20: Story = {
  args: {
    abi: erc20,
  },
};



================================================
FILE: src/execution/address/contract/DecodedABI.tsx
================================================
import { Interface } from "ethers";
import { FC, memo } from "react";
import { ABIAwareComponentProps } from "../../types";
import DecodedFragment from "./DecodedFragment";
import RawDecodedFragment from "./RawDecodedFragment";

const DecodedABI: FC<ABIAwareComponentProps> = ({ abi, unknownSelectors }) => {
  const intf = new Interface(abi);
  return (
    <div className="overflow-x-auto border">
      {intf.fragments.map((f, i) => (
        <DecodedFragment key={i} intf={intf} fragment={f} />
      ))}
      {unknownSelectors && unknownSelectors.length > 0 && (
        <div className="ml-2 mt-3 text-sm">Unknown functions:</div>
      )}
      {unknownSelectors &&
        unknownSelectors.map((selector) => (
          <RawDecodedFragment
            fragmentType="function"
            sig={selector}
            letter="F"
            letterBg="bg-violet-500"
            hashBg="bg-violet-50"
          />
        ))}
    </div>
  );
};

export default memo(DecodedABI);



================================================
FILE: src/execution/address/contract/DecodedFragment.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import { Interface } from "ethers";
import DecodedFragment from "./DecodedFragment";

const meta = {
  component: DecodedFragment,
} satisfies Meta<typeof DecodedFragment>;

export default meta;
type Story = StoryObj<typeof meta>;

const makeArgs = (fragment: string) => {
  const intf = new Interface([fragment]);
  return {
    intf,
    fragment: intf.fragments[0],
  };
};

export const Constructor: Story = {
  args: {
    ...makeArgs("constructor(uint _data) public"),
  },
};

export const Function: Story = {
  args: {
    ...makeArgs(
      "function transfer(address _to, uint256 _value) public returns (bool success)",
    ),
  },
};

export const Event: Story = {
  args: {
    ...makeArgs(
      "event Transfer(address indexed _from, address indexed _to, uint256 _value)",
    ),
  },
};



================================================
FILE: src/execution/address/contract/DecodedFragment.tsx
================================================
import {
  ConstructorFragment,
  ErrorFragment,
  EventFragment,
  Fragment,
  FunctionFragment,
  Interface,
} from "ethers";
import { FC, memo } from "react";
import RawDecodedFragment from "./RawDecodedFragment";

type DecodedFragmentProps = {
  intf: Interface;
  fragment: Fragment;
};

const DecodedFragment: FC<DecodedFragmentProps> = ({ intf, fragment }) => {
  let fragmentType: "constructor" | "event" | "function" | "error" | undefined;
  let sig: string | undefined;
  let letter: string | undefined;
  let letterBg: string | undefined;
  let hashBg: string | undefined;

  if (FunctionFragment.isFunction(fragment)) {
    fragmentType = "function";
    sig = fragment.selector;
    letter = "F";
    letterBg = "bg-violet-500";
    hashBg = "bg-violet-50";
  } else if (EventFragment.isEvent(fragment)) {
    fragmentType = "event";
    sig = fragment.topicHash;
    letter = "E";
    letterBg = "bg-emerald-300";
    hashBg = "bg-emerald-50";
  } else if (ConstructorFragment.isConstructor(fragment)) {
    fragmentType = "constructor";
    letter = "C";
    letterBg = "bg-blue-500";
  } else if (ErrorFragment.isError(fragment)) {
    fragmentType = "error";
    sig = fragment.selector;
    letter = "E";
    letterBg = "bg-red-500";
    hashBg = "bg-red-50";
  }

  return (
    <RawDecodedFragment
      fragmentType={fragmentType}
      fragmentStr={fragment.format("full")}
      sig={sig}
      letter={letter}
      letterBg={letterBg}
      hashBg={hashBg}
    />
  );
};

export default memo(DecodedFragment);



================================================
FILE: src/execution/address/contract/FunctionParamInput.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import { ParamType } from "ethers";
import FunctionParamInput from "./FunctionParamInput";

const meta = {
  component: FunctionParamInput,
} satisfies Meta<typeof FunctionParamInput>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Address: Story = {
  args: {
    param: ParamType.from("address _to"),
  },
};

export const Uint: Story = {
  args: {
    param: ParamType.from("uint _value"),
  },
};

export const StringArrayFixed: Story = {
  args: {
    param: ParamType.from("string[2][3] strings"),
  },
};

export const UintArray: Story = {
  args: {
    param: ParamType.from("uint256[] values"),
  },
};

export const Tuple: Story = {
  args: {
    param: ParamType.from(
      "tuple(address rewardToken, address pool, uint256 startTime, uint256 endTime, address refundee) key",
    ),
  },
};

export const TupleArray: Story = {
  args: {
    param: ParamType.from(
      "tuple(address destination, uint256 value, uint256 expiry, bytes32 sig)[]",
    ),
  },
};



================================================
FILE: src/execution/address/contract/FunctionParamInput.tsx
================================================
import { faPlus, faTrashAlt } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { type ParamType } from "ethers";
import {
  forwardRef,
  memo,
  useImperativeHandle,
  useReducer,
  useRef,
} from "react";
import ParamDeclaration from "../../components/ParamDeclaration";

// Computed param value type
export type ParamValue = string | ParamValue[];
// State of a FunctionParamInput: either the entered string or an array of UUIDs
export type ParamNodeState = string | string[];

export interface ParamComponentRef {
  computeParamValue: () => ParamValue;
}

interface Action {
  type: "ADD_VALUE" | "REMOVE_VALUE" | "UPDATE_VALUE";
  // Index of a ParamValue to remove
  index?: number;
  // New value when a string is updated
  newValue?: string;
}

// Retrieve a unique key name for using across element additions/deletions
function getUUID(): string {
  // In some browsers, crypto.randomUUID is only available in secure contexts
  return crypto.randomUUID ? crypto.randomUUID() : Math.random().toString();
}

const reducer = (state: ParamNodeState, action: Action): ParamNodeState => {
  if (typeof state === "string") {
    if (action.type === "UPDATE_VALUE" && action.newValue !== undefined) {
      return action.newValue;
    }
    return state;
  }
  switch (action.type) {
    case "ADD_VALUE":
      return [...state, getUUID()];
    case "REMOVE_VALUE":
      if (action.index === undefined) {
        return state;
      }
      return state.toSpliced(action.index, 1);
    default:
      return state;
  }
};

interface FunctionParamInputProps {
  param: ParamType;
}

/**
 * Creates an input for a single parameter, automatically creating child
 * components for tuples and arrays. Buttons for adding and removing elements
 * are included for dynamic-length array parameters. The expanded state of
 * entered elements can be computed via refs with
 * ref.current.computeParamValue().
 */
const FunctionParamInput = forwardRef<
  ParamComponentRef,
  FunctionParamInputProps
>(({ param }, ref) => {
  const [paramValue, dispatch] = useReducer(
    reducer,
    ["tuple", "array"].includes(param.baseType)
      ? param.baseType === "array" && param.arrayLength !== -1
        ? Array.from({ length: param.arrayLength! }, getUUID)
        : [getUUID()]
      : "",
  );
  const childRefs = useRef<ParamComponentRef[]>([]);

  // Recursively compute an expanded ParamValue
  const computeParamValue = (): ParamValue => {
    if (Array.isArray(paramValue)) {
      return childRefs.current.map((childRef, index) =>
        childRef.computeParamValue(),
      );
    }
    return paramValue;
  };

  // Register accessor for child data
  useImperativeHandle(ref, () => ({
    computeParamValue,
  }));

  return typeof paramValue === "string" ? (
    <input
      type="text"
      className="mt-1 w-full rounded border px-2 py-1 text-sm text-gray-600"
      placeholder={param.format("full")}
      onChange={(e) =>
        dispatch({ type: "UPDATE_VALUE", newValue: e.target.value })
      }
    />
  ) : param.baseType === "tuple" ? (
    <ul className="ml-4 list-inside">
      {param.components!.map((param: ParamType, index: number) => {
        return (
          <li key={index}>
            <div className="mt-1">
              <ParamDeclaration input={param} index={index} />
            </div>
            <FunctionParamInput
              param={param}
              ref={(childRef) => {
                if (childRef !== null) {
                  childRefs.current[index] = childRef;
                }
              }}
            />
          </li>
        );
      })}
    </ul>
  ) : param.baseType === "array" ? (
    <>
      <ul
        className={`ml-2 list-inside${param.arrayLength === -1 ? " mb-2" : ""}`}
      >
        {paramValue.map((entryKey: string, index: number) => (
          <li
            className={`ml-2${param.arrayLength === -1 ? " mb-2" : ""}`}
            key={entryKey}
          >
            <div className="text-sm font-medium text-gray-600 flex items-center mt-1">
              <ParamDeclaration input={param.arrayChildren!} index={index} />{" "}
              {param.arrayLength === -1 && (
                <button
                  className="bg-skin-button-fill text-skin-button hover:bg-skin-button-hover-fill py-1 px-2 rounded border inline-flex items-center ml-3"
                  type="button"
                  data-test="remove-array-element"
                  onClick={(event) => {
                    childRefs.current = childRefs.current.toSpliced(index, 1);
                    dispatch({ type: "REMOVE_VALUE", index: index });
                  }}
                >
                  <FontAwesomeIcon icon={faTrashAlt} className="mr-2" />
                  Remove
                </button>
              )}
            </div>
            <FunctionParamInput
              param={param.arrayChildren!}
              ref={(childRef) => {
                if (childRef !== null) {
                  childRefs.current[index] = childRef;
                }
              }}
            />
          </li>
        ))}
      </ul>
      {param.arrayLength === -1 && (
        <div className="text-sm font-medium text-gray-600">
          <button
            className="bg-skin-button-fill text-skin-button hover:bg-skin-button-hover-fill py-1 px-2 rounded border inline-flex items-center ml-4"
            type="button"
            onClick={(event) => {
              event.preventDefault();
              dispatch({ type: "ADD_VALUE" });
            }}
          >
            <FontAwesomeIcon icon={faPlus} className="mr-2" />
            Add Element
          </button>
        </div>
      )}
    </>
  ) : (
    <></>
  );
});

export default memo(FunctionParamInput);



================================================
FILE: src/execution/address/contract/HighlightedSolidity.tsx
================================================
import { FC, lazy, memo } from "react";

const HighlightedSource = lazy(() => import("./HighlightedSource"));

type HighlightedSolidityProps = {
  source?: string | null;
};

const HighlightedSolidity: FC<HighlightedSolidityProps> = ({ source }) => {
  return <HighlightedSource source={source} langName="solidity" />;
};

export default memo(HighlightedSolidity);



================================================
FILE: src/execution/address/contract/HighlightedSource.tsx
================================================
import React, { useEffect, useState } from "react";
import { HighlighterCore, getHighlighterCore } from "shiki";
import langJson from "shiki/langs/json.mjs";
import langSolidity from "shiki/langs/solidity.mjs";
import themeGithubLight from "shiki/themes/github-light.mjs";
import getWasm from "shiki/wasm";

let highlighterSingleton: HighlighterCore | undefined = undefined;

export const getOrCreateHighlighter = async (): Promise<HighlighterCore> => {
  if (!highlighterSingleton) {
    highlighterSingleton = await getHighlighterCore({
      themes: [themeGithubLight],
      langs: [langSolidity, langJson],
      loadWasm: getWasm,
    });
  }

  return highlighterSingleton;
};

export const useHighlighter = (): HighlighterCore | undefined => {
  const [highlighter, setHighlighter] = useState<HighlighterCore | undefined>();

  useEffect(() => {
    getOrCreateHighlighter().then(setHighlighter);
  }, []);

  return highlighter;
};

type HighlightedSourceProps = {
  source?: string | null;
  langName: string;
};

const HighlightedSource: React.FC<HighlightedSourceProps> = ({
  source,
  langName,
}) => {
  const [code, setCode] = useState<string>("");
  const highlighter = useHighlighter();
  useEffect(() => {
    if (source !== undefined && source !== null && highlighter) {
      setCode(
        highlighter.codeToHtml(source, {
          lang: langName,
          theme: "github-light",
        }),
      );
    } else {
      setCode("");
    }
  }, [source, highlighter]);

  return (
    <div
      className="h-full w-full border font-code text-sm p-3 [&_code]:[counter-reset:step] [&_code]:[counter-increment:step_0] [&_span.line]:before:content-[counter(step)] [&_span.line]:before:[counter-increment:step] [&_span.line]:before:w-4 [&_span.line]:before:mr-6 [&_span.line]:before:inline-block [&_span.line]:before:text-right [&_span.line]:before:text-source-line-numbers"
      dangerouslySetInnerHTML={{ __html: code }}
    />
  );
};

export default React.memo(HighlightedSource);



================================================
FILE: src/execution/address/contract/RawABI.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import erc20 from "../../../abi/erc20.json";
import RawABI from "./RawABI";

const meta = {
  component: RawABI,
} satisfies Meta<typeof RawABI>;

export default meta;
type Story = StoryObj<typeof meta>;

export const ERC20: Story = {
  args: {
    abi: erc20,
  },
};



================================================
FILE: src/execution/address/contract/RawABI.tsx
================================================
import { FC, memo } from "react";
import { ABIAwareComponentProps } from "../../types";
import HighlightedSource from "./HighlightedSource";

const RawABI: FC<ABIAwareComponentProps> = ({ abi }) => (
  <div className="h-60 w-full border font-code text-base overflow-auto">
    <HighlightedSource
      source={JSON.stringify(abi, null, "  ") ?? ""}
      langName="json"
    />
  </div>
);

export default memo(RawABI);



================================================
FILE: src/execution/address/contract/RawDecodedFragment.tsx
================================================
import { faCaretRight } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { FC, JSX, memo } from "react";

type RawDecodedFragmentProps = {
  fragmentType?: "constructor" | "event" | "function" | "error";
  fragmentStr?: JSX.Element | string;
  sig?: string;
  letter?: string;
  letterBg?: string;
  hashBg?: string;
};

const RawDecodedFragment: FC<RawDecodedFragmentProps> = ({
  fragmentType,
  fragmentStr,
  sig,
  letter,
  letterBg,
  hashBg,
}) => {
  return (
    <div className="flex items-baseline space-x-2 px-2 py-1 hover:bg-gray-100">
      <span className="text-gray-500">
        <FontAwesomeIcon icon={faCaretRight} size="1x" />
      </span>
      {letter && (
        <span
          className={`flex h-5 w-5 shrink-0 items-center justify-center self-center rounded-full border border-gray-300 font-code text-xs font-bold text-white ${letterBg}`}
        >
          {letter}
        </span>
      )}
      {fragmentStr !== undefined && (
        <span className="whitespace-nowrap font-code text-sm">
          {fragmentStr}
        </span>
      )}
      {sig && (
        <span
          className={`rounded-xl border px-2 pt-1 font-code text-xs text-gray-600 ${hashBg}`}
          title={
            fragmentType === "function"
              ? "Method Selector"
              : fragmentType === "event"
                ? "Topic Hash"
                : ""
          }
        >
          {sig}
        </span>
      )}
    </div>
  );
};

export default memo(RawDecodedFragment);



================================================
FILE: src/execution/address/contract/ReadContract.tsx
================================================
import { FunctionFragment } from "ethers";
import React, { useContext, useState } from "react";
import ContentFrame from "../../../components/ContentFrame";
import LabeledSwitch from "../../../components/LabeledSwitch";
import StandardSelectionBoundary from "../../../selection/StandardSelectionBoundary";
import { Match, MatchType } from "../../../sourcify/useSourcify";
import { RuntimeContext } from "../../../useRuntime";
import { usePageTitle } from "../../../useTitle";
import { useIsScillaCode } from "../../../useZilliqa";
import WhatsabiWarning from "../WhatsabiWarning";
import ReadFunction from "./ReadFunction";

type ContractsProps = {
  checksummedAddress: string;
  match: Match | null | undefined;
};

function isReadFunction(abiFn: { type: string; stateMutability: string }) {
  return (
    abiFn.type === "function" &&
    (abiFn.stateMutability === "pure" || abiFn.stateMutability === "view")
  );
}

const ReadContract: React.FC<ContractsProps> = ({
  checksummedAddress,
  match,
}) => {
  const [showNonViewReturns, setShowNonViewReturns] = useState<boolean>(false);
  const { provider } = useContext(RuntimeContext);
  const isScilla = useIsScillaCode(provider, checksummedAddress);
  usePageTitle(`Read Contract | ${checksummedAddress}`);

  const viewFunctions = match?.metadata.output.abi.filter((fn) =>
    isReadFunction(fn),
  );
  const nonViewReturns = match?.metadata.output.abi.filter(
    (fn) => fn.outputs && fn.outputs.length > 0 && !isReadFunction(fn),
  );
  const showDecodedOutputs = match?.type !== MatchType.WHATSABI_GUESS;

  const withScilla = (
    <StandardSelectionBoundary>
      <ContentFrame tabs>
        <span>
          This is a scilla contract; use the state read option in the Contract
          tab to read the state for now
        </span>
      </ContentFrame>
    </StandardSelectionBoundary>
  );

  const withCode = (
    <StandardSelectionBoundary>
      <ContentFrame tabs>
        {match && match.type === MatchType.WHATSABI_GUESS && (
          <WhatsabiWarning />
        )}
        <div className="py-5">
          {match === undefined && (
            <span>Getting data from Sourcify repository...</span>
          )}
          {match === null && (
            <span>
              Address is not a contract or could not find contract metadata in
              Sourcify repository.
            </span>
          )}

          {viewFunctions && (
            <div>
              {viewFunctions.length === 0 &&
                "This contract has no external view functions."}
              {(viewFunctions.length > 0 ||
                (nonViewReturns && nonViewReturns.length > 0)) && (
                <ol className="marker:text-md list-inside list-decimal marker:text-gray-400">
                  {viewFunctions.map((fn, i) => (
                    <ReadFunction
                      func={FunctionFragment.from(fn)}
                      address={checksummedAddress}
                      devMethod={
                        match?.metadata?.output?.devdoc?.methods?.[
                          FunctionFragment.from(fn).format("sighash")
                        ]
                      }
                      showDecodedOutputs={showDecodedOutputs}
                      key={i}
                    />
                  ))}
                  {nonViewReturns && nonViewReturns.length > 0 && (
                    <>
                      <LabeledSwitch
                        defaultEnabled={showNonViewReturns}
                        onToggle={setShowNonViewReturns}
                      >
                        Show non-view functions with return values
                      </LabeledSwitch>
                      {showNonViewReturns && (
                        <>
                          <hr className="pb-4" />
                          {nonViewReturns.map((fn, i) => (
                            <ReadFunction
                              func={FunctionFragment.from(fn)}
                              address={checksummedAddress}
                              devMethod={
                                match?.metadata?.output?.devdoc?.methods?.[
                                  FunctionFragment.from(fn).format("sighash")
                                ]
                              }
                              showDecodedOutputs={showDecodedOutputs}
                              key={i}
                            />
                          ))}
                        </>
                      )}
                    </>
                  )}
                </ol>
              )}
            </div>
          )}
        </div>
      </ContentFrame>
    </StandardSelectionBoundary>
  );

  return isScilla ? withScilla : withCode;
};

export default React.memo(ReadContract);



================================================
FILE: src/execution/address/contract/ReadFunction.tsx
================================================
import { faCircleNotch } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  FunctionFragment,
  Interface,
  JsonRpcApiProvider,
  Result,
  resolveAddress,
  type ParamType,
} from "ethers";
import { FC, FormEvent, memo, useContext, useRef, useState } from "react";
import { DevMethod } from "../../../sourcify/useSourcify";
import { RuntimeContext } from "../../../useRuntime";
import ParamDeclaration from "../../components/ParamDeclaration";
import OutputDecoder from "../../transaction/decoder/OutputDecoder";
import FunctionParamInput, {
  ParamComponentRef,
  ParamValue,
} from "./FunctionParamInput";
import { parse } from "./contractInputDataParser";

/**
 * Prepares an unprocessed argument string by coercing it into the proper
 * format in some cases as a convenience feature
 */
export function prepareArgument(arg: string, argType: ParamType) {
  // Add quotes around input for strings and ENS domains
  let finalArg = arg;
  if (
    (argType.baseType === "string" ||
      (argType.baseType === "address" && arg.endsWith(".eth"))) &&
    arg[0] !== '"'
  ) {
    finalArg = `"${finalArg}"`;
  }
  return finalArg;
}

function validateArgument(arg: any, argType: ParamType) {
  // Check only those types which ethers might parse incorrectly
  if (
    (argType.baseType === "string" || argType.baseType === "address") &&
    typeof arg !== "string"
  ) {
    throw new Error(
      `Invalid ${argType.baseType} "${arg}": got type ${typeof arg}`,
    );
  } else if (argType.baseType === "bool" && typeof arg !== "boolean") {
    throw new Error(`Invalid bool "${arg}": got type ${typeof arg}`);
  } else if (argType.baseType === "array") {
    if (!Array.isArray(arg)) {
      throw new Error(`Invalid array "${arg}": got type ${typeof arg}`);
    }
    arg.map((childArg) => validateArgument(childArg, argType.arrayChildren!));
  } else if (argType.baseType === "tuple") {
    if (!Array.isArray(arg)) {
      throw new Error(`Invalid tuple "${arg}": got type ${typeof arg}`);
    }
    if (arg.length !== argType.components!.length) {
      throw new Error(
        `Expected tuple length ${argType.components!.length}, got ${
          arg.length
        }: [${arg}]`,
      );
    }
    arg.map((childArg, i) =>
      validateArgument(childArg, argType.components![i]),
    );
  }
}

async function transformArgument(
  arg: any,
  argType: ParamType,
  provider: JsonRpcApiProvider,
): Promise<any> {
  if (argType.baseType === "address" && (arg as string).endsWith(".eth")) {
    // Resolve ENS domain
    return resolveAddress(arg, provider);
  } else if (argType.baseType === "array") {
    return Promise.all(
      (arg as any[]).map((childArg) =>
        transformArgument(childArg, argType.arrayChildren!, provider),
      ),
    );
  } else if (argType.baseType === "tuple") {
    return Promise.all(
      (arg as any[]).map((childArg, i) =>
        transformArgument(childArg, argType.components![i], provider),
      ),
    );
  }
  return arg;
}

async function parseStructuredArgument(
  arg: ParamValue,
  argType: ParamType,
  argIndex: number,
  provider: JsonRpcApiProvider,
): Promise<string | bigint | boolean | any[]> {
  const isSingleType = typeof arg === "string";
  if (
    isSingleType ===
    (argType.baseType === "tuple" || argType.baseType === "array")
  ) {
    throw new Error(`ParamValue type mismatch`);
  }
  if (isSingleType) {
    if (arg.length === 0) {
      throw new Error(`Argument ${argIndex} missing`);
    }
    let finalArg = prepareArgument(arg, argType);
    const parsed = parse(finalArg);
    if (parsed.ast) {
      validateArgument(parsed.ast.value, argType);
      const transformedArg = await transformArgument(
        parsed.ast.value,
        argType,
        provider,
      );
      return transformedArg;
    } else {
      throw new Error(
        parsed.errs
          .map(
            (err) =>
              `${err.toString()}\n${finalArg}\n${"-".repeat(
                err.pos.overallPos,
              )}^`,
          )
          .join("\n"),
      );
    }
  } else {
    if (argType.baseType === "tuple") {
      return Promise.all(
        arg.map((childArg: ParamValue, index: number) =>
          parseStructuredArgument(
            childArg,
            argType.components![index],
            argIndex,
            provider,
          ),
        ),
      );
    } else if (argType.baseType === "array") {
      return Promise.all(
        arg.map((childArg: ParamValue) =>
          parseStructuredArgument(
            childArg,
            argType.arrayChildren!,
            argIndex,
            provider,
          ),
        ),
      );
    }
  }

  throw new Error("Unhandled parse sequence: " + argType.format("full"));
}

interface ReadFunctionProps {
  address: string;
  func: FunctionFragment;
  devMethod?: DevMethod;
  showDecodedOutputs?: boolean;
}

const ReadFunction: FC<ReadFunctionProps> = ({
  address,
  func,
  devMethod,
  showDecodedOutputs = true,
}) => {
  let [result, setResult] = useState<
    { result: Result; data: string } | null | undefined
  >(null);
  let [error, setError] = useState<string | null>(null);
  const childRefs = useRef<ParamComponentRef[]>(
    new Array(func.inputs.length).fill(null),
  );
  const { provider } = useContext(RuntimeContext);

  async function submitCall() {
    let int = new Interface([func]);
    try {
      setResult(undefined);
      // The parser can be recompiled with `npm run build-parsers`
      const inputTree: ParamValue[] = childRefs.current.map((childRef) =>
        childRef.computeParamValue(),
      );
      let encodedData = int.encodeFunctionData(
        func.name,
        await Promise.all(
          inputTree.map((input: ParamValue, i: number) =>
            parseStructuredArgument(input, func.inputs[i], i, provider),
          ),
        ),
      );
      let resultData = await provider.call({
        to: address,
        data: encodedData,
      });
      setResult({
        result: int.decodeFunctionResult(func.name, resultData),
        data: resultData,
      });
      setError(null);
    } catch (e: any) {
      setResult(null);
      setError(e.toString());
    }
  }

  function onFormSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();
    event.stopPropagation();
    submitCall();
  }

  return (
    <li key={func.format()} className="pb-4" data-test="read-function">
      <span className="text-md font-medium">{func.name}</span>
      <form onSubmit={onFormSubmit} className="mt-2 pl-4">
        <ul className="ml-2 list-inside">
          {func.inputs &&
            func.inputs.map((param, index) => (
              <li className="mt-2" key={index}>
                <div className="text-sm font-medium text-gray-600">
                  <ParamDeclaration input={param} index={index} short={true} />
                </div>
                <FunctionParamInput
                  param={param}
                  ref={(component) => {
                    if (component !== null) {
                      childRefs.current[index] = component;
                    }
                  }}
                />
              </li>
            ))}
        </ul>
        <button
          className="ml-2 mt-2 rounded border bg-skin-button-fill px-3 py-1 text-left text-sm text-skin-button hover:bg-skin-button-hover-fill"
          type="submit"
        >
          Query
        </button>{" "}
        {result === undefined && (
          <span className="self-center">
            <FontAwesomeIcon className="animate-spin" icon={faCircleNotch} />
          </span>
        )}
      </form>
      <div className="mt-2 pl-6">
        {result && (
          <OutputDecoder
            args={result.result}
            paramTypes={showDecodedOutputs ? (func.outputs ?? []) : null}
            data={result.data}
            devMethod={devMethod}
          />
        )}
        {error && <p className="break-words font-mono text-red-500">{error}</p>}
      </div>
    </li>
  );
};

export default memo(ReadFunction);



================================================
FILE: src/execution/address/renderer/ENSName.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import ENSName from "./ENSName";

const meta = {
  component: ENSName,
} satisfies Meta<typeof ENSName>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    name: "vitalik.eth",
    address: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
    linkable: false,
    dontOverrideColors: false,
  },
};

export const Linkable: Story = {
  args: {
    ...Default.args,
    linkable: true,
  },
};

export const LongName: Story = {
  args: {
    ...Default.args,
    name: "longlonglonglonglonglonglonglonglongname.eth",
  },
};



================================================
FILE: src/execution/address/renderer/ENSName.tsx
================================================
import { FC } from "react";
import { NavLink } from "react-router-dom";
import { ResolvedAddressRenderer } from "../../../api/address-resolver/address-resolver";
import ENSLogo from "./ensLogo.svg";

type ENSNameProps = {
  name: string;
  address: string;
  linkable: boolean;
  dontOverrideColors?: boolean;
};

const ENSName: FC<ENSNameProps> = ({
  name,
  address,
  linkable,
  dontOverrideColors,
}) => {
  if (linkable) {
    return (
      <NavLink
        className={`inline-flex items-baseline space-x-1 font-sans ${
          dontOverrideColors ? "" : "text-link-blue hover:text-link-blue-hover"
        } truncate`}
        to={`/address/${name}`}
        title={`${name}: ${address}`}
      >
        <Content linkable={true} name={name} />
      </NavLink>
    );
  }

  return (
    <span
      className="inline-flex items-baseline space-x-1 truncate font-sans text-gray-700"
      title={`${name}: ${address}`}
    >
      <Content linkable={false} name={name} />
    </span>
  );
};

type ContentProps = {
  linkable: boolean;
  name: string;
};

const Content: FC<ContentProps> = ({ linkable, name }) => (
  <>
    <img
      className={`self-center ${linkable ? "" : "grayscale"}`}
      src={ENSLogo}
      alt="ENS Logo"
      width={12}
      height={12}
    />
    <span className="truncate">{name}</span>
  </>
);

export const ensRenderer: ResolvedAddressRenderer<string> = (
  chainId,
  address,
  resolvedAddress,
  linkable,
  dontOverrideColors,
) => (
  <ENSName
    address={address}
    name={resolvedAddress}
    linkable={linkable}
    dontOverrideColors={dontOverrideColors}
  />
);

export default ENSName;



================================================
FILE: src/execution/address/renderer/PlainString.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import PlainString from "./PlainString";

const meta = {
  component: PlainString,
} satisfies Meta<typeof PlainString>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    address: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
    name: "Vitalik's address",
    linkable: false,
    dontOverrideColors: false,
  },
};

export const Linkable: Story = {
  args: {
    ...Default.args,
    linkable: true,
  },
};



================================================
FILE: src/execution/address/renderer/PlainString.tsx
================================================
import { FC } from "react";
import { NavLink } from "react-router-dom";
import { ResolvedAddressRenderer } from "../../../api/address-resolver/address-resolver";

type PlainStringProps = {
  address: string;
  name: string;
  linkable: boolean;
  dontOverrideColors: boolean | undefined;
};

const PlainString: FC<PlainStringProps> = ({
  address,
  name,
  linkable,
  dontOverrideColors,
}) => {
  if (linkable) {
    return (
      <NavLink
        className={`${
          dontOverrideColors ? "" : "text-link-blue hover:text-link-blue-hover"
        } truncate`}
        to={`/address/${address}`}
        title={name}
      >
        {name}
      </NavLink>
    );
  }

  return (
    <span className="truncate text-gray-400" title={name}>
      {name}
    </span>
  );
};

export const plainStringRenderer: ResolvedAddressRenderer<string> = (
  chainId,
  address,
  resolvedAddress,
  linkable,
  dontOverrideColors,
) => (
  <PlainString
    address={address}
    name={resolvedAddress}
    linkable={linkable}
    dontOverrideColors={dontOverrideColors}
  />
);

export default PlainString;



================================================
FILE: src/execution/address/renderer/TokenLogo.tsx
================================================
import { faCoins } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { FC, memo, useContext } from "react";
import { useImage } from "react-image";
import { ChecksummedAddress } from "../../../types";
import { tokenLogoURL } from "../../../url";
import { RuntimeContext } from "../../../useRuntime";

type TokenLogoProps = {
  chainId: bigint;
  address: ChecksummedAddress;
  name: string;
};

const TokenLogo: FC<TokenLogoProps> = ({ chainId, address, name }) => {
  const { config } = useContext(RuntimeContext);

  const srcList: string[] = [];
  srcList.push(tokenLogoURL(config.assetsURLPrefix ?? "", chainId, address));
  const { src, isLoading } = useImage({ srcList, useSuspense: false });

  return (
    <div className="flex h-5 w-5 items-center justify-center text-gray-400">
      {src && (
        <img className="max-h-full max-w-full" src={src} alt={`${name} logo`} />
      )}
      {!src && !isLoading && <FontAwesomeIcon icon={faCoins} size="1x" />}
    </div>
  );
};

export default memo(TokenLogo);



================================================
FILE: src/execution/address/renderer/TokenName.tsx
================================================
import { FC } from "react";
import { NavLink } from "react-router-dom";
import { ResolvedAddressRenderer } from "../../../api/address-resolver/address-resolver";
import { TokenMeta } from "../../../types";
import TokenLogo from "./TokenLogo";

type TokenNameProps = {
  chainId: bigint;
  address: string;
  name: string;
  symbol: string;
  linkable: boolean;
  dontOverrideColors?: boolean;
};

const TokenName: FC<TokenNameProps> = ({
  chainId,
  address,
  name,
  symbol,
  linkable,
  dontOverrideColors,
}) => {
  if (linkable) {
    return (
      <NavLink
        className={`flex items-baseline space-x-1 font-sans ${
          dontOverrideColors ? "" : "text-link-blue hover:text-link-blue-hover"
        } truncate`}
        to={`/address/${address}`}
        title={`${name} (${symbol}): ${address}`}
      >
        <Content
          chainId={chainId}
          address={address}
          linkable={true}
          name={name}
          symbol={symbol}
        />
      </NavLink>
    );
  }

  return (
    <div
      className="flex items-baseline space-x-1 truncate font-sans text-gray-700"
      title={`${name} (${symbol}): ${address}`}
    >
      <Content
        chainId={chainId}
        address={address}
        linkable={false}
        name={name}
        symbol={symbol}
      />
    </div>
  );
};

type ContentProps = {
  chainId: bigint;
  address: string;
  name: string;
  symbol: string;
  linkable: boolean;
};

const Content: FC<ContentProps> = ({
  chainId,
  address,
  name,
  symbol,
  linkable,
}) => (
  <>
    <div className={`h-5 w-5 self-center ${linkable ? "" : "grayscale"}`}>
      <TokenLogo chainId={chainId} address={address} name={name} />
    </div>
    <span className="truncate">
      {name} ({symbol})
    </span>
  </>
);

export const tokenRenderer: ResolvedAddressRenderer<TokenMeta> = (
  chainId,
  address,
  tokenMeta,
  linkable,
  dontOverrideColors,
) => (
  <TokenName
    chainId={chainId}
    address={address}
    name={tokenMeta.name}
    symbol={tokenMeta.symbol}
    linkable={linkable}
    dontOverrideColors={dontOverrideColors}
  />
);

export default TokenName;



================================================
FILE: src/execution/address/renderer/UniswapV1ExchangeName.tsx
================================================
import { FC } from "react";
import { NavLink } from "react-router-dom";
import {
  UniswapV1PairMeta,
  UniswapV1TokenMeta,
} from "../../../api/address-resolver/UniswapV1Resolver";
import { ResolvedAddressRenderer } from "../../../api/address-resolver/address-resolver";
import { ChecksummedAddress } from "../../../types";
import TokenLogo from "./TokenLogo";

type UniswapV1ExchangeNameProps = {
  chainId: bigint;
  address: string;
  token: UniswapV1TokenMeta;
  linkable: boolean;
  dontOverrideColors?: boolean;
};

const UniswapV1ExchangeName: FC<UniswapV1ExchangeNameProps> = ({
  chainId,
  address,
  token,
  linkable,
  dontOverrideColors,
}) => {
  if (linkable) {
    return (
      <NavLink
        className={`flex items-baseline space-x-1 font-sans ${
          dontOverrideColors ? "" : "text-link-blue hover:text-link-blue-hover"
        } truncate`}
        to={`/address/${address}`}
        title={`Uniswap V1 LP (${token.symbol}): ${address}`}
      >
        <span>Uniswap V1 LP:</span>
        <Content
          chainId={chainId}
          address={token.address}
          name={token.name}
          symbol={token.symbol}
          linkable
        />
      </NavLink>
    );
  }

  return (
    <div
      className="flex items-baseline space-x-1 truncate font-sans text-gray-700"
      title={`Uniswap V1 LP (${token.symbol}): ${address}`}
    >
      <span>Uniswap V1 LP:</span>
      <Content
        chainId={chainId}
        address={token.address}
        name={token.name}
        symbol={token.symbol}
      />
    </div>
  );
};

type ContentProps = {
  chainId: bigint;
  address: ChecksummedAddress;
  name: string;
  symbol: string;
  linkable?: boolean;
};

const Content: FC<ContentProps> = ({
  chainId,
  address,
  name,
  symbol,
  linkable,
}) => (
  <>
    <div className={`h-5 w-5 self-center ${linkable ? "" : "grayscale"}`}>
      <TokenLogo chainId={chainId} address={address} name={name} />
    </div>
    <span>{symbol}</span>
  </>
);

export const uniswapV1PairRenderer: ResolvedAddressRenderer<
  UniswapV1PairMeta
> = (chainId, address, tokenMeta, linkable, dontOverrideColors) => (
  <UniswapV1ExchangeName
    chainId={chainId}
    address={address}
    token={tokenMeta.token}
    linkable={linkable}
    dontOverrideColors={dontOverrideColors}
  />
);

export default UniswapV1ExchangeName;



================================================
FILE: src/execution/address/renderer/UniswapV2PairName.tsx
================================================
import { FC } from "react";
import { NavLink } from "react-router-dom";
import {
  UniswapV2PairMeta,
  UniswapV2TokenMeta,
} from "../../../api/address-resolver/UniswapV2Resolver";
import { ResolvedAddressRenderer } from "../../../api/address-resolver/address-resolver";
import { ChecksummedAddress } from "../../../types";
import TokenLogo from "./TokenLogo";

type UniswapV2PairNameProps = {
  chainId: bigint;
  address: string;
  token0: UniswapV2TokenMeta;
  token1: UniswapV2TokenMeta;
  linkable: boolean;
  dontOverrideColors?: boolean;
};

const UniswapV2PairName: FC<UniswapV2PairNameProps> = ({
  chainId,
  address,
  token0,
  token1,
  linkable,
  dontOverrideColors,
}) => {
  if (linkable) {
    return (
      <NavLink
        className={`flex items-baseline space-x-1 font-sans ${
          dontOverrideColors ? "" : "text-link-blue hover:text-link-blue-hover"
        } truncate`}
        to={`/address/${address}`}
        title={`Uniswap V2 LP (${token0.symbol}/${token1.symbol}): ${address}`}
      >
        <span>Uniswap V2 LP:</span>
        <Content
          chainId={chainId}
          address={token0.address}
          name={token0.name}
          symbol={token0.symbol}
          linkable
        />
        <span>/</span>
        <Content
          chainId={chainId}
          address={token1.address}
          name={token1.name}
          symbol={token1.symbol}
          linkable
        />
      </NavLink>
    );
  }

  return (
    <div
      className="flex items-baseline space-x-1 truncate font-sans text-gray-700"
      title={`Uniswap V2 LP (${token0.symbol}/${token1.symbol}): ${address}`}
    >
      <span>Uniswap V2 LP:</span>
      <Content
        chainId={chainId}
        address={token0.address}
        name={token0.name}
        symbol={token0.symbol}
      />
      <span>/</span>
      <Content
        chainId={chainId}
        address={token1.address}
        name={token1.name}
        symbol={token1.symbol}
      />
    </div>
  );
};

type ContentProps = {
  chainId: bigint;
  address: ChecksummedAddress;
  name: string;
  symbol: string;
  linkable?: boolean;
};

const Content: FC<ContentProps> = ({
  chainId,
  address,
  name,
  symbol,
  linkable,
}) => (
  <>
    <div className={`h-5 w-5 self-center ${linkable ? "" : "grayscale"}`}>
      <TokenLogo chainId={chainId} address={address} name={name} />
    </div>
    <span>{symbol}</span>
  </>
);

export const uniswapV2PairRenderer: ResolvedAddressRenderer<
  UniswapV2PairMeta
> = (chainId, address, tokenMeta, linkable, dontOverrideColors) => (
  <UniswapV2PairName
    chainId={chainId}
    address={address}
    token0={tokenMeta.token0}
    token1={tokenMeta.token1}
    linkable={linkable}
    dontOverrideColors={dontOverrideColors}
  />
);

export default UniswapV2PairName;



================================================
FILE: src/execution/address/renderer/UniswapV3PoolName.tsx
================================================
import { FC } from "react";
import { NavLink } from "react-router-dom";
import {
  UniswapV3PairMeta,
  UniswapV3TokenMeta,
} from "../../../api/address-resolver/UniswapV3Resolver";
import { ResolvedAddressRenderer } from "../../../api/address-resolver/address-resolver";
import { ChecksummedAddress } from "../../../types";
import TokenLogo from "./TokenLogo";

type UniswapV3PoolNameProps = {
  chainId: bigint;
  address: string;
  token0: UniswapV3TokenMeta;
  token1: UniswapV3TokenMeta;
  fee: bigint;
  linkable: boolean;
  dontOverrideColors?: boolean;
};

const UniswapV3PairName: FC<UniswapV3PoolNameProps> = ({
  chainId,
  address,
  token0,
  token1,
  fee,
  linkable,
  dontOverrideColors,
}) => {
  if (linkable) {
    return (
      <NavLink
        className={`flex items-baseline space-x-1 font-sans ${
          dontOverrideColors ? "" : "text-link-blue hover:text-link-blue-hover"
        } truncate`}
        to={`/address/${address}`}
        title={`Uniswap V3 LP (${token0.symbol}/${token1.symbol}/${
          Number(fee) / 10000
        }%): ${address}`}
      >
        <span>Uniswap V3 LP:</span>
        <Content
          chainId={chainId}
          address={token0.address}
          name={token0.name}
          symbol={token0.symbol}
          linkable
        />
        <span>/</span>
        <Content
          chainId={chainId}
          address={token1.address}
          name={token1.name}
          symbol={token1.symbol}
          linkable
        />
        <span>/ {Number(fee) / 10000}%</span>
      </NavLink>
    );
  }

  return (
    <div
      className="flex items-baseline space-x-1 truncate font-sans text-gray-700"
      title={`Uniswap V3 LP (${token0.symbol}/${token1.symbol}/${
        Number(fee) / 10000
      }%): ${address}`}
    >
      <span>Uniswap V3 LP:</span>
      <Content
        chainId={chainId}
        address={token0.address}
        name={token0.name}
        symbol={token0.symbol}
      />
      <span>/</span>
      <Content
        chainId={chainId}
        address={token1.address}
        name={token1.name}
        symbol={token1.symbol}
      />
      <span>/ {Number(fee) / 10000}%</span>
    </div>
  );
};

type ContentProps = {
  chainId: bigint;
  address: ChecksummedAddress;
  name: string;
  symbol: string;
  linkable?: boolean;
};

const Content: FC<ContentProps> = ({
  chainId,
  address,
  name,
  symbol,
  linkable,
}) => (
  <>
    <div className={`h-5 w-5 self-center ${linkable ? "" : "grayscale"}`}>
      <TokenLogo chainId={chainId} address={address} name={name} />
    </div>
    <span>{symbol}</span>
  </>
);

export const uniswapV3PairRenderer: ResolvedAddressRenderer<
  UniswapV3PairMeta
> = (chainId, address, tokenMeta, linkable, dontOverrideColors) => (
  <UniswapV3PairName
    chainId={chainId}
    address={address}
    token0={tokenMeta.token0}
    token1={tokenMeta.token1}
    fee={tokenMeta.fee}
    linkable={linkable}
    dontOverrideColors={dontOverrideColors}
  />
);

export default UniswapV3PairName;



================================================
FILE: src/execution/address/renderer/VerifiedContractName.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import VerifiedContractName from "./VerifiedContractName";

const meta = {
  component: VerifiedContractName,
} satisfies Meta<typeof VerifiedContractName>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    chainId: 1n,
    address: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    linkable: false,
    resolvedName: "WETH9",
    dontOverrideColors: false,
  },
};

export const Linkable: Story = {
  args: {
    ...Default.args,
    linkable: true,
  },
};

export const LongName: Story = {
  args: {
    ...Default.args,
    resolvedName: "UniswapV2FeeOnTransferAdapterTransparentUpgradeableProxy",
  },
};



================================================
FILE: src/execution/address/renderer/VerifiedContractName.tsx
================================================
import { FC } from "react";
import { NavLink } from "react-router-dom";
import { ResolvedAddressRenderer } from "../../../api/address-resolver/address-resolver";

type VerifiedContractNameProps = {
  chainId: bigint;
  address: string;
  linkable: boolean;
  resolvedName: string;
  dontOverrideColors?: boolean;
};

const VerifiedContractName: FC<VerifiedContractNameProps> = ({
  chainId,
  address,
  linkable,
  resolvedName,
  dontOverrideColors,
}) => {
  const contents = <>{resolvedName}</>;
  const title = `Verified Contract (${resolvedName}): ${address}`;
  if (linkable) {
    return (
      <NavLink
        className={`flex items-baseline space-x-1 font-sans ${
          dontOverrideColors
            ? ""
            : "text-verified-contract hover:text-verified-contract-hover"
        } truncate`}
        to={`/address/${address}`}
        title={title}
      >
        {contents}
      </NavLink>
    );
  }

  return (
    <span className="truncate text-gray-400" title={title}>
      {contents}
    </span>
  );
};

export const VerifiedContractRenderer: ResolvedAddressRenderer<string> = (
  chainId,
  address,
  resolvedName,
  linkable,
  dontOverrideColors,
) => (
  <VerifiedContractName
    chainId={chainId}
    address={address}
    linkable={linkable}
    resolvedName={resolvedName}
    dontOverrideColors={dontOverrideColors}
  />
);

export default VerifiedContractName;



================================================
FILE: src/execution/block/BlockTransactionByIndex.tsx
================================================
import React, { lazy, useContext, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import BlockLink from "../../components/BlockLink";
import BlockNotFound from "../../components/BlockNotFound";
import ContentFrame from "../../components/ContentFrame";
import StandardFrame from "../../components/StandardFrame";
import { PAGE_SIZE } from "../../params";
import { useBlockData, useBlockTransactions } from "../../useErigonHooks";
import { RuntimeContext } from "../../useRuntime";

const Transaction = lazy(() => import("../Transaction"));

const BlockTransactionByIndex: React.FC = () => {
  const { blockNumberOrHash, txIndex } = useParams();
  const txIndexNum = Number(txIndex);
  const navigate = useNavigate();
  const { provider } = useContext(RuntimeContext);
  const { data: block, isLoading: isLoadingBlock } = useBlockData(
    provider,
    blockNumberOrHash,
  );
  let { data: blockTransactions } = useBlockTransactions(
    provider,
    block?.number,
    Math.floor(
      ((block ? block.transactionCount : txIndexNum) - 1 - txIndexNum) /
        PAGE_SIZE,
    ),
    PAGE_SIZE,
  );
  const invTxIndex = block ? block.transactionCount - 1 - txIndexNum : 0;
  useEffect(() => {
    if (
      block &&
      blockTransactions &&
      blockTransactions.txs[invTxIndex % PAGE_SIZE]
    ) {
      navigate("/tx/" + blockTransactions.txs[invTxIndex % PAGE_SIZE].hash, {
        replace: true,
      });
    }
  }, [blockTransactions, navigate]);

  return (
    <StandardFrame>
      {!block && !isLoadingBlock ? (
        <BlockNotFound blockNumberOrHash={blockNumberOrHash ?? ""} />
      ) : Number.isNaN(txIndexNum) ||
        (blockTransactions && txIndexNum >= blockTransactions.total) ? (
        <ContentFrame>
          <div className="py-4 text-sm">
            Block <BlockLink blockTag={blockNumberOrHash ?? ""} /> has no
            transaction at index {txIndexNum}.
          </div>
        </ContentFrame>
      ) : (
        <></>
      )}
    </StandardFrame>
  );
};

export default React.memo(BlockTransactionByIndex);



================================================
FILE: src/execution/block/BlockTransactionHeader.tsx
================================================
import { BlockTag } from "ethers";
import React, { useContext } from "react";
import BlockLink from "../../components/BlockLink";
import NavBlock from "../../components/NavBlock";
import StandardSubtitle from "../../components/StandardSubtitle";
import { blockTxsURL } from "../../url";
import { useLatestBlockNumber } from "../../useLatestBlock";
import { RuntimeContext } from "../../useRuntime";

type BlockTransactionHeaderProps = {
  blockTag: BlockTag;
};

const BlockTransactionHeader: React.FC<BlockTransactionHeaderProps> = ({
  blockTag,
}) => {
  const { provider } = useContext(RuntimeContext);
  const latestBlockNumber = useLatestBlockNumber(provider);

  return (
    <StandardSubtitle>
      <div className="flex items-baseline space-x-1">
        <span>Transactions</span>
        <div className="flex space-x-1 text-sm text-gray-500">
          <span>For Block</span>
          <BlockLink blockTag={blockTag} />
          <NavBlock
            entityNum={blockTag as number}
            latestEntityNum={latestBlockNumber}
            urlBuilder={blockTxsURL}
          />
        </div>
      </div>
    </StandardSubtitle>
  );
};

export default React.memo(BlockTransactionHeader);



================================================
FILE: src/execution/block/BlockTransactionResults.tsx
================================================
import { FC, memo } from "react";
import ContentFrame from "../../components/ContentFrame";
import StandardScrollableTable from "../../components/StandardScrollableTable";
import StandardTBody from "../../components/StandardTBody";
import { PAGE_SIZE } from "../../params";
import ResultHeader from "../../search/ResultHeader";
import SearchResultNavBar from "../../search/SearchResultNavBar";
import TransactionItem from "../../search/TransactionItem";
import { totalTransactionsFormatter } from "../../search/messages";
import { useFeeToggler } from "../../search/useFeeToggler";
import StandardSelectionBoundary from "../../selection/StandardSelectionBoundary";
import { ProcessedTransaction } from "../../types";
import PendingPage from "../address/PendingPage";

type BlockTransactionResultsProps = {
  page?: ProcessedTransaction[];
  total: number;
  pageNumber: number;
  isLoading: boolean;
};

const BlockTransactionResults: FC<BlockTransactionResultsProps> = ({
  page,
  total,
  pageNumber,
  isLoading,
}) => {
  const [feeDisplay, feeDisplayToggler] = useFeeToggler();

  return (
    <ContentFrame isLoading={isLoading}>
      <SearchResultNavBar
        pageNumber={pageNumber}
        pageSize={PAGE_SIZE}
        total={total}
        totalFormatter={totalTransactionsFormatter}
      />
      <StandardScrollableTable isAuto={true}>
        <ResultHeader
          feeDisplay={feeDisplay}
          feeDisplayToggler={feeDisplayToggler}
        />
        {page ? (
          <StandardSelectionBoundary>
            <StandardTBody>
              {page.map((tx) => (
                <TransactionItem
                  key={tx.hash}
                  tx={tx}
                  feeDisplay={feeDisplay}
                />
              ))}
            </StandardTBody>
          </StandardSelectionBoundary>
        ) : (
          <PendingPage rows={1} cols={8} />
        )}
      </StandardScrollableTable>
      {page && (
        <SearchResultNavBar
          pageNumber={pageNumber}
          pageSize={PAGE_SIZE}
          total={total}
          totalFormatter={totalTransactionsFormatter}
        />
      )}
    </ContentFrame>
  );
};

export default memo(BlockTransactionResults);



================================================
FILE: src/execution/block/RecentBlocks.tsx
================================================
import { FC, memo, useContext } from "react";
import ContentFrame from "../../components/ContentFrame";
import { RECENT_SIZE } from "../../params";
import { PendingRecentBlockResults } from "../../search/PendingResults";
import RecentBlockItem from "../../search/RecentBlockItem";
import RecentBlockResultHeader from "../../search/RecentBlockResultHeader";
import RecentNavBar from "../../search/RecentNavBar";
import { useFeeToggler } from "../../search/useFeeToggler";
import StandardSelectionBoundary from "../../selection/StandardSelectionBoundary";
import { useRecentBlocks } from "../../useErigonHooks";
import { useLatestBlockNumber } from "../../useLatestBlock";
import { RuntimeContext } from "../../useRuntime";

const RecentBlocks: FC = () => {
  const { provider } = useContext(RuntimeContext);
  const [feeDisplay, feeDisplayToggler] = useFeeToggler();

  const latestBlockNum = useLatestBlockNumber(provider);

  // Uses hook to get the most recent blocks
  const { data, isLoading } = useRecentBlocks(
    provider,
    latestBlockNum,
    0,
    RECENT_SIZE,
  );

  // Return a table with rows containing the basic information of the most recent RECENT_SIZE blocks
  return (
    <ContentFrame isLoading={isLoading}>
      <RecentNavBar isLoading={data === undefined} />
      <RecentBlockResultHeader
        feeDisplay={feeDisplay}
        feeDisplayToggler={feeDisplayToggler}
      />
      {data ? (
        <StandardSelectionBoundary>
          {data.map((block) =>
            block ? (
              <RecentBlockItem
                key={block.number}
                block={block}
                feeDisplay={feeDisplay}
              />
            ) : (
              <></>
            ),
          )}
        </StandardSelectionBoundary>
      ) : (
        <PendingRecentBlockResults />
      )}
    </ContentFrame>
  );
};

export default memo(RecentBlocks);



================================================
FILE: src/execution/block/RecentDSBlocks.tsx
================================================
import { FC, memo, useContext } from "react";
import ContentFrame from "../../components/ContentFrame";
import { RECENT_SIZE } from "../../params";
import { PendingRecentDSBlockResults } from "../../search/PendingResults";
import RecentDSBlockItem from "../../search/RecentDSBlockItem";
import RecentDSBlockResultHeader from "../../search/RecentDSBlockResultHeader";
import RecentDSNavBar from "../../search/RecentDSNavBar";
import StandardSelectionBoundary from "../../selection/StandardSelectionBoundary";
import { useLatestBlockChainInfo } from "../../useLatestBlock";
import { RuntimeContext } from "../../useRuntime";
import { useDSBlocksData } from "../../useZilliqaHooks";

const RecentDSBlocks: FC = () => {
  const { zilliqa } = useContext(RuntimeContext);

  const latestBlockChainInfo = useLatestBlockChainInfo(zilliqa);
  const latestBlockNum = latestBlockChainInfo?.CurrentDSEpoch;

  // Uses hook to get the most recent blocks
  const { data, isLoading } = useDSBlocksData(
    zilliqa,
    latestBlockNum !== undefined ? parseInt(latestBlockNum, 10) : undefined,
    0,
    RECENT_SIZE,
  );

  // Return a table with rows containing the basic information of the most recent RECENT_SIZE blocks
  return (
    <ContentFrame isLoading={isLoading}>
      <RecentDSNavBar isLoading={data === undefined} />
      <RecentDSBlockResultHeader />
      {data ? (
        <StandardSelectionBoundary>
          {data.map((block) =>
            block ? (
              <RecentDSBlockItem key={block.header.BlockNum} block={block} />
            ) : (
              <></>
            ),
          )}
        </StandardSelectionBoundary>
      ) : (
        <PendingRecentDSBlockResults />
      )}
    </ContentFrame>
  );
};

export default memo(RecentDSBlocks);



================================================
FILE: src/execution/components/BlockReward.tsx
================================================
import { FC } from "react";
import FiatValue, { rewardPreset } from "../../components/FiatValue";
import NativeTokenAmount from "../../components/NativeTokenAmount";
import { ExtendedBlock } from "../../useErigonHooks";
import { useFiatValue } from "../../usePriceOracle";

type BlockRewardProps = {
  block: ExtendedBlock;
};

const BlockReward: FC<BlockRewardProps> = ({ block }) => {
  const totalFees = block?.feeReward ?? 0n;

  // Optimism-specific: subtract deposit transaction's gas, which does not pay the basefee
  const gasUsedWithoutDepositTx =
    block.gasUsed - (block.gasUsedDepositTx ?? 0n);
  const burntFees =
    (block?.baseFeePerGas && block.baseFeePerGas * gasUsedWithoutDepositTx) ??
    0n;
  const netFeeReward = totalFees - burntFees;

  const totalReward = block.blockReward + netFeeReward;
  const fiatValue = useFiatValue(totalReward, block.number);

  return (
    <>
      <NativeTokenAmount value={totalReward} />
      {netFeeReward !== 0n && (
        <>
          {" "}
          (
          <NativeTokenAmount
            data-test="block-reward"
            value={block.blockReward}
            hideUnit
          />{" "}
          + <NativeTokenAmount value={netFeeReward} hideUnit />)
        </>
      )}
      {fiatValue && (
        <>
          {" "}
          <FiatValue value={fiatValue} {...rewardPreset} />
        </>
      )}
    </>
  );
};

export default BlockReward;



================================================
FILE: src/execution/components/DecoratedAddressLink.tsx
================================================
import {
  faBomb,
  faBurn,
  faCoins,
  faMoneyBillAlt,
  faStar,
} from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { toBech32Address } from "@zilliqa-js/crypto";
import { FC, memo, useContext } from "react";
import { NavLink } from "react-router-dom";
import { resolverRendererRegistry } from "../../api/address-resolver";
import AddressLegend from "../../components/AddressLegend";
import SourcifyLogo from "../../sourcify/SourcifyLogo";
import { useSourcifyMetadata } from "../../sourcify/useSourcify";
import { AddressContext, ChecksummedAddress, ZERO_ADDRESS } from "../../types";
import { useResolvedAddress } from "../../useResolvedAddresses";
import { RuntimeContext } from "../../useRuntime";
import AddressAttributes from "../address/AddressAttributes";
import { VerifiedContractRenderer } from "../address/renderer/VerifiedContractName";
import { AddressAwareComponentProps } from "../types";
import PlainAddress from "./PlainAddress";

export type DecoratedAddressLinkProps = AddressAwareComponentProps & {
  selectedAddress?: ChecksummedAddress | undefined;
  addressCtx?: AddressContext | undefined;
  creation?: boolean | undefined;
  miner?: boolean | undefined;
  selfDestruct?: boolean | undefined;
  txFrom?: boolean | undefined;
  txTo?: boolean | undefined;
  eoa?: boolean | undefined;

  // Ignore all address resolvers and display the plain address
  plain?: boolean | undefined;
  displayAsBech32?: boolean | undefined;
};

const DecoratedAddressLink: FC<DecoratedAddressLinkProps> = ({
  address,
  selectedAddress,
  addressCtx,
  creation,
  miner,
  selfDestruct,
  txFrom,
  txTo,
  eoa,
  plain,
  displayAsBech32 = false,
}) => {
  const { config, provider } = useContext(RuntimeContext);
  const match = useSourcifyMetadata(address, provider._network.chainId);

  const mint = addressCtx === AddressContext.FROM && address === ZERO_ADDRESS;
  const burn = addressCtx === AddressContext.TO && address === ZERO_ADDRESS;

  const bech32Address = (() => {
    if (displayAsBech32) {
      return toBech32Address(address);
    }
    return undefined;
  })();

  return (
    <div
      className={`flex items-baseline space-x-1 ${
        txFrom ? "bg-skin-from" : ""
      } ${txTo ? "bg-skin-to" : ""} ${
        mint ? "italic text-emerald-500 hover:text-emerald-700" : ""
      } ${burn ? "text-orange-500 line-through hover:text-orange-700" : ""} ${
        selfDestruct ? "line-through opacity-70 hover:opacity-100" : ""
      }`}
    >
      {creation && (
        <span
          className="text-amber-300 dark:text-amber-700"
          title="Contract creation"
        >
          <FontAwesomeIcon icon={faStar} size="1x" />
        </span>
      )}
      {selfDestruct && (
        <span className="text-red-800" title="Self destruct">
          <FontAwesomeIcon icon={faBomb} size="1x" />
        </span>
      )}
      {mint && (
        <span className="text-emerald-500" title="Mint address">
          <FontAwesomeIcon icon={faMoneyBillAlt} size="1x" />
        </span>
      )}
      {burn && (
        <span className="text-orange-500" title="Burn address">
          <FontAwesomeIcon icon={faBurn} size="1x" />
        </span>
      )}
      {miner && (
        <span
          className="text-amber-400 dark:text-amber-600"
          title="Miner address"
        >
          <FontAwesomeIcon icon={faCoins} size="1x" />
        </span>
      )}
      {match && (
        <NavLink
          className="flex shrink-0 items-center self-center"
          to={`/address/${address}/contract`}
        >
          <SourcifyLogo />
        </NavLink>
      )}
      {plain ? (
        <PlainAddress
          address={address}
          bech32Address={bech32Address}
          linkable={address !== selectedAddress}
          dontOverrideColors={mint || burn}
        />
      ) : (
        <ResolvedAddress
          address={address}
          bech32Address={bech32Address}
          selectedAddress={selectedAddress}
          dontOverrideColors={mint || burn}
        />
      )}
      {!mint && !burn && (
        <>
          {eoa === true && (
            <AddressLegend title="Externally owned account" uniqueId="eoa">
              [EOA]
            </AddressLegend>
          )}
          {eoa === false && (
            <AddressLegend title="Contract account" uniqueId="contract">
              [C]
            </AddressLegend>
          )}
        </>
      )}
      {config.experimental && <AddressAttributes address={address} />}
    </div>
  );
};

type ResolvedAddressProps = AddressAwareComponentProps & {
  selectedAddress?: ChecksummedAddress | undefined;
  dontOverrideColors?: boolean;
};

const ResolvedAddress: FC<ResolvedAddressProps> = ({
  address,
  selectedAddress,
  dontOverrideColors,
  bech32Address,
}) => {
  const { provider } = useContext(RuntimeContext);
  const resolvedAddress = useResolvedAddress(provider, address);
  const linkable = address !== selectedAddress;
  const match = useSourcifyMetadata(address, provider._network.chainId);

  if (!resolvedAddress && match && match.metadata.settings?.compilationTarget) {
    const compilationTarget = match.metadata.settings?.compilationTarget;
    if (Object.values(compilationTarget).length > 0) {
      return VerifiedContractRenderer(
        provider._network.chainId,
        address,
        Object.values(compilationTarget)[0],
        linkable,
        !!dontOverrideColors,
      );
    }
  }

  if (!resolvedAddress) {
    return (
      <PlainAddress
        address={address}
        bech32Address={bech32Address}
        linkable={linkable}
        dontOverrideColors={dontOverrideColors}
      />
    );
  }

  const [resolver, resolvedName] = resolvedAddress;
  const renderer = resolverRendererRegistry.get(resolver);
  if (renderer === undefined) {
    return (
      <PlainAddress
        address={address}
        bech32Address={bech32Address}
        linkable={linkable}
        dontOverrideColors={dontOverrideColors}
      />
    );
  }

  return renderer(
    provider._network.chainId,
    address,
    resolvedName,
    linkable,
    !!dontOverrideColors,
  );
};

export default memo(DecoratedAddressLink);



================================================
FILE: src/execution/components/ParamDeclaration.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import { ParamType } from "ethers";
import ParamDeclaration from "./ParamDeclaration";

const meta = {
  component: ParamDeclaration,
} satisfies Meta<typeof ParamDeclaration>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Address: Story = {
  args: {
    input: ParamType.from("address a"),
    index: 0,
  },
};

export const Bytes32: Story = {
  args: {
    ...Address.args,
    input: ParamType.from("bytes32 data"),
  },
};

export const UnnamedParam: Story = {
  args: {
    ...Address.args,
    input: ParamType.from("address"),
  },
};

export const OrderTuple: Story = {
  args: {
    ...Address.args,
    input: ParamType.from(
      "tuple(uint256 info, address makerAsset, address takerAsset, address maker, address allowedSender, uint256 makingAmount, uint256 takingAmount) order",
    ),
  },
};



================================================
FILE: src/execution/components/ParamDeclaration.tsx
================================================
import { ParamType } from "ethers";
import { FC, type ReactNode } from "react";

type ParamDeclarationProps = {
  input: ParamType;
  index: number;
  short?: boolean;
};

function insertCommaEveryOther(components: ReactNode[]): ReactNode[] {
  const result = [];
  for (let i = 0; i < components.length; i++) {
    if (i > 0) {
      result.push(", ");
    }
    result.push(components[i]);
  }
  return result;
}

function getParamType(
  paramType: ParamType,
  short: boolean = false,
): ReactNode[] {
  if (paramType.isArray()) {
    const end =
      paramType.arrayLength === -1 ? "[]" : "[" + paramType.arrayLength + "]";
    return [...getParamType(paramType.arrayChildren!), end];
  } else if (paramType.isTuple()) {
    if (short) {
      return ["tuple(...)"];
    }
    return [
      "(",
      ...insertCommaEveryOther(
        paramType.components!.map((component: ParamType, index: number) => (
          <ParamDeclaration input={component} index={index} short={short} />
        )),
      ),
      ")",
    ];
  } else {
    return [paramType.type];
  }
}

const ParamDeclaration: FC<ParamDeclarationProps> = ({
  input,
  index,
  short,
}) => {
  return (
    <span className="font-code text-sm font-medium text-blue-700">
      <span className="text-red-700">{getParamType(input, short)}</span>{" "}
      {input.name !== "" ? (
        input.name
      ) : (
        <span className="italic text-blue-400">param_{index}</span>
      )}
    </span>
  );
};

export default ParamDeclaration;



================================================
FILE: src/execution/components/PlainAddress.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import PlainAddress from "./PlainAddress";

const meta = {
  component: PlainAddress,
} satisfies Meta<typeof PlainAddress>;

export default meta;
type Story = StoryObj<typeof meta>;

export const SimpleAddress: Story = {
  args: {
    address: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
    linkable: true,
    dontOverrideColors: true,
  },
};



================================================
FILE: src/execution/components/PlainAddress.tsx
================================================
import { FC } from "react";
import { NavLink } from "react-router-dom";

type PlainAddressProps = {
  address: string;
  bech32Address?: string | undefined;
  linkable: boolean;
  dontOverrideColors: boolean | undefined;
};

const PlainAddress: FC<PlainAddressProps> = ({
  address,
  linkable,
  dontOverrideColors,
  bech32Address,
}) => {
  if (linkable) {
    return (
      <NavLink
        className={`${
          dontOverrideColors ? "" : "text-link-blue hover:text-link-blue-hover"
        } truncate font-address`}
        to={`/address/${address}`}
        title={address}
      >
        {bech32Address || address}
      </NavLink>
    );
  }

  return (
    <span className="truncate font-address text-gray-400" title={address}>
      {address}
    </span>
  );
};

export default PlainAddress;



================================================
FILE: src/execution/components/TransactionAddress.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import { SelectionContext } from "../../selection/useSelection";
import { runtimeDecorator } from "../../storybook/util";
import { AddressContext } from "../../types";
import TransactionAddress from "./TransactionAddress";

const meta = {
  component: TransactionAddress,
  decorators: [runtimeDecorator],
} satisfies Meta<typeof TransactionAddress>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    address: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
  },
};

export const Hovered: Story = {
  args: {
    address: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
  },
  decorators: [
    (Story) => (
      <SelectionContext.Provider
        value={[
          {
            type: "address",
            content: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
          },
          () => {},
        ]}
      >
        <Story />
      </SelectionContext.Provider>
    ),
  ],
};

export const Selected: Story = {
  args: {
    ...Default.args,
    selectedAddress: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
  },
};

export const Creation: Story = {
  args: {
    ...Default.args,
    creation: true,
  },
};

export const Miner: Story = {
  args: {
    ...Default.args,
    miner: true,
  },
};

export const From: Story = {
  args: {
    ...Default.args,
    addressCtx: AddressContext.FROM,
  },
};



================================================
FILE: src/execution/components/TransactionAddress.tsx
================================================
import { FC, useContext } from "react";
import AddressHighlighter from "../../components/AddressHighlighter";
import { AddressContext, ChecksummedAddress } from "../../types";
import { useBlockNumberContext } from "../../useBlockTagContext";
import { useBlockDataFromTransaction, useHasCode } from "../../useErigonHooks";
import { RuntimeContext } from "../../useRuntime";
import { useSelectedTransaction } from "../../useSelectedTransaction";
import { AddressAwareComponentProps } from "../types";
import DecoratedAddressLink from "./DecoratedAddressLink";

export type TransactionAddressProps = AddressAwareComponentProps & {
  selectedAddress?: ChecksummedAddress | undefined;
  addressCtx?: AddressContext | undefined;
  creation?: boolean | undefined;
  miner?: boolean | undefined;
  showCodeIndicator?: boolean;
  displayAsBech32?: boolean;
};

const TransactionAddress: FC<TransactionAddressProps> = ({
  address,
  selectedAddress,
  addressCtx,
  creation,
  miner,
  showCodeIndicator = false,
  displayAsBech32 = false,
}) => {
  const txData = useSelectedTransaction();
  // TODO: push down creation coloring logic into DecoratedAddressLink
  const _creation =
    creation || address === txData?.confirmedData?.createdContractAddress;

  const { provider } = useContext(RuntimeContext);
  const block = useBlockDataFromTransaction(provider, txData);

  const blockNumber = useBlockNumberContext();
  const hasCode = useHasCode(
    provider,
    address,
    blockNumber !== undefined
      ? blockNumber === "latest"
        ? "latest"
        : blockNumber - 1
      : undefined,
  );

  return (
    <AddressHighlighter address={address}>
      <DecoratedAddressLink
        address={address}
        selectedAddress={selectedAddress}
        addressCtx={addressCtx}
        miner={miner || address === block?.miner}
        txFrom={address === txData?.from}
        txTo={address === txData?.to || _creation}
        creation={_creation}
        eoa={
          showCodeIndicator
            ? creation || blockNumber !== undefined
              ? hasCode !== undefined
                ? !hasCode
                : undefined
              : undefined
            : undefined
        }
        displayAsBech32={displayAsBech32}
      />
    </AddressHighlighter>
  );
};

export default TransactionAddress;



================================================
FILE: src/execution/components/TransactionAddressWithCopy.tsx
================================================
import { FC } from "react";
import Copy from "../../components/Copy";
import TransactionAddress, {
  TransactionAddressProps,
} from "./TransactionAddress";

const TransactionAddressWithCopy: FC<TransactionAddressProps> = ({
  address,
  ...rest
}) => (
  <div className="-ml-1 flex items-baseline space-x-2">
    <TransactionAddress address={address} {...rest} />
    <Copy value={address} />
  </div>
);

export default TransactionAddressWithCopy;



================================================
FILE: src/execution/transaction/Details.tsx
================================================
import {
  faCheckCircle,
  faTimesCircle,
} from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { TabGroup, TabList, TabPanel, TabPanels } from "@headlessui/react";
import { formatUnits } from "ethers";
import { FC, memo, useContext, useState } from "react";
import BlockConfirmations from "../../components/BlockConfirmations";
import BlockLink from "../../components/BlockLink";
import ContentFrame from "../../components/ContentFrame";
import Copy from "../../components/Copy";
import ExpanderSwitch from "../../components/ExpanderSwitch";
import ExternalLink from "../../components/ExternalLink";
import { feePreset } from "../../components/FiatValue";
import FormattedBalance from "../../components/FormattedBalance";
import HelpButton from "../../components/HelpButton";
import InfoRow from "../../components/InfoRow";
import InternalTransactionOperation from "../../components/InternalTransactionOperation";
import MethodName from "../../components/MethodName";
import ModeTab from "../../components/ModeTab";
import NativeTokenAmountAndFiat from "../../components/NativeTokenAmountAndFiat";
import NativeTokenPrice from "../../components/NativeTokenPrice";
import NavBlock from "../../components/NavBlock";
import Nonce from "../../components/Nonce";
import PercentageBar from "../../components/PercentageBar";
import PercentagePosition from "../../components/PercentagePosition";
import RelativePosition from "../../components/RelativePosition";
import StandardTextarea from "../../components/StandardTextarea";
import Timestamp from "../../components/Timestamp";
import TransactionType from "../../components/TransactionType";
import ZRC2TransferItem from "../../scilla/ZRC2TransferItem";
import { useZRC2Transfers } from "../../scilla/useZRC2Hooks";
import {
  useError,
  useSourcifyMetadata,
  useTransactionDescription as useSourcifyTransactionDescription,
} from "../../sourcify/useSourcify";
import { TransactionData } from "../../types";
import { blockTxURL } from "../../url";
import {
  extract4Bytes,
  use4Bytes,
  useTransactionDescription,
} from "../../use4Bytes";
import { useChainInfo } from "../../useChainInfo";
import {
  useBlockDataFromTransaction,
  useSendsToMiner,
  useTokenTransfers,
  useTransactionError,
} from "../../useErigonHooks";
import { RuntimeContext } from "../../useRuntime";
import { commify } from "../../utils/utils";
import TransactionAddressWithCopy from "../components/TransactionAddressWithCopy";
import { calculateFee } from "../feeCalc";
import { isOptimisticChain } from "../op-tx-calculation";
import NavNonce from "./NavNonce";
import RewardSplit from "./RewardSplit";
import TokenTransferItem from "./TokenTransferItem";
import DecodedParamsTable from "./decoder/DecodedParamsTable";
import InputDecoder from "./decoder/InputDecoder";

type DetailsProps = {
  txData: TransactionData;
};

const Details: FC<DetailsProps> = ({ txData }) => {
  const { provider } = useContext(RuntimeContext);
  const block = useBlockDataFromTransaction(provider, txData);

  const hasEIP1559 =
    block?.baseFeePerGas !== undefined && block?.baseFeePerGas !== null;

  const fourBytes =
    txData.to !== null ? (extract4Bytes(txData.data) ?? "0x") : "0x";
  const fourBytesEntry = use4Bytes(fourBytes, txData.to ?? undefined);
  const fourBytesTxDesc = useTransactionDescription(
    fourBytesEntry,
    txData.data,
    txData.value,
  );

  const [sendsEthToMiner, internalOps] = useSendsToMiner(
    provider,
    txData.confirmedData ? txData.transactionHash : undefined,
    block?.miner,
  );

  const tokenTransfers = useTokenTransfers(txData);
  const zrc2Transfers = useZRC2Transfers(provider, txData?.transactionHash);

  const match = useSourcifyMetadata(txData?.to, provider._network.chainId);
  const metadata = match?.metadata;

  const txDesc = useSourcifyTransactionDescription(metadata, txData);
  const userDoc = metadata?.output.userdoc;
  const devDoc = metadata?.output.devdoc;
  const resolvedTxDesc = txDesc ?? fourBytesTxDesc;
  const userMethod = txDesc ? userDoc?.methods[txDesc.signature] : undefined;
  const devMethod = txDesc ? devDoc?.methods[txDesc.signature] : undefined;

  const {
    nativeCurrency: { name, symbol },
  } = useChainInfo();

  const [errorMsg, outputData, isCustomError] = useTransactionError(
    provider,
    txData.transactionHash,
  );
  const errorDescription = useError(
    metadata,
    isCustomError ? outputData : undefined,
  );
  const userError = errorDescription
    ? userDoc?.errors?.[errorDescription.signature]?.[0]
    : undefined;
  const devError = errorDescription
    ? devDoc?.errors?.[errorDescription.signature]?.[0]
    : undefined;
  const [expanded, setExpanded] = useState<boolean>(false);
  const [showFunctionHelp, setShowFunctionHelp] = useState<boolean>(false);
  const isOptimistic = isOptimisticChain(provider._network.chainId);

  const { totalFees } = calculateFee(txData, block);

  return (
    <ContentFrame tabs>
      <InfoRow title="Transaction Hash">
        <div className="flex items-baseline space-x-2">
          <span className="font-hash" data-test="tx-hash">
            {txData.transactionHash}
          </span>
          <Copy value={txData.transactionHash} />
        </div>
      </InfoRow>
      <InfoRow title="Status">
        {txData.confirmedData === undefined ? (
          <span className="italic text-gray-400">Pending</span>
        ) : txData.confirmedData.status ? (
          <span className="flex w-min items-baseline space-x-1 rounded-lg bg-emerald-50 px-3 py-1 text-xs text-emerald-500">
            <FontAwesomeIcon
              className="self-center"
              icon={faCheckCircle}
              size="1x"
            />
            <span data-test="status">Success</span>
          </span>
        ) : (
          <>
            <div className="flex items-baseline space-x-1">
              <div className="flex items-baseline space-x-1 rounded-lg bg-red-50 px-3 py-1 text-xs text-red-500">
                <FontAwesomeIcon
                  className="self-center"
                  icon={faTimesCircle}
                  size="1x"
                />
                <span>
                  Fail
                  {errorMsg && (
                    <>
                      {" "}
                      with revert message: '
                      <span className="font-bold underline">{errorMsg}</span>'
                    </>
                  )}
                  {isCustomError && (
                    <>
                      {" "}
                      with custom error
                      {errorDescription && (
                        <>
                          {" '"}
                          <span className="font-code font-bold underline">
                            {errorDescription.name}
                          </span>
                          {"'"}
                        </>
                      )}
                    </>
                  )}
                </span>
              </div>
              {isCustomError && (
                <ExpanderSwitch expanded={expanded} setExpanded={setExpanded} />
              )}
            </div>
            {expanded && (
              <TabGroup>
                <TabList className="mb-1 mt-2 flex space-x-1">
                  <ModeTab disabled={!errorDescription}>Decoded</ModeTab>
                  <ModeTab>Raw</ModeTab>
                </TabList>
                <TabPanels>
                  <TabPanel>
                    {errorDescription === undefined ? (
                      <>Waiting for data...</>
                    ) : errorDescription === null ? (
                      <>Can't decode data</>
                    ) : errorDescription.args.length === 0 ? (
                      <>No parameters</>
                    ) : (
                      <DecodedParamsTable
                        args={errorDescription.args}
                        paramTypes={errorDescription.fragment.inputs}
                        hasParamNames
                        userMethod={userError}
                        devMethod={devError}
                      />
                    )}
                  </TabPanel>
                  <TabPanel>
                    <StandardTextarea value={outputData} />
                  </TabPanel>
                </TabPanels>
              </TabGroup>
            )}
          </>
        )}
      </InfoRow>
      {txData.confirmedData && (
        <>
          <InfoRow title="Block / Position">
            <div className="flex flex-wrap gap-y-2 items-baseline divide-x-2 divide-dotted divide-gray-300">
              <div className="flex items-baseline space-x-1">
                <BlockLink blockTag={txData.confirmedData.blockNumber} />
                <BlockConfirmations
                  confirmations={txData.confirmedData.confirmations}
                />
              </div>
              {block && (
                <div className="ml-3 flex items-baseline space-x-2 pl-3">
                  <RelativePosition
                    pos={txData.confirmedData.transactionIndex}
                    total={block.transactionCount - 1}
                  />
                  <PercentagePosition
                    perc={
                      txData.confirmedData.transactionIndex /
                      (block.transactionCount - 1)
                    }
                  />
                  <div>
                    <NavBlock
                      entityNum={txData.confirmedData.transactionIndex}
                      latestEntityNum={block.transactionCount - 1}
                      urlBuilder={(txIndex: number) =>
                        blockTxURL(txData.confirmedData!.blockNumber, txIndex)
                      }
                      showFirstLink
                    />
                  </div>
                </div>
              )}
            </div>
          </InfoRow>
          <InfoRow title="Timestamp">
            {block && <Timestamp value={block.timestamp} />}
          </InfoRow>
        </>
      )}
      <InfoRow title="From / Nonce">
        <div className="flex flex-wrap gap-y-2 divide-x-2 divide-dotted divide-gray-300">
          <TransactionAddressWithCopy address={txData.from} />
          <div className="ml-3 flex items-baseline pl-3">
            <Nonce value={txData.nonce} />
            <NavNonce sender={txData.from} nonce={txData.nonce} />
          </div>
        </div>
      </InfoRow>
      <InfoRow title={txData.to ? "Interacted With (To)" : "Contract Created"}>
        {txData.to ? (
          <TransactionAddressWithCopy address={txData.to} showCodeIndicator />
        ) : txData.confirmedData === undefined ? (
          <span className="italic text-gray-400">
            Pending contract creation
          </span>
        ) : (
          <TransactionAddressWithCopy
            address={txData.confirmedData?.createdContractAddress!}
          />
        )}
        {internalOps && internalOps.length > 0 && (
          <div className="mt-2 space-y-1 overflow-x-auto">
            {internalOps.map((op, i) => (
              <InternalTransactionOperation
                key={i}
                txData={txData}
                internalOp={op}
              />
            ))}
          </div>
        )}
      </InfoRow>
      {txData.to && (
        <InfoRow title="Transaction Action">
          <div className="flex space-x-1">
            <MethodName data={txData.data} to={txData.to} />{" "}
            {(userMethod || devMethod) && (
              <HelpButton
                checked={showFunctionHelp}
                onChange={setShowFunctionHelp}
              />
            )}
          </div>
          {(userMethod || devMethod) && showFunctionHelp && (
            <div className="mt-1 text-gray-800">
              {userMethod && userMethod.notice && (
                <div className="col-span-12 gap-x-2 pt-1 px-1 font-normal">
                  {userMethod.notice}
                </div>
              )}
              {devMethod && devMethod.details && (
                <div className="col-span-12 gap-x-2 pt-1 px-1 font-normal">
                  <span className="font-bold italic text-xs mr-2 select-none">
                    dev{" "}
                  </span>
                  {devMethod.details}
                </div>
              )}
            </div>
          )}
        </InfoRow>
      )}
      {tokenTransfers && tokenTransfers.length > 0 && (
        <InfoRow title={`ERC20 Tokens Transferred (${tokenTransfers.length})`}>
          {tokenTransfers.map((t, i) => (
            <TokenTransferItem key={i} t={t} />
          ))}
        </InfoRow>
      )}
      {zrc2Transfers == undefined ? (
        <InfoRow title="ZRC2 Tokens Transferred">
          <span className="italic text-gray-400">Loading</span>
        </InfoRow>
      ) : zrc2Transfers.length > 0 ? (
        <InfoRow title={`ZRC2 Tokens Transferred (${zrc2Transfers!.length})`}>
          {zrc2Transfers!.map((t, i) => (
            <ZRC2TransferItem key={i} transfer={t} />
          ))}
        </InfoRow>
      ) : (
        <InfoRow title="ZRC2 Tokens Transferred">
          <span className="italic text-gray-400">
            No ZRC2 tokens transferred
          </span>
        </InfoRow>
      )}
      <InfoRow title="Value">
        <NativeTokenAmountAndFiat
          value={txData.value}
          blockTag={txData.confirmedData?.blockNumber}
          {...feePreset}
        />
      </InfoRow>
      <InfoRow
        title={
          <>
            Type (
            <ExternalLink href="https://eips.ethereum.org/EIPS/eip-2718">
              EIP-2718
            </ExternalLink>
            )
          </>
        }
      >
        <TransactionType type={txData.type} />
      </InfoRow>
      {(txData.type === 2 || txData.type === 3) && (
        <>
          <InfoRow title="Max Priority Fee Per Gas">
            <FormattedBalance
              value={txData.maxPriorityFeePerGas!}
              symbol={symbol}
            />{" "}
            (
            <FormattedBalance
              value={txData.maxPriorityFeePerGas!}
              decimals={9}
              symbol="Gwei"
            />
            )
          </InfoRow>
          <InfoRow title="Max Fee Per Gas">
            <FormattedBalance value={txData.maxFeePerGas!} symbol={symbol} /> (
            <FormattedBalance
              value={txData.maxFeePerGas!}
              decimals={9}
              symbol="Gwei"
            />
            )
          </InfoRow>
        </>
      )}
      {txData.gasPrice !== undefined && (
        <InfoRow title="Gas Price">
          <div className="flex items-baseline space-x-1">
            <span>
              <FormattedBalance value={txData.gasPrice} symbol={symbol} /> (
              <FormattedBalance
                value={txData.gasPrice}
                decimals={9}
                symbol="Gwei"
              />
              )
            </span>
            {sendsEthToMiner && (
              <span className="rounded bg-amber-100 px-2 py-1 text-xs text-amber-500">
                Flashbots
              </span>
            )}
          </div>
        </InfoRow>
      )}
      {txData.confirmedData && (
        <>
          <InfoRow title="Gas Used / Limit">
            <div className="flex items-baseline space-x-3">
              <div>
                <RelativePosition
                  pos={commify(formatUnits(txData.confirmedData.gasUsed, 0))}
                  total={commify(formatUnits(txData.gasLimit, 0))}
                />
              </div>
              <PercentageBar
                perc={
                  Number(
                    (txData.confirmedData.gasUsed * 10000n) / txData.gasLimit,
                  ) / 100
                }
              />
            </div>
          </InfoRow>
          {txData.confirmedData && txData.confirmedData.l1GasUsed && (
            <InfoRow title="L1 Gas Used by Txn">
              <span>{commify(txData.confirmedData.l1GasUsed)}</span>
            </InfoRow>
          )}
          {txData.confirmedData &&
            txData.confirmedData.l1FeeScalar !== undefined && (
              <InfoRow title="L1 Fee Scalar">
                <span>{txData.confirmedData.l1FeeScalar}</span>
              </InfoRow>
            )}
          {txData.confirmedData && txData.confirmedData.l1GasPrice && (
            <InfoRow title="L1 Gas Price">
              <div className="flex items-baseline space-x-1">
                <span>
                  <FormattedBalance value={txData.confirmedData.l1GasPrice} />{" "}
                  {symbol} (
                  <FormattedBalance
                    value={txData.confirmedData.l1GasPrice}
                    decimals={9}
                  />{" "}
                  Gwei)
                </span>
              </div>
            </InfoRow>
          )}
        </>
      )}
      {block && hasEIP1559 && (
        <InfoRow title="Block Base Fee">
          <FormattedBalance
            value={block.baseFeePerGas!}
            decimals={9}
            symbol="Gwei"
          />{" "}
          (
          <FormattedBalance
            value={block.baseFeePerGas!}
            decimals={0}
            symbol="wei"
          />
          )
        </InfoRow>
      )}
      {txData.maxFeePerBlobGas !== undefined && (
        <InfoRow title="Max Fee Per Blob Gas">
          <FormattedBalance value={txData.maxFeePerBlobGas!} symbol={symbol} />{" "}
          (
          <FormattedBalance
            value={txData.maxFeePerBlobGas!}
            decimals={9}
            symbol="Gwei"
          />
          )
        </InfoRow>
      )}
      {txData.confirmedData !== undefined &&
        txData.confirmedData.blobGasPrice !== undefined && (
          <InfoRow title="Blob Gas Price">
            <div className="flex items-baseline space-x-1">
              <span>
                <FormattedBalance
                  value={txData.confirmedData.blobGasPrice}
                  symbol={symbol}
                />{" "}
                (
                <FormattedBalance
                  value={txData.confirmedData.blobGasPrice}
                  decimals={9}
                  symbol="Gwei"
                />
                )
              </span>
            </div>
          </InfoRow>
        )}
      {txData.blobVersionedHashes && (
        <InfoRow title="Blob Versioned Hashes">
          <div className="space-y-1">
            {txData.blobVersionedHashes.map(
              (blobVersionedHash: string, i: number) => (
                <div key={i} className="flex items-baseline space-x-2">
                  <span className="font-hash" data-test="tx-hash">
                    {blobVersionedHash}
                  </span>
                  <Copy value={blobVersionedHash} />
                </div>
              ),
            )}
          </div>
        </InfoRow>
      )}
      {txData.confirmedData && (
        <>
          <InfoRow title="Transaction Fee">
            <div className="space-y-3">
              <div>
                <NativeTokenAmountAndFiat
                  value={totalFees}
                  blockTag={txData.confirmedData.blockNumber}
                  {...feePreset}
                />
              </div>
              {hasEIP1559 && (!isOptimistic || txData.type !== 126) && (
                <RewardSplit txData={txData} />
              )}
            </div>
          </InfoRow>
          <InfoRow title={`${name} Price`}>
            <NativeTokenPrice blockTag={txData.confirmedData.blockNumber} />
          </InfoRow>
        </>
      )}
      <InfoRow title="Input Data">
        <InputDecoder
          fourBytes={fourBytes}
          resolvedTxDesc={resolvedTxDesc}
          hasParamNames={resolvedTxDesc === txDesc}
          data={txData.data}
          userMethod={userMethod}
          devMethod={devMethod}
        />
      </InfoRow>
    </ContentFrame>
  );
};

export default memo(Details);



================================================
FILE: src/execution/transaction/FunctionSignature.tsx
================================================
import React from "react";
import SelectionHighlighter, {
  functionSigSelector,
} from "../../selection/SelectionHighlighter";

type FunctionSignatureProps = {
  callType: string;
  sig: string;
};

const FunctionSignature: React.FC<FunctionSignatureProps> = ({
  callType,
  sig,
}) => (
  <SelectionHighlighter
    myType="functionSig"
    myContent={sig}
    selector={functionSigSelector}
  >
    <span
      className={`font-bold ${
        callType === "STATICCALL"
          ? "text-red-700"
          : callType === "DELEGATECALL" || callType === "CALLCODE"
            ? "text-gray-400"
            : "text-blue-900"
      }`}
    >
      {sig}
    </span>
  </SelectionHighlighter>
);

export default FunctionSignature;



================================================
FILE: src/execution/transaction/LogEntry.tsx
================================================
import { TabGroup, TabList, TabPanel, TabPanels } from "@headlessui/react";
import {
  AbiCoder,
  Fragment,
  Interface,
  Log,
  LogDescription,
  keccak256,
  toUtf8Bytes,
} from "ethers";
import React, { FC, memo, useContext, useMemo } from "react";
import ModeTab from "../../components/ModeTab";
import { useSourcifyMetadata } from "../../sourcify/useSourcify";
import { RuntimeContext } from "../../useRuntime";
import { useTopic0 } from "../../useTopic0";
import TransactionAddressWithCopy from "../components/TransactionAddressWithCopy";
import DecodedLogSignature from "./decoder/DecodedLogSignature";
import DecodedParamsTable from "./decoder/DecodedParamsTable";
import DecodedScillaEncaps from "./decoder/DecodedScillaEncaps";
import DecodedScillaLogSignature from "./decoder/DecodedScillaLogSignature";
import DecodedScillaParamsTable from "./decoder/DecodedScillaParamsTable";
import LogIndex from "./log/LogIndex";
import RawLog from "./log/RawLog";
import TwoColumnPanel from "./log/TwoColumnPanel";

type LogEntryProps = {
  log: Log;
};

type ScillaLog = {
  eventName: string;
  address: string;
  params: object;
};

type ScillaEncapsLog = {
  kind: string;
  description: string;
};

type LogDescProps = {
  resolvedLogDesc: LogDescription;
};

const EvmLogDisplay: FC<LogDescProps> = ({ resolvedLogDesc }) => {
  return (
    <div>
      {" "}
      {resolvedLogDesc === undefined ? (
        <TwoColumnPanel>Waiting for data...</TwoColumnPanel>
      ) : resolvedLogDesc === null || resolvedLogDesc.fragment === undefined ? (
        <TwoColumnPanel>Cannot decode data</TwoColumnPanel>
      ) : (
        <TwoColumnPanel>
          <DecodedLogSignature event={resolvedLogDesc.fragment} />
          <DecodedParamsTable
            args={resolvedLogDesc.args}
            paramTypes={resolvedLogDesc.fragment?.inputs}
            hasParamNames={true}
          />
        </TwoColumnPanel>
      )}{" "}
    </div>
  );
};

/// Display a scilla log; if the log were null, we would have defaulted to
///  EvmLogDisplay, so no need to handle undefined or null.
const ScillaLogDisplay: FC<ScillaLog> = (scillaLogDesc) => {
  return (
    <div>
      {" "}
      <TwoColumnPanel>
        <DecodedScillaLogSignature
          name={scillaLogDesc.eventName}
          address={scillaLogDesc.address}
        />
        <DecodedScillaParamsTable params={scillaLogDesc.params as any} />
      </TwoColumnPanel>
    </div>
  );
};

const ScillaEncapsDisplay: FC<ScillaEncapsLog> = (scillaEncaps) => {
  return (
    <div>
      {" "}
      <TwoColumnPanel>
        <DecodedScillaEncaps
          kind={scillaEncaps.kind}
          description={scillaEncaps.description}
        />
      </TwoColumnPanel>
    </div>
  );
};

const LogEntry: FC<LogEntryProps> = ({ log }) => {
  const { provider } = useContext(RuntimeContext);
  const match = useSourcifyMetadata(log.address, provider._network.chainId);
  const scillaLogDesc: ScillaLog | undefined = useMemo(() => {
    // Scilla logs are encoded as a single JSON string.
    try {
      const data = JSON.parse(
        AbiCoder.defaultAbiCoder().decode(["string"], log.data)[0],
      );
      return {
        eventName: data._eventname,
        address: data.address,
        params: data.params,
      };
    } catch (err) {
      // Silently ignore on purpose
      return undefined;
    }
  }, [log]);
  const logDesc = useMemo(() => {
    if (!match) {
      return match;
    }

    const abi = match.metadata.output.abi;
    const intf = new Interface(abi as any);
    try {
      return intf.parseLog({
        topics: Array.from(log.topics),
        data: log.data,
      });
    } catch (err) {
      console.warn("Couldn't find function signature", err);
      return null;
    }
  }, [log, match]);

  const rawTopic0 = log.topics[0];
  // If rawTopic0 is keccak256("ScillaError(String)") or keccak256("ScillaException(String)")
  // this is secretly a Scilla exception and we should treat it as such. W00t. Magic :-)
  // Don't use id() here - the semantics we want are precisely those of the ZIP.
  // - rrw 2023-12-18
  const scillaErrorTopic = keccak256(toUtf8Bytes("ScillaError(string)"));
  const scillaExceptionTopic = keccak256(
    toUtf8Bytes("ScillaException(string)"),
  );
  const topic0ScillaEncapsLogDesc = useMemo(() => {
    const byteTopic0 = rawTopic0.toLowerCase();

    if (byteTopic0 == scillaExceptionTopic || byteTopic0 == scillaErrorTopic) {
      try {
        let kind =
          byteTopic0 == scillaExceptionTopic
            ? "Forwarded_Scilla_Exception"
            : "Forwarded_Scilla_Error";
        let parsed = AbiCoder.defaultAbiCoder().decode(["string"], log.data);
        return {
          kind,
          description: parsed[0],
        };
      } catch (err) {
        console.log(`Failed to parse Scilla error ${err}`);
        return undefined;
      }
    }
    return undefined;
  }, [rawTopic0, log]);

  const topic0 = rawTopic0 ? useTopic0(rawTopic0) : "";

  const topic0LogDesc = useMemo(() => {
    if (!topic0) {
      return topic0;
    }
    if (!topic0.signatures) {
      return undefined;
    }

    const sigs = topic0.signatures;
    for (const sig of sigs) {
      const logFragment = Fragment.from(`event ${sig}`);
      const intf = new Interface([logFragment]);
      try {
        return intf.parseLog({
          topics: Array.from(log.topics),
          data: log.data,
        });
      } catch (err) {
        // Ignore on purpose; try to match other sigs
      }
    }
    return undefined;
  }, [topic0, log]);

  // If we have a known topic, use that. Otherwise, if we have an eth log, use that.
  const resolvedLogDesc = logDesc ?? topic0LogDesc;
  let scillaLog = undefined;
  if (scillaLogDesc !== null && scillaLogDesc !== undefined) {
    scillaLog = (
      <ScillaLogDisplay
        eventName={scillaLogDesc.eventName}
        address={scillaLogDesc.address}
        params={scillaLogDesc.params}
      />
    );
  } else if (topic0ScillaEncapsLogDesc !== undefined) {
    scillaLog = (
      <ScillaEncapsDisplay
        kind={topic0ScillaEncapsLogDesc.kind}
        description={topic0ScillaEncapsLogDesc.description}
      />
    );
  }

  let logDescElem = <TwoColumnPanel>Waiting for data...</TwoColumnPanel>;
  if (resolvedLogDesc !== undefined) {
    if (resolvedLogDesc === null) {
      if (scillaLog !== undefined) {
        logDescElem = scillaLog;
      } else {
        logDescElem = <TwoColumnPanel>Cannot decode data</TwoColumnPanel>;
      }
    } else {
      logDescElem = (
        <TwoColumnPanel>
          <DecodedLogSignature event={(resolvedLogDesc as any).fragment} />
          <DecodedParamsTable
            args={(resolvedLogDesc as any).args}
            paramTypes={(resolvedLogDesc as any).fragment.inputs}
            hasParamNames={resolvedLogDesc === logDesc}
          />
        </TwoColumnPanel>
      );
    }
  }

  return (
    <div className="flex space-x-10 py-5">
      <div>
        <LogIndex idx={log.index} />
      </div>
      <div className="w-full space-y-2">
        <TwoColumnPanel leftPanel={<span className="font-bold">Address</span>}>
          <TransactionAddressWithCopy address={log.address} />
        </TwoColumnPanel>
        <TabGroup>
          <TabList as={React.Fragment}>
            <TwoColumnPanel leftPanel="Parameters">
              <div className="mb-1 flex space-x-1">
                <ModeTab>Decoded</ModeTab>
                <ModeTab>Raw</ModeTab>
              </div>
            </TwoColumnPanel>
          </TabList>
          <TabPanels as={React.Fragment}>
            <TabPanel>{logDescElem}</TabPanel>
            <TabPanel as={React.Fragment}>
              <RawLog topics={log.topics} data={log.data} />
            </TabPanel>
          </TabPanels>
        </TabGroup>
      </div>
    </div>
  );
};

export default memo(LogEntry);

/*       
              {resolvedLogDesc !== undefined && resolvedLogDesc !== null ? (
                <EvmLogDisplay resolvedLogDesc={resolvedLogDesc} />
              ) : scillaLogDesc !== null && scillaLogDesc !== undefined ? (
              ) : topic0ScillaEncapsLogDesc !== null &&
                topic0ScillaEncapsLogDesc !== undefined ? (
              ) : (
                <TwoColumnPanel>
                  <DecodedLogSignature event={resolvedLogDesc.fragment} />
                  <DecodedParamsTable
                    args={resolvedLogDesc.args}
                    paramTypes={resolvedLogDesc.fragment.inputs}
                    hasParamNames={resolvedLogDesc === logDesc}
                  />
                  <div />
                )}
*/



================================================
FILE: src/execution/transaction/Logs.tsx
================================================
import { Log } from "ethers";
import { FC, memo, useEffect } from "react";
import { useLocation } from "react-router-dom";
import ContentFrame from "../../components/ContentFrame";
import LogEntry from "./LogEntry";

type LogsProps = {
  logs: Log[] | undefined;
};

const Logs: FC<LogsProps> = ({ logs }) => {
  const location = useLocation();
  useEffect(() => {
    setTimeout(() => {
      if (location.hash) {
        // Scroll to fragment, e.g. "#3"
        let foundElement = document.getElementById(location.hash.slice(1));
        if (foundElement) {
          foundElement.scrollIntoView({
            behavior: "smooth",
          });
        }
      }
    }, 200);
  }, [logs]);
  return (
    <ContentFrame tabs>
      <div>
        {" "}
        {logs && (
          <>
            {logs.length > 0 ? (
              <>
                {logs.map((l, i) => (
                  <LogEntry key={i} log={l} />
                ))}
              </>
            ) : (
              <div className="py-4 text-sm">
                Transaction did not emit any logs
              </div>
            )}
          </>
        )}{" "}
      </div>
    </ContentFrame>
  );
};

export default memo(Logs);



================================================
FILE: src/execution/transaction/NavButton.tsx
================================================
import { FC, PropsWithChildren, useContext, useState } from "react";
import _NavButton from "../../components/NavButton";
import { ChecksummedAddress } from "../../types";
import { addressByNonceURL } from "../../url";
import { useTransactionBySenderAndNonce } from "../../useErigonHooks";
import { RuntimeContext } from "../../useRuntime";

// TODO: extract common component with block/NavButton
type NavButtonProps = {
  sender: ChecksummedAddress;
  nonce: bigint;
  disabled?: boolean;
};

const NavButton: FC<PropsWithChildren<NavButtonProps>> = ({
  sender,
  nonce,
  disabled,
  children,
}) => {
  const [prefetch, setPrefetch] = useState<boolean>(false);

  if (disabled) {
    return (
      <_NavButton href="" disabled>
        {children}
      </_NavButton>
    );
  }

  return (
    <>
      <_NavButton
        href={addressByNonceURL(sender, nonce)}
        onMouseOver={() => setPrefetch(true)}
      >
        {children}
      </_NavButton>
      {prefetch && <Prefetcher checksummedAddress={sender} nonce={nonce} />}
    </>
  );
};

type PrefetcherProps = {
  checksummedAddress: ChecksummedAddress;
  nonce: bigint;
};

const Prefetcher: FC<PrefetcherProps> = ({ checksummedAddress, nonce }) => {
  const { provider } = useContext(RuntimeContext);
  const _txHash = useTransactionBySenderAndNonce(
    provider,
    checksummedAddress,
    nonce,
  );

  return <></>;
};

export default NavButton;



================================================
FILE: src/execution/transaction/NavNonce.tsx
================================================
import {
  faChevronLeft,
  faChevronRight,
} from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import React, { useContext } from "react";
import { ChecksummedAddress } from "../../types";
import { useTransactionCount } from "../../useErigonHooks";
import { RuntimeContext } from "../../useRuntime";
import NavButton from "./NavButton";

type NavNonceProps = {
  sender: ChecksummedAddress;
  nonce: bigint;
};

const NavNonce: React.FC<NavNonceProps> = ({ sender, nonce }) => {
  const { provider } = useContext(RuntimeContext);
  const count = useTransactionCount(provider, sender);

  return (
    <div className="flex space-x-1 self-center pl-2">
      <NavButton sender={sender} nonce={nonce - 1n} disabled={nonce === 0n}>
        <FontAwesomeIcon icon={faChevronLeft} />
      </NavButton>
      <NavButton
        sender={sender}
        nonce={nonce + 1n}
        disabled={count === undefined || nonce >= count - 1n}
      >
        <FontAwesomeIcon icon={faChevronRight} />
      </NavButton>
      <NavButton
        sender={sender}
        nonce={count !== undefined ? count - 1n : -1n}
        disabled={count === undefined || nonce >= count - 1n}
      >
        <FontAwesomeIcon icon={faChevronRight} />
        <FontAwesomeIcon icon={faChevronRight} />
      </NavButton>
    </div>
  );
};

export default React.memo(NavNonce);



================================================
FILE: src/execution/transaction/Receipt.tsx
================================================
import { FC, memo, useContext } from "react";
import ContentFrame from "../../components/ContentFrame";
import { TransactionData } from "../../types";
import { useGetRawReceipt } from "../../useErigonHooks";
import { RuntimeContext } from "../../useRuntime";

type ReceiptProps = {
  txData: TransactionData;
};

const Receipt: FC<ReceiptProps> = ({ txData }) => {
  let txHash = txData.transactionHash;
  const { provider } = useContext(RuntimeContext);
  const rawReceipt = useGetRawReceipt(provider, txHash);
  const receiptString = JSON.stringify(rawReceipt, null, 2);

  return (
    <ContentFrame tabs>
      <div>
        <pre>{receiptString}</pre>
      </div>
    </ContentFrame>
  );
};

export default memo(Receipt);



================================================
FILE: src/execution/transaction/RewardSplit.tsx
================================================
import { faEthereum } from "@fortawesome/free-brands-svg-icons";
import { faBurn, faCoins, faSplotch } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import React, { useContext } from "react";
import FormattedBalance from "../../components/FormattedBalance";
import PercentageGauge from "../../components/PercentageGauge";
import { TransactionData } from "../../types";
import { useChainInfo } from "../../useChainInfo";
import { useBlockDataFromTransaction } from "../../useErigonHooks";
import { RuntimeContext } from "../../useRuntime";
import { calculateFee, getFeePercents } from "../feeCalc";

type RewardSplitProps = {
  txData: TransactionData;
};

// Only can be shown when gasPrice is defined
const RewardSplit: React.FC<RewardSplitProps> = ({ txData }) => {
  const { provider } = useContext(RuntimeContext);
  const block = useBlockDataFromTransaction(provider, txData);

  const {
    nativeCurrency: { symbol },
  } = useChainInfo();

  const { totalFees, feeDist } = calculateFee(txData, block);
  const feePerc = getFeePercents(feeDist);

  return (
    <div className="inline-block">
      <div className="grid grid-cols-2 items-center gap-x-2 gap-y-1 text-sm">
        <PercentageGauge
          perc={feePerc.burned}
          bgColor="bg-orange-100"
          bgColorPerc="bg-orange-500"
          textColor="text-black"
        />
        <div className="flex items-baseline space-x-1">
          <span className="flex space-x-1 text-orange-500">
            <span title="Burnt fees">
              <FontAwesomeIcon icon={faBurn} size="1x" />
            </span>
            <span>
              <span className="line-through">
                <FormattedBalance value={feeDist.burned} />
              </span>{" "}
              {symbol}
            </span>
          </span>
        </div>
        <PercentageGauge
          perc={feePerc.tip}
          bgColor="bg-amber-100"
          bgColorPerc="bg-amber-300"
          textColor="text-amber-700"
        />
        <div className="flex items-baseline space-x-1">
          <span className="flex space-x-1">
            <span
              className="text-amber-300 dark:text-amber-700"
              title="Miner fees"
            >
              <FontAwesomeIcon icon={faCoins} size="1x" />
            </span>
            <span>
              <FormattedBalance value={feeDist.tip} symbol={symbol} />
            </span>
          </span>
        </div>
        {feeDist.blob > 0n && (
          <>
            <PercentageGauge
              perc={feePerc.blob}
              bgColor="bg-rose-100"
              bgColorPerc="bg-rose-300"
              textColor="text-rose-700"
            />
            <div className="flex items-baseline space-x-1">
              <span className="flex space-x-1">
                <span className="text-rose-300" title="Blob fee">
                  <FontAwesomeIcon icon={faSplotch} size="1x" />
                </span>
                <span>
                  <FormattedBalance value={feeDist.blob} symbol={symbol} />
                </span>
              </span>
            </div>
          </>
        )}
        {feePerc.opL1Fee > 0n && (
          <>
            <PercentageGauge
              perc={feePerc.opL1Fee}
              bgColor="bg-blue-100"
              bgColorPerc="bg-blue-300"
              textColor="text-blue-700"
            />
            <div className="flex items-baseline space-x-1">
              <span className="flex space-x-1">
                <span className="text-blue-300" title="L1 Security fees">
                  <FontAwesomeIcon icon={faEthereum} size="1x" />
                </span>
                <span>
                  <FormattedBalance value={feeDist.opL1Fee} symbol={symbol} />
                </span>
              </span>
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default React.memo(RewardSplit);



================================================
FILE: src/execution/transaction/StateDiff.tsx
================================================
import { getAddress } from "ethers";
import React, { useContext } from "react";
import ContentFrame from "../../components/ContentFrame";
import DisplayInteger from "../../components/DisplayInteger";
import ElementDiff from "../../components/ElementDiff";
import { neutralPreset } from "../../components/FiatValue";
import HexValue from "../../components/HexValue";
import NativeTokenAmountAndFiat from "../../components/NativeTokenAmountAndFiat";
import { TransactionData } from "../../types";
import {
  StateDiffElement,
  StateDiffGroup,
  useStateDiffTrace,
} from "../../useErigonHooks";
import { RuntimeContext } from "../../useRuntime";
import TransactionAddress from "../components/TransactionAddress";
import Uint256Decoder from "./decoder/Uint256Decoder";

type StateDiffProps = {
  txData: TransactionData;
};

function isStateDiffGroup(
  group: StateDiffGroup | StateDiffElement,
): group is StateDiffGroup {
  if ((group as StateDiffGroup).title !== undefined) {
    return true;
  }
  return false;
}

const buildStateDiffTree = (
  groups: (StateDiffGroup | StateDiffElement)[] | undefined,
  depth: number = 0,
) => {
  if (groups === undefined) {
    return <></>;
  }
  let result = [];
  let keyIndex = 0;

  // Filter out state diffs with no changes
  groups = groups.filter(
    (group) => !(isStateDiffGroup(group) && group.diffs.length === 0),
  );

  for (let i = 0; i < groups.length; i++) {
    const group = groups[i];

    const last = i == groups.length - 1;
    function getBranch(key?: string | number): JSX.Element | null {
      // This is the L-shaped line that drops down to a child element
      if (depth > 0 && depth < 3) {
        return (
          <React.Fragment key={key !== undefined ? key.toString() : key}>
            <div className="absolute h-6 w-5 -translate-y-3 border-b border-l"></div>
            {!last && depth > 1 && (
              <div className="absolute left-0 h-full w-5 translate-y-3 border-l"></div>
            )}
          </React.Fragment>
        );
      }
      return null;
    }

    if (isStateDiffGroup(group)) {
      result.push(
        <React.Fragment key={keyIndex++}>
          {depth === 1 && getBranch()}
          <div className={depth > 0 ? "relative flex" : ""}>
            {depth !== 1 && getBranch()}
            <div
              className={
                depth === 0
                  ? ""
                  : depth < 3
                    ? "ml-5 rounded border px-2 pt-1 pb-2 hover:border-gray-500"
                    : "ml-5 py-0.5"
              }
            >
              {depth === 0 ? (
                <div className="relative flex">
                  <div className="rounded border px-1 py-0.5 hover:border-gray-500">
                    <TransactionAddress
                      address={getAddress(group.title)}
                      showCodeIndicator={true}
                    />
                  </div>
                </div>
              ) : (
                <div className="mb-3 font-code">{group.title}</div>
              )}
              <div
                className={`${depth < 2 ? "ml-5" : ""} space-y-3 self-stretch`}
              >
                {buildStateDiffTree(group.diffs, depth + 1)}
              </div>
            </div>
          </div>
        </React.Fragment>,
      );
    } else {
      result.push(getBranch(keyIndex++));
      let values: [string | null, string | null] = [group.from, group.to];
      let diffElement: null | React.ReactElement = null;
      let formatter: (value: string) => React.ReactNode | null = (
        value: string,
      ) => <>{value}</>;
      let showType = true;
      let showBorder = true;
      switch (group.type) {
        case "storageChange":
          formatter = (value: string) => <Uint256Decoder r={BigInt(value)} />;
          showType = false;
          showBorder = false;
          break;
        case "code":
          formatter = (value: string) => <HexValue value={value} />;
          break;
        case "nonce":
          values = [
            group.from == null ? null : BigInt(group.from).toString(),
            group.to === null ? null : BigInt(group.to).toString(),
          ];
          formatter = (value: string) => <DisplayInteger numberStr={value} />;
          break;
        case "balance":
          if (values[0] !== null && values[1] !== null) {
            let balanceDiff = BigInt(values[1]) - BigInt(values[0]);
            diffElement = (
              <>
                {balanceDiff >= 0n ? "+" : ""}
                <NativeTokenAmountAndFiat
                  value={balanceDiff}
                  explicitPlus={true}
                  {...neutralPreset}
                />
              </>
            );
          }
          formatter = (value: string) => (
            <NativeTokenAmountAndFiat
              value={BigInt(value)}
              {...neutralPreset}
            />
          );
          break;
        default:
          break;
      }
      const expanded = false;
      result.push(
        <div
          key={keyIndex++}
          className={`relative flex ${last ? "" : "border-l"}`}
        >
          <div
            className={`ml-5 py-1 ${showBorder ? "px-2 rounded border hover:border-gray-500" : ""} ${
              expanded ? "w-full" : ""
            }`}
          >
            <div>
              <span className="font-code">{showType ? group.type : null}</span>
              <div>
                <div className={showType ? "ml-5 space-y-3 self-stretch" : ""}>
                  <ElementDiff
                    oldElem={values[0] !== null ? formatter(values[0]) : null}
                    newElem={values[1] !== null ? formatter(values[1]) : null}
                    diffElem={diffElement}
                  />
                </div>
              </div>
            </div>
          </div>
        </div>,
      );
    }
  }
  return result;
};

const StateDiff: React.FC<StateDiffProps> = ({ txData }) => {
  const { provider } = useContext(RuntimeContext);
  const traces = useStateDiffTrace(provider, txData.transactionHash);

  return (
    <ContentFrame tabs>
      <div className="mb-5 mt-4 flex flex-col items-start space-y-3 overflow-x-auto text-sm">
        {traces ? (
          <>
            <div className="ml-5 space-y-3 self-stretch">
              {buildStateDiffTree(traces)}
            </div>
          </>
        ) : (
          <div className="h-7 w-96 rounded border px-1 py-1 hover:border-gray-500">
            <div className="h-full w-full animate-pulse rounded bg-gray-200"></div>
          </div>
        )}
      </div>
    </ContentFrame>
  );
};

export default React.memo(StateDiff);



================================================
FILE: src/execution/transaction/TokenTransferItem.tsx
================================================
import { faCaretRight, faSackDollar } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { FC, memo, useContext } from "react";
import { getPriceOraclePreset } from "../../components/FiatValue";
import USDAmount from "../../components/USDAmount";
import FormattedBalanceHighlighter from "../../selection/FormattedBalanceHighlighter";
import { AddressContext, TokenTransfer } from "../../types";
import { useBlockNumberContext } from "../../useBlockTagContext";
import { useTokenMetadata } from "../../useErigonHooks";
import { useTokenUSDOracle } from "../../usePriceOracle";
import { RuntimeContext } from "../../useRuntime";
import TransactionAddress from "../components/TransactionAddress";

type TokenTransferItemProps = {
  t: TokenTransfer;
};

const TokenTransferItem: FC<TokenTransferItemProps> = ({ t }) => {
  const { provider } = useContext(RuntimeContext);
  const blockNumber = useBlockNumberContext();
  const tokenMeta = useTokenMetadata(provider, t.token);
  // NOTE: Prices are estimated from the previous block so as not to skew the
  // estimate in favor of future price movements within this block, including
  // those possibly coming from this transaction.
  const {
    price: quote,
    decimals,
    source: priceSource,
  } = useTokenUSDOracle(
    provider,
    blockNumber !== undefined && typeof blockNumber === "number"
      ? blockNumber - 1
      : blockNumber,
    t.token,
    tokenMeta?.decimals !== undefined ? BigInt(tokenMeta?.decimals) : undefined,
  );

  return (
    <div className="flex items-baseline space-x-2 truncate px-2 py-1 hover:bg-gray-100">
      <div className="grid w-full grid-cols-4 items-baseline gap-x-1">
        <div className="flex items-baseline space-x-1">
          <TransactionAddress
            address={t.from}
            addressCtx={AddressContext.FROM}
            showCodeIndicator
          />
        </div>
        <div className="flex items-baseline space-x-1">
          <span className="text-gray-500">
            <FontAwesomeIcon icon={faCaretRight} size="1x" />
          </span>
          <TransactionAddress
            address={t.to}
            addressCtx={AddressContext.TO}
            showCodeIndicator
          />
        </div>
        <div className="col-span-2 flex items-baseline space-x-1">
          <span className="text-gray-500">
            <FontAwesomeIcon icon={faSackDollar} size="1x" />
          </span>
          <span>
            <FormattedBalanceHighlighter
              value={t.value}
              decimals={tokenMeta?.decimals ?? 0}
            />
          </span>
          <TransactionAddress address={t.token} />
          {tokenMeta && quote !== undefined && decimals !== undefined && (
            <USDAmount
              amount={t.value}
              amountDecimals={tokenMeta.decimals}
              quote={quote}
              quoteDecimals={Number(decimals ?? 0)}
              colorScheme={getPriceOraclePreset(priceSource)}
            />
          )}
        </div>
      </div>
    </div>
  );
};

export default memo(TokenTransferItem);



================================================
FILE: src/execution/transaction/Trace.tsx
================================================
import React, { useContext } from "react";
import ContentFrame from "../../components/ContentFrame";
import { TransactionData } from "../../types";
import { useTraceTransaction } from "../../useErigonHooks";
import { RuntimeContext } from "../../useRuntime";
import TransactionAddress from "../components/TransactionAddress";
import TraceItem from "./TraceItem";

type TraceProps = {
  txData: TransactionData;
};

const Trace: React.FC<TraceProps> = ({ txData }) => {
  const { provider } = useContext(RuntimeContext);
  const traces = useTraceTransaction(provider, txData.transactionHash);

  return (
    <ContentFrame tabs>
      <div className="mb-5 mt-4 flex flex-col items-start space-y-3 overflow-x-auto font-code text-sm">
        {traces ? (
          <>
            <div className="rounded border px-1 py-0.5 hover:border-gray-500 font-sans">
              <TransactionAddress address={txData.from} />
            </div>
            <div className="ml-5 space-y-3 self-stretch">
              {traces.map((t, i, a) => (
                <TraceItem key={i} t={t} last={i === a.length - 1} />
              ))}
            </div>
          </>
        ) : (
          <div className="h-7 w-96 rounded border px-1 py-1 hover:border-gray-500">
            <div className="h-full w-full animate-pulse rounded bg-gray-200"></div>
          </div>
        )}
      </div>
    </ContentFrame>
  );
};

export default React.memo(Trace);



================================================
FILE: src/execution/transaction/TraceInput.tsx
================================================
import { faBomb } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { AbiCoder } from "ethers";
import React, { useContext, useState } from "react";
import ExpanderSwitch from "../../components/ExpanderSwitch";
import FormattedBalance from "../../components/FormattedBalance";
import {
  useSourcifyMetadata,
  useTransactionDescription as useSourcifyTransactionDescription,
} from "../../sourcify/useSourcify";
import {
  extract4Bytes,
  use4Bytes,
  useTransactionDescription,
} from "../../use4Bytes";
import { useChainInfo } from "../../useChainInfo";
import { TraceEntry } from "../../useErigonHooks";
import { RuntimeContext } from "../../useRuntime";
import TransactionAddress from "../components/TransactionAddress";
import FunctionSignature from "./FunctionSignature";
import InputDecoder from "./decoder/InputDecoder";
import OutputDecoder from "./decoder/OutputDecoder";

type TraceInputProps = {
  t: TraceEntry;
};

const TraceInput: React.FC<TraceInputProps> = ({ t }) => {
  const {
    nativeCurrency: { symbol },
  } = useChainInfo();
  const { provider } = useContext(RuntimeContext);
  const raw4Bytes = extract4Bytes(t.input);
  const fourBytes = use4Bytes(raw4Bytes, t.to);
  const sigText =
    raw4Bytes === null ? "<fallback>" : (fourBytes?.name ?? raw4Bytes);
  const hasParams = t.input.length > 10;
  const hasSig = t.input.length >= 10;
  const isFallback = t.input.length === 2;
  const hasSmallData = t.input.length > 2 && t.input.length < 10;

  const fourBytesTxDesc = useTransactionDescription(
    fourBytes,
    t.input,
    t.value,
  );

  const match = useSourcifyMetadata(t.to, provider._network.chainId);
  const metadata = match?.metadata;
  const sourcifyTxDesc = useSourcifyTransactionDescription(metadata, {
    data: t.input,
    value: t.value,
  });
  const userDoc = metadata?.output.userdoc;
  const devDoc = metadata?.output.devdoc;
  // TODO: Consider checking stateVariables too
  const userMethod = sourcifyTxDesc
    ? userDoc?.methods[sourcifyTxDesc.signature]
    : undefined;
  const devMethod = sourcifyTxDesc
    ? devDoc?.methods[sourcifyTxDesc.signature]
    : undefined;
  const txDesc = sourcifyTxDesc ?? fourBytesTxDesc;

  const [expanded, setExpanded] = useState<boolean>(false);
  const [retValExpanded, setRetValExpanded] = useState<boolean>(false);
  const isContractCreation = t.type === "CREATE" || t.type === "CREATE2";

  const hasRetVal = t.output !== undefined && t.output !== "0x";
  const retValExpander = (
    <>
      <span className="whitespace-nowrap px-1">
        <span className="text-gray-500">returns</span>
      </span>
      <span>
        (
        <ExpanderSwitch
          expanded={retValExpanded}
          setExpanded={setRetValExpanded}
        />
        {!retValExpanded && ")"}
      </span>
    </>
  );

  return (
    <div
      className={`ml-5 rounded border px-1 py-0.5 hover:border-gray-500 ${
        expanded || retValExpanded ? "w-full" : ""
      }`}
    >
      <div className="flex items-baseline">
        <span className="text-xs lowercase text-gray-400">{t.type}</span>
        {t.type === "SELFDESTRUCT" ? (
          <span className="pl-2 text-red-800" title="Self destruct">
            <FontAwesomeIcon icon={faBomb} size="1x" />
          </span>
        ) : (
          <>
            <span className="font-sans">
              <TransactionAddress
                address={t.to}
                showCodeIndicator
                creation={isContractCreation || undefined}
              />
            </span>
            {!isContractCreation && (isFallback || hasSig) && (
              <>
                <span>.</span>
                <FunctionSignature callType={t.type} sig={sigText} />
              </>
            )}
            {t.value && t.value !== 0n && (
              <span className="whitespace-nowrap text-red-700">
                {"{"}value: <FormattedBalance value={t.value} symbol={symbol} />
                {"}"}
              </span>
            )}
            <span className="whitespace-nowrap">
              (
              {(hasParams || hasSmallData || isContractCreation) && (
                <ExpanderSwitch expanded={expanded} setExpanded={setExpanded} />
              )}
              {(!(hasParams || hasSmallData || isContractCreation) ||
                !expanded) && <>)</>}
            </span>

            {!expanded && hasRetVal && retValExpander}
          </>
        )}
      </div>
      {(hasParams || hasSmallData || isContractCreation) && expanded && (
        <>
          <div className="my-2 ml-5 mr-1">
            <InputDecoder
              fourBytes={raw4Bytes ?? "0x"}
              resolvedTxDesc={txDesc}
              hasParamNames={txDesc === sourcifyTxDesc}
              data={t.input}
              userMethod={userMethod}
              devMethod={devMethod}
            />
          </div>
          <div className="flex items-baseline">
            ) {hasRetVal && retValExpander}
          </div>
        </>
      )}
      {t.output !== undefined && t.output !== "0x" && retValExpanded && (
        <>
          <div className="my-2 ml-5 mr-1">
            <OutputDecoder
              args={
                txDesc
                  ? AbiCoder.defaultAbiCoder().decode(
                      txDesc.fragment.outputs,
                      t.output,
                    )
                  : undefined
              }
              paramTypes={txDesc?.fragment?.outputs}
              data={t.output}
              devMethod={devMethod}
            />
          </div>
          <div>)</div>
        </>
      )}
    </div>
  );
};

export default TraceInput;



================================================
FILE: src/execution/transaction/TraceItem.tsx
================================================
import {
  faMinusSquare,
  faPlusSquare,
} from "@fortawesome/free-regular-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { Switch } from "@headlessui/react";
import React, { useState } from "react";
import { TraceGroup } from "../../useErigonHooks";
import TraceInput from "./TraceInput";

type TraceItemProps = {
  t: TraceGroup;
  last: boolean;
};

const TraceItem: React.FC<TraceItemProps> = ({ t, last }) => {
  const [expanded, setExpanded] = useState<boolean>(true);

  return (
    <>
      <div className="relative flex">
        <div className="absolute h-6 w-5 -translate-y-3 border-b border-l"></div>
        {!last && (
          <div className="absolute left-0 h-full w-5 translate-y-3 border-l"></div>
        )}
        {t.children && (
          <Switch
            className="absolute left-0 -translate-x-1/2 bg-white text-gray-500"
            checked={expanded}
            onChange={setExpanded}
          >
            <FontAwesomeIcon
              icon={expanded ? faMinusSquare : faPlusSquare}
              size="1x"
            />
          </Switch>
        )}
        <TraceInput t={t} />
      </div>
      {t.children && (
        <div
          className={`pl-10 ${last ? "" : "border-l"} space-y-3 ${
            expanded ? "" : "hidden"
          }`}
        >
          <TraceChildren c={t.children} />
        </div>
      )}
    </>
  );
};

type TraceChildrenProps = {
  c: TraceGroup[];
};

const TraceChildren: React.FC<TraceChildrenProps> = React.memo(({ c }) => {
  return (
    <>
      {c.map((tc, i, a) => (
        <TraceItem key={i} t={tc} last={i === a.length - 1} />
      ))}
    </>
  );
});

export default TraceItem;



================================================
FILE: src/execution/transaction/decoder/AddressDecoder.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import { runtimeDecorator } from "../../../storybook/util";
import AddressDecoder from "./AddressDecoder";

const meta = {
  component: AddressDecoder,
  decorators: [runtimeDecorator],
} satisfies Meta<typeof AddressDecoder>;

export default meta;
type Story = StoryObj<typeof meta>;

export const PlainAddress: Story = {
  args: {
    r: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
  },
};



================================================
FILE: src/execution/transaction/decoder/AddressDecoder.tsx
================================================
import { FC } from "react";
import { ChecksummedAddress } from "../../../types";
import TransactionAddressWithCopy from "../../components/TransactionAddressWithCopy";

type AddressDecoderProps = {
  r: ChecksummedAddress;
};

const AddressDecoder: FC<AddressDecoderProps> = ({ r }) => (
  <TransactionAddressWithCopy address={r} showCodeIndicator />
);

export default AddressDecoder;



================================================
FILE: src/execution/transaction/decoder/BooleanDecoder.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import BooleanDecoder from "./BooleanDecoder";

const meta = {
  component: BooleanDecoder,
} satisfies Meta<typeof BooleanDecoder>;

export default meta;
type Story = StoryObj<typeof meta>;

export const True: Story = {
  args: {
    r: true,
  },
};

export const False: Story = {
  args: {
    r: false,
  },
};



================================================
FILE: src/execution/transaction/decoder/BooleanDecoder.tsx
================================================
import { FC, memo } from "react";

type BooleanDecoderProps = {
  r: any;
};

const BooleanDecoder: FC<BooleanDecoderProps> = ({ r }) => (
  <span className={`font-code ${r ? "text-emerald-700" : "text-red-700"}`}>
    {r.toString()}
  </span>
);

export default memo(BooleanDecoder);



================================================
FILE: src/execution/transaction/decoder/BytesDecoder.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import BytesDecoder from "./BytesDecoder";

const meta = {
  component: BytesDecoder,
} satisfies Meta<typeof BytesDecoder>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Empty: Story = {
  args: {
    r: "0x",
  },
};

export const OneByte: Story = {
  args: {
    r: "0x01",
  },
};

export const EightBytes: Story = {
  args: {
    r: "0x0102030405060708",
  },
};



================================================
FILE: src/execution/transaction/decoder/BytesDecoder.tsx
================================================
import { FC, memo } from "react";

type BytesDecoderProps = {
  r: any;
};

const BytesDecoder: FC<BytesDecoderProps> = ({ r }) => (
  <span className="font-code">
    {r.toString()}
    <span className="select-none"> </span>
    <span className="font-sans text-xs text-gray-400 select-none">
      {r.toString().length / 2 - 1}{" "}
      {r.toString().length / 2 - 1 === 1 ? "byte" : "bytes"}
    </span>
  </span>
);

export default memo(BytesDecoder);



================================================
FILE: src/execution/transaction/decoder/DecodedLogSignature.tsx
================================================
import { EventFragment } from "ethers";
import { FC, memo } from "react";

type DecodedLogSignatureProps = {
  event: EventFragment;
};

const DecodedLogSignature: FC<DecodedLogSignatureProps> = ({ event }) => (
  <span className="font-mono">
    <span className="font-bold text-blue-900">{event.name}</span>(
    {event.inputs.map((input, i) => (
      <span key={i}>
        {i > 0 ? ", " : ""}
        <span>
          {input.format ? input.format("full") : `${input.type} ${input.name}`}
        </span>
      </span>
    ))}
    ){event.anonymous ? " anonymous" : ""}
  </span>
);

export default memo(DecodedLogSignature);



================================================
FILE: src/execution/transaction/decoder/DecodedLogSignatures.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import { EventFragment } from "ethers";
import DecodedLogSignature from "./DecodedLogSignature";

const meta = {
  component: DecodedLogSignature,
} satisfies Meta<typeof DecodedLogSignature>;

export default meta;
type Story = StoryObj<typeof meta>;

export const ERC20Transfer: Story = {
  args: {
    event: EventFragment.from(
      "Transfer(address from, address to, uint256 amount)",
    ),
  },
};

export const Numbers: Story = {
  args: {
    event: EventFragment.from("DummyEvent(uint256 a)"),
  },
};

export const Test: Story = {
  args: {
    event: EventFragment.from(
      "OrderFulfilled(bytes32 orderHash, address indexed offerer, address indexed zone, address recipient, tuple(uint8 itemType, address token, uint256 identifier, uint256 amount)[] offer, tuple(uint8 itemType, address token, uint256 identifier, uint256 amount, address recipient)[] consideration)",
    ),
  },
};



================================================
FILE: src/execution/transaction/decoder/DecodedParamRow.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import { ParamType } from "ethers";
import { runtimeDecorator } from "../../../storybook/util";
import DecodedParamRow from "./DecodedParamRow";

const meta = {
  component: DecodedParamRow,
  decorators: [runtimeDecorator],
} satisfies Meta<typeof DecodedParamRow>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Uint8: Story = {
  args: {
    paramType: ParamType.from("uint8 uint8ParamName"),
    r: "42",
  },
};

export const Uint8WithHelp: Story = {
  args: {
    ...Uint8.args,
    help: "Help for uint8 param",
  },
};

export const Uint256: Story = {
  args: {
    paramType: ParamType.from("uint256 uint256ParamName"),
    r: "42",
  },
};

export const Uint256WithHelp: Story = {
  args: {
    ...Uint256.args,
    help: "Help for uint256 param",
  },
};

export const Boolean: Story = {
  args: {
    paramType: ParamType.from("bool boolParamName"),
    r: true,
  },
};

export const BooleanWithHelp: Story = {
  args: {
    ...Boolean.args,
    help: "Help for bool param",
  },
};

export const Address: Story = {
  args: {
    paramType: ParamType.from("address addrParamName"),
    r: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
  },
};

export const AddressWithHelp: Story = {
  args: {
    ...Address.args,
    help: "Help for address param",
  },
};

export const Array: Story = {
  args: {
    paramType: ParamType.from("uint256[] arrayParamName"),
    r: [1, 2, 3],
  },
};

export const ArrayWithHelp: Story = {
  args: {
    ...Array.args,
    help: "Help for array param",
  },
};

export const Tuple: Story = {
  args: {
    paramType: ParamType.from("tuple(uint8, bool, uint256) tupleParamName"),
    r: [1, true, 42],
  },
};

export const TupleWithHelp: Story = {
  args: {
    ...Tuple.args,
    help: "Help for tuple param",
  },
};

export const ArrayOfTuple: Story = {
  args: {
    paramType: ParamType.from(
      "tuple(uint8, bool, uint256)[] arrTupleParamName",
    ),
    r: [
      [1, true, 42],
      [2, false, 41],
    ],
  },
};

export const ArrayOfTupleWithHelp: Story = {
  args: {
    ...ArrayOfTuple.args,
    help: "Help for array of tuple param",
  },
};

export const UnnamedTupleReturnValue: Story = {
  args: {
    paramType: ParamType.from("tuple(uint8,bool,uint256[])"),
    r: [23, false, [34, 45, 56]],
    defaultNameBase: "ret",
  },
};



================================================
FILE: src/execution/transaction/decoder/DecodedParamRow.tsx
================================================
import { faQuestionCircle } from "@fortawesome/free-regular-svg-icons";
import { faQuestionCircle as faQuestionCircleSolid } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { Switch } from "@headlessui/react";
import { ParamType } from "ethers";
import { FC, memo, ReactNode, useState } from "react";
import SelectionHighlighter, {
  valueSelector,
} from "../../../selection/SelectionHighlighter";
import AddressDecoder from "./AddressDecoder";
import BooleanDecoder from "./BooleanDecoder";
import BytesDecoder from "./BytesDecoder";
import DefaultDecoder from "./DefaultDecoder";
import Uint256Decoder from "./Uint256Decoder";

type DecodedParamRowProps = {
  prefix?: ReactNode;
  i?: number | undefined;
  r: any;
  paramType: ParamType;
  arrayElem?: number | undefined;
  help?: string | undefined;
  defaultNameBase?: string;
};

const DecodedParamRow: FC<DecodedParamRowProps> = ({
  prefix,
  i,
  r,
  paramType,
  arrayElem,
  help,
  defaultNameBase = "param",
}) => {
  const [showHelp, setShowHelp] = useState<boolean>(false);

  return (
    <>
      <tr className="grid grid-cols-12 gap-x-2 py-2 hover:bg-gray-100 items-baseline">
        <td className="col-span-3 pl-1">
          <div className="flex items-baseline space-x-2">
            <span>
              {prefix && <span className="text-gray-300">{prefix}</span>}
              {arrayElem !== undefined ? (
                <span className="text-gray-400">
                  {" "}
                  [<span className="text-black">{arrayElem}</span>]
                </span>
              ) : (
                <>
                  {paramType.name !== "" ? (
                    paramType.name
                  ) : (
                    <span className="italic">
                      {defaultNameBase}_{i}
                    </span>
                  )}{" "}
                  {i !== undefined && (
                    <span className="text-xs text-gray-400">({i})</span>
                  )}
                </>
              )}
            </span>
            {help && (
              <Switch
                checked={showHelp}
                onChange={setShowHelp}
                className="self-center text-gray-500"
              >
                <FontAwesomeIcon
                  icon={showHelp ? faQuestionCircleSolid : faQuestionCircle}
                  size="1x"
                />
              </Switch>
            )}
          </div>
          {help && showHelp && <div className="mt-2 text-gray-400">{help}</div>}
        </td>
        <td className="col-span-1 text-gray-500">{paramType.type}</td>
        <td className="col-span-8 flex break-all pr-1">
          <SelectionHighlighter
            myType="value"
            myContent={r.toString()}
            selector={valueSelector}
          >
            {paramType.baseType === "uint256" ? (
              <Uint256Decoder r={r} />
            ) : paramType.baseType === "address" ? (
              <AddressDecoder r={r.toString()} />
            ) : paramType.baseType === "bool" ? (
              <BooleanDecoder r={r} />
            ) : paramType.baseType === "bytes" ? (
              <BytesDecoder r={r} />
            ) : paramType.baseType === "tuple" ||
              paramType.baseType === "array" ? (
              <></>
            ) : (
              <DefaultDecoder r={r} />
            )}
          </SelectionHighlighter>
        </td>
      </tr>
      {paramType.baseType === "tuple" &&
        r.map((e: any, idx: number) => (
          <DecodedParamRow
            key={idx}
            prefix={
              paramType.name !== "" ? (
                paramType.name + "."
              ) : (
                <span className="italic">
                  {defaultNameBase}_{i}.
                </span>
              )
            }
            i={idx}
            r={e}
            paramType={paramType.components![idx]}
            defaultNameBase={defaultNameBase}
          />
        ))}
      {paramType.baseType === "array" &&
        r.map((e: any, idx: number) => (
          <DecodedParamRow
            key={idx}
            prefix={
              paramType.name !== "" ? (
                paramType.name
              ) : (
                <span className="italic">
                  {defaultNameBase}_{i}
                </span>
              )
            }
            r={e}
            // arrayChildren is not null when the baseType is array
            paramType={paramType.arrayChildren!}
            arrayElem={idx}
            defaultNameBase={defaultNameBase}
          />
        ))}
    </>
  );
};

export default memo(DecodedParamRow);



================================================
FILE: src/execution/transaction/decoder/DecodedParamsTable.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import { Result } from "ethers";
import { runtimeDecorator } from "../../../storybook/util";
import {
  AddressWithHelp,
  ArrayOfTupleWithHelp,
  ArrayWithHelp,
  BooleanWithHelp,
  TupleWithHelp,
  Uint256WithHelp,
  Uint8WithHelp,
} from "./DecodedParamRow.stories";
import DecodedParamsTable from "./DecodedParamsTable";

const meta = {
  component: DecodedParamsTable,
  decorators: [runtimeDecorator],
} satisfies Meta<typeof DecodedParamsTable>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    args: Result.fromItems([
      Uint8WithHelp.args.r,
      Uint256WithHelp.args.r,
      BooleanWithHelp.args.r,
      AddressWithHelp.args.r,
      ArrayWithHelp.args.r,
      TupleWithHelp.args.r,
      ArrayOfTupleWithHelp.args.r,
    ]),
    paramTypes: [
      Uint8WithHelp.args.paramType,
      Uint256WithHelp.args.paramType,
      BooleanWithHelp.args.paramType,
      AddressWithHelp.args.paramType,
      ArrayWithHelp.args.paramType,
      TupleWithHelp.args.paramType,
      ArrayOfTupleWithHelp.args.paramType,
    ],
  },
};

export const WithoutParamNames: Story = {
  args: {
    ...Default.args,
    hasParamNames: false,
  },
};



================================================
FILE: src/execution/transaction/decoder/DecodedParamsTable.tsx
================================================
import { ParamType, Result } from "ethers";
import { FC, memo } from "react";
import { DevMethod, UserMethod } from "../../../sourcify/useSourcify";
import DecodedParamRow from "./DecodedParamRow";

type DecodedParamsTableProps = {
  args: Result;
  paramTypes: readonly ParamType[];
  hasParamNames?: boolean;
  userMethod?: UserMethod | undefined;
  devMethod?: DevMethod | undefined;
  defaultNameBase?: string;
};

const DecodedParamsTable: FC<DecodedParamsTableProps> = ({
  args,
  paramTypes,
  hasParamNames = true,
  userMethod,
  devMethod,
  defaultNameBase = "param",
}) => (
  <table className="w-full border">
    <thead className="bg-gray-100 text-left">
      <tr className="grid grid-cols-12 gap-x-2 py-2">
        <th className="col-span-3 pl-1">
          name <span className="text-xs text-gray-400">(index)</span>
        </th>
        <th className="col-span-1">type</th>
        <th className="col-span-8 pr-1">value</th>
      </tr>
      {!hasParamNames && (
        <tr className="grid grid-cols-12 gap-x-2 bg-amber-100 py-2 text-red-700">
          <th className="col-span-12 px-1">
            {paramTypes.length > 0 && paramTypes[0].name !== ""
              ? "Parameter names are estimated."
              : "Parameter names are not available."}
          </th>
        </tr>
      )}
    </thead>
    <tbody className="divide-y">
      {args.map((r, i) => (
        <DecodedParamRow
          key={i}
          i={i}
          r={r}
          paramType={paramTypes[i]}
          help={
            devMethod?.[defaultNameBase === "ret" ? "returns" : "params"]?.[
              paramTypes[i].name !== "" ? paramTypes[i].name : "_" + i
            ]
          }
          defaultNameBase={defaultNameBase}
        />
      ))}
    </tbody>
  </table>
);

export default memo(DecodedParamsTable);



================================================
FILE: src/execution/transaction/decoder/DecodedScillaEncaps.tsx
================================================
import { FC, memo } from "react";

type DecodedScillaEncapsProps = {
  kind: string;
  description: string;
};

const DecodedScillaEncaps: FC<DecodedScillaEncapsProps> = (event) => {
  if (event) {
    return (
      <span className="font-mono">
        <span className="font-italic">kind:</span>{" "}
        <span className="font-bold text-blue-900">{event.kind}</span>
        <br />
        <span className="font-italic">description:</span>{" "}
        <span className="font-bold text-blue-500">{event.description}</span>
        <br />
      </span>
    );
  } else {
    return <div />;
  }
};

export default memo(DecodedScillaEncaps);



================================================
FILE: src/execution/transaction/decoder/DecodedScillaLogSignature.tsx
================================================
import { FC, memo } from "react";

type DecodedScillaLogSignatureProps = {
  name: string;
  address: string;
};

const DecodedScillaLogSignature: FC<DecodedScillaLogSignatureProps> = (
  event,
) => {
  if (event) {
    return (
      <span className="font-mono">
        <span className="font-italic">_eventName:</span>{" "}
        <span className="font-bold text-blue-900">{event.name}</span>
        <br />
        <span className="font-italic">address:</span>{" "}
        <span className="font-bold text-blue-500">{event.address}</span>
        <br />
      </span>
    );
  } else {
    return <div />;
  }
};

export default memo(DecodedScillaLogSignature);



================================================
FILE: src/execution/transaction/decoder/DecodedScillaParamsTable.tsx
================================================
import { FC, memo } from "react";

type DecodedScillaParamsTableProps = {
  params: Record<string, string>[];
};

type DecodedScillaParamRowProps = {
  name: string;
  valueType: string;
  value: string;
};

const DecodedScillaParamRow: FC<DecodedScillaParamRowProps> = ({
  name,
  valueType,
  value,
}) => {
  return (
    <>
      <tr className="grid grid-cols-12 gap-x-2 py-2 hover:bg-gray-100">
        <td className="col-span-3 pl-1 break-words">
          <span className="text-gray-600">{name}</span>
        </td>
        <td className="col-span-1 text-gray-500 break-words">{valueType}</td>
        <td className="col-span-8 text-gray-500 break-words">{value}</td>
      </tr>
    </>
  );
};

function valueOf(val: any): string {
  if (val instanceof Object) {
    return JSON.stringify(val);
  } else {
    if (val === null) {
      return "null";
    }
    if (val === undefined) {
      return "undefined";
    }
    return val.toString();
  }
}

const DecodedScillaParamsTable: FC<DecodedScillaParamsTableProps> = ({
  params,
}) => {
  // params.map((val) => { alert(`X ${JSON.stringify(val)}`) });
  return (
    <table className="w-full border">
      <thead>
        <tr className="grid grid-cols-12 gap-x-2 bg-gray-100 py-2 text-left">
          <th className="col-span-3 pl-1">name</th>
          <th className="col-span-1 pl-1">type</th>
          <th className="col-span-8 pr-1">value</th>
        </tr>
      </thead>
      <tbody className="divide-y">
        {params.map((val) => (
          <DecodedScillaParamRow
            key={val["vname"]}
            name={val["vname"]}
            valueType={val["type"]}
            value={valueOf(val["value"])}
          />
        ))}
      </tbody>
    </table>
  );
};

export default memo(DecodedScillaParamsTable);



================================================
FILE: src/execution/transaction/decoder/DefaultDecoder.tsx
================================================
import { FC, memo } from "react";

type DefaultDecoderProps = {
  r: any;
};

const DefaultDecoder: FC<DefaultDecoderProps> = ({ r }) => (
  <span className="font-code">{r.toString()}</span>
);

export default memo(DefaultDecoder);



================================================
FILE: src/execution/transaction/decoder/FunctionSignature.tsx
================================================
import { faQuestionCircle } from "@fortawesome/free-regular-svg-icons";
import { faQuestionCircle as faQuestionCircleSolid } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { Switch } from "@headlessui/react";
import { FunctionFragment, ParamType } from "ethers";
import { FC, Fragment, useState } from "react";
import { DevMethod, UserMethod } from "../../../sourcify/useSourcify";
import ParamDeclaration from "../../components/ParamDeclaration";

type FunctionSignatureProps = {
  userMethod?: UserMethod | undefined;
  devMethod?: DevMethod | undefined;
  fragment: FunctionFragment;
  className?: string;
};

const FunctionSignature: FC<FunctionSignatureProps> = ({
  userMethod,
  devMethod,
  fragment,
  className,
}) => {
  const [showHelp, setShowHelp] = useState<boolean>(false);
  const hasHelp =
    (userMethod && userMethod.notice) || (devMethod && devMethod.details);
  return (
    <div className={className}>
      <div>
        <span className="font-mono text-sm text-gray-800">
          <span className="font-bold">{fragment.name}</span>
          {"("}
          {fragment.inputs.map((param: ParamType, index: number) => (
            <Fragment key={index}>
              <ParamDeclaration input={param} index={index} />
              {index !== fragment.inputs.length - 1 && <>, </>}
            </Fragment>
          ))}
          {")"}
        </span>
        {hasHelp && (
          <Switch
            checked={showHelp}
            onChange={setShowHelp}
            className="self-center text-gray-500 pr-2 ml-1"
          >
            <FontAwesomeIcon
              icon={showHelp ? faQuestionCircleSolid : faQuestionCircle}
              size="1x"
            />
          </Switch>
        )}
      </div>
      {hasHelp && showHelp && (
        <blockquote className="font-semibold border-l-4 pl-1 mt-2 mb-3 py-1">
          {userMethod && userMethod.notice && (
            <div className="gap-x-2 mt-1 px-1 font-normal">
              {userMethod.notice}
            </div>
          )}
          {devMethod && devMethod.details && (
            <div className="gap-x-2 mt-1 px-1 font-normal">
              <span className="font-bold italic text-xs mr-2 select-none">
                dev{" "}
              </span>
              {devMethod.details}
            </div>
          )}
        </blockquote>
      )}
    </div>
  );
};

export default FunctionSignature;



================================================
FILE: src/execution/transaction/decoder/InputDecoder.tsx
================================================
import { TabGroup, TabList, TabPanel, TabPanels } from "@headlessui/react";
import { TransactionDescription, toUtf8String } from "ethers";
import React, { useMemo } from "react";
import ModeTab from "../../../components/ModeTab";
import StandardTextarea from "../../../components/StandardTextarea";
import { DevMethod, UserMethod } from "../../../sourcify/useSourcify";
import DecodedParamsTable from "./DecodedParamsTable";
import FunctionSignature from "./FunctionSignature";

type InputDecoderProps = {
  fourBytes: string;
  resolvedTxDesc: TransactionDescription | null | undefined;
  hasParamNames: boolean;
  data: string;
  userMethod: UserMethod | undefined;
  devMethod: DevMethod | undefined;
};

const InputDecoder: React.FC<InputDecoderProps> = ({
  fourBytes,
  resolvedTxDesc,
  hasParamNames,
  data,
  userMethod,
  devMethod,
}) => {
  const utfInput = useMemo(() => {
    try {
      return toUtf8String(data);
    } catch (err) {
      // Silently ignore on purpose
      return undefined;
    }
  }, [data]);

  return (
    <TabGroup>
      <TabList className="mb-1 flex space-x-1">
        <ModeTab disabled={!resolvedTxDesc}>Decoded</ModeTab>
        <ModeTab>Raw</ModeTab>
        <ModeTab disabled={utfInput === undefined}>UTF-8</ModeTab>
      </TabList>
      <TabPanels>
        <TabPanel>
          {fourBytes === "0x" ? (
            <>No parameters</>
          ) : resolvedTxDesc === undefined ? (
            <>Waiting for data...</>
          ) : resolvedTxDesc === null ? (
            <>Can't decode data</>
          ) : (
            <div className="space-y-2">
              <FunctionSignature
                fragment={resolvedTxDesc.fragment}
                userMethod={userMethod}
                devMethod={devMethod}
                className="pt-1"
              />
              <DecodedParamsTable
                args={resolvedTxDesc.args}
                paramTypes={resolvedTxDesc.fragment.inputs}
                hasParamNames={hasParamNames}
                userMethod={userMethod}
                devMethod={devMethod}
              />
            </div>
          )}
        </TabPanel>
        <TabPanel>
          <StandardTextarea value={data} />
        </TabPanel>
        <TabPanel>
          <StandardTextarea value={utfInput} />
        </TabPanel>
      </TabPanels>
    </TabGroup>
  );
};

export default InputDecoder;



================================================
FILE: src/execution/transaction/decoder/OutputDecoder.tsx
================================================
import { TabGroup, TabList, TabPanel, TabPanels } from "@headlessui/react";
import { ParamType, Result } from "ethers";
import React from "react";
import ModeTab from "../../../components/ModeTab";
import StandardTextarea from "../../../components/StandardTextarea";
import { DevMethod } from "../../../sourcify/useSourcify";
import DecodedParamsTable from "./DecodedParamsTable";

type OutputDecoderProps = {
  args: Result | undefined;
  paramTypes: readonly ParamType[] | null | undefined;
  data: string;
  devMethod?: DevMethod;
};

const OutputDecoder: React.FC<OutputDecoderProps> = ({
  args,
  paramTypes,
  data,
  devMethod,
}) => (
  <TabGroup>
    <TabList className="mb-1 flex space-x-1">
      <ModeTab disabled={!paramTypes}>Decoded</ModeTab>
      <ModeTab>Raw</ModeTab>
    </TabList>
    <TabPanels>
      <TabPanel>
        {data === "0x" ? (
          <>No data</>
        ) : paramTypes === undefined || args === undefined ? (
          <>Waiting for data...</>
        ) : paramTypes === null ? (
          <>Can't decode data</>
        ) : (
          <div className="space-y-2">
            <DecodedParamsTable
              args={args}
              paramTypes={paramTypes}
              hasParamNames={true}
              devMethod={devMethod}
              defaultNameBase="ret"
            />
          </div>
        )}
      </TabPanel>
      <TabPanel>
        <StandardTextarea value={data} />
      </TabPanel>
    </TabPanels>
  </TabGroup>
);

export default OutputDecoder;



================================================
FILE: src/execution/transaction/decoder/Uint256Decoder.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import Uint256Decoder from "./Uint256Decoder";

const meta = {
  component: Uint256Decoder,
} satisfies Meta<typeof Uint256Decoder>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Zero: Story = {
  args: {
    r: 0n,
  },
};

export const Max: Story = {
  args: {
    r: BigInt(
      "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
    ),
  },
};



================================================
FILE: src/execution/transaction/decoder/Uint256Decoder.tsx
================================================
import { faSync } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { formatEther, toBeHex, zeroPadValue } from "ethers";
import { FC, memo, useState } from "react";
import DisplayInteger from "../../../components/DisplayInteger";
import { commify } from "../../../utils/utils";

type Uint256DecoderProps = {
  r: any;
};

enum DisplayMode {
  RAW,
  EIGHTEEN_DECIMALS,
  HEX,
  _LAST,
}

const VERY_BIG_NUMBER = 10n ** 36n;

const initDisplayMode = (r: any): DisplayMode => {
  const n = BigInt(r);
  if (n >= VERY_BIG_NUMBER) {
    return DisplayMode.HEX;
  }
  return DisplayMode.RAW;
};

const Uint256Decoder: FC<Uint256DecoderProps> = ({ r }) => {
  const [displayMode, setDisplayMode] = useState<DisplayMode>(
    initDisplayMode(r),
  );

  const toggleModes = () => {
    const next = displayMode + 1;
    setDisplayMode(next === DisplayMode._LAST ? 0 : next);
  };

  return (
    <div className="flex items-baseline space-x-2 font-code">
      <button
        className="flex min-w-max items-baseline space-x-2 rounded-lg bg-gray-50 px-3 py-1 font-sans text-xs text-gray-300 hover:text-gray-500"
        onClick={toggleModes}
      >
        <div>
          <FontAwesomeIcon icon={faSync} size="1x" />
        </div>
        <span>
          {displayMode === DisplayMode.RAW
            ? "Raw"
            : displayMode === DisplayMode.HEX
              ? "Hex"
              : "18 dec"}
        </span>
      </button>
      <span>
        {displayMode === DisplayMode.RAW ? (
          <DisplayInteger numberStr={r.toString()} />
        ) : displayMode === DisplayMode.HEX ? (
          <>{zeroPadValue(toBeHex(r), 32)}</>
        ) : (
          <>{commify(formatEther(r))}</>
        )}
      </span>
    </div>
  );
};

export default memo(Uint256Decoder);



================================================
FILE: src/execution/transaction/log/LogIndex.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import LogIndex from "./LogIndex";

const meta = {
  component: LogIndex,
} satisfies Meta<typeof LogIndex>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Zero: Story = {
  args: {
    idx: 0,
  },
};

export const ThreeDigits: Story = {
  args: {
    idx: 242,
  },
};



================================================
FILE: src/execution/transaction/log/LogIndex.tsx
================================================
import { FC } from "react";
import { Link } from "react-router-dom";

type LogIndexProps = {
  idx: number;
};

const LogIndex: FC<LogIndexProps> = ({ idx }) => (
  <Link
    to={`#${idx}`}
    className="flex h-12 w-12 items-center justify-center rounded-full bg-emerald-50 text-emerald-500 hover:underline"
    id={idx.toString()}
  >
    {idx}
  </Link>
);

export default LogIndex;



================================================
FILE: src/execution/transaction/log/RawLog.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import RawLog from "./RawLog";
import { From, To, Transfer } from "./Topic.stories";

const meta = {
  component: RawLog,
} satisfies Meta<typeof RawLog>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    topics: [Transfer.args.data, From.args.data, To.args.data],
    data: "0x0102030405060708090a0b0c0d0e0f",
  },
};



================================================
FILE: src/execution/transaction/log/RawLog.tsx
================================================
import { FC } from "react";
import StandardTextarea from "../../../components/StandardTextarea";
import Topic from "./Topic";
import TwoColumnPanel from "./TwoColumnPanel";

type RawLogProps = {
  topics: readonly string[];
  data: string;
};

const RawLog: FC<RawLogProps> = ({ topics, data }) => (
  <div className="space-y-2">
    <TwoColumnPanel leftPanel={"Topics"}>
      {topics.map((t, i) => (
        <Topic key={i} idx={i} data={t} />
      ))}
    </TwoColumnPanel>
    <TwoColumnPanel leftPanel="Data">
      <StandardTextarea value={data} />
    </TwoColumnPanel>
  </div>
);

export default RawLog;



================================================
FILE: src/execution/transaction/log/Topic.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import Topic from "./Topic";

const meta = {
  component: Topic,
} satisfies Meta<typeof Topic>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Transfer: Story = {
  args: {
    idx: 0,
    data: "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
  },
};

export const From: Story = {
  args: {
    idx: 1,
    data: "0x000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa96045",
  },
};

export const To: Story = {
  args: {
    idx: 2,
    data: "0x0000000000000000000000000000000000000000000000000000000000000000",
  },
};



================================================
FILE: src/execution/transaction/log/Topic.tsx
================================================
import { FC } from "react";

type TopicProps = {
  idx: number;
  data: string;
};

const Topic: FC<TopicProps> = ({ idx, data }) => (
  <span className="flex items-center space-x-2 font-mono">
    <span className="rounded bg-gray-100 px-2 py-1 text-xs text-gray-500">
      {idx}
    </span>
    <span>{data}</span>
  </span>
);

export default Topic;



================================================
FILE: src/execution/transaction/log/TwoColumnPanel.tsx
================================================
import { FC, PropsWithChildren } from "react";

type TwoColumnProps = {
  leftPanel?: React.ReactNode;
};

const TwoColumnPanel: FC<PropsWithChildren<TwoColumnProps>> = ({
  leftPanel,
  children,
}) => (
  <div className="flex items-baseline space-x-3 text-sm">
    <div className="w-20 text-right">{leftPanel}</div>
    <div className="flex w-full flex-col items-start space-y-2">{children}</div>
  </div>
);

export default TwoColumnPanel;



================================================
FILE: src/kleros/t2crtokens.eth.json
================================================
{
  "name": "Kleros Tokens",
  "logoURI": "ipfs://QmRYXpD8X4sQZwA1E4SJvEjVZpEK1WtSrTqzTWvGpZVDwa",
  "keywords": ["t2cr", "kleros", "list"],
  "timestamp": "2024-02-17T17:06:07.702Z",
  "version": {
    "major": 95,
    "minor": 7,
    "patch": 0
  },
  "tokens": [
    {
      "chainId": 1,
      "address": "0x4da08a1Bff50BE96bdeD5C7019227164b49C2bFc",
      "symbol": "Mononoke-Inu",
      "name": "Mononoke Inu",
      "decimals": 9,
      "logoURI": "ipfs://QmRxpqFfzK6hBbFTagFymqM38RSytycTMNssPnfdaVcmFn"
    },
    {
      "chainId": 1,
      "address": "0xA67E9F021B9d208F7e3365B2A155E3C55B27de71",
      "symbol": "KLEE",
      "name": "KleeKai",
      "decimals": 9,
      "logoURI": "ipfs://QmPe794NnE7FWe4oBVjqMq8YMoihkV1SF6QaUS84XeoUiE"
    },
    {
      "chainId": 1,
      "address": "0x7F3Fe9D492A9a60aEBb06d82cBa23c6F32CAd10b",
      "symbol": "iYFI",
      "name": "Fulcrum YFI iToken",
      "decimals": 18,
      "logoURI": "ipfs://QmUp5wdbAuGJUvpQfuk3NeXDSg6egDkkyQ7qNdV3fQTGFa"
    },
    {
      "chainId": 137,
      "address": "0xC168E40227E4ebD8C1caE80F7a55a4F0e6D66C97",
      "symbol": "DFYN",
      "name": "Dfyn Network",
      "decimals": 18,
      "logoURI": "ipfs://QmddZ8RhepPYAat2of5r6Faton7RbXhvEuusGmpSpwAtX4"
    },
    {
      "chainId": 137,
      "address": "0x6f8a06447Ff6FcF75d803135a7de15CE88C1d4ec",
      "symbol": "SHIB",
      "name": "Shiba Inu",
      "decimals": 18,
      "logoURI": "ipfs://QmZoALsLtigZeqLq5nTAE6qZQPBmWK8pvamZYDkG9sXQ4R"
    },
    {
      "chainId": 1,
      "address": "0x5DE8ab7E27f6E7A1fFf3E5B337584Aa43961BEeF",
      "symbol": "SDEX",
      "name": "SmarDex",
      "decimals": 18,
      "logoURI": "ipfs://Qmc7vLdbMNJYojw82VQBZNvdC6BuXfsBpMyhDis65yRZKT"
    },
    {
      "chainId": 1,
      "address": "0xF4134146AF2d511Dd5EA8cDB1C4AC88C57D60404",
      "symbol": "SNC",
      "name": "SunContract",
      "decimals": 18,
      "logoURI": "ipfs://QmVmWWXiH5yUptGFz2h79oNcJWCFSXiRcGooMQNLE2c1wR"
    },
    {
      "chainId": 1,
      "address": "0x81f8f0bb1cB2A06649E51913A151F0E7Ef6FA321",
      "symbol": "VITA",
      "name": "VitaDAO",
      "decimals": 18,
      "logoURI": "ipfs://QmU9NjPwMhV9kdtNX7M5yNFD1WMFJdSnvQ5Tz3DTsahHNX"
    },
    {
      "chainId": 1,
      "address": "0x6982508145454Ce325dDbE47a25d4ec3d2311933",
      "symbol": "PEPE",
      "name": "Pepe",
      "decimals": 18,
      "logoURI": "ipfs://QmQZ2V8ebiaTh789BWV4ZActPcYovYGuvceVDUvSRb4Yz9"
    },
    {
      "chainId": 56,
      "address": "0xAD29AbB318791D579433D831ed122aFeAf29dcfe",
      "symbol": "FTM",
      "name": "Fantom",
      "decimals": 18,
      "logoURI": "ipfs://QmUqjbFkDVsYFErRTxEdVbcFHxxGyJ4aT4Bac8fqY2yART"
    },
    {
      "chainId": 1,
      "address": "0x255Aa6DF07540Cb5d3d297f0D0D4D84cb52bc8e6",
      "symbol": "RDN",
      "name": "Raiden",
      "decimals": 18,
      "logoURI": "ipfs://QmTGZCkJGBpPLvWC8EFBg8Bsks7H9owB3L3PX8ZTuJYwHy"
    },
    {
      "chainId": 1,
      "address": "0xf29e46887FFAE92f1ff87DfE39713875Da541373",
      "symbol": "UNC",
      "name": "UniCrypt",
      "decimals": 18,
      "logoURI": "ipfs://QmTmB5z7GjuFmwDNarwyVdk5W5xKZvhseACmed14timpLh"
    },
    {
      "chainId": 137,
      "address": "0xE0B52e49357Fd4DAf2c15e02058DCE6BC0057db4",
      "symbol": "agEUR",
      "name": "agEUR",
      "decimals": 18,
      "logoURI": "ipfs://QmVyaJncpkGuDKsiD8oAPPT7RtKBgBaznFiKuBuzhCgdd6"
    },
    {
      "chainId": 56,
      "address": "0x42981d0bfbAf196529376EE702F2a9Eb9092fcB5",
      "symbol": "SFM",
      "name": "SafeMoon",
      "decimals": 9,
      "logoURI": "ipfs://QmYg28PUMFsG2zXC1zV56HxPuBJWZFkmZKdeT36Dth7z93"
    },
    {
      "chainId": 1,
      "address": "0xFca59Cd816aB1eaD66534D82bc21E7515cE441CF",
      "symbol": "RARI",
      "name": "Rarible",
      "decimals": 18,
      "logoURI": "ipfs://Qmcz5moUax8V14EWsj7GFycWGb9PiY6PciXt2aLNPYGwmC"
    },
    {
      "chainId": 1,
      "address": "0x903560b1CcE601794C584F58898dA8a8b789Fc5d",
      "symbol": "crKP3R",
      "name": "Cream Keep3rV1",
      "decimals": 8,
      "logoURI": "ipfs://Qmf9FJz1F4fLPwDHerGndFvJ2FXBAnsGS5n1b4yiGVpBhh"
    },
    {
      "chainId": 1,
      "address": "0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5",
      "symbol": "cETH",
      "name": "Compound Ether",
      "decimals": 8,
      "logoURI": "ipfs://QmNdML81DxWR8wo7QNGz7qr5dAYd5A3MxUVZDV5jYzTAzL"
    },
    {
      "chainId": 1,
      "address": "0xEE06A81a695750E71a662B51066F2c74CF4478a0",
      "symbol": "DG",
      "name": "Decentral Games",
      "decimals": 18,
      "logoURI": "ipfs://QmVWizj6NtHrmW8wUd1JJTZtRREXzNcVN3thpyLRBphdKF"
    },
    {
      "chainId": 1,
      "address": "0x4f5fa8f2d12e5eB780f6082Dd656C565C48E0f24",
      "symbol": "GUM",
      "name": "Gourmet Galaxy",
      "decimals": 18,
      "logoURI": "ipfs://QmW6tzbujJsqfm5xn4uAJ5odFMWm7TyZGQpyk5Bme5yXMj"
    },
    {
      "chainId": 1,
      "address": "0xdBdb4d16EdA451D0503b854CF79D55697F90c8DF",
      "symbol": "ALCX",
      "name": "Alchemix",
      "decimals": 18,
      "logoURI": "ipfs://QmQ2x1TC2yYMH9TVPcmuPUkg9bDiVLLrMhkWBqwWxfP8so"
    },
    {
      "chainId": 1,
      "address": "0x1A5F9352Af8aF974bFC03399e3767DF6370d82e4",
      "symbol": "OWL",
      "name": "Owl",
      "decimals": 18,
      "logoURI": "ipfs://QmaC5z7xDD8HHMBmeebz66ALBeBNu5zpCK84e45yzYpP28"
    },
    {
      "chainId": 1,
      "address": "0x5845Cd0205b5d43AF695412a79Cf7C1Aeddb060F",
      "symbol": "SHD",
      "name": "ShardingDAO",
      "decimals": 18,
      "logoURI": "ipfs://QmYsCkGQPCZRfwx5ADUEVihY8yDWoKw1F4wL5DKdP9F4ft"
    },
    {
      "chainId": 1,
      "address": "0xd1d2Eb1B1e90B638588728b4130137D262C87cae",
      "symbol": "GALA",
      "name": "Gala",
      "decimals": 8,
      "logoURI": "ipfs://QmYpSWREsM6FFknVoLwEPfoKsLkRmyDLNy8n1LzdGRbrRF"
    },
    {
      "chainId": 56,
      "address": "0x12f31B73D812C6Bb0d735a218c086d44D5fe5f89",
      "symbol": "agEUR",
      "name": "agEUR",
      "decimals": 18,
      "logoURI": "ipfs://QmWg22EVRTLpZ6hcPvgpFpZidKtXLrGkGkEveiFkBKAme8"
    },
    {
      "chainId": 1,
      "address": "0x88dF592F8eb5D7Bd38bFeF7dEb0fBc02cf3778a0",
      "symbol": "TRB",
      "name": "Tellor",
      "decimals": 18,
      "logoURI": "ipfs://QmVTePgFymSvT8qthxiTPNbCgJfNKegRQeTFe78eKjpiAU"
    },
    {
      "chainId": 1,
      "address": "0xFA1a856Cfa3409CFa145Fa4e20Eb270dF3EB21ab",
      "symbol": "IOST",
      "name": "IOST",
      "decimals": 18,
      "logoURI": "ipfs://QmQQ7zmrEcjjQXw6dVUU6L8QPp5DVBw6S3FrGtBuv4tnnM"
    },
    {
      "chainId": 56,
      "address": "0x31471E0791fCdbE82fbF4C44943255e923F1b794",
      "symbol": "PVU",
      "name": "Plant vs Undead",
      "decimals": 18,
      "logoURI": "ipfs://Qmc7uoj3GkPpcVA8ycsZBfRGMThJhdE1TahQQsbWuAiHV9"
    },
    {
      "chainId": 56,
      "address": "0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56",
      "symbol": "BUSD",
      "name": "Binance USD",
      "decimals": 18,
      "logoURI": "ipfs://QmUCSx8qo7kSFcdPJ7gLp9X9pPkue13KUmnL6ZzBZ6ejaQ"
    },
    {
      "chainId": 1,
      "address": "0x39AA39c021dfbaE8faC545936693aC917d5E7563",
      "symbol": "cUSDC",
      "name": "Compound USD Coin",
      "decimals": 8,
      "logoURI": "ipfs://QmcRswXCTrx6UJm4gT5AVUoeRoGbioTBG4udH6Q8BqJyGE"
    },
    {
      "chainId": 137,
      "address": "0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6",
      "symbol": "WBTC",
      "name": "Wrapped Bitcoin",
      "decimals": 8,
      "logoURI": "ipfs://QmWabMBiaCBXDEu1Cc6A6NoLVJZCqd9GWwtTgxentKbeZ4"
    },
    {
      "chainId": 1,
      "address": "0x35fA164735182de50811E8e2E824cFb9B6118ac2",
      "symbol": "eETH",
      "name": "ether.fi Staked ETH",
      "decimals": 18,
      "logoURI": "ipfs://QmU8GPsG97AdsapmbCHKLGePr4L8aj9hGwmM5nW8PwsH5q"
    },
    {
      "chainId": 1,
      "address": "0xE66747a101bFF2dBA3697199DCcE5b743b454759",
      "symbol": "GT",
      "name": "GateToken",
      "decimals": 18,
      "logoURI": "ipfs://QmUvzLbhkdm14Ko9jt8L7qWwyCwgXzhbhWjh77XyeV9t2m"
    },
    {
      "chainId": 56,
      "address": "0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d",
      "symbol": "USDC",
      "name": "USD Coin",
      "decimals": 18,
      "logoURI": "ipfs://QmUQp1wZzr4UREn4AVLkKH5GbwpUCwf9w5VQQJeh1bmThJ"
    },
    {
      "chainId": 1,
      "address": "0x81313f7c5c9C824236c9E4cba3AC4B049986E756",
      "symbol": "HIPPO",
      "name": "HippoFinance",
      "decimals": 18,
      "logoURI": "ipfs://QmWkkoAmR2RH2WuVMGJMTXTLGQ6o9jecpzF8ggEd42mDrk"
    },
    {
      "chainId": 1,
      "address": "0x4da27a545c0c5B758a6BA100e3a049001de870f5",
      "symbol": "stkAAVE",
      "name": "Staked Aave",
      "decimals": 18,
      "logoURI": "ipfs://QmcjgRdQpPPRKCdqf9WzNb3bWC6CPt5UUctFCFULffHwqt"
    },
    {
      "chainId": 1,
      "address": "0xd9b89EEe86B15634c70CaB51BAF85615A4AB91a1",
      "symbol": "LKT",
      "name": "Locklet",
      "decimals": 18,
      "logoURI": "ipfs://QmZYzfg6p95Rc8JymKsVm5tAc9punGBUnTBJEqTKGQPy8L"
    },
    {
      "chainId": 1,
      "address": "0x5BEfBB272290dD5b8521D4a938f6c4757742c430",
      "symbol": "XFI",
      "name": "Xfinance",
      "decimals": 18,
      "logoURI": "ipfs://QmXTbaHEMmT7HTMPUzZCBFKc5tzc9VRPbaeZYKsYuaHvDk"
    },
    {
      "chainId": 1,
      "address": "0x826180541412D574cf1336d22c0C0a287822678A",
      "symbol": "FLIP",
      "name": "Chainflip",
      "decimals": 18,
      "logoURI": "ipfs://Qmcq8a72QgD8TaaTruLKcU1k7Vha34NtQQqLxcvLMTv6ws"
    },
    {
      "chainId": 137,
      "address": "0x6f7C932e7684666C9fd1d44527765433e01fF61d",
      "symbol": "MKR",
      "name": "Maker",
      "decimals": 18,
      "logoURI": "ipfs://QmfAnPxYQrWrEdjzaSi9D1Cn5XRwpPBKYov6JSbvtfcy1j"
    },
    {
      "chainId": 1,
      "address": "0x667102BD3413bFEaa3Dffb48fa8288819E480a88",
      "symbol": "TKX",
      "name": "Tokenize Xchange",
      "decimals": 8,
      "logoURI": "ipfs://QmZkydE3JecjmCTFL7FRBVbT9jhPAddmAPYy2SVWs1oXJq"
    },
    {
      "chainId": 1,
      "address": "0x767FE9EDC9E0dF98E07454847909b5E959D7ca0E",
      "symbol": "ILV",
      "name": "Illuvium",
      "decimals": 18,
      "logoURI": "ipfs://QmVbrxYmsddYUx9VS1sBXLconvN56gaYLzXbFz35om5ykX"
    },
    {
      "chainId": 1,
      "address": "0x3c9d6c1C73b31c837832c72E04D3152f051fc1A9",
      "symbol": "BOR",
      "name": "BoringDAO",
      "decimals": 18,
      "logoURI": "ipfs://QmZimEzofo5RoBD4FJe1oZu46HdL47NpR6kqw2krW2fSf3"
    },
    {
      "chainId": 1,
      "address": "0xA7925aA2A6e4575ab0C74D169f3BC3e03D4C319A",
      "symbol": "BETTER",
      "name": "Better Money",
      "decimals": 4,
      "logoURI": "ipfs://QmQaqdaX1jVNH8LKKJvnS6Wp9XBvipeZLYW1RMXpcx15VJ"
    },
    {
      "chainId": 1,
      "address": "0xeDF6568618A00C6F0908Bf7758A16F76B6E04aF9",
      "symbol": "ARIA20",
      "name": "Arianee",
      "decimals": 18,
      "logoURI": "ipfs://Qmb4oWrtBnQ5U9GEZo76xUiLi6bK1TRfBnxTzM7caBdXGk"
    },
    {
      "chainId": 1,
      "address": "0xC28E27870558cF22ADD83540d2126da2e4b464c2",
      "symbol": "SASHIMI",
      "name": "Sashimi",
      "decimals": 18,
      "logoURI": "ipfs://QmSKsBZ7zj8KQbifkPgnTR35ts4yWwNFTLBRw9TTNciw7C"
    },
    {
      "chainId": 1,
      "address": "0x08d967bb0134F2d07f7cfb6E246680c53927DD30",
      "symbol": "MATH",
      "name": "MATH",
      "decimals": 18,
      "logoURI": "ipfs://QmfW3CMSBMTj4St9YEju5N5WBnkUUhtUKEAJHDUft54JV6"
    },
    {
      "chainId": 137,
      "address": "0x0169eC1f8f639B32Eec6D923e24C2A2ff45B9DD6",
      "symbol": "ALGB",
      "name": "Algebra",
      "decimals": 18,
      "logoURI": "ipfs://QmcD4tifQJXHE9Sabrhen3sJjptMFxzmuja5hHZvNKjmq2"
    },
    {
      "chainId": 100,
      "address": "0xE2e73A1c69ecF83F464EFCE6A5be353a37cA09b2",
      "symbol": "LINK",
      "name": "Chainlink",
      "decimals": 18,
      "logoURI": "ipfs://Qmdn6E15MELheFNupKrMosD9KPDFZ9M3wVKkhCuacT1cVj"
    },
    {
      "chainId": 1,
      "address": "0x51d3e4C0b2c83E62f5d517D250b3e856897d2052",
      "symbol": "SPMK",
      "name": "Space Monkey",
      "decimals": 9,
      "logoURI": "ipfs://QmdLE532KK1tP9Nqpt2f73nNCJVqyyQhCiELWmo7vhV31U"
    },
    {
      "chainId": 1,
      "address": "0xDEf1CA1fb7FBcDC777520aa7f396b4E015F497aB",
      "symbol": "COW",
      "name": "CoW Protocol Token",
      "decimals": 18,
      "logoURI": "ipfs://QmVWGYizJ4eE1fiDjhyZ1ndwASHM91fL77cyM4tzgDy5aW"
    },
    {
      "chainId": 1,
      "address": "0x92eF4FFBfe0Df030837b65d7FcCFE1ABd6549579",
      "symbol": "SWG",
      "name": "Swirge",
      "decimals": 18,
      "logoURI": "ipfs://Qmbe2QqxAienYXdFpDvy8EvXEgvRdfd5aA925aNVyCA4dp"
    },
    {
      "chainId": 1,
      "address": "0xD33526068D116cE69F19A9ee46F0bd304F21A51f",
      "symbol": "RPL",
      "name": "Rocket Pool",
      "decimals": 18,
      "logoURI": "ipfs://QmNSj1BfWphbDaTStW6JvrmnzoEHpFJpPNNczNAheANF4f"
    },
    {
      "chainId": 1,
      "address": "0xCc80C051057B774cD75067Dc48f8987C4Eb97A5e",
      "symbol": "NEC",
      "name": "Nectar",
      "decimals": 18,
      "logoURI": "ipfs://QmNm49AmtkcuocTfQhsffBTCAsBB6NEz6EGwSpzV5e2NNz"
    },
    {
      "chainId": 1,
      "address": "0x16ECCfDbb4eE1A85A33f3A9B21175Cd7Ae753dB4",
      "symbol": "ROUTE",
      "name": "Router Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmQDpwU7MdSaiJUmtybfuzK8x8hquCotCZpRVt7d23Lwtj"
    },
    {
      "chainId": 100,
      "address": "0xcb3231aBA3b451343e0Fddfc45883c842f223846",
      "symbol": "stPNK",
      "name": "Staking PNK",
      "decimals": 18,
      "logoURI": "ipfs://QmT3MPe6E9LQLGMP5RJ8foUJS8eYp4vaYh3mSYW5JvwAZd"
    },
    {
      "chainId": 1,
      "address": "0x4E15361FD6b4BB609Fa63C81A2be19d873717870",
      "symbol": "FTM",
      "name": "Fantom",
      "decimals": 18,
      "logoURI": "ipfs://QmaxPoKBmZYJpXL9GcyT8QsaN7bjb4FJLxHWGTDbjFeTdC"
    },
    {
      "chainId": 100,
      "address": "0x703120F2f2011a0D03A03a531Ac0e84e81F15989",
      "symbol": "UNCL",
      "name": "UNCL",
      "decimals": 18,
      "logoURI": "ipfs://QmdWnNAzfwfmZX64H3Nt2DatWNkA3eJcKcPwYCykwZrWav"
    },
    {
      "chainId": 1,
      "address": "0x7ea9C63E216D5565c3940A2B3d150e59C2907Db3",
      "symbol": "crBBTC",
      "name": "Cream Binance Wrapped BTC",
      "decimals": 8,
      "logoURI": "ipfs://QmXx9iBDAaNs7MoEihWLLGq48FfezGrWSHkHQ5nJsPPWSF"
    },
    {
      "chainId": 1,
      "address": "0x0a50C93c762fDD6E56D86215C24AaAD43aB629aa",
      "symbol": "LGO",
      "name": "LGO",
      "decimals": 8,
      "logoURI": "ipfs://QmdqKZfHJF7rA7VcxDLM1FsFGmQTgwDHHGpLXGYVM3jePA"
    },
    {
      "chainId": 1,
      "address": "0xeED9e4F2450035D6426276a8aA2084966EE3b1bb",
      "symbol": "STEAK",
      "name": "Steaks Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmdWyKVDHRWYj4citGPaHbk88hV1hhb96zhG8syX96UgA7"
    },
    {
      "chainId": 1,
      "address": "0xe541504417670FB76b612B41B4392d967a1956c7",
      "symbol": "BSC",
      "name": "Bitsonic",
      "decimals": 18,
      "logoURI": "ipfs://QmP2S5iJtb6aS6p3FpKXyENXDVaruwpCUEGK298sCE9rAd"
    },
    {
      "chainId": 137,
      "address": "0xD6DF932A45C0f255f85145f286eA0b292B21C90B",
      "symbol": "AAVE",
      "name": "Aave",
      "decimals": 18,
      "logoURI": "ipfs://QmWZmCpB1yJS3qzFVxRQDWB63zFKJq9UmBae25Y5ijj7ma"
    },
    {
      "chainId": 1,
      "address": "0x8888801aF4d980682e47f1A9036e589479e835C5",
      "symbol": "MPH",
      "name": "88mph",
      "decimals": 18,
      "logoURI": "ipfs://QmaUQBpvFAooSdmYme5sDEvbRZ3Bn3d23m5eX8jzLWofVe"
    },
    {
      "chainId": 1,
      "address": "0x609c711783295209d9f33F535A7cA55B8FF87Af2",
      "symbol": "TOLL",
      "name": "Toll Free Swap",
      "decimals": 18,
      "logoURI": "ipfs://QmTexmxQtH2SnaH5UT9Z2FaYcVniCUhtrvWBfydpwyA5Tp"
    },
    {
      "chainId": 100,
      "address": "0x532801ED6f82FFfD2DAB70A19fC2d7B2772C4f4b",
      "symbol": "SWPR",
      "name": "Swapr",
      "decimals": 18,
      "logoURI": "ipfs://QmXeUKr6JoBmNnyerR2pLMRJqM1Vibo7DjGaBFpjnpAMvq"
    },
    {
      "chainId": 1,
      "address": "0x147E3d644d53ADadD18a28201b91e2B98aEB7f94",
      "symbol": "USE",
      "name": "ElenaUSD",
      "decimals": 18,
      "logoURI": "ipfs://QmSkicuotobqabcHBL3q5AFV2XNXUimeCER1nHLpaPk9tN"
    },
    {
      "chainId": 1,
      "address": "0xb78B3320493a4EFaa1028130C5Ba26f0B6085Ef8",
      "symbol": "DRC",
      "name": "Dracula Token",
      "decimals": 18,
      "logoURI": "ipfs://QmQksi9q89SjXpR7y9waLp9rANst3EvTE7d8BZ8PM17k4G"
    },
    {
      "chainId": 1,
      "address": "0x00c83aeCC790e8a4453e5dD3B0B4b3680501a7A7",
      "symbol": "SKL",
      "name": "SKALE",
      "decimals": 18,
      "logoURI": "ipfs://Qmby2JvN2h9XzGtF3e1awG8Zhfeuqrs1iR8krjBrs8WGuW"
    },
    {
      "chainId": 1,
      "address": "0xA8580F3363684d76055bdC6660CaeFe8709744e1",
      "symbol": "FOL",
      "name": "Folder Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmSMZia8aKTB5jv3T2Tc7V3RPhC8x4S4duK98WeZdXn8JJ"
    },
    {
      "chainId": 1,
      "address": "0x697eF32B4a3F5a4C39dE1cB7563f24CA7BfC5947",
      "symbol": "ISLA",
      "name": "Insula",
      "decimals": 18,
      "logoURI": "ipfs://QmYqhR1ALvH8iSN39qZurpkjTQ63aMD75c76e5fe8adv6A"
    },
    {
      "chainId": 1,
      "address": "0xA54C67bd320Da4F9725a6f585b7635a0c09B122e",
      "symbol": "TIME",
      "name": "TimeMiner",
      "decimals": 6,
      "logoURI": "ipfs://QmetutbaP8Xnfhba2MFHAx6nbmQpdimP7nb65CxzpZ4TPP"
    },
    {
      "chainId": 1,
      "address": "0x18240BD9C07fA6156Ce3F3f61921cC82b2619157",
      "symbol": "iBZRX",
      "name": "Fulcrum BZRX iToken",
      "decimals": 18,
      "logoURI": "ipfs://Qmcw5JiJzMpj9LfogA4WmVgkDFD1jY58zbMJJruuviQWG2"
    },
    {
      "chainId": 1,
      "address": "0x176C674Ee533C6139B0dc8b458D72A93dCB3e705",
      "symbol": "iAAVE",
      "name": "Synthetic Inverse Aave",
      "decimals": 18,
      "logoURI": "ipfs://QmfR8tQeZqQyuic4KBYiR94xmj1B1AocGRPN6bbndQNzpg"
    },
    {
      "chainId": 1,
      "address": "0xe3c408BD53c31C085a1746AF401A4042954ff740",
      "symbol": "GMT",
      "name": "STEPN",
      "decimals": 8,
      "logoURI": "ipfs://QmaXgp7LnvKbQ64Bb3P1e92Cju9KNbxzwzdLaLqb7nrUUW"
    },
    {
      "chainId": 1,
      "address": "0xaaAEBE6Fe48E54f431b0C390CfaF0b017d09D42d",
      "symbol": "CEL",
      "name": "Celsius",
      "decimals": 4,
      "logoURI": "ipfs://QmZh8NKheUQj7yojD8UyNz38Fxiqr5tdF6LPs4EEGqdCQ8"
    },
    {
      "chainId": 1,
      "address": "0x3F09400313e83d53366147e3ea0e4e2279D80850",
      "symbol": "KSEED",
      "name": "Kush Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmeuQRfdsMi6WxCdUkgug7g6zJwobQTRBdC5j6myTGbhKw"
    },
    {
      "chainId": 1,
      "address": "0xd9B48548DE7710519221207D70E40aa24D7d1985",
      "symbol": "BOOTY",
      "name": "CandyBooty",
      "decimals": 9,
      "logoURI": "ipfs://QmSB2a89HyhCBQBTzjNPkYsrRvA2GEpgdHgkcV5RKrzkbp"
    },
    {
      "chainId": 1,
      "address": "0x0316EB71485b0Ab14103307bf65a021042c6d380",
      "symbol": "HBTC",
      "name": "Huobi BTC",
      "decimals": 18,
      "logoURI": "ipfs://Qmch2xhmSnXqfhP3K3h9hueX7wWuK7whuC4PiXLEFvoj4B"
    },
    {
      "chainId": 1,
      "address": "0xdd690D8824c00C84d64606FFb12640e932C1AF56",
      "symbol": "TAVITT",
      "name": "Tavittcoin",
      "decimals": 8,
      "logoURI": "ipfs://QmRowFTSR5xVjaeJHk3qnLBgY52J6Ak4M3sHQAugCKHvRE"
    },
    {
      "chainId": 1,
      "address": "0x8A8079c7149B8A1611e5C5d978DCA3bE16545F83",
      "symbol": "iADA",
      "name": "Synthetic Inverse Cardano",
      "decimals": 18,
      "logoURI": "ipfs://QmVW2g6Zk66n97StujQtcM2cwMDLiVRczrCwKUdNLTtgaE"
    },
    {
      "chainId": 1,
      "address": "0xd82Df0ABD3f51425Eb15ef7580fDA55727875f14",
      "symbol": "DAV",
      "name": "DAV",
      "decimals": 18,
      "logoURI": "ipfs://QmdBSV6NDmYbWs5T2PvN31JaP91uVtmLo7KX72AyASNFgQ"
    },
    {
      "chainId": 1,
      "address": "0xD850942eF8811f2A866692A623011bDE52a462C1",
      "symbol": "VEN",
      "name": "VeChain",
      "decimals": 18,
      "logoURI": "ipfs://QmYeY7UXjY44rb749N7hW335upa81CzoPAmsvKTfBcYJhc"
    },
    {
      "chainId": 1,
      "address": "0xe0cCa86B254005889aC3a81e737f56a14f4A38F5",
      "symbol": "ALTA",
      "name": "Alta Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmQYCjD2vHB5S3ZqXyQmR6MuJXSh78U4v2R4Q6YNhSfXgk"
    },
    {
      "chainId": 1,
      "address": "0xea6412Fb370e8d1605E6aEeAA21aD07C3C7e9F24",
      "symbol": "MUSH",
      "name": "Mushroom",
      "decimals": 18,
      "logoURI": "ipfs://QmQNxXCBwyqPfYS3vcZkQiCfQbtMeSy1WNFk1oSJvZ4bXb"
    },
    {
      "chainId": 1,
      "address": "0x6AA493050427c7AF81D38F19Fd6b4f5DD3a75E3B",
      "symbol": "GDOG",
      "name": "GoldenDog",
      "decimals": 18,
      "logoURI": "ipfs://Qmcg3pHXixTCpJgvAeZG1cbiPDtdAnGa2HvxY39ts7qjDK"
    },
    {
      "chainId": 1,
      "address": "0x19062190B1925b5b6689D7073fDfC8c2976EF8Cb",
      "symbol": "BZZ",
      "name": "Swarm",
      "decimals": 16,
      "logoURI": "ipfs://QmXvMXR4s3i7u9Ush2297AS3sN8d4KsjKzjyyLFFYg81yu"
    },
    {
      "chainId": 1,
      "address": "0xDE72a052cBB212eFf11A4A33d61dF9C5A2De8dd1",
      "symbol": "ShunaV2",
      "name": "Shuna Inuverse",
      "decimals": 9,
      "logoURI": "ipfs://QmYYy5tXZWRNSZVZmCAz61DKghEYoX2WwfqiH1kSLdEkvK"
    },
    {
      "chainId": 1,
      "address": "0xE33AE4E795114279721047484E5ad5cc7DF24fcB",
      "symbol": "MCF",
      "name": "MCFinance",
      "decimals": 10,
      "logoURI": "ipfs://QmXsYVwYb7p6TXPM2JgNK3aYr3U9L1sP6FgyNVNHEK6vGF"
    },
    {
      "chainId": 1,
      "address": "0x15Eabb7500E44B7Fdb6e4051cA8DecA430cF9FB8",
      "symbol": "DXF",
      "name": "Dexfin",
      "decimals": 18,
      "logoURI": "ipfs://QmNdMJjdsUj1CLDUfCZKER7LsAdPqUtUx6UHZK2kEu8mfe"
    },
    {
      "chainId": 56,
      "address": "0x55d398326f99059fF775485246999027B3197955",
      "symbol": "USDT",
      "name": "Tether",
      "decimals": 18,
      "logoURI": "ipfs://Qmd9YVdtaXDZuMmeChdpK4LfizyLkBbVijpLyXGSNwFGEz"
    },
    {
      "chainId": 1,
      "address": "0x9041Fe5B3FDEA0f5e4afDC17e75180738D877A01",
      "symbol": "PRA",
      "name": "ProChain",
      "decimals": 18,
      "logoURI": "ipfs://QmSAKnVdLhPEh1GsXA3G6WACWf1LrmRMPtqr6rgNsGmToy"
    },
    {
      "chainId": 100,
      "address": "0x7ecF26cd9A36990b8ea477853663092333f59979",
      "symbol": "PERP",
      "name": "Perpetual Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmYQ4fHJzGnifyXQBCdVLACBcRQitnp25CRpAtfYJkmDjX"
    },
    {
      "chainId": 1,
      "address": "0x048Fe49BE32adfC9ED68C37D32B5ec9Df17b3603",
      "symbol": "SKM",
      "name": "Skrumble Network",
      "decimals": 18,
      "logoURI": "ipfs://QmTT9k5rjbuXuWjbK3L9KEK5THdgbFiFDiinyQLBzoRnyM"
    },
    {
      "chainId": 1,
      "address": "0x515d7E9D75E2b76DB60F8a051Cd890eBa23286Bc",
      "symbol": "GDAO",
      "name": "Governor DAO",
      "decimals": 18,
      "logoURI": "ipfs://QmdaK91bZskcoPAvT6qhQFWCqm1mngk6FTaXbmETuVq2kT"
    },
    {
      "chainId": 1,
      "address": "0xE5Dada80Aa6477e85d09747f2842f7993D0Df71C",
      "symbol": "DOCK",
      "name": "Dock",
      "decimals": 18,
      "logoURI": "ipfs://QmZsAFfsAnpBkT2wvBnBc63V95M723uXqewmhWnTuNTHHS"
    },
    {
      "chainId": 1,
      "address": "0x6e36556B3ee5Aa28Def2a8EC3DAe30eC2B208739",
      "symbol": "BUILD",
      "name": "BUILD Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmdH5edd5GotRwmA3tG9ER15qMUSagVDiZZ5m5PXfr4eGa"
    },
    {
      "chainId": 1,
      "address": "0x27269b3e45A4D3E79A3D6BFeE0C8fB13d0D711A6",
      "symbol": "iXRP",
      "name": "Synthetic Inverse Ripple",
      "decimals": 18,
      "logoURI": "ipfs://QmTHQxS7VYckTXACuSV5jupBZM57MBZA9KTYQvGgT3W1tn"
    },
    {
      "chainId": 137,
      "address": "0x8A953CfE442c5E8855cc6c61b1293FA648BAE472",
      "symbol": "PolyDoge",
      "name": "PolyDoge",
      "decimals": 18,
      "logoURI": "ipfs://QmV14aX7LZe7y7nP1WMBoDmJpRLDak3Hq6b1KY2wx81qY1"
    },
    {
      "chainId": 1,
      "address": "0xe03B2642A5111aD0EFc0cbCe766498c2dd562Ae9",
      "symbol": "BC",
      "name": "Old Bitcoin",
      "decimals": 9,
      "logoURI": "ipfs://QmTxkif8cpxCdNY8oKPV5pjryWovn1PaAfo3A1atDywkzo"
    },
    {
      "chainId": 1,
      "address": "0xBC86727E770de68B1060C91f6BB6945c73e10388",
      "symbol": "XNK",
      "name": "Ink Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmSNXeiXeH5w9KDJoAio7qVHPQrNNZb7NEXHs1rjcYq4Xf"
    },
    {
      "chainId": 1,
      "address": "0x808507121B80c02388fAd14726482e061B8da827",
      "symbol": "PENDLE",
      "name": "Pendle",
      "decimals": 18,
      "logoURI": "ipfs://Qmb14CmURbbr29FNYXpQDi1yDNuPg6ASuHPhKJgce94pT5"
    },
    {
      "chainId": 1,
      "address": "0x86D49fbD3B6f989d641E700a15599d3b165002AB",
      "symbol": "HUH",
      "name": "HUH Token",
      "decimals": 9,
      "logoURI": "ipfs://QmfRQi5M3Ssxwnoj7rkc7Huu7rrU5uiEBH648AAxCQRSdB"
    },
    {
      "chainId": 1,
      "address": "0x23696914Ca9737466D8553a2d619948f548Ee424",
      "symbol": "stkTRU",
      "name": "Staked TrueFi",
      "decimals": 18,
      "logoURI": "ipfs://QmeL8UXYBDu28kT2o6Agacbtp39o6RutsdroLkJdota2sY"
    },
    {
      "chainId": 137,
      "address": "0xc6C855AD634dCDAd23e64DA71Ba85b8C51E5aD7c",
      "symbol": "ICE",
      "name": "Decentral Games ICE",
      "decimals": 18,
      "logoURI": "ipfs://QmTcgtGRzwgartdXdA25bPq4M47p7p1FqDMhnn1KXju4ac"
    },
    {
      "chainId": 56,
      "address": "0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82",
      "symbol": "CAKE",
      "name": "PancakeSwap",
      "decimals": 18,
      "logoURI": "ipfs://QmRkkScJSS849mYdwbvrSyoYUq2WDtofXH4NmPPN67Ut4A"
    },
    {
      "chainId": 1,
      "address": "0xa8006C4ca56F24d6836727D106349320dB7fEF82",
      "symbol": "INXT",
      "name": "Internxt",
      "decimals": 8,
      "logoURI": "ipfs://QmT7crc2aNYQbNNxaWjqqY9QynYpmJN6sQDdf749bnjcjh"
    },
    {
      "chainId": 137,
      "address": "0x5fe2B58c013d7601147DcdD68C143A77499f5531",
      "symbol": "GRT",
      "name": "The Graph",
      "decimals": 18,
      "logoURI": "ipfs://QmaCTcJ7pLUgdjdXeZkubcRsGnyT73fvPBsgPLWMZevCfd"
    },
    {
      "chainId": 1,
      "address": "0xb0dFd28d3CF7A5897C694904Ace292539242f858",
      "symbol": "LOTTO",
      "name": "Lotto",
      "decimals": 18,
      "logoURI": "ipfs://QmfUcCcLdWtA17bmsi5eUPKpBFztnfnHbUad5PHZruD4kq"
    },
    {
      "chainId": 1,
      "address": "0x4355fC160f74328f9b383dF2EC589bB3dFd82Ba0",
      "symbol": "OPT",
      "name": "OPUS",
      "decimals": 18,
      "logoURI": "ipfs://Qmcm29pMYCpw3qptFdMa8hEiLXPb3Uazhu83JtPsKeiJ95"
    },
    {
      "chainId": 1,
      "address": "0x56015BBE3C01fE05bc30A8a9a9Fd9A88917e7dB3",
      "symbol": "CAT",
      "name": "Cat Token",
      "decimals": 18,
      "logoURI": "ipfs://QmULFVfSZeuisib8P6qxtCog62RbGGLejcNSYNHjv88KmR"
    },
    {
      "chainId": 137,
      "address": "0xf2f77FE7b8e66571E0fca7104c4d670BF1C8d722",
      "symbol": "jBRL",
      "name": "Jarvis Synthetic Brazilian Real",
      "decimals": 18,
      "logoURI": "ipfs://QmRxdK4TQ9NE92nZX9PkWZRx8Fe4qHsRpCng35fU8uRKrm"
    },
    {
      "chainId": 1,
      "address": "0x249e38Ea4102D0cf8264d3701f1a0E39C4f2DC3B",
      "symbol": "UFO",
      "name": "The Truth",
      "decimals": 18,
      "logoURI": "ipfs://QmWhqPfACRPAxN9zAB2TFfZk6xij6gNRQMPv4WMAMxqA9u"
    },
    {
      "chainId": 1,
      "address": "0x3c5DF3077BcF800640B5DAE8c91106575a4826E6",
      "symbol": "yvCurve-pBTC",
      "name": "Curve pBTC Pool yVault",
      "decimals": 18,
      "logoURI": "ipfs://QmdJiyzi3DSTeVg7beeRuau9wChpG5RQnvUptcqwzvH8Tj"
    },
    {
      "chainId": 1,
      "address": "0xDC59ac4FeFa32293A95889Dc396682858d52e5Db",
      "symbol": "BEAN",
      "name": "Bean",
      "decimals": 6,
      "logoURI": "ipfs://QmNdYKXQzrykpaJdAvn8syjiZA8pwjwQGgPDP4TvYtSuGx"
    },
    {
      "chainId": 250,
      "address": "0x04068DA6C83AFCFA0e13ba15A6696662335D5B75",
      "symbol": "USDC",
      "name": "USD Coin",
      "decimals": 6,
      "logoURI": "ipfs://QmWbGfqePP3uAvPNHdYSP69aDznHGknsypTPRaiJT9NZF8"
    },
    {
      "chainId": 1,
      "address": "0x4aF4C553b4d47Eb5A5810d44bC1998a6Fc273FF5",
      "symbol": "MINE",
      "name": "The Official MINE Token",
      "decimals": 9,
      "logoURI": "ipfs://QmUKN7viQKkLfAVW9ijJC8BBwi32atCYcvhT9G5WLeAHUY"
    },
    {
      "chainId": 1,
      "address": "0x4156D3342D5c385a87D264F90653733592000581",
      "symbol": "SALT",
      "name": "SALT",
      "decimals": 8,
      "logoURI": "ipfs://Qme82cayc5xaNNeUrNP5xCdNYQRU2eujtC52MDr3nz7BTF"
    },
    {
      "chainId": 43114,
      "address": "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
      "symbol": "USDC",
      "name": "USD Coin",
      "decimals": 6,
      "logoURI": "ipfs://QmWbGfqePP3uAvPNHdYSP69aDznHGknsypTPRaiJT9NZF8"
    },
    {
      "chainId": 1,
      "address": "0xd2dF355C19471c8bd7D8A3aa27Ff4e26A21b4076",
      "symbol": "sAAVE",
      "name": "Synthetic Aave",
      "decimals": 18,
      "logoURI": "ipfs://QmNNGEuyuuq1fJQtGuwyQZM1MwTHGAwWhjzJ3EJKtz4ZDV"
    },
    {
      "chainId": 1,
      "address": "0x0198f46f520F33cd4329bd4bE380a25a90536CD5",
      "symbol": "PLA",
      "name": "PlayChip",
      "decimals": 18,
      "logoURI": "ipfs://QmUdFoChuEwwNAQdvQKMzyqAyfMiTnVwrtbGbbwmQkR1Ab"
    },
    {
      "chainId": 1,
      "address": "0x0f51bb10119727a7e5eA3538074fb341F56B09Ad",
      "symbol": "DAO",
      "name": "DAO Maker",
      "decimals": 18,
      "logoURI": "ipfs://QmXFYWGruYGapJjmBHUsLmycCzoSNWQTofUmfd2qbMUzvW"
    },
    {
      "chainId": 1,
      "address": "0x69af81e73A73B40adF4f3d4223Cd9b1ECE623074",
      "symbol": "MASK",
      "name": "Mask Network",
      "decimals": 18,
      "logoURI": "ipfs://QmZd3hATUb7nyMmmwVGkuMhkBQ97WgKRNv3Kgv3JitR6s4"
    },
    {
      "chainId": 1,
      "address": "0xaD22f63404f7305e4713CcBd4F296f34770513f4",
      "symbol": "AWC",
      "name": "Atomic Wallet Coin",
      "decimals": 8,
      "logoURI": "ipfs://QmUAbNRhG4f7wfaYYuRY44FTwTmk4Q3YY97CCGL5hpuUgb"
    },
    {
      "chainId": 1,
      "address": "0xD31533E8d0f3DF62060e94B3F1318137bB6E3525",
      "symbol": "sREN",
      "name": "Synthetic Ren",
      "decimals": 18,
      "logoURI": "ipfs://QmRfmd1cBAq9RrPxqWBGr6zxA6ewgiA6WbX1JwaCdquyS4"
    },
    {
      "chainId": 1,
      "address": "0x0d438F3b5175Bebc262bF23753C1E53d03432bDE",
      "symbol": "wNXM",
      "name": "Wrapped NXM",
      "decimals": 18,
      "logoURI": "ipfs://QmYd9eTThkScxrskxfZRuH5k8TCKiYF27XCG8wDZHrujFM"
    },
    {
      "chainId": 1,
      "address": "0x00a8b738E453fFd858a7edf03bcCfe20412f0Eb0",
      "symbol": "ALBT",
      "name": "AllianceBlock",
      "decimals": 18,
      "logoURI": "ipfs://QmbYVpAxw5YtVsZZ48eMRCt62Rpb3muzGGfigvLG81F5Q8"
    },
    {
      "chainId": 1,
      "address": "0x028171bCA77440897B824Ca71D1c56caC55b68A3",
      "symbol": "aDAI",
      "name": "Aave DAI",
      "decimals": 18,
      "logoURI": "ipfs://QmQ7mmAnpuACaZorNWmZ3yRjcxcR4y1Fqk9BAGJ2ZhMScz"
    },
    {
      "chainId": 1,
      "address": "0xEB9A4B185816C354dB92DB09cC3B50bE60b901b6",
      "symbol": "ORS",
      "name": "Origin Sport",
      "decimals": 18,
      "logoURI": "ipfs://QmSbwSCBMYKjG4MxiujCfThVYSmufMJhp4d4bi8HpUPhHh"
    },
    {
      "chainId": 1,
      "address": "0x30D20208d987713f46DFD34EF128Bb16C404D10f",
      "symbol": "SD",
      "name": "Stader",
      "decimals": 18,
      "logoURI": "ipfs://QmaUWWwauRDLLRY94d1wf1MikX4pyTy8P3qtCLsZzk1H34"
    },
    {
      "chainId": 10,
      "address": "0x94b008aA00579c1307B0EF2c499aD98a8ce58e58",
      "symbol": "USDT",
      "name": "Tether",
      "decimals": 6,
      "logoURI": "ipfs://Qmb3xCbcXGs8pa1YMvmHvN4dyadcaUkW7ZDy9mZL7pZ4aF"
    },
    {
      "chainId": 1,
      "address": "0x779492d3644dDF4495Aa2d80C468E1B7be6AF1d2",
      "symbol": "CAS",
      "name": "CAS Coin",
      "decimals": 2,
      "logoURI": "ipfs://QmTdB9WRbsy1DRJWAZjkMPsujBqeVXqwoeCTC2cBfdCHeM"
    },
    {
      "chainId": 1,
      "address": "0x1BaFfbc23f2246040cCE12F7a140C38c5DC73e46",
      "symbol": "PIB",
      "name": "Passive Income Bot",
      "decimals": 18,
      "logoURI": "ipfs://QmP3hk8jfKmXrLZiQVmSB7qtTq9f9q79rBBTmVy4ioyS1k"
    },
    {
      "chainId": 10,
      "address": "0x395Ae52bB17aef68C2888d941736A71dC6d4e125",
      "symbol": "POOL",
      "name": "PoolTogether",
      "decimals": 18,
      "logoURI": "ipfs://Qmd1f4NaF27puWeZ87fgymsr8co79Ue2obzH9QumYtjzkn"
    },
    {
      "chainId": 1,
      "address": "0xBA11D00c5f74255f56a5E366F4F77f5A186d7f55",
      "symbol": "BAND",
      "name": "Band Protocol",
      "decimals": 18,
      "logoURI": "ipfs://Qmf6DjJq81F4BVvXarrNvTai9zmeuPJL9E4mqV34so9DYr"
    },
    {
      "chainId": 100,
      "address": "0x7838796B6802B18D7Ef58fc8B757705D6c9d12b3",
      "symbol": "MANA",
      "name": "Decentraland",
      "decimals": 18,
      "logoURI": "ipfs://QmY18MUVBQbY22cM9gRxub76EqqdHMiNydGkfoR1fBarEo"
    },
    {
      "chainId": 1,
      "address": "0x0DB8D8b76BC361bAcbB72E2C491E06085A97Ab31",
      "symbol": "IQN",
      "name": "IQeon",
      "decimals": 18,
      "logoURI": "ipfs://Qmc5LATEukPUtLzFzGeLjVs2DUJkm7qvBMabJ53zSC6Lgb"
    },
    {
      "chainId": 1,
      "address": "0x763186eB8d4856D536eD4478302971214FEbc6A9",
      "symbol": "BETR",
      "name": "BetterBetting",
      "decimals": 18,
      "logoURI": "ipfs://QmYpNwc4kJCFMtNezuU6qzAf4VAuVqtPTJBRHHDp5Q3ii5"
    },
    {
      "chainId": 1,
      "address": "0x74b1Af114274335598da72f5C6ed7b954a016EeD",
      "symbol": "HIT",
      "name": "HitBTC Token",
      "decimals": 18,
      "logoURI": "ipfs://QmfKUmsdWkrn2x13dbWKDZNcqtTvJjeUXp1AZqUnmwvu9g"
    },
    {
      "chainId": 1,
      "address": "0xcAfE001067cDEF266AfB7Eb5A286dCFD277f3dE5",
      "symbol": "PSP",
      "name": "ParaSwap",
      "decimals": 18,
      "logoURI": "ipfs://QmNjaNg3ou6QUGQ1qqtpjPgAJAgxNmtumBYrpNyA3hqyrN"
    },
    {
      "chainId": 1,
      "address": "0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0",
      "symbol": "FXS",
      "name": "Frax Share",
      "decimals": 18,
      "logoURI": "ipfs://QmTyd9iks8MwhuZjNaBMsZA22ihbiUCbzSo6s8q3LBZfwa"
    },
    {
      "chainId": 1,
      "address": "0x049e119413aB1f1b0fd836e657e3e4BA3ad9CaB8",
      "symbol": "KSF",
      "name": "Kesef.Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmdXhruDLRbHKSnvXwy6Xf5wdj1nmF8ckREiz5aZdU8KeV"
    },
    {
      "chainId": 10,
      "address": "0xFE8B128bA8C78aabC59d4c64cEE7fF28e9379921",
      "symbol": "BAL",
      "name": "Balancer",
      "decimals": 18,
      "logoURI": "ipfs://QmVkdh1F8BoNDvZQ4EAw6kzeMSpPibEvtrJJLVbZyK1dx2"
    },
    {
      "chainId": 1,
      "address": "0x42891d10B550d0c5C4ac2e17bcD7E2A19C7230f0",
      "symbol": "DXH",
      "name": "Daxhund",
      "decimals": 18,
      "logoURI": "ipfs://QmZKhY7phBNTyNNrwZ4tbJJXWmDtffY3991tcmuZKGiTot"
    },
    {
      "chainId": 56,
      "address": "0x715D400F88C167884bbCc41C5FeA407ed4D2f8A0",
      "symbol": "AXS",
      "name": "Axie Infinity",
      "decimals": 18,
      "logoURI": "ipfs://Qma5gXpmfTK1Ja4AwaYNyAQrxsu3fEQXj8Kqa3W2jyD5uw"
    },
    {
      "chainId": 1,
      "address": "0x77777FeDdddFfC19Ff86DB637967013e6C6A116C",
      "symbol": "TORN",
      "name": "Tornado Cash",
      "decimals": 18,
      "logoURI": "ipfs://QmUsMaj5mG8wmWxrgVQnzKWvLBLYU48ZiCJK8L2HE2cj1i"
    },
    {
      "chainId": 1,
      "address": "0x37E8789bB9996CaC9156cD5F5Fd32599E6b91289",
      "symbol": "AID",
      "name": "AidCoin",
      "decimals": 18,
      "logoURI": "ipfs://QmQq4XpqC6JMt5DDsp1mN5nKxfAbnSXRKK5gPrsDfPLEV1"
    },
    {
      "chainId": 1,
      "address": "0xB3319f5D18Bc0D84dD1b4825Dcde5d5f7266d407",
      "symbol": "cZRX",
      "name": "Compound 0x",
      "decimals": 8,
      "logoURI": "ipfs://QmRJPdKidsYZd6opEv8nspUygzvE4QFR4ZnxfAUMV5KRDE"
    },
    {
      "chainId": 1,
      "address": "0x31f3D9D1BeCE0c033fF78fA6DA60a6048F3E13c5",
      "symbol": "EBC",
      "name": "EBCoin",
      "decimals": 18,
      "logoURI": "ipfs://QmPTbm1Vq8ecxYz5EXPWSnaPQ24T4ZFk4RBbqQ6NjdqcZf"
    },
    {
      "chainId": 1,
      "address": "0xf911a7ec46a2c6fa49193212fe4a2a9B95851c27",
      "symbol": "XAMP",
      "name": "Antiample",
      "decimals": 9,
      "logoURI": "ipfs://QmX2E3cvuYNuYze5gVzGrATQKBmtQVbM1XUzAAu3Vtgy33"
    },
    {
      "chainId": 1,
      "address": "0xe3Cb486f3f5C639e98cCBaF57d95369375687F80",
      "symbol": "renDGB",
      "name": "renDGB",
      "decimals": 8,
      "logoURI": "ipfs://QmS2VLkPDD73ugtPLLsP2ZJt65pvGjR1v1D4DAprBdJ8P8"
    },
    {
      "chainId": 1,
      "address": "0xF57e7e7C23978C3cAEC3C3548E3D615c346e79fF",
      "symbol": "IMX",
      "name": "Immutable X",
      "decimals": 18,
      "logoURI": "ipfs://QmX9pbEUjpYc2ECCRqeqmJuHzdzdhC15Gob2VW1g9bcNhx"
    },
    {
      "chainId": 1,
      "address": "0x27054b13b1B798B345b591a4d22e6562d47eA75a",
      "symbol": "AST",
      "name": "AirSwap",
      "decimals": 4,
      "logoURI": "ipfs://QmVgPYTYTjSkdLVXswM3xM9baRtqAjE6LB57etqbkAkjho"
    },
    {
      "chainId": 56,
      "address": "0xB0D502E938ed5f4df2E681fE6E419ff29631d62b",
      "symbol": "STG",
      "name": "Stargate Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmNZ1QbyLSB716ycPc7orcFa1FaVc9P7SrG2Ef2TuZinmt"
    },
    {
      "chainId": 56,
      "address": "0xa050FFb3eEb8200eEB7F61ce34FF644420FD3522",
      "symbol": "ARB",
      "name": "Arbitrum",
      "decimals": 18,
      "logoURI": "ipfs://QmdzPaPoFE9o221RAKfjCRW7KzUQBeKohFE5MFQMvhGzjd"
    },
    {
      "chainId": 1,
      "address": "0xdAC17F958D2ee523a2206206994597C13D831ec7",
      "symbol": "USDT",
      "name": "Tether",
      "decimals": 6,
      "logoURI": "ipfs://QmfGmBRAtNuZ6RmUkqqu9Pk1Qb5psNzRmhDLKR5iy6ZGTS"
    },
    {
      "chainId": 1,
      "address": "0xa5Fd1A791C4dfcaacC963D4F73c6Ae5824149eA7",
      "symbol": "JNT",
      "name": "Jibrel Network",
      "decimals": 18,
      "logoURI": "ipfs://QmW6FsgbajFqoGBiRUwiDtKoiSHG6JP4eJfEtyDSGZpzUV"
    },
    {
      "chainId": 1,
      "address": "0xCb5f72d37685C3D5aD0bB5F982443BC8FcdF570E",
      "symbol": "ROOT",
      "name": "Rootkit",
      "decimals": 18,
      "logoURI": "ipfs://QmV2XDNb7cS9bpGnUM6CFAdBtmbYoT9JzTW7rmjNdZPLSK"
    },
    {
      "chainId": 1,
      "address": "0xa3BeD4E1c75D00fa6f4E5E6922DB7261B5E9AcD2",
      "symbol": "MTA",
      "name": "Meta",
      "decimals": 18,
      "logoURI": "ipfs://QmbJZEkVEHnSQtf1rWTKfaACZvXq7DnNt2WPh4peeyGZAa"
    },
    {
      "chainId": 1,
      "address": "0x57B946008913B82E4dF85f501cbAeD910e58D26C",
      "symbol": "POND",
      "name": "Marlin",
      "decimals": 18,
      "logoURI": "ipfs://QmRY1eRQ5KcuFuk1wQ7cqgQAXaxBe1jr11KMpxmV9QpEb8"
    },
    {
      "chainId": 1,
      "address": "0x8E16bf47065Fe843A82f4399bAF5aBac4E0822B7",
      "symbol": "BFIL",
      "name": "Binance Wrapped FIL",
      "decimals": 18,
      "logoURI": "ipfs://QmfNBqidLq8LGW4khY85h41VHMoEE4LgPkMoRFWb3gxk6f"
    },
    {
      "chainId": 1,
      "address": "0xF29992D7b589A0A6bD2de7Be29a97A6EB73EaF85",
      "symbol": "DMST",
      "name": "DMScript",
      "decimals": 18,
      "logoURI": "ipfs://QmZPceC6dtsumQ9v9NG3V7nELmkZ1eC9QNmSCAH4m2LRyN"
    },
    {
      "chainId": 1,
      "address": "0x76BC677d444f1E9d57dAf5187ee2b7dC852745aE",
      "symbol": "XFT",
      "name": "Offshift",
      "decimals": 18,
      "logoURI": "ipfs://QmX2ew7WQE4rTkGuE6Do63EF2usfuwkRNuRENSeWnTAQWZ"
    },
    {
      "chainId": 1,
      "address": "0x77252494C25444F8598A0c74Ffc90ADc535291a9",
      "symbol": "NMS",
      "name": "Nemesis ETH",
      "decimals": 18,
      "logoURI": "ipfs://QmZFVhMWfJ5Umfb4KyLQ1JVkgGWsmugasB1Xqc9D17A4GT"
    },
    {
      "chainId": 1,
      "address": "0x15874d65e649880c2614e7a480cb7c9A55787FF6",
      "symbol": "EMAX",
      "name": "EthereumMax",
      "decimals": 18,
      "logoURI": "ipfs://QmaPxrvSUyyV4j7fzyDSkikowii5UnzdjP1a3SYeHFgULD"
    },
    {
      "chainId": 100,
      "address": "0xCCF1279C3406Ad1181bee00daB4b28B23D17Ddb1",
      "symbol": "JRT",
      "name": "Jarvis Reward Token",
      "decimals": 18,
      "logoURI": "ipfs://QmQDvx5ZAN7A2fmnnxgCo3S2FRVLkxWq58EzojxiN8HMwr"
    },
    {
      "chainId": 1,
      "address": "0x80fB784B7eD66730e8b1DBd9820aFD29931aab03",
      "symbol": "LEND",
      "name": "ETHLend",
      "decimals": 18,
      "logoURI": "ipfs://QmXYtNWxEcVY7QA5SY2QWdzANdd6oPrSPGU9qGyrksJPMV"
    },
    {
      "chainId": 1,
      "address": "0x27b7b1ad7288079A66d12350c828D3C00A6F07d7",
      "symbol": "yvCurve-IronBank",
      "name": "Curve Iron Bank Pool yVault",
      "decimals": 18,
      "logoURI": "ipfs://QmNMCSUEvLK28T4tPq4Eqa9347n2zErCEbj5KKwuBdXtVN"
    },
    {
      "chainId": 56,
      "address": "0x170C84E3b1D282f9628229836086716141995200",
      "symbol": "OP",
      "name": "Optimism",
      "decimals": 18,
      "logoURI": "ipfs://Qmf6Rw34hCk8DUzKhtAXVcL8WVhWJ881rQn9YB88SAokRn"
    },
    {
      "chainId": 56,
      "address": "0x43B35e89d15B91162Dea1C51133C4c93bdd1C4aF",
      "symbol": "SAKAI",
      "name": "Sakai Vault",
      "decimals": 18,
      "logoURI": "ipfs://QmerwruuV7E1pnbphFY9gbxANHuZg3Gfvxd1s6gG9RK6Do"
    },
    {
      "chainId": 1,
      "address": "0xeb269732ab75A6fD61Ea60b06fE994cD32a83549",
      "symbol": "USDx",
      "name": "dForce USDx",
      "decimals": 18,
      "logoURI": "ipfs://QmdA1ChgBU1oGw33UMuXf32BsE8ALfKUdBXhYDS6aHFnyU"
    },
    {
      "chainId": 100,
      "address": "0x177127622c4A00F3d409B75571e12cB3c8973d3c",
      "symbol": "COW",
      "name": "CoW Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmPC2wbiuXcS2oirWYL6Ln5X4PrXCHY3tNsoc65FTGhFSR"
    },
    {
      "chainId": 1,
      "address": "0xdB25f211AB05b1c97D595516F45794528a807ad8",
      "symbol": "EURS",
      "name": "EURS",
      "decimals": 2,
      "logoURI": "ipfs://QmYwjLKULQFgkcmcFNKC9BFhBR1ZEuicTYYwboUVXA9nGp"
    },
    {
      "chainId": 1,
      "address": "0xb5b8F5616Fe42d5ceCA3e87F3FddbDd8F496d760",
      "symbol": "ZPR",
      "name": "ZPER",
      "decimals": 18,
      "logoURI": "ipfs://QmbPfB8wAXWS6mzxCEHqnptBPTELPS2z1HHZ5cFKT3Pvny"
    },
    {
      "chainId": 1,
      "address": "0x8f3470A7388c05eE4e7AF3d01D8C722b0FF52374",
      "symbol": "VERI",
      "name": "Veritaseum",
      "decimals": 18,
      "logoURI": "ipfs://QmfAmwEfBRNVEqv7T3BxuRrnwu6e8KAKaxoumtWCKPrZKG"
    },
    {
      "chainId": 1,
      "address": "0x65Be44C747988fBF606207698c944Df4442efE19",
      "symbol": "FUCK",
      "name": "FUCK Token",
      "decimals": 4,
      "logoURI": "ipfs://QmTd4ZwBKrrfSLrNFfs9BABTKNkcyz8qXJZu8D1RtZtBdj"
    },
    {
      "chainId": 137,
      "address": "0xbA777aE3a3C91fCD83EF85bfe65410592Bdd0f7c",
      "symbol": "CONE",
      "name": "BitCone",
      "decimals": 18,
      "logoURI": "ipfs://QmRyxPiwuxm7RSeDtWEwr63kPTUVdQjnhWkhc6MkQosGSc"
    },
    {
      "chainId": 1,
      "address": "0xf50B5e535F62a56A9BD2d8e2434204E726c027Fa",
      "symbol": "sFB",
      "name": "Synthetic Facebook",
      "decimals": 18,
      "logoURI": "ipfs://QmenGaXACwb8SZa5tNBSRE6kaibExT3WTitm63nFzwGEh5"
    },
    {
      "chainId": 10,
      "address": "0x1F514A61bcde34F94Bc39731235690ab9da737F7",
      "symbol": "TAROT",
      "name": "Tarot",
      "decimals": 18,
      "logoURI": "ipfs://QmP8gkWvZKQffn32AF85jfq6Yg17ELnMBVSLSrRzt2Rg5k"
    },
    {
      "chainId": 1,
      "address": "0x84BB61Eb0336b309Ccf14Cc68bD1888cFa4846eA",
      "symbol": "MINE",
      "name": "The Official MINE Token",
      "decimals": 9,
      "logoURI": "ipfs://QmPZ9GDYto4EeqRmcWfxhjcVfsZjVyexcTuYt9wuhQQDB3"
    },
    {
      "chainId": 1,
      "address": "0x269895a3dF4D73b077Fc823dD6dA1B95f72Aaf9B",
      "symbol": "sKRW",
      "name": "Synthetic South Korean Won",
      "decimals": 18,
      "logoURI": "ipfs://QmQ5x1cJ82uY1uhrTG4ZXabEucjENb8Db7xj4hj9gHPPK4"
    },
    {
      "chainId": 56,
      "address": "0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3",
      "symbol": "DAI",
      "name": "Dai",
      "decimals": 18,
      "logoURI": "ipfs://QmTswuPmisP64jxzZvGz6AaK2gosJyPeTwqMkNPob6pdaa"
    },
    {
      "chainId": 1,
      "address": "0xed0889F7E1c7C7267407222Be277e1f1Ef4d4892",
      "symbol": "MEL",
      "name": "Melalie",
      "decimals": 18,
      "logoURI": "ipfs://QmVUHTjZqv8qf1SEjfLhurKtnPDphYeEag4hLTMwvGjdya"
    },
    {
      "chainId": 56,
      "address": "0xd17479997F34dd9156Deef8F95A52D81D265be9c",
      "symbol": "USDD",
      "name": "Decentralized USD",
      "decimals": 18,
      "logoURI": "ipfs://QmPtvMuo6UQwDXB7cTVz85Ms5noX6rnnNKi3HNmwKrPf8u"
    },
    {
      "chainId": 1,
      "address": "0x92B767185fB3B04F881e3aC8e5B0662a027A1D9f",
      "symbol": "crDAI",
      "name": "Cream Dai",
      "decimals": 8,
      "logoURI": "ipfs://Qmb3W78NJHdFhJT5bWMVpQk9UNTzvUCrNWoaXdRHiUz8jx"
    },
    {
      "chainId": 1,
      "address": "0x87869A9789291A6cEC99f3c3Ef2fF71fcEb12a8e",
      "symbol": "CMOS",
      "name": "CoinMerge OS",
      "decimals": 9,
      "logoURI": "ipfs://QmbG1w15Ky3e7Lrwdozbfw7MzBQErPxRW8sKdFphGcS82v"
    },
    {
      "chainId": 1,
      "address": "0xcbd55D4fFc43467142761A764763652b48b969ff",
      "symbol": "ASTRO",
      "name": "AstroTools",
      "decimals": 18,
      "logoURI": "ipfs://QmaWzfAPxUqv1FoyiQGJfp8WX5C1jwJZaoK6ZJPDXdbmxv"
    },
    {
      "chainId": 1,
      "address": "0x43Dfc4159D86F3A37A5A4B3D4580b888ad7d4DDd",
      "symbol": "DODO",
      "name": "DODO",
      "decimals": 18,
      "logoURI": "ipfs://Qmf2bQc8uVSmsp2QJicH7JC9JyTX7APek93iE2jQBSNjoC"
    },
    {
      "chainId": 1,
      "address": "0xbEe9Cf658702527b0AcB2719c1FAA29EdC006a92",
      "symbol": "sETH",
      "name": "Strike ETH",
      "decimals": 8,
      "logoURI": "ipfs://Qmd3gcaYK2aHjV6wF3sbkTUcKT6uZ9AKcWVJ5mBX3BTvdR"
    },
    {
      "chainId": 1,
      "address": "0x3472A5A71965499acd81997a54BBA8D852C6E53d",
      "symbol": "BADGER",
      "name": "Badger DAO",
      "decimals": 18,
      "logoURI": "ipfs://QmXJqHR9Wk5kxvd5VQ68WSwpiDd6BW1DmTgTJwYwreohwH"
    },
    {
      "chainId": 1,
      "address": "0x1a7e4e63778B4f12a199C062f3eFdD288afCBce8",
      "symbol": "agEUR",
      "name": "agEUR",
      "decimals": 18,
      "logoURI": "ipfs://QmZ5Z1xA6rkZPvGh8V8Ezv3vZp8gkL89QpgUzxYYaZUTjM"
    },
    {
      "chainId": 1,
      "address": "0x7537AAe01f3B218DAE75e10d952473823F961B87",
      "symbol": "sAAPL",
      "name": "Synthetic Apple",
      "decimals": 18,
      "logoURI": "ipfs://QmYgKpxFXEeubVaXkEgq9oRcuH55zy8AjNHqwN49Dj5iRz"
    },
    {
      "chainId": 1,
      "address": "0x954b890704693af242613edEf1B603825afcD708",
      "symbol": "CARD",
      "name": "Cardstack",
      "decimals": 18,
      "logoURI": "ipfs://QmXgun2BKcGKSoEoanqpsu4fzkqzGdSwBehhqwkFgRfT3C"
    },
    {
      "chainId": 100,
      "address": "0xaf204776c7245bF4147c2612BF6e5972Ee483701",
      "symbol": "sDAI",
      "name": "Savings xDAI",
      "decimals": 18,
      "logoURI": "ipfs://QmPFv2Xd74TZ2ncEkGw4iHP3Qz7cZSrLRV5fsyedH3ds8p"
    },
    {
      "chainId": 1,
      "address": "0x45804880De22913dAFE09f4980848ECE6EcbAf78",
      "symbol": "PAXG",
      "name": "PAX Gold",
      "decimals": 18,
      "logoURI": "ipfs://QmYjZhjXNSuj5LgFTnXyLAmTPapMs9e6qaxrcDU1GkSnJc"
    },
    {
      "chainId": 100,
      "address": "0xc5102fE9359FD9a28f877a67E36B0F050d81a3CC",
      "symbol": "HOP",
      "name": "Hop",
      "decimals": 18,
      "logoURI": "ipfs://QmcFNTzsHbeUeqiCmYdnZUsiWbNFDDx1qtF7n4MGn9YyJ1"
    },
    {
      "chainId": 1,
      "address": "0xA4f2fDB0a5842d62bbAa5B903f09687B85E4bf59",
      "symbol": "TBOT",
      "name": "TBOT Project",
      "decimals": 18,
      "logoURI": "ipfs://QmPfXLBKSmRntrudaX4TJYSVLvn7r4z57GM7nDNmxvz2D7"
    },
    {
      "chainId": 1,
      "address": "0x8A0cdfaB62eD35b836DC0633482798421C81b3Ec",
      "symbol": "SPHRI",
      "name": "Spherium",
      "decimals": 18,
      "logoURI": "ipfs://QmamE5JAezAkSdaLnKyJY7fWM4kXvmspgUwJoMQUKPjxhZ"
    },
    {
      "chainId": 1,
      "address": "0xAA19961b6B858D9F18a115f25aa1D98ABc1fdBA8",
      "symbol": "LCS",
      "name": "LocalCoinSwap",
      "decimals": 18,
      "logoURI": "ipfs://QmPVr5MkP2vzhiTWfDtfgyxqkmLS56mobZgde8GqS3KYYu"
    },
    {
      "chainId": 1,
      "address": "0x5B7533812759B45C2B44C19e320ba2cD2681b542",
      "symbol": "AGIX",
      "name": "SingularityNET",
      "decimals": 8,
      "logoURI": "ipfs://QmUgnbM8fX7F6Ee2NgX5fiMrrytAT6pnVHmwyT3TxuEM1c"
    },
    {
      "chainId": 1,
      "address": "0xBbd900e05b4aF2124390D206F70bc4E583B1bE85",
      "symbol": "MINTYS",
      "name": "MintySwap",
      "decimals": 9,
      "logoURI": "ipfs://QmXfNJfsdFxZiTVkFyNS8UAEgPKPNRzWkYf2o2dYiP7UbN"
    },
    {
      "chainId": 1,
      "address": "0xAEcc217a749c2405b5ebC9857a16d58Bdc1c367F",
      "symbol": "PAWTH",
      "name": "Pawthereum",
      "decimals": 9,
      "logoURI": "ipfs://QmZckyar1gDZSo9XrNopbFn8GHpy6TMkuUY4MJLuCrncbx"
    },
    {
      "chainId": 1,
      "address": "0x1A434A4c16223fb48F8f835e2E277bf72B4b5D1A",
      "symbol": "NETHER",
      "name": "Netherworld",
      "decimals": 18,
      "logoURI": "ipfs://QmYT8qRxKu99UN3mGyFQEPa3uSz5kDWYKAJ6ie8xGUi2fX"
    },
    {
      "chainId": 1,
      "address": "0xA0b73E1Ff0B80914AB6fe0444E65848C4C34450b",
      "symbol": "CRO",
      "name": "Cronos",
      "decimals": 8,
      "logoURI": "ipfs://QmVbHBpxBWPECJbYNgyf2CdCktWB6X8waxgdnM4sZ6L1mh"
    },
    {
      "chainId": 1,
      "address": "0x9AB7bb7FdC60f4357ECFef43986818A2A3569c62",
      "symbol": "GOG",
      "name": "Guild of Guardians",
      "decimals": 18,
      "logoURI": "ipfs://QmbkjnfZ3Hdsk3d3M9i3aThbqLhBTmte3evkrNmxd7Brwm"
    },
    {
      "chainId": 1,
      "address": "0x85eBa557C06c348395fD49e35d860F58a4F7c95a",
      "symbol": "H3X",
      "name": "H3X",
      "decimals": 18,
      "logoURI": "ipfs://Qmdvf71enBCKjGKaTwePqWfSvSV1q74nSzb734KcsC3htt"
    },
    {
      "chainId": 1,
      "address": "0xcD39b5434a0A92cf47D1F567a7dF84bE356814F0",
      "symbol": "s1INCH",
      "name": "Synthetic 1inch",
      "decimals": 18,
      "logoURI": "ipfs://QmdkzcGwXC9Si1rgHYzyxA9eoNmq3RqRoYcAeD8N4bvCH6"
    },
    {
      "chainId": 1,
      "address": "0x6b093998D36f2C7F0cc359441FBB24CC629D5FF0",
      "symbol": "iDAI",
      "name": "Fulcrum DAI iToken",
      "decimals": 18,
      "logoURI": "ipfs://QmZykNkn2647s53wjXfCJvZpT2bTtuzR77JejNMjCYxtZq"
    },
    {
      "chainId": 1,
      "address": "0x967da4048cD07aB37855c090aAF366e4ce1b9F48",
      "symbol": "OCEAN",
      "name": "Ocean",
      "decimals": 18,
      "logoURI": "ipfs://QmSmkzABGveatVaH41thVWdD1cgVAZ9SJe7Cet7YzpYWq6"
    },
    {
      "chainId": 1,
      "address": "0x6704B673c70dE9bF74C8fBa4b4bd748F0e2190E1",
      "symbol": "UBEX",
      "name": "Ubex",
      "decimals": 18,
      "logoURI": "ipfs://QmRQT9WdZQbsfy3JqURvF5zNiZ27fx2KyYztTPa9aqEx1w"
    },
    {
      "chainId": 1,
      "address": "0x1494CA1F11D487c2bBe4543E90080AeBa4BA3C2b",
      "symbol": "DPI",
      "name": "DeFi Pulse Index",
      "decimals": 18,
      "logoURI": "ipfs://QmZacYc39o7wE1JtF2qysEdwjTjN2zAgLWNEK6GjNQX54c"
    },
    {
      "chainId": 1,
      "address": "0x4D807509aECe24C0fa5A102b6a3B059Ec6E14392",
      "symbol": "ONE",
      "name": "Menlo One",
      "decimals": 18,
      "logoURI": "ipfs://QmPFRqWvdHwyzVf2vYYPLaYEDWuwax94TktomUEyzWCFqL"
    },
    {
      "chainId": 1,
      "address": "0x5E8422345238F34275888049021821E8E08CAa1f",
      "symbol": "frxETH",
      "name": "Frax Ether",
      "decimals": 18,
      "logoURI": "ipfs://QmVmEupFmP81xAgZ6k5gVwW41zsNZCLVooHA6UVUEpetqG"
    },
    {
      "chainId": 1,
      "address": "0xcbE771323587EA16dACB6016e269D7F08A7ACC4E",
      "symbol": "SPO",
      "name": "Spores Network",
      "decimals": 18,
      "logoURI": "ipfs://QmXdBRJQ6YwD3qebuG6kbuBpD9B7e55xc696RLwfrvFusH"
    },
    {
      "chainId": 1,
      "address": "0x0a661F6AD63a1500D714ED1EeEdb64ec493a54A8",
      "symbol": "USDZ",
      "name": "Zedxion",
      "decimals": 9,
      "logoURI": "ipfs://QmXiG7hbnbLZYhnKckouWg3iN2FzrEadkC5LZSS3p75Aaj"
    },
    {
      "chainId": 1,
      "address": "0xf819d9Cb1c2A819Fd991781A822dE3ca8607c3C9",
      "symbol": "UNIBOT",
      "name": "UNIBOT",
      "decimals": 18,
      "logoURI": "ipfs://QmTgDf7ippBNy8q4YsnnnthgsRsAvDBEj5Dccbe8yZVXaH"
    },
    {
      "chainId": 1,
      "address": "0xCb94be6f13A1182E4A4B6140cb7bf2025d28e41B",
      "symbol": "TRST",
      "name": "WeTrust",
      "decimals": 6,
      "logoURI": "ipfs://QmUjN9gPtDZtJnFJaPTqqbjgUsN8sg5eX4NDg7cKeEN6a7"
    },
    {
      "chainId": 100,
      "address": "0x4f4F9b8D5B4d0Dc10506e5551B0513B61fD59e75",
      "symbol": "GIV",
      "name": "Giveth",
      "decimals": 18,
      "logoURI": "ipfs://QmfBkYQZVHewLGqUnDDSGmybtiCKSk4bkAoQjxqwdRxZiQ"
    },
    {
      "chainId": 42161,
      "address": "0xaf88d065e77c8cC2239327C5EDb3A432268e5831",
      "symbol": "USDC",
      "name": "USD Coin",
      "decimals": 6,
      "logoURI": "ipfs://QmWbGfqePP3uAvPNHdYSP69aDznHGknsypTPRaiJT9NZF8"
    },
    {
      "chainId": 1,
      "address": "0x00d8318E44780EdEEFcF3020A5448F636788883C",
      "symbol": "DAPPX",
      "name": "dAppstore",
      "decimals": 18,
      "logoURI": "ipfs://QmZiEY86MDDp9aY4bCa7VKQtoMoxJyWDmFPysoBU2EJRWe"
    },
    {
      "chainId": 1,
      "address": "0x12B19D3e2ccc14Da04FAe33e63652ce469b3F2FD",
      "symbol": "GRID",
      "name": "Grid+",
      "decimals": 12,
      "logoURI": "ipfs://QmXcGLt9ExAvgv5FJdrLiyyDM5Z4GLkxA7wCiZZZ7qV497"
    },
    {
      "chainId": 1,
      "address": "0x668DbF100635f593A3847c0bDaF21f0a09380188",
      "symbol": "BNSD",
      "name": "BNSD Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmTskfjpDak1f3qGxDFpd75DXinqyEj8tDfTzsFFANsVwB"
    },
    {
      "chainId": 1,
      "address": "0xaDB2437e6F65682B85F814fBc12FeC0508A7B1D0",
      "symbol": "UNCX",
      "name": "UniCrypt",
      "decimals": 18,
      "logoURI": "ipfs://QmVrrAQRHpLYXridCZ4EvDxDm1DUCq8EAWWSyzRPUE4Pn5"
    },
    {
      "chainId": 1,
      "address": "0x48bE867B240D2fFafF69e0746130F2c027d8d3d2",
      "symbol": "ELE",
      "name": "Elevate",
      "decimals": 9,
      "logoURI": "ipfs://QmZN2Armi5YYLMt1LVwwx1d4hzx8eGYw5KHFcZSDQ1CU4u"
    },
    {
      "chainId": 1,
      "address": "0x820802Fa8a99901F52e39acD21177b0BE6EE2974",
      "symbol": "EUROe",
      "name": "EUROe Stablecoin",
      "decimals": 6,
      "logoURI": "ipfs://QmU63WjFnFHgxJL4oRTamgEGqwXim1DjSV3DqA5xhR4Zqt"
    },
    {
      "chainId": 1,
      "address": "0x261b45D85cCFeAbb11F022eBa346ee8D1cd488c0",
      "symbol": "rDAI",
      "name": "rDAI",
      "decimals": 18,
      "logoURI": "ipfs://QmQqeSUv3G43hwbyhmrTQTFuAt52tmjYiGKU1EGemFKxLM"
    },
    {
      "chainId": 1,
      "address": "0xf3Db5Fa2C66B7aF3Eb0C0b782510816cbe4813b8",
      "symbol": "EVX",
      "name": "Everex",
      "decimals": 4,
      "logoURI": "ipfs://QmauBk4YSCcCL1UvCD8wr28LrmDtytFnjav1zpBGTEFJea"
    },
    {
      "chainId": 100,
      "address": "0x3a97704a1b25F08aa230ae53B352e2e72ef52843",
      "symbol": "AGVE",
      "name": "Agave",
      "decimals": 18,
      "logoURI": "ipfs://QmRVeKdtSCfV95nGMLsBpNDzT1pmFggvCSiWD2eJu7fqah"
    },
    {
      "chainId": 1,
      "address": "0x8806926Ab68EB5a7b909DcAf6FdBe5d93271D6e2",
      "symbol": "UQC",
      "name": "Uquid",
      "decimals": 18,
      "logoURI": "ipfs://QmUsqe5FHFW5Lrt11NX2DmiC9nSeqzhDyYbgNpX8a4gtUJ"
    },
    {
      "chainId": 1,
      "address": "0x7420B4b9a0110cdC71fB720908340C03F9Bc03EC",
      "symbol": "JASMY",
      "name": "JasmyCoin",
      "decimals": 18,
      "logoURI": "ipfs://QmP5YjEjtj2QQXCNpYjEbd9L59hJtHQF2orh47kjcHqGHH"
    },
    {
      "chainId": 1,
      "address": "0x224DB5E6180761df4C3d8936585f6b8b83879770",
      "symbol": "OML",
      "name": "Omlira",
      "decimals": 18,
      "logoURI": "ipfs://QmeCfRRtyg5FtJi825jscEWCXFuiKaYXjJ9ZVdAYQ2ZiJo"
    },
    {
      "chainId": 1,
      "address": "0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f",
      "symbol": "GTH",
      "name": "Gather",
      "decimals": 18,
      "logoURI": "ipfs://QmWcWP4va5EJyY1JxgyxjAFcoUWoj1sEpLNZbPkreJ7yfP"
    },
    {
      "chainId": 1,
      "address": "0x09e64c2B61a5f1690Ee6fbeD9baf5D6990F8dFd0",
      "symbol": "GRO",
      "name": "GROWTH DeFi",
      "decimals": 18,
      "logoURI": "ipfs://QmbzNJZUTfdQ9XumJHytWEt9DbN6pgrzbgw7vDnMD8HjZr"
    },
    {
      "chainId": 56,
      "address": "0x2dfF88A56767223A5529eA5960Da7A3F5f766406",
      "symbol": "ID",
      "name": "SPACE ID",
      "decimals": 18,
      "logoURI": "ipfs://QmaMA9qpmBogwzhZ8bor1R43kMksTT4kS8yMExqWs2aS3C"
    },
    {
      "chainId": 1,
      "address": "0xB1f1F47061A7Be15C69f378CB3f69423bD58F2F8",
      "symbol": "FLASH",
      "name": "Flashstake",
      "decimals": 18,
      "logoURI": "ipfs://QmeaqsbSEjRSdEGsRewDNrWBbQirWoBzdEfMEjNsVAge8v"
    },
    {
      "chainId": 1,
      "address": "0xF938424F7210f31dF2Aee3011291b658f872e91e",
      "symbol": "VISR",
      "name": "Visor",
      "decimals": 18,
      "logoURI": "ipfs://QmV7S8htQ4WihNzs8tyFd1v3dEbejbJc3rhdAh78aCLDH8"
    },
    {
      "chainId": 1,
      "address": "0x64bbf62a855B24F45b3C7Fd3Aa8D34576E2e78Fe",
      "symbol": "CNX",
      "name": "Cleanex",
      "decimals": 9,
      "logoURI": "ipfs://QmRUcYnuBJ7pVtRwRgeFBatbLpqvpa8nJwxM9LouA1TW6i"
    },
    {
      "chainId": 1,
      "address": "0xc27A2F05fa577a83BA0fDb4c38443c0718356501",
      "symbol": "TAU",
      "name": "Lamden",
      "decimals": 18,
      "logoURI": "ipfs://QmQfu4zNZEJEc2SJ4NwCLepbHPwnJGgQmEsW4rnp1kUaYK"
    },
    {
      "chainId": 56,
      "address": "0x52CE071Bd9b1C4B00A0b92D298c512478CaD67e8",
      "symbol": "COMP",
      "name": "Compound",
      "decimals": 18,
      "logoURI": "ipfs://QmWZSaKRTLqDfF9BDG5HYrgc5fbr9uq3ksHct8c5MfjYUu"
    },
    {
      "chainId": 1,
      "address": "0x89303500a7Abfb178B274FD89F2469C264951e1f",
      "symbol": "REF",
      "name": "RefToken",
      "decimals": 8,
      "logoURI": "ipfs://QmTtPnJ2mFeAUpxtz3LGZqwGqbYzN6cDHg9Evfo7vir9VN"
    },
    {
      "chainId": 1,
      "address": "0x628eBC64A38269E031AFBDd3C5BA857483B5d048",
      "symbol": "LSETH",
      "name": "Liquid Staked ETH",
      "decimals": 18,
      "logoURI": "ipfs://Qmf4zwuZxks5fR9HLgNgM3GTF5iSsjUMBPZyc73K6ASApU"
    },
    {
      "chainId": 1,
      "address": "0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359",
      "symbol": "SAI",
      "name": "Sai",
      "decimals": 18,
      "logoURI": "ipfs://Qmbr5XtonKYPHPeJDBcguVGxrB5yr6wP69zKMtoKKCABDW"
    },
    {
      "chainId": 1,
      "address": "0x8D75959f1E61EC2571aa72798237101F084DE63a",
      "symbol": "SUB",
      "name": "Substratum",
      "decimals": 18,
      "logoURI": "ipfs://QmR2YVnXnZKMXdAj51DmCfcRJyLkRJFPLgvyD46q4rC8QN"
    },
    {
      "chainId": 1,
      "address": "0x0954906da0Bf32d5479e25f46056d22f08464cab",
      "symbol": "INDEX",
      "name": "Index Cooperative",
      "decimals": 18,
      "logoURI": "ipfs://QmbybqnXCebXujqcMdyfXsiufkbkHJaPpxyDnQKHUhfFQa"
    },
    {
      "chainId": 100,
      "address": "0xdBF3Ea6F5beE45c02255B2c26a16F300502F68da",
      "symbol": "BZZ",
      "name": "Swarm",
      "decimals": 16,
      "logoURI": "ipfs://QmSiXeTDA3Q7Ht2RGKa2q4iRGBJUstrSfeRVzKBXvsigjw"
    },
    {
      "chainId": 1,
      "address": "0x797AAB1ce7c01eB727ab980762bA88e7133d2157",
      "symbol": "crUSDT",
      "name": "Cream USDT",
      "decimals": 8,
      "logoURI": "ipfs://Qmf8sPNYZpgW8sbREjt7e8H6NUfMiMrTYYux8QXdoZQBjw"
    },
    {
      "chainId": 1,
      "address": "0x2ccbFF3A042c68716Ed2a2Cb0c544A9f1d1935E1",
      "symbol": "DMT",
      "name": "DMarket",
      "decimals": 8,
      "logoURI": "ipfs://QmbsXfpttmxoLiKmV8mwHmdotDYG6izASxNzn7X3Tvopho"
    },
    {
      "chainId": 1,
      "address": "0x4AdF728E2Df4945082cDD6053869f51278fae196",
      "symbol": "iXMR",
      "name": "Synthetic Inverse Monero",
      "decimals": 18,
      "logoURI": "ipfs://QmTcWTK966oaRYXuQ76h51Nk9k5RA27t6RX7Hp1DmtAkLS"
    },
    {
      "chainId": 1,
      "address": "0x6d16cF3EC5F763d4d99cB0B0b110eefD93B11B56",
      "symbol": "sOIL",
      "name": "Synthetic Perpetual Oil Futures",
      "decimals": 18,
      "logoURI": "ipfs://QmYoKXuSPnfLq8F6iVVHiHtNRaWzVUSeK6au7RnHhDiDD7"
    },
    {
      "chainId": 1,
      "address": "0x469eDA64aEd3A3Ad6f868c44564291aA415cB1d9",
      "symbol": "FLUX",
      "name": "FLUX",
      "decimals": 18,
      "logoURI": "ipfs://QmSjg1U1oWw3BfcCbbz9mzHwU9mPLWqzNo5ZdqLceJUGAH"
    },
    {
      "chainId": 1,
      "address": "0x8e1b448EC7aDFc7Fa35FC2e885678bD323176E34",
      "symbol": "EGT",
      "name": "Egretia",
      "decimals": 18,
      "logoURI": "ipfs://QmPFn1pmvDnYcxVwd5qe2x8MYUeD5u8yRG6qfg4zuQCoaX"
    },
    {
      "chainId": 1,
      "address": "0x220B71671b649c03714dA9c621285943f3cbcDC6",
      "symbol": "DIS",
      "name": "TosDis",
      "decimals": 18,
      "logoURI": "ipfs://Qmb5PtSs8fN37XT55oD5qfR6KRjQqXfkCZYUk1Xk8YT34n"
    },
    {
      "chainId": 1,
      "address": "0x1B073382E63411E3BcfFE90aC1B9A43feFa1Ec6F",
      "symbol": "BEST",
      "name": "Bitpanda Ecosystem Token",
      "decimals": 8,
      "logoURI": "ipfs://QmbZbZibWYcmhRhjDuvi24AzZfePitJMfV3oXyhCuFX9bk"
    },
    {
      "chainId": 1,
      "address": "0xec67005c4E498Ec7f55E092bd1d35cbC47C91892",
      "symbol": "MLN",
      "name": "Enzyme",
      "decimals": 18,
      "logoURI": "ipfs://Qme7bxm7Wxnbx7ebz2KTPdaJ6KP48sZAYrmY7x1qjVurVr"
    },
    {
      "chainId": 1,
      "address": "0xA3865E64121537b5b59B5e239Db4aCBe6F36aa74",
      "symbol": "WXTZ",
      "name": "Wrapped Tezos",
      "decimals": 18,
      "logoURI": "ipfs://QmS1NpydbAb698dQWFQCBU4HNczWxnAfbK7aFqu5iKmZLn"
    },
    {
      "chainId": 1,
      "address": "0x6c5bA91642F10282b576d91922Ae6448C9d52f4E",
      "symbol": "PHA",
      "name": "Phala",
      "decimals": 18,
      "logoURI": "ipfs://QmcAZ5Um5oABpK4n5jr5egcG1TQdwDUz2DCyA2WkMxcbz6"
    },
    {
      "chainId": 56,
      "address": "0x47b19Af93d0bC33805269Af02B5CA953Aa145127",
      "symbol": "jMXN",
      "name": "Jarvis Synthetic Mexican Peso",
      "decimals": 18,
      "logoURI": "ipfs://QmTaASZKajcjmmQQeVkoYCje8se2FQYxGfKCuwu4xNxsmp"
    },
    {
      "chainId": 1,
      "address": "0xD520ddbdf81323F4B9a0Ea0AdBb692eBEf6cE280",
      "symbol": "HLD",
      "name": "Holdefi",
      "decimals": 18,
      "logoURI": "ipfs://QmQxWXih15rrAQD2swm1KfCuKdHCeYEiCdzf4awYf4XpfV"
    },
    {
      "chainId": 1,
      "address": "0xC382e04099A435439725BB40647e2B32dC136806",
      "symbol": "COGE",
      "name": "Cogecoin",
      "decimals": 18,
      "logoURI": "ipfs://QmeDjhZSJ5x8uB7jwf9JZZejcvDpq6XKUaxsd4VpqgvYCy"
    },
    {
      "chainId": 1,
      "address": "0xa10ae543dB5D967a73E9Abcc69c81a18A7Fc0A78",
      "symbol": "CLOUT",
      "name": "BLOCKCLOUT",
      "decimals": 18,
      "logoURI": "ipfs://QmQxgfFU19npztEaARu2gkLyq6Cv2HgPCZoZN48Sarts5r"
    },
    {
      "chainId": 1,
      "address": "0x0F02e27745e3b6e9e1310d19469e2b5D7B5eC99A",
      "symbol": "PCL",
      "name": "Peculium",
      "decimals": 8,
      "logoURI": "ipfs://QmbgBqSffmmJz7z9Ry3aqaLaZjL2LejREVXSLv1PQE9132"
    },
    {
      "chainId": 1,
      "address": "0x0f8c45B896784A1E408526B9300519ef8660209c",
      "symbol": "XMX",
      "name": "XMAX",
      "decimals": 8,
      "logoURI": "ipfs://Qmczph23JW9hshF9oHajLvqkrZaTnVC83kFjJM1VbdhQa4"
    },
    {
      "chainId": 1,
      "address": "0x10a3da2BB0Fae4D591476fd97D6636fd172923a8",
      "symbol": "crHEGIC",
      "name": "Cream Hegic",
      "decimals": 8,
      "logoURI": "ipfs://QmWJe7QQXDt4xJFN1j2ZiDVqxeuWnYB17UveLxq2CXifTH"
    },
    {
      "chainId": 1,
      "address": "0x1Ed460D149D48FA7d91703bf4890F97220C09437",
      "symbol": "tfBUSD",
      "name": "TrueFi Binance USD",
      "decimals": 18,
      "logoURI": "ipfs://QmThfRPR6AYrkDFNZ5rkudRmD3Xcu3WNhbQ5za3g3ueJVX"
    },
    {
      "chainId": 1,
      "address": "0x84cA8bc7997272c7CfB4D0Cd3D55cd942B3c9419",
      "symbol": "DIA",
      "name": "DIA",
      "decimals": 18,
      "logoURI": "ipfs://QmcJnRjr1t8AGjWrdzn6T69Ez4NrTSYT9KAD5GUTZ8kRVA"
    },
    {
      "chainId": 1,
      "address": "0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE",
      "symbol": "SHIB",
      "name": "Shiba Inu",
      "decimals": 18,
      "logoURI": "ipfs://QmYc1GQpy4hTTEqpCtiBVpCKHthv4ZMpmUp6j9YZcEw3LH"
    },
    {
      "chainId": 1,
      "address": "0x21BfBDa47A0B4B5b1248c767Ee49F7caA9B23697",
      "symbol": "OVR",
      "name": "OVR",
      "decimals": 18,
      "logoURI": "ipfs://QmP4P8qym3QkNPqwzpNVEkjtoP1odz5PkkaBhR4Rrt9ArA"
    },
    {
      "chainId": 1,
      "address": "0x3506424F91fD33084466F402d5D97f05F8e3b4AF",
      "symbol": "CHZ",
      "name": "Chiliz",
      "decimals": 18,
      "logoURI": "ipfs://QmZBNTTkcAZ5GMoS4U9mHc8VE5P3o9LGcM5YSvVTUhQwvS"
    },
    {
      "chainId": 1,
      "address": "0xb439B8731ee047799019eF0b745a51d256B116Af",
      "symbol": "BULL",
      "name": "BullionFX",
      "decimals": 18,
      "logoURI": "ipfs://QmPFZNhmvvbwAegHENxqZYNfqG1mYWgG9MVzcooTEb6xSC"
    },
    {
      "chainId": 1,
      "address": "0xa0bEd124a09ac2Bd941b10349d8d224fe3c955eb",
      "symbol": "DEPAY",
      "name": "DePay",
      "decimals": 18,
      "logoURI": "ipfs://QmZKQdLJRBp9uqB8QizcdRtNxiTHFCb8RH4ieJYSfDn4j2"
    },
    {
      "chainId": 100,
      "address": "0xeEeEEb57642040bE42185f49C52F7E9B38f8eeeE",
      "symbol": "ELK",
      "name": "Elk Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmYSmFMg8incix4Hzs85MPZzQJnb2W19zLTL3nXNEzY42m"
    },
    {
      "chainId": 1,
      "address": "0x9275e8386A5BDdA160c0e621e9A6067b8fd88ea2",
      "symbol": "NBNG",
      "name": "Nobunaga",
      "decimals": 18,
      "logoURI": "ipfs://QmXbeCY47VLATQNWQGBsRmB3DfXrVeQ2u1hoD5VLJ2Xpsm"
    },
    {
      "chainId": 1,
      "address": "0x7F3EDcdD180Dbe4819Bd98FeE8929b5cEdB3AdEB",
      "symbol": "XTK",
      "name": "xToken",
      "decimals": 18,
      "logoURI": "ipfs://QmdA3wu4jiYE7tCbNWMucyJrxuYmQapfxL3mAvMHg57ciZ"
    },
    {
      "chainId": 1,
      "address": "0x8C6bf16C273636523C29Db7DB04396143770F6A0",
      "symbol": "AAA",
      "name": "Moon Rabbit",
      "decimals": 18,
      "logoURI": "ipfs://QmZwVVXy9PeUeyirvnj4EaqaV8oeeG8sdrRKddMr1xvwki"
    },
    {
      "chainId": 1,
      "address": "0x00C2999c8B2AdF4ABC835cc63209533973718eB1",
      "symbol": "STATE",
      "name": "New World Order",
      "decimals": 18,
      "logoURI": "ipfs://QmY2dQ5ExX89VduFjvowWMdodfHKKfnL6LMFwQ8iYsd984"
    },
    {
      "chainId": 100,
      "address": "0x2d5563da42b06FbBF9c67b7DC073cF6A7842239e",
      "symbol": "jCHF",
      "name": "Jarvis Synthetic Swiss Franc",
      "decimals": 18,
      "logoURI": "ipfs://QmQYgf7dnsrcJPGjDgm1sQZ1n3Ugbk3cAvptuu7SV43KgQ"
    },
    {
      "chainId": 1,
      "address": "0x6D0F5149c502faf215C89ab306ec3E50b15e2892",
      "symbol": "PRT",
      "name": "Portion",
      "decimals": 18,
      "logoURI": "ipfs://Qmbm6fRYvQ8WpHeeWXv5sXPv7YqvP3SGcaAXeYbiex1C9F"
    },
    {
      "chainId": 10,
      "address": "0x0b2C639c533813f4Aa9D7837CAf62653d097Ff85",
      "symbol": "USDC",
      "name": "USD Coin",
      "decimals": 6,
      "logoURI": "ipfs://QmWbGfqePP3uAvPNHdYSP69aDznHGknsypTPRaiJT9NZF8"
    },
    {
      "chainId": 1,
      "address": "0x5963FD7cA9b17b85768476019F81CB43d9d1818E",
      "symbol": "YESTRUMP",
      "name": "Dai If Trump Wins The 2020 Election",
      "decimals": 18,
      "logoURI": "ipfs://QmQK7hBYsHLKkx1mR3pwzT5ueupZqcZaj541ZPmPEzqkRM"
    },
    {
      "chainId": 1,
      "address": "0xe3818504c1B32bF1557b16C238B2E01Fd3149C17",
      "symbol": "PLR",
      "name": "Pillar",
      "decimals": 18,
      "logoURI": "ipfs://QmW3v35P4TPQ1quWzpAVZo5pDwp5sG8M1pnCmGUQYd3D7k"
    },
    {
      "chainId": 1,
      "address": "0x4C19596f5aAfF459fA38B0f7eD92F11AE6543784",
      "symbol": "TRU",
      "name": "TrueFi",
      "decimals": 8,
      "logoURI": "ipfs://QmZS2DtdFXBfK4fmC5pgnVYiwgTPbxSYP2BHMrgKLx1BLT"
    },
    {
      "chainId": 1,
      "address": "0x0E22734e078d6e399BCeE40a549DB591C4EA46cB",
      "symbol": "STM",
      "name": "Streamity",
      "decimals": 18,
      "logoURI": "ipfs://QmPxi4vVAdniedFzskF9QKEPvByhqypu6kNTUrL43H2inq"
    },
    {
      "chainId": 1,
      "address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
      "symbol": "USDC",
      "name": "USD Coin",
      "decimals": 6,
      "logoURI": "ipfs://QmSFwXFjMFh6E7PtXxwCwh2sSRs9sMdQLCkGM4bFXQshHY"
    },
    {
      "chainId": 1,
      "address": "0x68a3637bA6E75c0f66B61A42639c4e9fCD3D4824",
      "symbol": "MOON",
      "name": "MoonSwap",
      "decimals": 18,
      "logoURI": "ipfs://QmV8vsoZUBqiQhaBRvah4fAGLzs12noYM5GBeaJkT2hDHN"
    },
    {
      "chainId": 1,
      "address": "0x0F5D2fB29fb7d3CFeE444a200298f468908cC942",
      "symbol": "MANA",
      "name": "Decentraland",
      "decimals": 18,
      "logoURI": "ipfs://QmQfMJvLMeo8kpCoKz37q7FoGC7U6nK7h9u6e9BZik3VEc"
    },
    {
      "chainId": 56,
      "address": "0xaEC945e04baF28b135Fa7c640f624f8D90F1C3a6",
      "symbol": "C98",
      "name": "Coin98",
      "decimals": 18,
      "logoURI": "ipfs://QmPtmkoaLbX3bdwcfFmuonRzA7xanbVt2xJ5RMfw1BtXxP"
    },
    {
      "chainId": 1,
      "address": "0x8E5610ab5E39d26828167640EA29823fe1dD5843",
      "symbol": "KNDC",
      "name": "KanadeCoin",
      "decimals": 8,
      "logoURI": "ipfs://Qmac6FqBrCf95FEAzqxVM16qSyUMJQSFhrRRunoJ7sHUes"
    },
    {
      "chainId": 1,
      "address": "0xFFa93Aacf49297D51E211817452839052FDFB961",
      "symbol": "DCC",
      "name": "Distributed Credit Chain",
      "decimals": 18,
      "logoURI": "ipfs://QmYxhcXuXH7fYc9ciCw5k5zgWV6yVUcQ6QognzNUakHtd6"
    },
    {
      "chainId": 1,
      "address": "0xF4FaEa455575354d2699BC209B0a65CA99F69982",
      "symbol": "NOBS",
      "name": "No BS Crypto",
      "decimals": 18,
      "logoURI": "ipfs://QmSiP4FEoMmzqmDvTcRwterScLvMKppSZ1F6UhAXLZLxne"
    },
    {
      "chainId": 1,
      "address": "0xCC12AbE4ff81c9378D670De1b57F8e0Dd228D77a",
      "symbol": "aREN",
      "name": "Aave REN",
      "decimals": 18,
      "logoURI": "ipfs://QmYKzY4MmEv96vCR42wfjA5cNC1vvQCLhq3JVHtrkk97t9"
    },
    {
      "chainId": 56,
      "address": "0x2aa69E8D25C045B659787BC1f03ce47a388DB6E8",
      "symbol": "KSM",
      "name": "Kusama",
      "decimals": 18,
      "logoURI": "ipfs://Qmf4Kphipscddo9mYtcqEFwurDxK695GMZho7d1p6LkiWh"
    },
    {
      "chainId": 1,
      "address": "0x221657776846890989a759BA2973e427DfF5C9bB",
      "symbol": "REPv2",
      "name": "Augur",
      "decimals": 18,
      "logoURI": "ipfs://QmVg4teABAr1L1kUL7UxnSpvzF7YK1zCKW1kzJUPTB4cGj"
    },
    {
      "chainId": 1,
      "address": "0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0",
      "symbol": "MATIC",
      "name": "Polygon",
      "decimals": 18,
      "logoURI": "ipfs://Qmc2zM8LQ2rsdJEk5ypHjGbVkreo3Q3KNpNTy5z73VTtuK"
    },
    {
      "chainId": 1,
      "address": "0xcFEB09C3c5F0f78aD72166D55f9e6E9A60e96eEC",
      "symbol": "VEMP",
      "name": "vEmpire DDAO",
      "decimals": 18,
      "logoURI": "ipfs://QmP6FKs7HeEbATTmEXW6noZZkoqgJmUpF4XPx1U9S6Pqsz"
    },
    {
      "chainId": 10,
      "address": "0xC81D1F0EB955B0c020E5d5b264E1FF72c14d1401",
      "symbol": "RPL",
      "name": "Rocket Pool",
      "decimals": 18,
      "logoURI": "ipfs://QmNSj1BfWphbDaTStW6JvrmnzoEHpFJpPNNczNAheANF4f"
    },
    {
      "chainId": 1,
      "address": "0x49D09cDa1Deb8a1680F1270C5ed15218fc4B18f0",
      "symbol": "OVC",
      "name": "OVCODE",
      "decimals": 18,
      "logoURI": "ipfs://QmYABxSjCsBREPMz8MNWfs4V4kcLV2K6mFHG2zVEzvBMp1"
    },
    {
      "chainId": 1,
      "address": "0x8A9C67fee641579dEbA04928c4BC45F66e26343A",
      "symbol": "JRT",
      "name": "Jarvis Reward Token",
      "decimals": 18,
      "logoURI": "ipfs://QmTZqMy43gyA5jbsfquBJfKUaChEK3PgLTgdYW6jyqQHnk"
    },
    {
      "chainId": 1,
      "address": "0xd4937682df3C8aEF4FE912A96A74121C0829E664",
      "symbol": "aFRAX",
      "name": "Aave FRAX",
      "decimals": 18,
      "logoURI": "ipfs://QmcakPXDgLifYDvd1Ue3GGeJmmDZsjjqNGC1fHCybZ4pGv"
    },
    {
      "chainId": 1,
      "address": "0x0AaCfbeC6a24756c20D41914F2caba817C0d8521",
      "symbol": "YAM",
      "name": "YAM",
      "decimals": 18,
      "logoURI": "ipfs://QmSzzEw8kYNGUQJzm2KFcxGhWM6oHAaA2Q3ztGeF38Ep8W"
    },
    {
      "chainId": 1,
      "address": "0xd3210F246Ae54C5a45A7b4A83315bf718F591bfc",
      "symbol": "ARKI",
      "name": "ArkiTech",
      "decimals": 9,
      "logoURI": "ipfs://QmcApbZ86hm8cfmeXPVP2xC8KJRTzGY9BnqJZxn1JFbPhv"
    },
    {
      "chainId": 1,
      "address": "0xa47c8bf37f92aBed4A126BDA807A7b7498661acD",
      "symbol": "UST",
      "name": "Wrapped UST",
      "decimals": 18,
      "logoURI": "ipfs://QmYUNLFNukHVS8MgA8fk4dyBCSWsE3pzENPzqXfKDCrSb6"
    },
    {
      "chainId": 137,
      "address": "0x61299774020dA444Af134c82fa83E3810b309991",
      "symbol": "RNDR",
      "name": "Render",
      "decimals": 18,
      "logoURI": "ipfs://Qmd4tMCvhQSdoBkxJbqBxVviGQfnMiuZWF1WA3XXRnarfa"
    },
    {
      "chainId": 1,
      "address": "0xAec7e1f531Bb09115103C53ba76829910Ec48966",
      "symbol": "BLANK",
      "name": "Blank",
      "decimals": 18,
      "logoURI": "ipfs://QmVdTaqYYG4f4CThEycYrSx5LAnH5m62oceqpw2SPdvR34"
    },
    {
      "chainId": 1,
      "address": "0x297D33e17e61C2Ddd812389C2105193f8348188a",
      "symbol": "$TRDL",
      "name": "Strudel Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmYXo4MRF1SyeKQVzK1S3jCyAhxJRmUjC5rFHsdxRGFeZE"
    },
    {
      "chainId": 1,
      "address": "0xfA5047c9c78B8877af97BDcb85Db743fD7313d4a",
      "symbol": "ROOK",
      "name": "KeeperDAO",
      "decimals": 18,
      "logoURI": "ipfs://QmUmFfKb9oeQE678FscZ5cQ5xDNmWEoFAaW6NPNrSDGTCG"
    },
    {
      "chainId": 1,
      "address": "0x430EF9263E76DAE63c84292C3409D61c598E9682",
      "symbol": "PYR",
      "name": "Vulcan Forged",
      "decimals": 18,
      "logoURI": "ipfs://QmaVmB72v5tqfhGCwGiNHrMtrM9DqJvSzs4HS92jJWhygH"
    },
    {
      "chainId": 1,
      "address": "0x40D16FC0246aD3160Ccc09B8D0D3A2cD28aE6C2f",
      "symbol": "GHO",
      "name": "GHO",
      "decimals": 18,
      "logoURI": "ipfs://QmZUaEQJkgxuxQFWMeTGSpuoSbJo1fSJgYXxQCrUYtdKRY"
    },
    {
      "chainId": 1,
      "address": "0xD0660cD418a64a1d44E9214ad8e459324D8157f1",
      "symbol": "WOOFY",
      "name": "Woofy",
      "decimals": 12,
      "logoURI": "ipfs://QmZ3kxER9az7TsBsjKVfphU9s8urBJepmgdQ4qUgE72MFB"
    },
    {
      "chainId": 1,
      "address": "0x41545f8b9472D758bB669ed8EaEEEcD7a9C4Ec29",
      "symbol": "FORT",
      "name": "Forta",
      "decimals": 18,
      "logoURI": "ipfs://QmQGCw1mEn2WejiQck1V5GF4a9TVhwVH1s51okKRhufLhR"
    },
    {
      "chainId": 1,
      "address": "0xd26114cd6EE289AccF82350c8d8487fedB8A0C07",
      "symbol": "OMG",
      "name": "OMG Network",
      "decimals": 18,
      "logoURI": "ipfs://QmXGCW9GBZxLWU2kiqSy8oAisaJWhsQk7onmwMUbuwekfd"
    },
    {
      "chainId": 100,
      "address": "0xD3D47d5578e55C880505dC40648F7F9307C3e7A8",
      "symbol": "DPI",
      "name": "DeFi Pulse Index",
      "decimals": 18,
      "logoURI": "ipfs://QmZacYc39o7wE1JtF2qysEdwjTjN2zAgLWNEK6GjNQX54c"
    },
    {
      "chainId": 1,
      "address": "0xD8912C10681D8B21Fd3742244f44658dBA12264E",
      "symbol": "PLU",
      "name": "Pluton",
      "decimals": 18,
      "logoURI": "ipfs://QmUL1fzqVzyLH1jubyP6vw7S7YYga8Qp3jm1AjTPUTMVYD"
    },
    {
      "chainId": 56,
      "address": "0xd4ed60d8368a92b5F1ca33aF61eF2A94714B2d46",
      "symbol": "BAL",
      "name": "Balancer",
      "decimals": 18,
      "logoURI": "ipfs://QmbzDmJ2yboeFf45poTkzpqZkDbnsdL24x2BJQTs64yv5Z"
    },
    {
      "chainId": 1,
      "address": "0x6006FC2a849fEdABa8330ce36F5133DE01F96189",
      "symbol": "SHAKE",
      "name": "SHAKE",
      "decimals": 18,
      "logoURI": "ipfs://Qmf1EKhCNZb2z8kuXPTJ75UgixH9emKkxLJpx5oph8DKD5"
    },
    {
      "chainId": 1,
      "address": "0xdeFA4e8a7bcBA345F687a2f1456F5Edd9CE97202",
      "symbol": "KNC",
      "name": "Kyber Network",
      "decimals": 18,
      "logoURI": "ipfs://QmUV4eK6XWHuouhYAsxFqRm93JXCtkrCiwZur77nuWHq82"
    },
    {
      "chainId": 1,
      "address": "0x31d4Eb09a216e181eC8a43ce79226A487D6F0BA9",
      "symbol": "USDM",
      "name": "USDM",
      "decimals": 18,
      "logoURI": "ipfs://QmTZZhM31zF8kDgCExed6Q5JoMKwRghJzAVch7GLUVCyuY"
    },
    {
      "chainId": 100,
      "address": "0x9fB1d52596c44603198fB0aee434fac3a679f702",
      "symbol": "jEUR",
      "name": "Jarvis Synthetic Euro",
      "decimals": 18,
      "logoURI": "ipfs://Qmf5dn9opN4UiFuBisAjv95wrxsJvWGoDy6BUz2y8wZ7oq"
    },
    {
      "chainId": 1,
      "address": "0x7d3cb11f8c13730C24D01826d8F2005F0e1b348F",
      "symbol": "COS",
      "name": "COS",
      "decimals": 18,
      "logoURI": "ipfs://Qmby9N7YvEXWpd5jAKDri82exDF1ZRPmAFeALCYoZKRTuY"
    },
    {
      "chainId": 1,
      "address": "0x261EfCdD24CeA98652B9700800a13DfBca4103fF",
      "symbol": "sXAU",
      "name": "Synthetic Gold Ounce",
      "decimals": 18,
      "logoURI": "ipfs://QmQZndRVHLQWYJ3GQfWYq2ttkrbzKDD2ocMTwdx2ZFCagf"
    },
    {
      "chainId": 1,
      "address": "0xfffffffFf15AbF397dA76f1dcc1A1604F45126DB",
      "symbol": "FSW",
      "name": "FalconSwap",
      "decimals": 18,
      "logoURI": "ipfs://QmeDZ7pSyCCGjNVNtY6DGiFUYBFRUE9CH6EkLQJSAn1cLb"
    },
    {
      "chainId": 1,
      "address": "0x7D2D3688Df45Ce7C552E19c27e007673da9204B8",
      "symbol": "aLEND",
      "name": "Aave LEND",
      "decimals": 18,
      "logoURI": "ipfs://QmcPe96r5dNsNvyySfDsVskQAP4UWsukjbx8JzA4YtvcDR"
    },
    {
      "chainId": 137,
      "address": "0x6749441Fdc8650b5b5a854ed255C82EF361f1596",
      "symbol": "LUCHA",
      "name": "Lucha",
      "decimals": 18,
      "logoURI": "ipfs://QmYZLybVRoLGr5mjCpwxMZtCMxTeckmbbY7zwQhpSChN1Z"
    },
    {
      "chainId": 1,
      "address": "0xd55BD2C12B30075b325Bc35aEf0B46363B3818f8",
      "symbol": "ZOMBIE",
      "name": "Zombie.Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmRu9QGFFW8GuWfUDkiDB768NVEtsqCyWsFzk7LAfeTuHF"
    },
    {
      "chainId": 1,
      "address": "0xf2E08356588EC5cd9E437552Da87C0076b4970B0",
      "symbol": "sTRX",
      "name": "Synthetic TRON",
      "decimals": 18,
      "logoURI": "ipfs://QmXcuA9VY1uGAcbAXJ4ZqSbAy4EafpY2Ji7VjW6D6WSdXH"
    },
    {
      "chainId": 137,
      "address": "0xdb95f9188479575F3F718a245EcA1B3BF74567EC",
      "symbol": "GTC",
      "name": "Gitcoin",
      "decimals": 18,
      "logoURI": "ipfs://QmSMz1RrdcqKfUSFPqGFZMFNJm4gdqRWFohbYFgyL1cXaL"
    },
    {
      "chainId": 100,
      "address": "0xc60e38C6352875c051B481Cbe79Dd0383AdB7817",
      "symbol": "NODE",
      "name": "DAppNode",
      "decimals": 18,
      "logoURI": "ipfs://QmZ3hYnNuZV4fHHtWNeckZNDnfwtV7Y4cNJRxTHbke6W71"
    },
    {
      "chainId": 1,
      "address": "0xa4Cf2aFD3B165975afFFBf7e487CDd40C894Ab6B",
      "symbol": "SHIBAKEN",
      "name": "Shibaken Finance",
      "decimals": 0,
      "logoURI": "ipfs://QmVY61J4QPdEzqLPFcGY5eLfgk5SQqXrNsYg75cfAUnUkF"
    },
    {
      "chainId": 1,
      "address": "0xcAAfF72A8CbBfc5Cf343BA4e26f65a257065bFF1",
      "symbol": "KRT",
      "name": "Wrapped KRT",
      "decimals": 18,
      "logoURI": "ipfs://QmUPt5KdXmMGg7k64mZ4NY9icxPCuGcnmNCxQokbeKHCpz"
    },
    {
      "chainId": 1,
      "address": "0xd2Fa8f92Ea72AbB35dBD6DECa57173d22db2BA49",
      "symbol": "ORI",
      "name": "Origami Network",
      "decimals": 18,
      "logoURI": "ipfs://QmPFVPeSdSvA9hr8tULq4ro3mWUirydgozGW4PF3KrRqaF"
    },
    {
      "chainId": 137,
      "address": "0x3A58a54C066FdC0f2D55FC9C89F0415C92eBf3C4",
      "symbol": "stMATIC",
      "name": "Lido Staked MATIC",
      "decimals": 18,
      "logoURI": "ipfs://QmdDu8G9PRksN9qEjAA4Jioh7MKyVyjQdwmG9oh8GKiBRB"
    },
    {
      "chainId": 1,
      "address": "0xAf5191B0De278C7286d6C7CC6ab6BB8A73bA2Cd6",
      "symbol": "STG",
      "name": "Stargate Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmTj9QKW8byFvz6E4CE6n7wrxJRpoTrdU3opWG2AN8R3VK"
    },
    {
      "chainId": 1,
      "address": "0xE7C9C188138f7D70945D420d75F8Ca7d8ab9c700",
      "symbol": "BSDS",
      "name": "Basis Dollar Share",
      "decimals": 18,
      "logoURI": "ipfs://QmNygn8YL4qpwWGj5iTVqagnfSaWrUGnvznmK9S3feZxnP"
    },
    {
      "chainId": 56,
      "address": "0x8F0528cE5eF7B51152A59745bEfDD91D97091d2F",
      "symbol": "ALPACA",
      "name": "Alpaca Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmX52kb3uELLC5yagoxYdWqoqnVkvNjtJRUqh8v7vFsYgr"
    },
    {
      "chainId": 1,
      "address": "0xDDdddd4301A082e62E84e43F474f044423921918",
      "symbol": "DVF",
      "name": "DVF",
      "decimals": 18,
      "logoURI": "ipfs://QmREzt8rWC559YvKgSSqMuYw8moxCjUJXvuuTg7dJZL5nb"
    },
    {
      "chainId": 1,
      "address": "0x2C537E5624e4af88A7ae4060C022609376C8D0EB",
      "symbol": "TRYB",
      "name": "BiLira",
      "decimals": 6,
      "logoURI": "ipfs://QmSYKiiwshu3cphtt7oqPuD2eEUjYPmWojmUkdJvGj8EFg"
    },
    {
      "chainId": 1,
      "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
      "symbol": "cDAI",
      "name": "Compound Dai",
      "decimals": 8,
      "logoURI": "ipfs://Qmc5fKgqYEgDvvTmtV194EJZuGpn8aMkyxAj6jCZXStieB"
    },
    {
      "chainId": 1,
      "address": "0x40FD72257597aA14C7231A7B1aaa29Fce868F677",
      "symbol": "XOR",
      "name": "Sora",
      "decimals": 18,
      "logoURI": "ipfs://QmeVWXzQiq2tC356xskRULfMYgSgMpMbEdpoFgfJ1baehV"
    },
    {
      "chainId": 1,
      "address": "0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9",
      "symbol": "AAVE",
      "name": "Aave",
      "decimals": 18,
      "logoURI": "ipfs://QmWZmCpB1yJS3qzFVxRQDWB63zFKJq9UmBae25Y5ijj7ma"
    },
    {
      "chainId": 1,
      "address": "0xac3E018457B222d93114458476f3E3416Abbe38F",
      "symbol": "sfrxETH",
      "name": "Staked Frax Ether",
      "decimals": 18,
      "logoURI": "ipfs://QmX1r2JVToPDMkRUFsERHeeCheTXFZ9Hw1nuq1gDNjufxG"
    },
    {
      "chainId": 1,
      "address": "0xC63B8ECCE56aB9C46184eC6aB85e4771fEa4c8AD",
      "symbol": "sGOOG",
      "name": "Synthetic Alphabet",
      "decimals": 18,
      "logoURI": "ipfs://QmdKtL2M6pvCMqsQxywoRQWeuyWDp9S156BM9UKMFvwc2o"
    },
    {
      "chainId": 1,
      "address": "0xF4EebDD0704021eF2a6Bbe993fdf93030Cd784b4",
      "symbol": "iEOS",
      "name": "Synthetic Inverse EOS",
      "decimals": 18,
      "logoURI": "ipfs://QmTPwH79fZJgZMR6Adyxhsrm89KBor4kTQJ9Tc3w4aT386"
    },
    {
      "chainId": 1,
      "address": "0x14094949152EDDBFcd073717200DA82fEd8dC960",
      "symbol": "iSAI",
      "name": "Fulcrum SAI iToken",
      "decimals": 18,
      "logoURI": "ipfs://QmZykNkn2647s53wjXfCJvZpT2bTtuzR77JejNMjCYxtZq"
    },
    {
      "chainId": 1,
      "address": "0xDb05EA0877A2622883941b939f0bb11d1ac7c400",
      "symbol": "OPCT",
      "name": "Opacity",
      "decimals": 18,
      "logoURI": "ipfs://QmctShYZNUbjS5FNtNhJyPrPW3mFvKsd2dzbfuQu2ba87e"
    },
    {
      "chainId": 1,
      "address": "0x4688a8b1F292FDaB17E9a90c8Bc379dC1DBd8713",
      "symbol": "COVER",
      "name": "Cover Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmY4nwV5V3kzGM7hanKRGZi5qFHpcx2weik3T7h5imZ1j6"
    },
    {
      "chainId": 1,
      "address": "0x17EF75AA22dD5f6C2763b8304Ab24f40eE54D48a",
      "symbol": "RVP",
      "name": "Revolution Populi",
      "decimals": 18,
      "logoURI": "ipfs://QmNfPVrZd5TmGzHHd6nmF3eBXaSEGV5WmBNzHbFATCMCYR"
    },
    {
      "chainId": 1,
      "address": "0x2f4eb47A1b1F4488C71fc10e39a4aa56AF33Dd49",
      "symbol": "UNCL",
      "name": "UNCL",
      "decimals": 18,
      "logoURI": "ipfs://QmNVFw92RUYVYwDHQTk3CTn7xRPHu1TDkiQgamvo4c5hoD"
    },
    {
      "chainId": 1,
      "address": "0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C",
      "symbol": "BNT",
      "name": "Bancor",
      "decimals": 18,
      "logoURI": "ipfs://QmYyiMwdk1BRxCUyXqA44KLDT1p571p81iipGoRmfRLf9a"
    },
    {
      "chainId": 1,
      "address": "0x8E6cd950Ad6ba651F6DD608Dc70e5886B1AA6B24",
      "symbol": "STARL",
      "name": "StarLink",
      "decimals": 18,
      "logoURI": "ipfs://QmYsqWqHeHL3q2beLrAc7KRurniEE9aSDqGSp4XsKeu5LH"
    },
    {
      "chainId": 1,
      "address": "0xe1030B48b2033314979143766d7dC1F40ef8CE11",
      "symbol": "PEEPS",
      "name": "The People's Coin",
      "decimals": 18,
      "logoURI": "ipfs://QmXrRiq1MakbG3sjyZHNgJACnqJ4wAkBiY4ssvV6yX8CmK"
    },
    {
      "chainId": 56,
      "address": "0x734548a9e43d2D564600b1B2ed5bE9C2b911c6aB",
      "symbol": "PEEL",
      "name": "Meta Apes PEEL",
      "decimals": 18,
      "logoURI": "ipfs://QmeCGD9AG5vd9LBjmArDjqKKbQsad86qfw3DGsNeopgSTk"
    },
    {
      "chainId": 1,
      "address": "0x54C9EA2E9C9E8eD865Db4A4ce6711C2a0d5063Ba",
      "symbol": "BART",
      "name": "BarterTrade",
      "decimals": 18,
      "logoURI": "ipfs://QmRAr7GdwnttAEjsNzBjfoyRSwFfZUuX1yUjGQNPYNe1HH"
    },
    {
      "chainId": 1,
      "address": "0x6c3ea9036406852006290770BEdFcAbA0e23A0e8",
      "symbol": "PYUSD",
      "name": "PayPal USD",
      "decimals": 6,
      "logoURI": "ipfs://QmSgccL8xqACYF1n7WBioLdRRWkdi47ejFRuuaCkAMaDAX"
    },
    {
      "chainId": 1,
      "address": "0x2B89D32CfB9b28DFCc7FAcC22453c812F9097655",
      "symbol": "HAREM",
      "name": "Harem",
      "decimals": 18,
      "logoURI": "ipfs://QmPLQ3XQ7u3Lw8eAceZnUTnt3Hrc2HVJMgL7BtH1fqq12z"
    },
    {
      "chainId": 1,
      "address": "0xF5581dFeFD8Fb0e4aeC526bE659CFaB1f8c781dA",
      "symbol": "HOPR",
      "name": "HOPR",
      "decimals": 18,
      "logoURI": "ipfs://QmatpCk3VBM241MPEx8D6fMKSyHXpwTi7ua2z5MuzFdR7P"
    },
    {
      "chainId": 1,
      "address": "0xbC396689893D065F41bc2C6EcbeE5e0085233447",
      "symbol": "PERP",
      "name": "Perpetual Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmbrmbQViGSNaHX3MXbRoWRPniKT6QKzbn7zyKHAtK87iu"
    },
    {
      "chainId": 1,
      "address": "0xA67b8e40111A0EDD30C3210b77aadb86AD234c43",
      "symbol": "BANDEX",
      "name": "Banana Index",
      "decimals": 9,
      "logoURI": "ipfs://QmUXQC41rMyn3USxPWR3YfZnjgFZuasVLXVeLqLgmyWCXq"
    },
    {
      "chainId": 1,
      "address": "0xd44bb6663936CAb1310584A277f7DAa6943d4904",
      "symbol": "WCO",
      "name": "Winco",
      "decimals": 8,
      "logoURI": "ipfs://QmNoUNkfxpvXMMqHM2FT8bEepjSt6YwivNducwGAr3v8bF"
    },
    {
      "chainId": 137,
      "address": "0xdF7837DE1F2Fa4631D716CF2502f8b230F1dcc32",
      "symbol": "TEL",
      "name": "Telcoin",
      "decimals": 2,
      "logoURI": "ipfs://QmU4GXPewzzHK4pS7p53ZbGW3DNnmoX7C8jXLMHFXPG6Lv"
    },
    {
      "chainId": 1,
      "address": "0x3E9BC21C9b189C09dF3eF1B824798658d5011937",
      "symbol": "LINA",
      "name": "Linear Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmVdZp7XDu2kQofFhXM3sE5PrFB4rGj7WFEkYN9cb69qLx"
    },
    {
      "chainId": 1,
      "address": "0x43a89815F33747eDBeCC588d6BB7E1c10dDa5599",
      "symbol": "THUN",
      "name": "Thunder",
      "decimals": 18,
      "logoURI": "ipfs://Qma3axxieUnwWnWaWQagGHih4a3iG2G8o6XsYivtCPEgwM"
    },
    {
      "chainId": 1,
      "address": "0x47bc01597798DCD7506DCCA36ac4302fc93a8cFb",
      "symbol": "CMCT",
      "name": "Crowd Machine",
      "decimals": 8,
      "logoURI": "ipfs://QmZkxwQEU11CY9SsZXZ4M1YXXzjwDhYyWvTkEMVLDGUT5b"
    },
    {
      "chainId": 56,
      "address": "0xD41FDb03Ba84762dD66a0af1a6C8540FF1ba5dfb",
      "symbol": "SFP",
      "name": "SafePal",
      "decimals": 18,
      "logoURI": "ipfs://QmVPts8pq7Wr3uehn66tmE8uHMMJ85pGhXjXVBdfRg12Ca"
    },
    {
      "chainId": 56,
      "address": "0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD",
      "symbol": "LINK",
      "name": "Chainlink",
      "decimals": 18,
      "logoURI": "ipfs://QmNV8bCNTxP2ZeryqvtUFL4Z1ky6KVvr5FoicrPY8pECVM"
    },
    {
      "chainId": 1,
      "address": "0x6C8c6b02E7b2BE14d4fA6022Dfd6d75921D90E4E",
      "symbol": "cBAT",
      "name": "Compound Basic Attention Token",
      "decimals": 8,
      "logoURI": "ipfs://QmNVWktiGqs1b6fUBVGq27BC18BeCFqgkTrB1EHcFRZF3E"
    },
    {
      "chainId": 1,
      "address": "0x4c584CD339bdDE73B7F5210486dd8bbeEE3fDe6d",
      "symbol": "SHIBELON",
      "name": "ShibElon",
      "decimals": 9,
      "logoURI": "ipfs://QmWzu7iuneFKBTeG93LxjH15CJzDFh7gtoS7miCpG4Zo4k"
    },
    {
      "chainId": 1,
      "address": "0xe0d2F5C883d5d470D16fa6dD73610bB4253577fF",
      "symbol": "MCM",
      "name": "MemeCoinUniverse",
      "decimals": 9,
      "logoURI": "ipfs://QmTYWMVUp3zXknCo9CisMDSHaFHBVpFH8tWfUTb1KMiTjo"
    },
    {
      "chainId": 1,
      "address": "0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44",
      "symbol": "KP3R",
      "name": "Keep3rV1",
      "decimals": 18,
      "logoURI": "ipfs://QmQrxRC69mX9dVi1CL1GoVf9iooMaC4UNosTpSaszyg9vu"
    },
    {
      "chainId": 1,
      "address": "0x970B9bB2C0444F5E81e9d0eFb84C8ccdcdcAf84d",
      "symbol": "FUSE",
      "name": "Fuse network",
      "decimals": 18,
      "logoURI": "ipfs://QmWtpfZXtw4PZoZ91SW78CBu8YHD9tZ2EETQzNF9ArFyBv"
    },
    {
      "chainId": 1,
      "address": "0xf8d325872acbAed090056B4E0bf104B1C735F439",
      "symbol": "STC",
      "name": "STC",
      "decimals": 0,
      "logoURI": "ipfs://QmaNeGBhRXHrSfogZhZnF8iw9Xv4PrckBpAcD2YYwjppMt"
    },
    {
      "chainId": 1,
      "address": "0x44fbeBd2F576670a6C33f6Fc0B00aA8c5753b322",
      "symbol": "crUSDC",
      "name": "Cream USD Coin",
      "decimals": 8,
      "logoURI": "ipfs://QmRG1TnamVNvLPoGTHDFRzXL7LvihM6qSSthtJXhQefih5"
    },
    {
      "chainId": 137,
      "address": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
      "symbol": "USDC",
      "name": "USD Coin",
      "decimals": 6,
      "logoURI": "ipfs://QmUQp1wZzr4UREn4AVLkKH5GbwpUCwf9w5VQQJeh1bmThJ"
    },
    {
      "chainId": 1,
      "address": "0xBd0793332e9fB844A52a205A233EF27a5b34B927",
      "symbol": "ZB",
      "name": "ZB Token",
      "decimals": 18,
      "logoURI": "ipfs://QmXQxWh8N9TPkRgcbBNhJVem3usoeUPBYLetmj9yhkpVrk"
    },
    {
      "chainId": 1,
      "address": "0x0258F474786DdFd37ABCE6df6BBb1Dd5dfC4434a",
      "symbol": "ORN",
      "name": "Orion Protocol",
      "decimals": 8,
      "logoURI": "ipfs://QmZpUYMDNfEghsDHqw9JnXi8YmD7pKworpxmU76QpmztQj"
    },
    {
      "chainId": 1,
      "address": "0xbd31EA8212119f94A611FA969881CBa3EA06Fa3d",
      "symbol": "LUNC",
      "name": "Terra Classic",
      "decimals": 6,
      "logoURI": "ipfs://QmceuGzAgd2wcWiDvX9ygEohHnaMqWDpSok7ot1h7jahZt"
    },
    {
      "chainId": 1,
      "address": "0xae78736Cd615f374D3085123A210448E74Fc6393",
      "symbol": "rETH",
      "name": "Rocket Pool ETH",
      "decimals": 18,
      "logoURI": "ipfs://QmfDu3ixQSNtUxYdRBMhCFSSKUX1H23dfY1dy1NHcF8ZQ2"
    },
    {
      "chainId": 1,
      "address": "0x13dB9034C9CA6cb739887288fcE790544a476f8c",
      "symbol": "TAIYO",
      "name": "Taiyo",
      "decimals": 9,
      "logoURI": "ipfs://QmQEP9PnmZ48qfxNuaxu28z71zjKdE7u3fEvtp3xdZHeoP"
    },
    {
      "chainId": 1,
      "address": "0xacE837f596029039E7eDd4789f9978259e1C3035",
      "symbol": "SHOP",
      "name": "CoinShop",
      "decimals": 10,
      "logoURI": "ipfs://QmVLtNETd6zQvYC36GKJfGdwJHWFsVhUgnE2T49CauEeeG"
    },
    {
      "chainId": 10,
      "address": "0x350a791Bfc2C21F9Ed5d10980Dad2e2638ffa7f6",
      "symbol": "LINK",
      "name": "Chainlink",
      "decimals": 18,
      "logoURI": "ipfs://Qmdn6E15MELheFNupKrMosD9KPDFZ9M3wVKkhCuacT1cVj"
    },
    {
      "chainId": 1,
      "address": "0x7dE91B204C1C737bcEe6F000AAA6569Cf7061cb7",
      "symbol": "XRT",
      "name": "Robonomics Network",
      "decimals": 9,
      "logoURI": "ipfs://QmZD4hXZMe66SiiUwUVn5ayHHa2JcUi8Vzp9D3vCMYf99j"
    },
    {
      "chainId": 137,
      "address": "0x62F594339830b90AE4C084aE7D223fFAFd9658A7",
      "symbol": "SPHERE",
      "name": "Sphere Finance",
      "decimals": 18,
      "logoURI": "ipfs://Qmcr1MJPYDeuoNRejs1S6LpQmhrQmvQU6wQ6CA93XwmUHL"
    },
    {
      "chainId": 1,
      "address": "0x41dBECc1cdC5517C6f76f6a6E836aDbEe2754DE3",
      "symbol": "MTN",
      "name": "Medicalchain",
      "decimals": 18,
      "logoURI": "ipfs://Qmdw9uCXAfsYpS1ZJiBZdmvJX9ftKEPZmXgQCBRh8q5Ap5"
    },
    {
      "chainId": 1,
      "address": "0x459086F2376525BdCebA5bDDA135e4E9d3FeF5bf",
      "symbol": "renBCH",
      "name": "renBCH",
      "decimals": 8,
      "logoURI": "ipfs://QmXvRk5pWAkB58A8QpZtsNHfzzy6iPzoAa1seDV1MFhCVC"
    },
    {
      "chainId": 1,
      "address": "0xC57d533c50bC22247d49a368880fb49a1caA39F7",
      "symbol": "PTF",
      "name": "PowerTrade Fuel",
      "decimals": 18,
      "logoURI": "ipfs://QmRCPkcofqoD4izP4Z2muvAdSv7Qy2bhbYSTEpjrpQod98"
    },
    {
      "chainId": 1,
      "address": "0x491604c0FDF08347Dd1fa4Ee062a822A5DD06B5D",
      "symbol": "CTSI",
      "name": "Cartesi",
      "decimals": 18,
      "logoURI": "ipfs://QmXwhy4L7SzzSPKntJSHEDfSL1P9pHjB5wmDk9z1j6pyfp"
    },
    {
      "chainId": 1,
      "address": "0xe1406825186D63980fd6e2eC61888f7B91C4bAe4",
      "symbol": "vBTC",
      "name": "vBTC",
      "decimals": 18,
      "logoURI": "ipfs://QmQYo7FoEhQ7SRYrBLGfu3sf4USAL31VVwKxtu1UhJjF7U"
    },
    {
      "chainId": 1,
      "address": "0x1B957Dc4aEfeed3b4A2351a6A6d5cbfbbA0CeCFa",
      "symbol": "HQX",
      "name": "HOQU",
      "decimals": 18,
      "logoURI": "ipfs://QmVB7dGPkvBpZ5ZozpK9J4p4KSNAbZTqVC6QtaHrQ5oiGt"
    },
    {
      "chainId": 1,
      "address": "0x1cBb83EbcD552D5EBf8131eF8c9CD9d9BAB342bC",
      "symbol": "NFY",
      "name": "Non-Fungible Yearn",
      "decimals": 18,
      "logoURI": "ipfs://QmQBkKBTax8YYjhdqRUPLNuhZXKrx23jK2FxhadRh7BSmG"
    },
    {
      "chainId": 1,
      "address": "0x374CB8C27130E2c9E04F44303f3c8351B9De61C1",
      "symbol": "BAO",
      "name": "Bao Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmUcpxByj4HYHCnS28hQjuJjf8sGHtJg6RnSwgHBnY4oEz"
    },
    {
      "chainId": 1,
      "address": "0xcE4Fe9b4b8Ff61949DCfeB7e03bc9FAca59D2Eb3",
      "symbol": "crBAL",
      "name": "Cream Balancer",
      "decimals": 8,
      "logoURI": "ipfs://QmaN8eWm8xv8Fr36taxMrN35QAgN5xSRckwUCg3Smp4wxs"
    },
    {
      "chainId": 1,
      "address": "0xB04DFdb8271ed2d5e13858562C44A77D3CEb9e57",
      "symbol": "BUP",
      "name": "BuildUp",
      "decimals": 18,
      "logoURI": "ipfs://QmUndYD3UPaf41u2p7VS5SYXaPvKSLpf2iCDpyN1gNfcAz"
    },
    {
      "chainId": 1,
      "address": "0x56ba2Ee7890461f463F7be02aAC3099f6d5811A8",
      "symbol": "CAT",
      "name": "BlockCAT",
      "decimals": 18,
      "logoURI": "ipfs://QmRCNiZCPNswyF8XJBcwviW7sXDEwd2BLms5GP6BcmxHY6"
    },
    {
      "chainId": 1,
      "address": "0xf8C3527CC04340b208C854E985240c02F7B7793f",
      "symbol": "FRONT",
      "name": "Frontier",
      "decimals": 18,
      "logoURI": "ipfs://QmbPAXdg4yZb3Nq8NR2xGxc3d5W4Cv6ottd8HtozND6sgY"
    },
    {
      "chainId": 1,
      "address": "0x76BE3b62873462d2142405439777e971754E8E77",
      "symbol": "LL",
      "name": "Parallel Alpha",
      "decimals": 0,
      "logoURI": "ipfs://QmS1iEJdesEULnzwG985pmSHzq2GdKDppnMyjTCAkegNP8"
    },
    {
      "chainId": 1,
      "address": "0x73968b9a57c6E53d41345FD57a6E6ae27d6CDB2F",
      "symbol": "SDT",
      "name": "Stake DAO",
      "decimals": 18,
      "logoURI": "ipfs://QmNoTzaDqVWb9oNsJsGGDrM4rnUikzMpTPzTxj4BUtt6kT"
    },
    {
      "chainId": 1,
      "address": "0xA017ac5faC5941f95010b12570B812C974469c2C",
      "symbol": "XES",
      "name": "Proxeus",
      "decimals": 18,
      "logoURI": "ipfs://QmRRipNdzX4dbm8e1i9ysPgnBz5MtWDKz6YLFy7pgEQsNR"
    },
    {
      "chainId": 1,
      "address": "0x6369c3DadfC00054A42BA8B2c09c48131dd4Aa38",
      "symbol": "MPH",
      "name": "Morpher",
      "decimals": 18,
      "logoURI": "ipfs://QmaEFtAe6wJttQk68dHdmesLCpfDLLuF1GBGsZCVTmQKC4"
    },
    {
      "chainId": 1,
      "address": "0x3774E825d567125988Fb293e926064B6FAa71DAB",
      "symbol": "sUSDC",
      "name": "Strike USDC",
      "decimals": 8,
      "logoURI": "ipfs://QmYepBL97YhLXFKLEoRH6FkbL6fWEReWycfe1mrPrqgna3"
    },
    {
      "chainId": 1,
      "address": "0x111111111117dC0aa78b770fA6A738034120C302",
      "symbol": "1INCH",
      "name": "1Inch Network",
      "decimals": 18,
      "logoURI": "ipfs://QmdUjFYL2izDVe4PLKArg7GtoHmsSqX6Bcsv9fmaVMcbLF"
    },
    {
      "chainId": 1,
      "address": "0x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd",
      "symbol": "GUSD",
      "name": "Gemini Dollar",
      "decimals": 2,
      "logoURI": "ipfs://Qma5Z8akU9S9gfzhn2SnzAsVV6w5KLdYZbRcXF8wFjS7LG"
    },
    {
      "chainId": 137,
      "address": "0xc2132D05D31c914a87C6611C10748AEb04B58e8F",
      "symbol": "USDT",
      "name": "Tether",
      "decimals": 6,
      "logoURI": "ipfs://Qmd9YVdtaXDZuMmeChdpK4LfizyLkBbVijpLyXGSNwFGEz"
    },
    {
      "chainId": 1,
      "address": "0xf3db7560E820834658B590C96234c333Cd3D5E5e",
      "symbol": "CHP",
      "name": "CoinPoker",
      "decimals": 18,
      "logoURI": "ipfs://QmdDiPmT4UanudNH1HWX9odWph1hg3EeuJ4NB5Rmdu6uY4"
    },
    {
      "chainId": 1,
      "address": "0x3Ed3B47Dd13EC9a98b44e6204A523E766B225811",
      "symbol": "aUSDT",
      "name": "Aave USDT",
      "decimals": 6,
      "logoURI": "ipfs://QmZgK1xGpwDbMv6sHEgdpPumW89CYcd7ygBTuH5fngDm4w"
    },
    {
      "chainId": 1,
      "address": "0xB879DA8b24c9b8685dE8526cF492E954f165D74b",
      "symbol": "MBL",
      "name": "MovieBloc",
      "decimals": 18,
      "logoURI": "ipfs://QmVfPSLuw4wejEqiQYGSJq7aLRKYRjatWpCFRyc6JN16ab"
    },
    {
      "chainId": 100,
      "address": "0xFAdc59D012Ba3c110B08A15B7755A5cb7Cbe77D7",
      "symbol": "GRT",
      "name": "The Graph",
      "decimals": 18,
      "logoURI": "ipfs://QmaCTcJ7pLUgdjdXeZkubcRsGnyT73fvPBsgPLWMZevCfd"
    },
    {
      "chainId": 1,
      "address": "0x58b6A8A3302369DAEc383334672404Ee733aB239",
      "symbol": "LPT",
      "name": "Livepeer",
      "decimals": 18,
      "logoURI": "ipfs://QmaevUHKYe7k6tS3ovLXMipGZLY4FEKAhoe1EfP6RiVzDS"
    },
    {
      "chainId": 1,
      "address": "0xD9A12Cde03a86E800496469858De8581D3A5353d",
      "symbol": "YUP",
      "name": "Crowdholding",
      "decimals": 18,
      "logoURI": "ipfs://QmbUSMkcbx55r5THhs4EmunCmtWtgQNFQsxGx2cZPRniQ8"
    },
    {
      "chainId": 1,
      "address": "0x86Dd3002BF215082Ea43b0Bd2fD595EcE4341880",
      "symbol": "VIO",
      "name": "VIO",
      "decimals": 18,
      "logoURI": "ipfs://QmagBwPjLa7SFmRDRDNZrfvxZPbtWYKJW8ptBK1hr43rtG"
    },
    {
      "chainId": 1,
      "address": "0x26fb86579e371c7AEdc461b2DdEF0A8628c93d3B",
      "symbol": "BORA",
      "name": "BORA",
      "decimals": 18,
      "logoURI": "ipfs://QmZ5CwhwQhNmn4FKmFrhtfQsqGeeQcBYnfMj6hd11rWq7n"
    },
    {
      "chainId": 137,
      "address": "0x41b3966B4FF7b427969ddf5da3627d6AEAE9a48E",
      "symbol": "NEXO",
      "name": "Nexo",
      "decimals": 18,
      "logoURI": "ipfs://QmeQcA5VJM1ZoPUcEDtzeQ9Y8Qj4gHEbjEjk2e59x8vD3j"
    },
    {
      "chainId": 1,
      "address": "0x17d1823bD5E96e76e822ab42B61d348302E072d5",
      "symbol": "ROSA",
      "name": "ROSA",
      "decimals": 18,
      "logoURI": "ipfs://QmVdkAqLpXBXuoNQMBkuLKPJH2uU64KBvdrDYP4i2sL98o"
    },
    {
      "chainId": 1,
      "address": "0xa1faa113cbE53436Df28FF0aEe54275c13B40975",
      "symbol": "ALPHA",
      "name": "Alpha Finance Lab",
      "decimals": 18,
      "logoURI": "ipfs://Qmd2995jmAebU9StqzUaDSXSj3bc5UKBg3CFxQHYpMKzGq"
    },
    {
      "chainId": 1,
      "address": "0x226f7b842E0F0120b7E194D05432b3fd14773a9D",
      "symbol": "UNN",
      "name": "UNION Protocol Governance Token",
      "decimals": 18,
      "logoURI": "ipfs://QmSnXiNhmfTMvGrrdC4WewzSfkASkTg4BQxwd82Q3JgGW4"
    },
    {
      "chainId": 100,
      "address": "0xC45b3C1c24d5F54E7a2cF288ac668c74Dd507a84",
      "symbol": "SYMM",
      "name": "Symmetric",
      "decimals": 18,
      "logoURI": "ipfs://QmaK238o194FtknhS9B2pNRKS9oZUnuW4keVYYqYyGXh7X"
    },
    {
      "chainId": 1,
      "address": "0x3E1d5A855aD9D948373aE68e4fe1f094612b1322",
      "symbol": "HQT",
      "name": "HyperQuant",
      "decimals": 18,
      "logoURI": "ipfs://QmU3HWjDAYhRA6Cpct21xMuG5QjCSHxAec5XJ9qUajvi1i"
    },
    {
      "chainId": 1,
      "address": "0xa44E5137293E855B1b7bC7E2C6f8cD796fFCB037",
      "symbol": "SENT",
      "name": "Sentinel",
      "decimals": 8,
      "logoURI": "ipfs://QmatciLMmg3tdtnLVjwHEwQyQY4tTMsSBH68zzaMvxAQ3p"
    },
    {
      "chainId": 56,
      "address": "0x76F3CE6aF26de7A9854dBD153ACd8f46a2Cf5133",
      "symbol": "GLMR",
      "name": "Moonbeam",
      "decimals": 18,
      "logoURI": "ipfs://Qmb1rxnBpE8uaSrEzKEg3enn2XrMR3749XGw9xpTZ5YzLt"
    },
    {
      "chainId": 1,
      "address": "0x6aEDbF8dFF31437220dF351950Ba2a3362168d1b",
      "symbol": "DGS",
      "name": "Dragonglass",
      "decimals": 8,
      "logoURI": "ipfs://QmUqwt4PuKzg2DWn5jRQyTbPsu1eVgNFvEH4qkMYGjorwF"
    },
    {
      "chainId": 1,
      "address": "0x79ddbbCc9D7FbDc77b02A960DabD2577144FDD6E",
      "symbol": "CPX",
      "name": "Crypxie",
      "decimals": 18,
      "logoURI": "ipfs://QmRkf5VRnfezcP9Y5ei9wp5dzf9Qdw1N5fYSkzbLrJUr9m"
    },
    {
      "chainId": 1,
      "address": "0xaCbd826394189Cf2623C6DF98a18b41fC8fFC16D",
      "symbol": "N1",
      "name": "NFTify",
      "decimals": 18,
      "logoURI": "ipfs://QmS67N76KoczJVVgiEQxbYuYwWjskfbT74R1HKYCEXhVrv"
    },
    {
      "chainId": 100,
      "address": "0x2F0E755Efe6b58238A67DB420Ff3513Ec1fb31eF",
      "symbol": "RPL",
      "name": "Rocket Pool",
      "decimals": 18,
      "logoURI": "ipfs://QmNSj1BfWphbDaTStW6JvrmnzoEHpFJpPNNczNAheANF4f"
    },
    {
      "chainId": 1,
      "address": "0xaB456bDb0A373BBaC6C4A76176E9f159cAcD5752",
      "symbol": "SGE",
      "name": "Society of Galactic Exploration",
      "decimals": 9,
      "logoURI": "ipfs://QmcTLD8aWrMQW7q4SwE5P4uJyDdCXgvHDmuYRZfYeyuh1v"
    },
    {
      "chainId": 137,
      "address": "0x3a9A81d576d83FF21f26f325066054540720fC34",
      "symbol": "DATA",
      "name": "Streamr",
      "decimals": 18,
      "logoURI": "ipfs://QmeBtBN63Ah7FkrZEF848tDbZKXeXApv165obUQdw7otk5"
    },
    {
      "chainId": 56,
      "address": "0x4d2d32d8652058Bf98c772953E1Df5c5c85D9F45",
      "symbol": "DAO",
      "name": "DAO Maker",
      "decimals": 18,
      "logoURI": "ipfs://QmXFYWGruYGapJjmBHUsLmycCzoSNWQTofUmfd2qbMUzvW"
    },
    {
      "chainId": 1,
      "address": "0xC18e7a03f8986798323658dD8645f93aa79Ac5C9",
      "symbol": "USKITA",
      "name": "American Akita",
      "decimals": 9,
      "logoURI": "ipfs://QmSKPe75db4tZxwiz2PdvcFDWfZsD8n7vxNR8cK3S9mZVh"
    },
    {
      "chainId": 1,
      "address": "0x0000000000004946c0e9F43F4Dee607b0eF1fA1c",
      "symbol": "CHI",
      "name": "Chi Gastoken",
      "decimals": 0,
      "logoURI": "ipfs://QmaELhudz2hajBYobUud6xWTXGB1hCis6eui7La56F7af3"
    },
    {
      "chainId": 1,
      "address": "0xb4058411967D5046f3510943103805be61f0600E",
      "symbol": "STONK",
      "name": "STONK",
      "decimals": 18,
      "logoURI": "ipfs://QmXho9sKKLVVAb9jt9LxPBzGcwFdaxHthabSJ9VnD5rdFJ"
    },
    {
      "chainId": 1,
      "address": "0x0C10bF8FcB7Bf5412187A595ab97a3609160b5c6",
      "symbol": "USDD",
      "name": "Decentralized USD",
      "decimals": 18,
      "logoURI": "ipfs://QmPtvMuo6UQwDXB7cTVz85Ms5noX6rnnNKi3HNmwKrPf8u"
    },
    {
      "chainId": 56,
      "address": "0x4B0F1812e5Df2A09796481Ff14017e6005508003",
      "symbol": "TWT",
      "name": "Trust Wallet",
      "decimals": 18,
      "logoURI": "ipfs://QmSfXgD1xZoZQa2VVAxVxHjaRG5Jb8vauneyUmBi1HNTMv"
    },
    {
      "chainId": 1,
      "address": "0x2d94AA3e47d9D5024503Ca8491fcE9A2fB4DA198",
      "symbol": "BANK",
      "name": "Bankless DAO",
      "decimals": 18,
      "logoURI": "ipfs://QmU6UJuSbeRcxDaG8PVbuE74x2fud6dDq3yzSLLA7c2sqz"
    },
    {
      "chainId": 1,
      "address": "0xe28b3B32B6c345A34Ff64674606124Dd5Aceca30",
      "symbol": "INJ",
      "name": "Injective",
      "decimals": 18,
      "logoURI": "ipfs://QmbHj8s17pzLhzMBb9azQu5Gjn4ufJT3iZMm7vCefgJhBn"
    },
    {
      "chainId": 1,
      "address": "0x6226caA1857AFBc6DFB6ca66071Eb241228031A1",
      "symbol": "LAR",
      "name": "LinkArt",
      "decimals": 18,
      "logoURI": "ipfs://QmZBy8duR1KoUbLufsUFBngJKGqqkFJgstXwoT29bQkPD6"
    },
    {
      "chainId": 1,
      "address": "0x5fAa989Af96Af85384b8a938c2EdE4A7378D9875",
      "symbol": "GAL",
      "name": "Galxe",
      "decimals": 18,
      "logoURI": "ipfs://Qmbmw5JewVsNkzb2hfMgEgn9X19wejADFyKun8ef2KQqaH"
    },
    {
      "chainId": 1,
      "address": "0x1a7a8BD9106F2B8D977E08582DC7d24c723ab0DB",
      "symbol": "APPC",
      "name": "AppCoins",
      "decimals": 18,
      "logoURI": "ipfs://QmWtSbW1i94HiGjTx8GSNMhudoByafCuV1YLShwZVJCpcC"
    },
    {
      "chainId": 1,
      "address": "0xB8fA12f8409DA31A4fc43D15c4c78C33d8213B9B",
      "symbol": "CALI",
      "name": "CaliCoin",
      "decimals": 18,
      "logoURI": "ipfs://QmV64d6qKqYioY2Hbq7KMEpDjQyx6zRaHDNiFE17gNGhHA"
    },
    {
      "chainId": 1,
      "address": "0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F",
      "symbol": "SNX",
      "name": "Synthetix Network Token",
      "decimals": 18,
      "logoURI": "ipfs://QmSb1MTUsbzKTBuRjBiAjCjJSYaWFNRwkD7LnxswVKyJZc"
    },
    {
      "chainId": 1,
      "address": "0x315dc1b524de57AE8e809A2e97699dbc895B8a21",
      "symbol": "PIST",
      "name": "Pist Trust",
      "decimals": 9,
      "logoURI": "ipfs://Qmdvz7FRMPP6r9Hnwu7LXTkXGc8DGZCSukwDvZ22QPW84C"
    },
    {
      "chainId": 100,
      "address": "0x97Edc0e345FbBBd8460847Fcfa3bc2a13bF8641F",
      "symbol": "RICE",
      "name": "DAOSquare",
      "decimals": 18,
      "logoURI": "ipfs://Qmf2DfENXpxg3AiNyuizMh38VnKcszgA46muZkjh75iG2z"
    },
    {
      "chainId": 1,
      "address": "0x36A00FF9072570eF4B9292117850B8FE08d96cce",
      "symbol": "iUNI",
      "name": "Synthetic Inverse Uniswap",
      "decimals": 18,
      "logoURI": "ipfs://QmNS237uaZzk376w96KYwzpZsCWYWJPtXqJ7nnWNQxo1Nv"
    },
    {
      "chainId": 1,
      "address": "0x992058B7DB08F9734d84485bfbC243C4ee6954A7",
      "symbol": "sYFI",
      "name": "Synthetic yearn.finance",
      "decimals": 18,
      "logoURI": "ipfs://QmXUyHpszkjY343mUEt2YbnGS3a2yb2qz7YCy9EBiopd9W"
    },
    {
      "chainId": 1,
      "address": "0xe53EC727dbDEB9E2d5456c3be40cFF031AB40A55",
      "symbol": "SUPER",
      "name": "SuperFarm",
      "decimals": 18,
      "logoURI": "ipfs://QmVqiHM2HPc8bdMwWei1DyJNX7Fv76E8NogMXuwAPGHh2F"
    },
    {
      "chainId": 1,
      "address": "0x99d36e97676A68313ffDc627fd6b56382a2a08B6",
      "symbol": "BABYTRUMP",
      "name": "Baby Trump",
      "decimals": 9,
      "logoURI": "ipfs://QmaZ5hYtuoPdCxhpYNUR1Tw1kUJNR7b9PvEFqDJWFB3vHt"
    },
    {
      "chainId": 1,
      "address": "0xBA50933C268F567BDC86E1aC131BE072C6B0b71a",
      "symbol": "ARPA",
      "name": "ARPA",
      "decimals": 18,
      "logoURI": "ipfs://QmZ8TDgRJBPP5a6LXoHc9DZ5igtPQY6w8mPCuSTXST1WhF"
    },
    {
      "chainId": 1,
      "address": "0x2ef52Ed7De8c5ce03a4eF0efbe9B7450F2D7Edc9",
      "symbol": "REV",
      "name": "Revain",
      "decimals": 6,
      "logoURI": "ipfs://QmQREivJ5WBdNaAZgyhPvfPbhHnzg3fKGQnxGTbWca1CVH"
    },
    {
      "chainId": 1,
      "address": "0x26B3038a7Fc10b36c426846a9086Ef87328dA702",
      "symbol": "YFT",
      "name": "Yield Farming Token",
      "decimals": 18,
      "logoURI": "ipfs://QmTWusK6hMYQy2oyfLW7wxmMuriRUMgN9U7tXTcjw8xALx"
    },
    {
      "chainId": 137,
      "address": "0xC17c30e98541188614dF99239cABD40280810cA3",
      "symbol": "RISE",
      "name": "EverRise",
      "decimals": 18,
      "logoURI": "ipfs://QmYyfc3fdEJCtKYAf4pWqssfpsuB2GfcsbwsstDmTwtCZK"
    },
    {
      "chainId": 1,
      "address": "0x8a6ACA71A218301c7081d4e96D64292D3B275ce0",
      "symbol": "SFG",
      "name": "S.Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmZu69jaqgNgsCSQYCV3xLV4bbDZrAuYbpdzDaMkrJ6Gd8"
    },
    {
      "chainId": 1,
      "address": "0x73EE6D7e6b203125aDd89320E9F343d65ec7c39a",
      "symbol": "AXI",
      "name": "Axioms",
      "decimals": 18,
      "logoURI": "ipfs://QmUoQsmcH9rLCH6Fn181avGWRbdxVbdfiTC9f5kwNUYD7X"
    },
    {
      "chainId": 1,
      "address": "0xEdc511cD6cf92877f755C3641141d416D65A4E10",
      "symbol": "CHRG",
      "name": "Charge",
      "decimals": 9,
      "logoURI": "ipfs://QmaXWTh1Jkrsqc7sLt6qjmFa2kdz2xzUMSoYE2ZVgnSY1t"
    },
    {
      "chainId": 1,
      "address": "0x85f6eB2BD5a062f5F8560BE93FB7147e16c81472",
      "symbol": "FLY",
      "name": "Franklin",
      "decimals": 4,
      "logoURI": "ipfs://Qmc1vGMcSD8TF9bDWLde6pXS1751LRuMc1gYU9hRBHYfY9"
    },
    {
      "chainId": 1,
      "address": "0x55a290f08Bb4CAe8DcF1Ea5635A3FCfd4Da60456",
      "symbol": "BITTO",
      "name": "BITTO",
      "decimals": 18,
      "logoURI": "ipfs://QmcXrUdjUbb8DjBb8xze35hDEzkLrMwEef4Ab7TZLsnvAA"
    },
    {
      "chainId": 1,
      "address": "0xDD16eC0F66E54d453e6756713E533355989040E4",
      "symbol": "TEN",
      "name": "Tokenomy",
      "decimals": 18,
      "logoURI": "ipfs://QmcdUHQj68mtAtHWMBi3M3rTvEEk32PwNwRVX9AU1saFCK"
    },
    {
      "chainId": 1,
      "address": "0xBF494F02EE3FdE1F20BEE6242bCe2d1ED0c15e47",
      "symbol": "WORLD",
      "name": "World Token",
      "decimals": 18,
      "logoURI": "ipfs://Qmekwss8MUKQDfRCZdqvg1rSVuxz7b6PHNYNkTULwtfb2N"
    },
    {
      "chainId": 1,
      "address": "0x333A4823466879eeF910A04D473505da62142069",
      "symbol": "NATION",
      "name": "Nation3",
      "decimals": 18,
      "logoURI": "ipfs://QmSuLhxya7ibLn9cM1m8EUJcjTvzHdRXauNaPCDKJmi3Rm"
    },
    {
      "chainId": 1,
      "address": "0x177d39AC676ED1C67A2b268AD7F1E58826E5B0af",
      "symbol": "CDT",
      "name": "Blox",
      "decimals": 18,
      "logoURI": "ipfs://QmbkMTdawLj1nvmEpSVUduprodLwvf7AdZYgf78HvNcABx"
    },
    {
      "chainId": 1,
      "address": "0x40d1F63B5D2048e67E9bEdB1B4c2F1A9fb4b6817",
      "symbol": "GOLD",
      "name": "Golden Goose",
      "decimals": 18,
      "logoURI": "ipfs://Qmf2mCiy3xZEePDgX215tYAZ3NMEjfhW5GxathDbnv2sGP"
    },
    {
      "chainId": 1,
      "address": "0x66fD97a78d8854fEc445cd1C80a07896B0b4851f",
      "symbol": "LMY",
      "name": "Lunch Money",
      "decimals": 18,
      "logoURI": "ipfs://QmTcNE3nWGzBegiumrSvQCf3U1y5YxezWvGk3YkPok9bzy"
    },
    {
      "chainId": 1,
      "address": "0x9d62526f5Ce701950c30F2cACa70Edf70f9fbf0F",
      "symbol": "BKT",
      "name": "Blocktanium",
      "decimals": 18,
      "logoURI": "ipfs://QmYUfQj7KrJqvBmZGxauRD9WcDtdHoiGk95kNpXg8HY5qb"
    },
    {
      "chainId": 1,
      "address": "0x491E136FF7FF03E6aB097E54734697Bb5802FC1C",
      "symbol": "KTN",
      "name": "Kattana",
      "decimals": 18,
      "logoURI": "ipfs://QmaAbjTN4GZCSswo73Der5pj7USvFzxmHkLu64dBoBQdMM"
    },
    {
      "chainId": 137,
      "address": "0xb33EaAd8d922B1083446DC23f610c2567fB5180f",
      "symbol": "UNI",
      "name": "Uniswap",
      "decimals": 18,
      "logoURI": "ipfs://QmXw3PFpzLkvEjSouZiUvBWqasrL8NxHoEDGt87MqsPmtV"
    },
    {
      "chainId": 1,
      "address": "0x63f3B021B40a54D5a612b8dc3C0ff7DfA7da476D",
      "symbol": "EXEC",
      "name": "Executive Token",
      "decimals": 9,
      "logoURI": "ipfs://QmcnaTh2UBrSuw6KBt1mH3maCN8qSaYybucpL2Vu6RiHkE"
    },
    {
      "chainId": 1,
      "address": "0x13119E34E140097a507B07a5564bDe1bC375D9e6",
      "symbol": "IMT",
      "name": "MoneyToken",
      "decimals": 18,
      "logoURI": "ipfs://QmcFmvkE7xT27ECJsj3HPUyhrKAP4g26oKDfq7nwdSXA6A"
    },
    {
      "chainId": 100,
      "address": "0xdd96B45877d0E8361a4DDb732da741e97f3191Ff",
      "symbol": "BUSD",
      "name": "Binance USD",
      "decimals": 18,
      "logoURI": "ipfs://QmUCSx8qo7kSFcdPJ7gLp9X9pPkue13KUmnL6ZzBZ6ejaQ"
    },
    {
      "chainId": 56,
      "address": "0x14778860E937f509e651192a90589dE711Fb88a9",
      "symbol": "CYBER",
      "name": "CyberConnect",
      "decimals": 18,
      "logoURI": "ipfs://QmWsLPSKnBnhUzET5D5Y53QCL2j3HbPnQxssxtfjHF8Ahx"
    },
    {
      "chainId": 1,
      "address": "0x058Ef0Ba85E053e55d357C8A95BC6Ea7458Def8a",
      "symbol": "TKX",
      "name": "TradeKax",
      "decimals": 18,
      "logoURI": "ipfs://Qmdgv5NHY7k2Pas8RQgkwVozMSpLS5Sh1khKWZuywSgwLD"
    },
    {
      "chainId": 1,
      "address": "0x9248c485b0B80f76DA451f167A8db30F33C70907",
      "symbol": "DEBASE",
      "name": "Debase",
      "decimals": 18,
      "logoURI": "ipfs://Qmej6dRcRUWYZvc4ic4Dim4tjuESXrFuyMWrKvB6PxX3GN"
    },
    {
      "chainId": 137,
      "address": "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619",
      "symbol": "WETH",
      "name": "Wrapped Ether",
      "decimals": 18,
      "logoURI": "ipfs://QmeH11wxc6kpgAEpFRyteAJq9ksXzsmfHJcPWLQeCT1f8x"
    },
    {
      "chainId": 1,
      "address": "0xaB37e1358b639Fd877f015027Bb62d3ddAa7557E",
      "symbol": "LIEN",
      "name": "Lien",
      "decimals": 8,
      "logoURI": "ipfs://QmPftDGYxRaSM5NcVu55ZdMzhGbvadfUpQJjnqBZ3AxGB5"
    },
    {
      "chainId": 1,
      "address": "0xD49ff13661451313cA1553fd6954BD1d9b6E02b9",
      "symbol": "ELEC",
      "name": "Electrify.Asia",
      "decimals": 18,
      "logoURI": "ipfs://QmcLiKhh6EwLKneVkx4V99ym9gRmyta9KGfAJWPm58HUa6"
    },
    {
      "chainId": 1,
      "address": "0x9AF4f26941677C706cfEcf6D3379FF01bB85D5Ab",
      "symbol": "DRT",
      "name": "DomRaider",
      "decimals": 8,
      "logoURI": "ipfs://QmYabsmRgfq6m3ew7bG6ev1wC5XTTK81Te6Hh9ywNeAK1Q"
    },
    {
      "chainId": 1,
      "address": "0x5BC25f649fc4e26069dDF4cF4010F9f706c23831",
      "symbol": "DUSD",
      "name": "DefiDollar",
      "decimals": 18,
      "logoURI": "ipfs://QmUZkq4BhHNiP7cNzNqHuHdXzTnA1kNLbCoMrGLNJgLZRE"
    },
    {
      "chainId": 1,
      "address": "0x467719aD09025FcC6cF6F8311755809d45a5E5f3",
      "symbol": "AXL",
      "name": "Axelar",
      "decimals": 6,
      "logoURI": "ipfs://QmdHe4ZsQ2DVvReLPGnE7S8fLwsDrfCSRngykTmQkugEmM"
    },
    {
      "chainId": 1,
      "address": "0x42bBFa2e77757C645eeaAd1655E0911a7553Efbc",
      "symbol": "BOBA",
      "name": "Boba Network",
      "decimals": 18,
      "logoURI": "ipfs://QmZrzc6DeCMZnGNXoPnLAZHM6wphS9uwWJGEZGWDxd1s9x"
    },
    {
      "chainId": 1,
      "address": "0x4672bAD527107471cB5067a887f4656D585a8A31",
      "symbol": "DROP",
      "name": "Dropil",
      "decimals": 18,
      "logoURI": "ipfs://QmQx6YYzfLey2vci1qNf1wPkLzaADQP7YbKu1vUnBefvGC"
    },
    {
      "chainId": 1,
      "address": "0xD6014EA05BDe904448B743833dDF07c3C7837481",
      "symbol": "iBTC",
      "name": "Synthetic Inverse Bitcoin",
      "decimals": 18,
      "logoURI": "ipfs://QmYyfviMa2jhbT3A735kfa2i5ijADBeAkdEHqMeHvnryBL"
    },
    {
      "chainId": 56,
      "address": "0x101d82428437127bF1608F699CD651e6Abf9766E",
      "symbol": "BAT",
      "name": "Basic Attention Token",
      "decimals": 18,
      "logoURI": "ipfs://QmZPngVewTaGaXqN28CnZ9EJSBJ2jAEnMao87T9RbPUoGM"
    },
    {
      "chainId": 1,
      "address": "0xa3d58c4E56fedCae3a7c43A725aeE9A71F0ece4e",
      "symbol": "MET",
      "name": "Metronome",
      "decimals": 18,
      "logoURI": "ipfs://QmTvoTYEFefiC1bvSNViEF8NqvoFq8mrweEGRJTFhBr1qP"
    },
    {
      "chainId": 1,
      "address": "0xcB550A6D4C8e3517A939BC79d0c7093eb7cF56B5",
      "symbol": "yvWBTC",
      "name": "WBTC yVault",
      "decimals": 8,
      "logoURI": "ipfs://QmUZiFXhWsSYNAFxhXg65CQ6zuTUmtHN6mnjsJzZqR8BHB"
    },
    {
      "chainId": 1,
      "address": "0xCeD4E93198734dDaFf8492d525Bd258D49eb388E",
      "symbol": "EDO",
      "name": "Eidoo",
      "decimals": 18,
      "logoURI": "ipfs://QmZx9USmyqXt1DVf4MZAWciZ2wkScU7RxVM5G9EtMrgtC2"
    },
    {
      "chainId": 56,
      "address": "0x111111111117dC0aa78b770fA6A738034120C302",
      "symbol": "1INCH",
      "name": "1inch Network",
      "decimals": 18,
      "logoURI": "ipfs://QmdUjFYL2izDVe4PLKArg7GtoHmsSqX6Bcsv9fmaVMcbLF"
    },
    {
      "chainId": 1,
      "address": "0x5165d24277cD063F5ac44Efd447B27025e888f37",
      "symbol": "aYFI",
      "name": "Aave YFI",
      "decimals": 18,
      "logoURI": "ipfs://QmYvuK9FB9pSuusAwywdupJKJNviK1GH9t4GgUf2Szsqur"
    },
    {
      "chainId": 137,
      "address": "0x16ECCfDbb4eE1A85A33f3A9B21175Cd7Ae753dB4",
      "symbol": "ROUTE",
      "name": "Router Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmdjjKLtN8YkXVRQTxSYhKvnUa2Lk6qqQxRc1NDUiSxxAt"
    },
    {
      "chainId": 1,
      "address": "0xCE3f08e664693ca792caCE4af1364D5e220827B2",
      "symbol": "SAITAMA",
      "name": "SAITAMA",
      "decimals": 9,
      "logoURI": "ipfs://QmSBrUKL8q1mJk7HepJLskCJ8MJSXbmaQ38iF2nSpU5kZ4"
    },
    {
      "chainId": 1,
      "address": "0x1122B6a0E00DCe0563082b6e2953f3A943855c1F",
      "symbol": "CENNZ",
      "name": "Centrality",
      "decimals": 18,
      "logoURI": "ipfs://QmYLGu69GcmyLJRcnBz9NguvoUx6MSxHXWfWmpSnHLMcaa"
    },
    {
      "chainId": 1,
      "address": "0x8a83A0DE55C003A970070a8a0FA7CB24203fC13d",
      "symbol": "PAST",
      "name": "Past Project",
      "decimals": 9,
      "logoURI": "ipfs://QmdzNBY9uQr3EXAWVJDfLjysYGVX8ysw5V3bsfNhUb3UmH"
    },
    {
      "chainId": 1,
      "address": "0x1254E59712e6e727dC71E0E3121Ae952b2c4c3b6",
      "symbol": "MRS",
      "name": "Marginless",
      "decimals": 18,
      "logoURI": "ipfs://QmYgxpxDBtAUTwfemjPJZR4UDRaTj5PbVRkiEjAxjxkksX"
    },
    {
      "chainId": 1,
      "address": "0xB62132e35a6c13ee1EE0f84dC5d40bad8d815206",
      "symbol": "NEXO",
      "name": "Nexo",
      "decimals": 18,
      "logoURI": "ipfs://Qmd7LPax7FffjbtwiKTrXT3Nx8MHA2LzYM6gcuJ9wscubk"
    },
    {
      "chainId": 137,
      "address": "0x172370d5Cd63279eFa6d502DAB29171933a610AF",
      "symbol": "CRV",
      "name": "Curve DAO Token",
      "decimals": 18,
      "logoURI": "ipfs://QmNPpFtjU5kMFjz13Ysb3p6c2rZZQp3ysKzyXonjYCeKyT"
    },
    {
      "chainId": 1,
      "address": "0xfdb615d6A15F929dDabc6b83A4f1Cf9d361b064E",
      "symbol": "DEVE",
      "name": "Divert Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmcBybSFhSAQxQzzHds6xDR1jVKMF53hR8xvNFjQpn7KSu"
    },
    {
      "chainId": 1,
      "address": "0x6E2a43be0B1d33b726f0CA3b8de60b3482b8b050",
      "symbol": "ARKM",
      "name": "Arkham",
      "decimals": 18,
      "logoURI": "ipfs://QmVNTKrfi3pMB82hUd4csU8j7WJo6MPKqzm6XWsXyHm3oU"
    },
    {
      "chainId": 1,
      "address": "0x30635297E450b930f8693297eBa160D9e6c8eBcf",
      "symbol": "sUNI",
      "name": "Synthetic Uniswap",
      "decimals": 18,
      "logoURI": "ipfs://QmeTNs62nYbKnWQcsTTZwHVycdPTu9SHu28eFcq8cmScd1"
    },
    {
      "chainId": 1,
      "address": "0xE276056f924E15BEac26F7b10B6D2805F9c64Bb5",
      "symbol": "FIRU",
      "name": "Firulais",
      "decimals": 9,
      "logoURI": "ipfs://QmXswbpL42WxwW2WkJNyNhtGztAzwCP9GNWfU79t1tnbye"
    },
    {
      "chainId": 1,
      "address": "0x2D80f5F5328FdcB6ECeb7Cacf5DD8AEDaEC94e20",
      "symbol": "AGA",
      "name": "AGA Token",
      "decimals": 4,
      "logoURI": "ipfs://QmNdTc7KzfCpxVF3TUinzWnbjdE4jg1KFXyzc3K85Noo67"
    },
    {
      "chainId": 1,
      "address": "0xc7Fd8Dcee4697ceef5a2fd4608a7BD6A94C77480",
      "symbol": "crCRV",
      "name": "Cream CRV",
      "decimals": 8,
      "logoURI": "ipfs://QmVmbhZc84cWxbPKEWP5tfSnF7pgupkCCFxZy7JAQ3rE1D"
    },
    {
      "chainId": 1,
      "address": "0x09ce2B746C32528B7d864A1e3979Bd97d2f095AB",
      "symbol": "DFL",
      "name": "DeFIL",
      "decimals": 18,
      "logoURI": "ipfs://QmdDqjNmEU1VLPF1bDC2abfd6ayVQ4NQhoVctGEE2NJwUh"
    },
    {
      "chainId": 1,
      "address": "0x1715AC0743102BF5Cd58EfBB6Cf2dC2685d967b6",
      "symbol": "sDOT",
      "name": "Synthetic Polkadot",
      "decimals": 18,
      "logoURI": "ipfs://QmPkM1rfiAYMu8zubrkkVox8oDjEUjZzFyzGy5NMqVXxTN"
    },
    {
      "chainId": 1,
      "address": "0x1BE66C15731788BaE659B4bdD40d4AA9B3bbca94",
      "symbol": "PDOGE",
      "name": "PolkaDoge",
      "decimals": 9,
      "logoURI": "ipfs://QmbYbwdwy283Y1asK7nd2wQRiyMa53uNnuCwKWCKHsLzfg"
    },
    {
      "chainId": 1,
      "address": "0x80D186B4C786Ea66592b2c52e2004AB10CfE4CF3",
      "symbol": "LYNX",
      "name": "Lynx Tech",
      "decimals": 18,
      "logoURI": "ipfs://QmRsuWiZjTNTd8WrAZ6BT16W15JxrHuKprVaUmbXjsJePj"
    },
    {
      "chainId": 1,
      "address": "0x6B3595068778DD592e39A122f4f5a5cF09C90fE2",
      "symbol": "SUSHI",
      "name": "Sushi",
      "decimals": 18,
      "logoURI": "ipfs://QmT48vXNDWa4KUUk6ZsYk8Z4QwNqjk9xaqpbpQvMFz1xFC"
    },
    {
      "chainId": 1,
      "address": "0x4a9D8B8FCe0B6ec033932B13c4e24d24Dc4113cd",
      "symbol": "UDOG",
      "name": "United Doge Finance",
      "decimals": 9,
      "logoURI": "ipfs://QmfCGMuoxzyKGcxsSk42yrsUPQtgoug5kpeDVfStqN1g4z"
    },
    {
      "chainId": 56,
      "address": "0x3203c9E46cA618C8C1cE5dC67e7e9D75f5da2377",
      "symbol": "MBOX",
      "name": "MOBOX",
      "decimals": 18,
      "logoURI": "ipfs://Qmapq3q5CM5yrk9F2gWD48yf5eyizxqUhvDtST9LUqaMvF"
    },
    {
      "chainId": 1,
      "address": "0xC0c293ce456fF0ED870ADd98a0828Dd4d2903DBF",
      "symbol": "AURA",
      "name": "Aura",
      "decimals": 18,
      "logoURI": "ipfs://QmRoL6fUzR2diwEMoqXvj6E1jQfFAc3VR1tc2Pu9ecdB6S"
    },
    {
      "chainId": 1,
      "address": "0x19D1666f543D42ef17F66E376944A22aEa1a8E46",
      "symbol": "crCOMP",
      "name": "Cream Compound",
      "decimals": 8,
      "logoURI": "ipfs://QmSawSndMER3pnh4yLBKUxtDGA82zkEyPDcrdeL8Ma9zg6"
    },
    {
      "chainId": 1,
      "address": "0x05f4a42e251f2d52b8ed15E9FEdAacFcEF1FAD27",
      "symbol": "ZIL",
      "name": "Zilliqa",
      "decimals": 12,
      "logoURI": "ipfs://QmYaLRGTgwzLe7NUFGCrFsbXmDrSibus87TEhgKdAgiZar"
    },
    {
      "chainId": 1,
      "address": "0x9d1233cc46795E94029fDA81aAaDc1455D510f15",
      "symbol": "ZAI",
      "name": "Zero Collateral Dai",
      "decimals": 18,
      "logoURI": "ipfs://QmTsHXErPsZFoeFLhkc8h1kaPPRhebioiThNb3W6p9jGQa"
    },
    {
      "chainId": 1,
      "address": "0x280f76a218DDC8d56B490B5835e251E55a2e8F8d",
      "symbol": "sUNI",
      "name": "Strike UNI",
      "decimals": 8,
      "logoURI": "ipfs://QmPrmUgkBUzyzEYXs6UMSN8QuA3rgNufZyTsHT3Dj5SRU3"
    },
    {
      "chainId": 1,
      "address": "0x3225E3C669B39C7c8B3e204a8614bB218c5e31BC",
      "symbol": "crAAVE",
      "name": "Cream AAVE",
      "decimals": 8,
      "logoURI": "ipfs://Qma2sPDf8Lbg1FNBBvJXirDJb5CfaNDhMt1fPB3SYTnYku"
    },
    {
      "chainId": 1,
      "address": "0xf6537FE0df7F0Cc0985Cf00792CC98249E73EFa0",
      "symbol": "GIV",
      "name": "GIV",
      "decimals": 8,
      "logoURI": "ipfs://QmPNx3vb83ZA7G7HS3eSTCrrTVmrHu95eLquzW2p1pjCEU"
    },
    {
      "chainId": 1,
      "address": "0x949D48EcA67b17269629c7194F4b727d4Ef9E5d6",
      "symbol": "MC",
      "name": "Merit Circle",
      "decimals": 18,
      "logoURI": "ipfs://QmWYsFCcKCfWMhvYWuxkHpBQF9beNC5MJmjDEnhbjuB3ba"
    },
    {
      "chainId": 1,
      "address": "0x21aB6c9fAC80C59D401b37cB43F81ea9DDe7Fe34",
      "symbol": "BRC",
      "name": "Baer Chain",
      "decimals": 8,
      "logoURI": "ipfs://QmbKnyhpSGDhi1xukacAWDn2edbGXeXP1HuHWsVWHveC7T"
    },
    {
      "chainId": 1,
      "address": "0x51DB5Ad35C671a87207d88fC11d593AC0C8415bd",
      "symbol": "MDA",
      "name": "Moeda Loyalty Points",
      "decimals": 18,
      "logoURI": "ipfs://QmfKxpxrPJ7XzgTvr9T9YucEK7JCpvHd6zWPKLvwsLYcqy"
    },
    {
      "chainId": 1,
      "address": "0x5c872500c00565505F3624AB435c222E558E9ff8",
      "symbol": "COT",
      "name": "CoTrader",
      "decimals": 18,
      "logoURI": "ipfs://QmSAX6SGV6oebR9DMtwECHPKh4JxEGUvYAd49vpXo8kQ4c"
    },
    {
      "chainId": 1,
      "address": "0x18aAA7115705e8be94bfFEBDE57Af9BFc265B998",
      "symbol": "AUDIO",
      "name": "Audius",
      "decimals": 18,
      "logoURI": "ipfs://QmZWwBpdazSbczP6mEYaATUkdSELFyqHnjzosatqJm4He5"
    },
    {
      "chainId": 1,
      "address": "0x630d98424eFe0Ea27fB1b3Ab7741907DFFEaAd78",
      "symbol": "PEAK",
      "name": "PEAKDEFI",
      "decimals": 8,
      "logoURI": "ipfs://QmPgpiwofrTsHtfRd9bHLSf6CCiXEqjiMFvpHN1skch6ZL"
    },
    {
      "chainId": 100,
      "address": "0xb0C5f3100A4d9d9532a4CfD68c55F1AE8da987Eb",
      "symbol": "HAUS",
      "name": "DAOhaus",
      "decimals": 18,
      "logoURI": "ipfs://QmZU6FKTUgtn1cGWV4KWbnQ5skJsbmDKodqAMLmGo7pGeH"
    },
    {
      "chainId": 1,
      "address": "0x8064d9Ae6cDf087b1bcd5BDf3531bD5d8C537a68",
      "symbol": "OBTC",
      "name": "BoringDAO BTC",
      "decimals": 18,
      "logoURI": "ipfs://QmdAPhNe9aab1X53T2tQQ7LcB63c9wiB3jq9a98MavojuD"
    },
    {
      "chainId": 1,
      "address": "0xD70240Dd62F4ea9a6A2416e0073D72139489d2AA",
      "symbol": "GLYPH",
      "name": "GLYPH Vault",
      "decimals": 18,
      "logoURI": "ipfs://QmNUHdujzHQTcg4GVFyixAVVLNiE2MqBboYs7JPQmjfmF9"
    },
    {
      "chainId": 1,
      "address": "0xEd04915c23f00A313a544955524EB7DBD823143d",
      "symbol": "ACH",
      "name": "Alchemy Pay",
      "decimals": 8,
      "logoURI": "ipfs://QmS1WAXrydaJwyQDgXQUe1XcDmgAc79M1NMzsRgekbR9YM"
    },
    {
      "chainId": 100,
      "address": "0x712b3d230F3C1c19db860d80619288b1F0BDd0Bd",
      "symbol": "CRV",
      "name": "Curve DAO Token",
      "decimals": 18,
      "logoURI": "ipfs://QmNPpFtjU5kMFjz13Ysb3p6c2rZZQp3ysKzyXonjYCeKyT"
    },
    {
      "chainId": 1,
      "address": "0x722f97A435278B7383a1e3c47F41773bebF3232C",
      "symbol": "UCM",
      "name": "UCROWDME",
      "decimals": 18,
      "logoURI": "ipfs://QmdnCUhHbAhtxtVAW3ex4KKYjoa2VjfsUNSLygRwYSjsG6"
    },
    {
      "chainId": 1,
      "address": "0xbf2179859fc6D5BEE9Bf9158632Dc51678a4100e",
      "symbol": "ELF",
      "name": "aelf",
      "decimals": 18,
      "logoURI": "ipfs://QmSqDf5a7nNdomWsbhbUmfdy4ftjAYEZA2RfgsCoTCa6zN"
    },
    {
      "chainId": 1,
      "address": "0x8207c1FfC5B6804F6024322CcF34F29c3541Ae26",
      "symbol": "OGN",
      "name": "Origin Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmRL9tBVUevwCPe61WqETXZLhRGQFiibxikBSCwFYjVbtn"
    },
    {
      "chainId": 1,
      "address": "0xD417144312DbF50465b1C641d016962017Ef6240",
      "symbol": "CQT",
      "name": "Covalent",
      "decimals": 18,
      "logoURI": "ipfs://QmcUCFM8Ss4NAMyRWasRiZbdVoUQAweUh8U8dbf9mt4geQ"
    },
    {
      "chainId": 1,
      "address": "0x72E5390EDb7727E3d4e3436451DADafF675dBCC0",
      "symbol": "HANU",
      "name": "Hanu Yokia",
      "decimals": 12,
      "logoURI": "ipfs://QmbS2FENWimC68QXoQwZQU9h1kC7wYamSx8uo5k3aGRZTc"
    },
    {
      "chainId": 1,
      "address": "0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d",
      "symbol": "BLY",
      "name": "Blocery",
      "decimals": 18,
      "logoURI": "ipfs://QmZVw2GX9JpjdQ2W6dxpGkKQ8gTacuexmoxgvU9An4Yoh5"
    },
    {
      "chainId": 1,
      "address": "0x9B39A0B97319a9bd5fed217c1dB7b030453bac91",
      "symbol": "TCH",
      "name": "TigerCash",
      "decimals": 18,
      "logoURI": "ipfs://Qmc16BJCGk4XUhK1EZLXWtmSTZK3nzAwh4caE3Ce1Sr4a6"
    },
    {
      "chainId": 1,
      "address": "0xfF20817765cB7f73d4bde2e66e067E58D11095C2",
      "symbol": "AMP",
      "name": "Amp",
      "decimals": 18,
      "logoURI": "ipfs://QmWsHrwcEYgLhdbdtMcpTy8wXTsN2RLMztDDndu1eMaycP"
    },
    {
      "chainId": 1,
      "address": "0x865ec58b06bF6305B886793AA20A2da31D034E68",
      "symbol": "MOC",
      "name": "Moss Coin",
      "decimals": 18,
      "logoURI": "ipfs://QmUoQPT4zvy4y7ervms7TMEXqo9Xo7bvN3Ju5946b4gaNr"
    },
    {
      "chainId": 1,
      "address": "0xaA17A236F2bAdc98DDc0Cf999AbB47D47Fc0A6Cf",
      "symbol": "ankrCrv",
      "name": "ankrCurve",
      "decimals": 18,
      "logoURI": "ipfs://QmaALf59vDB3orPpF2DW1gkg7ubrGTSH8Xnkx3auZvyy3p"
    },
    {
      "chainId": 1,
      "address": "0x69bBC3F8787d573F1BBDd0a5f40C7bA0Aee9BCC9",
      "symbol": "YUP",
      "name": "Yup",
      "decimals": 18,
      "logoURI": "ipfs://QmR58B5bcLuBN8RmqYJzh7pddF2tY4zPiHLyqpZ7SamJ9f"
    },
    {
      "chainId": 1,
      "address": "0xcA75C43f8c9AfD356c585ce7AA4490B48A95C466",
      "symbol": "INARI",
      "name": "Inari",
      "decimals": 9,
      "logoURI": "ipfs://QmSEHENQq3dUit2LoGQY96eknvSQreGWThM2eFsJQ3qeGR"
    },
    {
      "chainId": 1,
      "address": "0x4123a133ae3c521FD134D7b13A2dEC35b56c2463",
      "symbol": "QRDO",
      "name": "Qredo",
      "decimals": 8,
      "logoURI": "ipfs://QmV3msj8wtsRkgxuKm1qyNsG2GRJL5SYau5Kkuq9xKfdxK"
    },
    {
      "chainId": 1,
      "address": "0xeca82185adCE47f39c684352B0439f030f860318",
      "symbol": "PERL",
      "name": "Perlin",
      "decimals": 18,
      "logoURI": "ipfs://QmQoQkzHqtsj8TG9jWba2mowpjXSY1XEnPdFkBebqaqcWz"
    },
    {
      "chainId": 1,
      "address": "0x804ea14b08dEc488e5B0bC408f23EEf107fE3717",
      "symbol": "VNM",
      "name": "Venom",
      "decimals": 18,
      "logoURI": "ipfs://QmdvnVqkj3bg57BEFK8ZpNJjibWb7qV5Bj1fZAFXFA2dBv"
    },
    {
      "chainId": 56,
      "address": "0xecA88125a5ADbe82614ffC12D0DB554E2e2867C8",
      "symbol": "vUSDC",
      "name": "Venus USDC",
      "decimals": 8,
      "logoURI": "ipfs://Qmd54DjFY5vCwpDkAfd4joLpycEgNwGNkTWbgWNouXF5wt"
    },
    {
      "chainId": 1,
      "address": "0xAec7d1069e3a914a3EB50f0BFB1796751f2ce48a",
      "symbol": "S4F",
      "name": "S4FE",
      "decimals": 18,
      "logoURI": "ipfs://QmfKU8hNykGiVMt6yrHH2X9w8ichYQ19b8bHfVuvA4TJWw"
    },
    {
      "chainId": 1,
      "address": "0x37F04d2C3AE075Fad5483bB918491F656B12BDB6",
      "symbol": "VEST",
      "name": "VestChain",
      "decimals": 8,
      "logoURI": "ipfs://QmbfTfY7t6pvP5pkph8yXAMmzHZzG1toEjtYNr5J7wek3E"
    },
    {
      "chainId": 1,
      "address": "0xfa05A73FfE78ef8f1a739473e462c54bae6567D9",
      "symbol": "LUN",
      "name": "Lunyr",
      "decimals": 18,
      "logoURI": "ipfs://QmPPxYa27X5Ktqv7M9h86535zvys6MX7nwo47Q33rUoPaH"
    },
    {
      "chainId": 1,
      "address": "0x2A8e1E676Ec238d8A992307B495b45B3fEAa5e86",
      "symbol": "OUSD",
      "name": "Origin Dollar",
      "decimals": 18,
      "logoURI": "ipfs://QmbGwuoU6Fd6WDxgZFtEKNazjb464zskSpnU4s6s8dGo2t"
    },
    {
      "chainId": 1,
      "address": "0xda23d301761E4e2bF474951f978f6DFB6F3C9F14",
      "symbol": "TKINU",
      "name": "Tsuki Inu",
      "decimals": 9,
      "logoURI": "ipfs://QmcDyRG3T5qmigXM9kBxS57FmRVZJMixePyxAoD6TXpyNh"
    },
    {
      "chainId": 1,
      "address": "0xf3dcbc6D72a4E1892f7917b7C43b74131Df8480e",
      "symbol": "BDP",
      "name": "Big Data Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmVjLtDANWVp9MU9TyYML4YwVzT7ibP7oNAtYx99Wshzfc"
    },
    {
      "chainId": 1,
      "address": "0x653430560bE843C4a3D143d0110e896c2Ab8ac0D",
      "symbol": "MOF",
      "name": "Molecular Future",
      "decimals": 16,
      "logoURI": "ipfs://QmSsNtx5eB3nyeqpU89QR8oai6ZNYvMEycWbNAnMAv5CN2"
    },
    {
      "chainId": 1,
      "address": "0x4d224452801ACEd8B2F0aebE155379bb5D594381",
      "symbol": "APE",
      "name": "ApeCoin",
      "decimals": 18,
      "logoURI": "ipfs://QmcrCvzkazoVbVtNYZcWATusYiK3CXv8WV2wMWb4cCNRN4"
    },
    {
      "chainId": 1,
      "address": "0x9a7a4C141a3BCCE4A31e42C1192Ac6Add35069b4",
      "symbol": "XMM",
      "name": "Momentum",
      "decimals": 10,
      "logoURI": "ipfs://QmcVjFFQAqp3JwXKpEBM5X92tJHFZxd4t73GU5hnLJaEca"
    },
    {
      "chainId": 1,
      "address": "0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2",
      "symbol": "MKR",
      "name": "Maker",
      "decimals": 18,
      "logoURI": "ipfs://QmPwdJwZoBDHWVDTxQmnYzCiYQkToMzunGbCryjUgqVxbc"
    },
    {
      "chainId": 1,
      "address": "0xC5bBaE50781Be1669306b9e001EFF57a2957b09d",
      "symbol": "GTO",
      "name": "Gifto",
      "decimals": 5,
      "logoURI": "ipfs://QmeSTjCWbDow8EmqHboRUAXSz9GhZadGthjgDgJnVYYLPa"
    },
    {
      "chainId": 1,
      "address": "0xb4bebD34f6DaaFd808f73De0d10235a92Fbb6c3D",
      "symbol": "YETI",
      "name": "Yearn Ecosystem Token Index",
      "decimals": 18,
      "logoURI": "ipfs://QmeiPPTviJFrkcV9g8SJaTtMtvVUeScLZKS9WnaxhJ5j51"
    },
    {
      "chainId": 1,
      "address": "0xCbfef8fdd706cde6F208460f2Bf39Aa9c785F05D",
      "symbol": "KINE",
      "name": "KINE",
      "decimals": 18,
      "logoURI": "ipfs://QmP2vS7zfaH5HUMs8Swfh1yu7jYRu84a53k3kJ1LyZ634T"
    },
    {
      "chainId": 1,
      "address": "0x256845e721C0c46d54E6afBD4FA3B52CB72353EA",
      "symbol": "UNIUSD",
      "name": "UniDollar",
      "decimals": 18,
      "logoURI": "ipfs://QmRrjb7RdBKfuvXW9kij64yZHP99RuK8x94XFjB5Nuv5cG"
    },
    {
      "chainId": 1,
      "address": "0x9Ed8e7C9604790F7Ec589F99b94361d8AAB64E5E",
      "symbol": "UNISTAKE",
      "name": "Unistake",
      "decimals": 18,
      "logoURI": "ipfs://QmbZUgYddDvCMB4mxGSxvgDYQrGoabCXooUF1ZSpRaoUAQ"
    },
    {
      "chainId": 1,
      "address": "0x163f8C2467924be0ae7B5347228CABF260318753",
      "symbol": "WLD",
      "name": "Worldcoin",
      "decimals": 18,
      "logoURI": "ipfs://QmU3gcamx4qmHv7eajFssTy3XJniD5G3ZJ9itZzpaLYoSV"
    },
    {
      "chainId": 1,
      "address": "0x476c5E26a75bd202a9683ffD34359C0CC15be0fF",
      "symbol": "SRM",
      "name": "Serum",
      "decimals": 6,
      "logoURI": "ipfs://QmQmD8Vsfu9sH1UHu1Cjpi6opmoW7AWNnZ1VAAvfbYNC8T"
    },
    {
      "chainId": 1,
      "address": "0xb892249939AdBf6D7851864CA9A5c7D2d537af97",
      "symbol": "GSHIBA",
      "name": "Gambler Shiba",
      "decimals": 18,
      "logoURI": "ipfs://Qmdwhn64dFg7uyporce8H99S4awuFPZ9xYv5MEkcFY7DEU"
    },
    {
      "chainId": 1,
      "address": "0xd2d6158683aeE4Cc838067727209a0aAF4359de3",
      "symbol": "BNTY",
      "name": "Bounty0x",
      "decimals": 18,
      "logoURI": "ipfs://QmZpjQQu9DfCmLjd7k7GLY9Uw3ukYJSCSE3gnwCcSdgjZ2"
    },
    {
      "chainId": 1,
      "address": "0x49184E6dAe8C8ecD89d8Bdc1B950c597b8167c90",
      "symbol": "LIBERTAS",
      "name": "Libertas",
      "decimals": 2,
      "logoURI": "ipfs://QmdadkMLqZdrSWNrairTp6bo1Kp75zL2YPv6KKspPwbT1t"
    },
    {
      "chainId": 1,
      "address": "0xe25b0BBA01Dc5630312B6A21927E578061A13f55",
      "symbol": "SHIP",
      "name": "ShipChain",
      "decimals": 18,
      "logoURI": "ipfs://QmZfq8vZCW8N8aw1uJ3RbtsJZNoWh96Sqzox7UPZqriS81"
    },
    {
      "chainId": 1,
      "address": "0x943c5F4F54509d1e78B1fCD93B92c43ce83d3141",
      "symbol": "AMPH",
      "name": "Amphora Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmVnfM7LLCJfUv5n7ZwxzaChBiRkKqQs5wgC3aFD7fgiVq"
    },
    {
      "chainId": 1,
      "address": "0xf45f6c8bB3d77eA762175b8f7ca4D251941649fA",
      "symbol": "LEMD",
      "name": "Lemond",
      "decimals": 18,
      "logoURI": "ipfs://QmTgphJ2p2Qano5nXhnPdKeuFM72mZbhHyhS7w74AuLHjK"
    },
    {
      "chainId": 1,
      "address": "0x1B2a76Da77D03b7FC21189d9838f55Bd849014aF",
      "symbol": "DFC",
      "name": "DeFiScale",
      "decimals": 8,
      "logoURI": "ipfs://QmP3aLRoxFW9K76xGYYAjePx9kaYExjJmLaeiWY6w7N3dS"
    },
    {
      "chainId": 1,
      "address": "0xfFffFffF2ba8F66D4e51811C5190992176930278",
      "symbol": "COMBO",
      "name": "Furucombo",
      "decimals": 18,
      "logoURI": "ipfs://QmdNni3K958dC66ivU33AjAu23yCSzDAyXTkgwEP6EghDM"
    },
    {
      "chainId": 1,
      "address": "0xC72ED4445B3fe9f0863106E344E241530d338906",
      "symbol": "MLC",
      "name": "FLOGmall",
      "decimals": 18,
      "logoURI": "ipfs://QmYbbsAJQ2R8cgQicpuXXx8nV6dF3ftuw22Dmq2jTwEwVu"
    },
    {
      "chainId": 1,
      "address": "0x9aD45E692350BA56e2583671C4Bd76C5331a249e",
      "symbol": "PeepsPay",
      "name": "PeepsPay",
      "decimals": 9,
      "logoURI": "ipfs://QmVLPefg6VqVNEWwkdDgtFWbobjGQz3uRcLHnrgNmzEid3"
    },
    {
      "chainId": 1,
      "address": "0x846C66cf71C43f80403B51fE3906B3599D63336f",
      "symbol": "PMA",
      "name": "PumaPay",
      "decimals": 18,
      "logoURI": "ipfs://Qmer6xJ8NeZ6gBYFVSe5TQLhgRY8EBiv5aYYEz9uVzCFHD"
    },
    {
      "chainId": 1,
      "address": "0x75231F58b43240C9718Dd58B4967c5114342a86c",
      "symbol": "OKB",
      "name": "OKB",
      "decimals": 18,
      "logoURI": "ipfs://QmaGqT6SFuUxGQuVNWEgPbXnNa5iTqAWDpiPxUBPrf8w2o"
    },
    {
      "chainId": 1,
      "address": "0xB72B31907C1C95F3650b64b2469e08EdACeE5e8F",
      "symbol": "vBZRX",
      "name": "bZx Vesting Token",
      "decimals": 18,
      "logoURI": "ipfs://QmYySgHorsUsCUch9F75MF76SiEAH6YAVJr4nHzEPpj3yE"
    },
    {
      "chainId": 56,
      "address": "0x95c78222B3D6e262426483D42CfA53685A67Ab9D",
      "symbol": "vBUSD",
      "name": "Venus BUSD",
      "decimals": 8,
      "logoURI": "ipfs://QmXrrGZJptUEsV1Kf2cuE5LNAEU1LsBXawtqJYEPVoArgo"
    },
    {
      "chainId": 1,
      "address": "0x13339fD07934CD674269726EdF3B5ccEE9DD93de",
      "symbol": "CUR",
      "name": "Curio",
      "decimals": 18,
      "logoURI": "ipfs://QmckooqCrRpp5bbzxPcuT1S3LsxbE1HCudVaqrcXc1mMTT"
    },
    {
      "chainId": 1,
      "address": "0x4Cf89ca06ad997bC732Dc876ed2A7F26a9E7f361",
      "symbol": "MYST",
      "name": "Mysterium",
      "decimals": 18,
      "logoURI": "ipfs://QmUAiqZqYheHJuxzPeDfAGTWGQsZkMKoWXsJtH6pgg8otP"
    },
    {
      "chainId": 1,
      "address": "0x43044f861ec040DB59A7e324c40507adDb673142",
      "symbol": "CAP",
      "name": "Cap",
      "decimals": 18,
      "logoURI": "ipfs://QmVohHQPQpYubek9wmkRbJ1oNo9zbBeYLcB1SoHKVVnjYN"
    },
    {
      "chainId": 1,
      "address": "0x6D6fc83225AD1b8373357b10d61bA6d77090C5a6",
      "symbol": "NAUINU",
      "name": "Naughty Inu",
      "decimals": 9,
      "logoURI": "ipfs://QmV3kH2af1S4d8RxHWSmuiGufMwoeYRxZLts66YLuDXauW"
    },
    {
      "chainId": 1,
      "address": "0xA9859874e1743A32409f75bB11549892138BBA1E",
      "symbol": "iETH",
      "name": "Synthetic Inverse Ether",
      "decimals": 18,
      "logoURI": "ipfs://QmNW4mzHpdb2qFgwEdsLwyv1h3vLv1pMFyagjN5nF63ZAW"
    },
    {
      "chainId": 1,
      "address": "0x3757232B55E60da4A8793183aC030CfCE4c3865d",
      "symbol": "YDR",
      "name": "YDragon",
      "decimals": 18,
      "logoURI": "ipfs://QmePEKB4JeJ4i4D7sAvBeb4KPRk1PxmtqfWNb2TvcmzjPo"
    },
    {
      "chainId": 1,
      "address": "0x7B0C06043468469967DBA22d1AF33d77d44056c8",
      "symbol": "MRPH",
      "name": "Morpheus.Network",
      "decimals": 4,
      "logoURI": "ipfs://Qmf1SF7kYtZw8AsyDBuz23FFRHzsvvMmicDxyqh2Hzma8c"
    },
    {
      "chainId": 1,
      "address": "0x6cAcDB97e3fC8136805a9E7c342d866ab77D0957",
      "symbol": "SWPR",
      "name": "Swapr",
      "decimals": 18,
      "logoURI": "ipfs://QmXeUKr6JoBmNnyerR2pLMRJqM1Vibo7DjGaBFpjnpAMvq"
    },
    {
      "chainId": 1,
      "address": "0x2B1Fe2cea92436E8C34B7C215Af66Aaa2932a8b2",
      "symbol": "SAHU",
      "name": "Sakhalin Husky",
      "decimals": 9,
      "logoURI": "ipfs://QmPCr5CqgzDP8gMNPLQBE9raGvzE9hbk66tAdMtxsVfrix"
    },
    {
      "chainId": 1,
      "address": "0x918dA91Ccbc32B7a6A0cc4eCd5987bbab6E31e6D",
      "symbol": "sTSLA",
      "name": "Synthetic Tesla",
      "decimals": 18,
      "logoURI": "ipfs://QmWbuSqVkZ5wo76WA1BbTak6eBMhjZzkhC1VZXqpm2aZ9j"
    },
    {
      "chainId": 1,
      "address": "0x2cAd4991f62fc6Fcd8EC219f37E7DE52B688B75A",
      "symbol": "SCHA",
      "name": "Schain Wallet",
      "decimals": 0,
      "logoURI": "ipfs://QmenxWqKfXxLcjsnrkL2ZTButCx6T881FjvVNK1fBWDCD3"
    },
    {
      "chainId": 1,
      "address": "0x88EF27e69108B2633F8E1C184CC37940A075cC02",
      "symbol": "DEGO",
      "name": "Dego Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmcJiJseBZVHQ6iJwF4FNQnc7Frq4SJJPJXTyLrmQec8z9"
    },
    {
      "chainId": 100,
      "address": "0x4291F029B9e7acb02D49428458cf6fceAC545f81",
      "symbol": "WATER",
      "name": "1Hive Water",
      "decimals": 18,
      "logoURI": "ipfs://QmXdSXfCKYufdPTRXupDDim797sdfeu3iKixWmwX7uj1zi"
    },
    {
      "chainId": 100,
      "address": "0x0939a7c3f8D37C1ce67fAda4963aE7E0bd112ff3",
      "symbol": "VITA",
      "name": "VitaDAO",
      "decimals": 18,
      "logoURI": "ipfs://QmXjsi9mvEsTP1AoSCjdyZuE44WfDtcbMNHxZUkRXhLqce"
    },
    {
      "chainId": 1,
      "address": "0x16980b3B4a3f9D89E33311B5aa8f80303E5ca4F8",
      "symbol": "KEX",
      "name": "KIRA Network",
      "decimals": 6,
      "logoURI": "ipfs://QmWas8fH4Th2k1n1jUXQLSzYxnRKttvz5JuGhXv8nB8hBL"
    },
    {
      "chainId": 1,
      "address": "0x1FF8CDB51219a8838b52E9cAc09b71e591BC998e",
      "symbol": "crBUSD",
      "name": "Cream Binance USD",
      "decimals": 8,
      "logoURI": "ipfs://QmXuYN57yqAKD2eCMiAERs4nj6v2bRKvMPrEuXwtR4NC81"
    },
    {
      "chainId": 1,
      "address": "0x18a3563c21062897950BB09339C82b9686a35667",
      "symbol": "ENXS",
      "name": "EtherNexus",
      "decimals": 9,
      "logoURI": "ipfs://QmXW7B4uqUAbxKRXwXtH1QEXU3hJWDgjEYuYcd6Te5c7yL"
    },
    {
      "chainId": 1,
      "address": "0x900dB999074d9277c5DA2A43F252D74366230DA0",
      "symbol": "GIV",
      "name": "Giveth",
      "decimals": 18,
      "logoURI": "ipfs://QmfBkYQZVHewLGqUnDDSGmybtiCKSk4bkAoQjxqwdRxZiQ"
    },
    {
      "chainId": 137,
      "address": "0x1379E8886A944d2D9d440b3d88DF536Aea08d9F3",
      "symbol": "MYST",
      "name": "Mysterium",
      "decimals": 18,
      "logoURI": "ipfs://QmfKqbcvm76L68VkUqWxLF5TWJfnstXcTMTYEnKS8Lk4jj"
    },
    {
      "chainId": 1,
      "address": "0x1337DEF16F9B486fAEd0293eb623Dc8395dFE46a",
      "symbol": "ARMOR",
      "name": "Armor",
      "decimals": 18,
      "logoURI": "ipfs://QmWZWyYaY1tzsxQoEpaUNeU3FkLoETwncG8qLYMRXKPAgm"
    },
    {
      "chainId": 1,
      "address": "0xBb1f24C0c1554b9990222f036b0AaD6Ee4CAec29",
      "symbol": "SOUL",
      "name": "CryptoSoul",
      "decimals": 18,
      "logoURI": "ipfs://QmR1d5bL3rx5idA879xNDuA6tsHo5KnkbYm6zJ7Uq9AuAE"
    },
    {
      "chainId": 1,
      "address": "0x2F57430a6ceDA85a67121757785877b4a71b8E6D",
      "symbol": "DFP2",
      "name": "DefiPlaza",
      "decimals": 18,
      "logoURI": "ipfs://QmNsW3u6wrYhs2HzZVW5ZNtp6s7AiPuTjHqHCn9sE7RHXw"
    },
    {
      "chainId": 1,
      "address": "0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb",
      "symbol": "sETH",
      "name": "Synthetic Ether",
      "decimals": 18,
      "logoURI": "ipfs://QmPMPctu8ZpantzEjiGfjBJXxAX8gPL7W5xAvF9LDt1pvM"
    },
    {
      "chainId": 1,
      "address": "0xB98d4C97425d9908E66E53A6fDf673ACcA0BE986",
      "symbol": "ABT",
      "name": "ArcBlock",
      "decimals": 18,
      "logoURI": "ipfs://QmSG8bjXUXF5FMGoxonen4B1PozJPtf11fFN8Lj2LoWqvB"
    },
    {
      "chainId": 1,
      "address": "0x18A908eD663823C908A900b934D6249d4befbE44",
      "symbol": "sBUSD",
      "name": "Strike BUSD",
      "decimals": 8,
      "logoURI": "ipfs://QmfB27GDcU3r15h1cX2abL7hQ7c6iEhve3SUvGWvBtLY79"
    },
    {
      "chainId": 1,
      "address": "0x580c8520dEDA0a441522AEAe0f9F7A5f29629aFa",
      "symbol": "DAWN",
      "name": "Dawn Protocol",
      "decimals": 18,
      "logoURI": "ipfs://Qmez8SftYbG3HYtyZL8u536iszdYXrrLu4msdQQoRVrXtm"
    },
    {
      "chainId": 100,
      "address": "0xb7D311E2Eb55F2f68a9440da38e7989210b9A05e",
      "symbol": "STAKE",
      "name": "STAKE",
      "decimals": 18,
      "logoURI": "ipfs://QmWT1MhsiZ1SFuBQj5taSaW73tvbn2Prqcnm1NXHpcMRCb"
    },
    {
      "chainId": 1,
      "address": "0x51BC0DeaF7bBE82bC9006b0c3531668a4206D27F",
      "symbol": "RAKU",
      "name": "RAKUN",
      "decimals": 18,
      "logoURI": "ipfs://QmdHWVL5vd9Vh3dw57Jcd5vvf2HqdFX3HedDMrDpPGBGCK"
    },
    {
      "chainId": 1,
      "address": "0x69D9905B2e5f6F5433212b7F3c954433F23C1572",
      "symbol": "OOKS",
      "name": "Onooks",
      "decimals": 18,
      "logoURI": "ipfs://QmZDAyUwMGEP9zUuMqs1Rnj2EzdCFsLtYVsP2BbHSCssvw"
    },
    {
      "chainId": 137,
      "address": "0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590",
      "symbol": "STG",
      "name": "Stargate Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmUpS8PCxJpsC8Ly8btjp7LXKueEdmWdZJUHk6e9zhzhnK"
    },
    {
      "chainId": 1,
      "address": "0x9189c499727f88F8eCC7dC4EEA22c828E6AaC015",
      "symbol": "iMKR",
      "name": "Fulcrum MKR iToken",
      "decimals": 18,
      "logoURI": "ipfs://QmSdvfpZhy4DV4kh2i59NGQ7Kpr7wgsBndq5taWkYvK1NJ"
    },
    {
      "chainId": 56,
      "address": "0x7c869b5A294b1314E985283d01C702B62224a05f",
      "symbol": "jCHF",
      "name": "Jarvis Synthetic Swiss Franc",
      "decimals": 18,
      "logoURI": "ipfs://QmQYgf7dnsrcJPGjDgm1sQZ1n3Ugbk3cAvptuu7SV43KgQ"
    },
    {
      "chainId": 1,
      "address": "0x115eC79F1de567eC68B7AE7eDA501b406626478e",
      "symbol": "CRE",
      "name": "Carry",
      "decimals": 18,
      "logoURI": "ipfs://QmfUihmQgAJ1nQZnJwzZmVNB3xprqYPJfDWvowCKDeFaDC"
    },
    {
      "chainId": 1,
      "address": "0x85c4EdC43724e954e5849cAAab61A26a9CB65F1B",
      "symbol": "BBCH",
      "name": "Binance Wrapped BCH",
      "decimals": 8,
      "logoURI": "ipfs://Qmb6EW2YSNCH4w2saZ2MS3MqjGrQKkn9WR8HcfHb11NA5d"
    },
    {
      "chainId": 1,
      "address": "0x8dfc8cc3201425669FaE803e1eB125cddd4189eC",
      "symbol": "OKAGE",
      "name": "Okage Inu",
      "decimals": 18,
      "logoURI": "ipfs://QmNpnay866iZ4yjSe1CcRnH1fJvbvQKJkj4DPmqFR7MiHf"
    },
    {
      "chainId": 56,
      "address": "0x76A797A59Ba2C17726896976B7B3747BfD1d220f",
      "symbol": "TONCOIN",
      "name": "Wrapped TON Coin",
      "decimals": 9,
      "logoURI": "ipfs://QmRwD6j7bvxWU6dhvYR84KaW1xXWgu5ZwqpYJbtZsJri6z"
    },
    {
      "chainId": 1,
      "address": "0x4B4701f3f827E1331fb22FF8e2BEaC24b17Eb055",
      "symbol": "DISTX",
      "name": "DistX",
      "decimals": 18,
      "logoURI": "ipfs://QmVWindfxKK3ZJ192dRfLJmxdtTRkyGmkJ9mwDKjtkER9C"
    },
    {
      "chainId": 1,
      "address": "0xe8e8486228753E01Dbc222dA262Aa706Bd67e601",
      "symbol": "WEB3",
      "name": "Arch Ethereum Web3",
      "decimals": 18,
      "logoURI": "ipfs://Qmdup9K1iKcZyznP4E2PZc8mVCUbqpv7CGS4QQVgwWib1m"
    },
    {
      "chainId": 1,
      "address": "0x1829aA045E21E0D59580024A951DB48096e01782",
      "symbol": "FXT",
      "name": "FuzeX",
      "decimals": 18,
      "logoURI": "ipfs://QmQfxhxUE8JnpwsJVRsQeEDD8US9Q1nGkAFfzPfowRfTS5"
    },
    {
      "chainId": 1,
      "address": "0xE884cc2795b9c45bEeac0607DA9539Fd571cCF85",
      "symbol": "ULT",
      "name": "Ultiledger",
      "decimals": 18,
      "logoURI": "ipfs://QmWg6rsVQ7UtXpNTVF2u2YU6cQw6x8zRoK3MyNuKUcwBjF"
    },
    {
      "chainId": 1,
      "address": "0x48C3399719B582dD63eB5AADf12A40B4C3f52FA2",
      "symbol": "SWISE",
      "name": "StakeWise",
      "decimals": 18,
      "logoURI": "ipfs://QmWWwqSTweQtGHsWvBaoAnfTDuzspwR811Moyw2YnfAkRH"
    },
    {
      "chainId": 1,
      "address": "0xEEaa34aF95b034BaDa4baF565063132C765b1fA5",
      "symbol": "OLCF",
      "name": "OLCF",
      "decimals": 18,
      "logoURI": "ipfs://QmQ9Jj5mm54oSEwE2FJknrfteXwLLv5PVdYREPvAMnYVms"
    },
    {
      "chainId": 1,
      "address": "0xbf900809f4C73e5a3476eb183d8b06a27e61F8E5",
      "symbol": "VNL",
      "name": "Vanilla",
      "decimals": 12,
      "logoURI": "ipfs://QmWDLHDpqJ79iy2fwu5ZuJxguUo6QNCpcTkaZhMLQ2qs5Z"
    },
    {
      "chainId": 1,
      "address": "0x957c30aB0426e0C93CD8241E2c60392d08c6aC8e",
      "symbol": "MOD",
      "name": "Modum",
      "decimals": 0,
      "logoURI": "ipfs://QmcYPPqJadNufT7Vpgw3bGi4AbcfT7k5LzibW1p1ESC8ET"
    },
    {
      "chainId": 1,
      "address": "0x5Ca135cB8527d76e932f34B5145575F9d8cbE08E",
      "symbol": "FPI",
      "name": "Frax Price Index",
      "decimals": 18,
      "logoURI": "ipfs://QmTf1B4mMgr9bdBH4KGWWnew9SkJF4DK9M7FAEnyvr9tKr"
    },
    {
      "chainId": 1,
      "address": "0xB705268213D593B8FD88d3FDEFF93AFF5CbDcfAE",
      "symbol": "IDEX",
      "name": "IDEX",
      "decimals": 18,
      "logoURI": "ipfs://QmawT5xDG7Rr6GLRVk8NDW9HwejiHQe8phdoq5R7TR8Cwg"
    },
    {
      "chainId": 1,
      "address": "0x4a6058666cf1057eaC3CD3A5a614620547559fc9",
      "symbol": "BBK",
      "name": "Brickblock",
      "decimals": 18,
      "logoURI": "ipfs://Qme2KTdyfNAdhrwQkwUgrBsX3Xw5sMEt33txrTW7beEX51"
    },
    {
      "chainId": 1,
      "address": "0xF5DCe57282A584D2746FaF1593d3121Fcac444dC",
      "symbol": "cSAI",
      "name": "Compound Sai",
      "decimals": 8,
      "logoURI": "ipfs://QmVHEHmSPnxaaXEVtjrfm4B9uemuJhDZ2mfA81dERE4gXn"
    },
    {
      "chainId": 1,
      "address": "0x897Abf83f0C44b86cb67ec56c006c00d56659517",
      "symbol": "ARTEON",
      "name": "Arteon",
      "decimals": 18,
      "logoURI": "ipfs://QmSPzZoTVAbUJoapX4APyQYcsh7WQYbdEsyh5wPNLv4xfs"
    },
    {
      "chainId": 1,
      "address": "0x62786Eeacc9246b4018e0146cb7a3efeACD9459D",
      "symbol": "LESS",
      "name": "Less Network",
      "decimals": 18,
      "logoURI": "ipfs://QmeRVznaEV3MnPLrjXhrYZCV7rkt9tft7VKhJEDCPXmuKS"
    },
    {
      "chainId": 1,
      "address": "0xE17f017475a709De58E976081eB916081ff4c9d5",
      "symbol": "RMPL",
      "name": "RMPL",
      "decimals": 9,
      "logoURI": "ipfs://Qmecs5GQzzifmyNGCVL4WZVzA9WeNrEncw2CDoSPbrt2EX"
    },
    {
      "chainId": 1,
      "address": "0x3F3B3B269d9f7088B022290906acff8710914be1",
      "symbol": "sLINK",
      "name": "Strike LINK",
      "decimals": 8,
      "logoURI": "ipfs://QmbjDyKGdyYjaSfsKcL2uhN4cY3XvhUN2zms8uvZorHDz6"
    },
    {
      "chainId": 1,
      "address": "0x8B40761142B9aa6dc8964e61D0585995425C3D94",
      "symbol": "TRIO",
      "name": "Tripio",
      "decimals": 18,
      "logoURI": "ipfs://QmYKz3e2UzHdEGJhu3Q8tijqcCsrzDWue241TUTvtH2LnM"
    },
    {
      "chainId": 137,
      "address": "0xBD1fe73e1f12bD2bc237De9b626F056f21f86427",
      "symbol": "jMXN",
      "name": "Jarvis Synthetic Mexican Peso",
      "decimals": 18,
      "logoURI": "ipfs://QmUcsBRdQM5HQKoiKMMFCjhTpYuggPJXF72pgygunCH4Tc"
    },
    {
      "chainId": 1,
      "address": "0xdF574c24545E5FfEcb9a659c229253D4111d87e1",
      "symbol": "HUSD",
      "name": "HUSD",
      "decimals": 8,
      "logoURI": "ipfs://QmbJh5GxoM1BHtovY56MC7pz9zqALddYdgxfA42tebkNxt"
    },
    {
      "chainId": 1,
      "address": "0x2604FA406Be957E542BEb89E6754fCdE6815e83f",
      "symbol": "PKT",
      "name": "Playkey",
      "decimals": 18,
      "logoURI": "ipfs://QmdESRiDtSXDKj69GJbVudCrfVdVJkUCtNeThuDTnMAkxE"
    },
    {
      "chainId": 1,
      "address": "0xa704fCe7b309Ec09DF16e2F5Ab8cAf6Fe8A4BAA9",
      "symbol": "AGRI",
      "name": "AgriChain",
      "decimals": 18,
      "logoURI": "ipfs://QmXX3pJjaQG3RufVKuwsQAAaH6iYMPAncQWDxk628rxNxq"
    },
    {
      "chainId": 1,
      "address": "0xB16e967ff83DE3F1e9FCeAfbc2C28c1c5c56eF91",
      "symbol": "PDOG",
      "name": "Polkadog",
      "decimals": 18,
      "logoURI": "ipfs://QmTUQKfUgSP1V1KvYky2Mn5u89uiHaJPaqXP8paudGYCpt"
    },
    {
      "chainId": 1,
      "address": "0xc7283b66Eb1EB5FB86327f08e1B5816b0720212B",
      "symbol": "TRIBE",
      "name": "Tribe",
      "decimals": 18,
      "logoURI": "ipfs://QmPwBcAsUcpFsfiSJrQSMXa8zZ8ma35Uzgu78NC48c6764"
    },
    {
      "chainId": 1,
      "address": "0x50DE6856358Cc35f3A9a57eAAA34BD4cB707d2cd",
      "symbol": "RAZOR",
      "name": "Razor Network",
      "decimals": 18,
      "logoURI": "ipfs://QmXLoX8YsccFxxxFQJ8kTFLVy8oC7LhptUVG3RznzwZJC8"
    },
    {
      "chainId": 1,
      "address": "0x83d60E7aED59c6829fb251229061a55F35432c4d",
      "symbol": "INFT",
      "name": "Infinito",
      "decimals": 6,
      "logoURI": "ipfs://QmfAELrARAsCrB1vzwgAgAhaw36x6YKnxqw6XE2nmiUoXq"
    },
    {
      "chainId": 1,
      "address": "0xA10A210C27C86f8C63825096E34f671fD61041b1",
      "symbol": "JEFF",
      "name": "Jeff in Space",
      "decimals": 9,
      "logoURI": "ipfs://QmYH7WJzk8ebhP7e6qxLyN45tPtCVdxHCsnm6LFDxoD9gm"
    },
    {
      "chainId": 1,
      "address": "0xCd7492db29E2ab436e819b249452EE1bbDf52214",
      "symbol": "SMI",
      "name": "SafeMoon Inu",
      "decimals": 8,
      "logoURI": "ipfs://QmTcmMyvRrF86UNNGSnAuWnL3AXJKd65tpNdM49CCYvBpo"
    },
    {
      "chainId": 1,
      "address": "0x14da230d6726C50F759Bc1838717F8CE6373509C",
      "symbol": "KAT",
      "name": "Kambria",
      "decimals": 18,
      "logoURI": "ipfs://QmbDoNz75ZHCvDdmmvYCu1Q4Up6ygaJV1zQJtRGG7m2YaC"
    },
    {
      "chainId": 10,
      "address": "0xdC6fF44d5d932Cbd77B52E5612Ba0529DC6226F1",
      "symbol": "WLD",
      "name": "Worldcoin",
      "decimals": 18,
      "logoURI": "ipfs://QmZPdBuzk8HxZ1sH5sqr7ezn3T1AXuUgXqcVv1WMemwcYx"
    },
    {
      "chainId": 1,
      "address": "0xad3E3Fc59dff318BecEaAb7D00EB4F68b1EcF195",
      "symbol": "WCUSD",
      "name": "Wrapped Celo USD",
      "decimals": 18,
      "logoURI": "ipfs://QmTieLb8SjmvpbnBFMqZpo3rzwDXZoQ2nFUfMScZEKx7Sj"
    },
    {
      "chainId": 56,
      "address": "0xEd8c8Aa8299C10f067496BB66f8cC7Fb338A3405",
      "symbol": "PROS",
      "name": "Prosper",
      "decimals": 18,
      "logoURI": "ipfs://QmewE3Kv1SjWchsXj6iRPBL2Nh5qKHvR6ivb4R3D3nWQo5"
    },
    {
      "chainId": 1,
      "address": "0x91Af0fBB28ABA7E31403Cb457106Ce79397FD4E6",
      "symbol": "AERGO",
      "name": "Aergo",
      "decimals": 18,
      "logoURI": "ipfs://QmehSYj1x4w4ZmhhxdMFJ6WW5m8iBnvR7oqcEmiEwUzFXV"
    },
    {
      "chainId": 1,
      "address": "0x61cDb66e56FAD942a7b5cE3F419FfE9375E31075",
      "symbol": "RAIN",
      "name": "RAIN Network",
      "decimals": 18,
      "logoURI": "ipfs://Qmc56YktVQyG1rGeLAkMTwcvUR1pqcHtkuAivXxTZkZ9Cg"
    },
    {
      "chainId": 1,
      "address": "0xB37a769B37224449d92AAc57dE379E1267Cd3B00",
      "symbol": "COVA",
      "name": "COVA",
      "decimals": 18,
      "logoURI": "ipfs://QmWPs1dnj43pWjSXHeG5MDnuh2Lmz6wderof28MkNdGeaV"
    },
    {
      "chainId": 1,
      "address": "0x0f7F961648aE6Db43C75663aC7E5414Eb79b5704",
      "symbol": "XIO",
      "name": "XIO",
      "decimals": 18,
      "logoURI": "ipfs://QmT9Kh5PdEXD7qvpXhTmjLUKESMALZtF3qm8RxL6kqUNva"
    },
    {
      "chainId": 1,
      "address": "0x035bfe6057E15Ea692c0DfdcaB3BB41a64Dd2aD4",
      "symbol": "ULU",
      "name": "Universal Liquidity Union",
      "decimals": 18,
      "logoURI": "ipfs://QmZGmzCPuffxAfAZAhi3zuq86jqKPQt7tD8hjVba25e8dW"
    },
    {
      "chainId": 100,
      "address": "0xAAd66432d27737ecf6ED183160Adc5eF36aB99f2",
      "symbol": "TRB",
      "name": "Tellor",
      "decimals": 18,
      "logoURI": "ipfs://QmWvmGB7NhEcfLrqCM6dsRozFytqY2wBC3ordycpzgjQqU"
    },
    {
      "chainId": 1,
      "address": "0x2ffa85f655752fB2aCB210287c60b9ef335f5b6E",
      "symbol": "iWBTC",
      "name": "Fulcrum WBTC iToken",
      "decimals": 8,
      "logoURI": "ipfs://Qmei61Bx2gEf8L7W6d5CpXZprqXcqSiKH5XFH5D4MxwrsR"
    },
    {
      "chainId": 1,
      "address": "0xD54F76a4F66d6016A7FF169FacE62C14746e25b7",
      "symbol": "EWOM",
      "name": "EWOM",
      "decimals": 18,
      "logoURI": "ipfs://QmfT6iRi1sDPG6am9BaKDHHpVd6RbDFiZZ878537mNR9eT"
    },
    {
      "chainId": 1,
      "address": "0x8003C49f6ebACDdC493EA47CAB45e892d1B638a1",
      "symbol": "AMPLG",
      "name": "AmpleGold",
      "decimals": 9,
      "logoURI": "ipfs://QmcMXaVwiU5v7o3dBqod1TiTbGumAbd1XneayUT4r6fH2w"
    },
    {
      "chainId": 1,
      "address": "0x4104b135DBC9609Fc1A9490E61369036497660c8",
      "symbol": "APW",
      "name": "APWine",
      "decimals": 18,
      "logoURI": "ipfs://QmUt2wDb8N5TXq5f19NSVaT5yAMwADDsUfaC1fYrzhRj4i"
    },
    {
      "chainId": 1,
      "address": "0xAC9ce326e95f51B5005e9fE1DD8085a01F18450c",
      "symbol": "VSF",
      "name": "VeriSafe",
      "decimals": 18,
      "logoURI": "ipfs://QmWxok3zaKgMMTYGEvLj62veiqC68hURcvLqzUudBrUH5a"
    },
    {
      "chainId": 1,
      "address": "0x7a2Bc711E19ba6aff6cE8246C546E8c4B4944DFD",
      "symbol": "WAXE",
      "name": "WAXE",
      "decimals": 8,
      "logoURI": "ipfs://QmeMyuXyMYpqYa6Tq6CttTcYKUvaCHaz6pkMQvzT6tB8Cx"
    },
    {
      "chainId": 1,
      "address": "0x62D0A8458eD7719FDAF978fe5929C6D342B0bFcE",
      "symbol": "BEAM",
      "name": "Beam",
      "decimals": 18,
      "logoURI": "ipfs://QmPfGrjzfmzCevK86kK5ZvD9E7S88wLw1t7Sq1X6yPAJUB"
    },
    {
      "chainId": 1,
      "address": "0xB1f66997A5760428D3a87D68b90BfE0aE64121cC",
      "symbol": "LUA",
      "name": "Lua Token",
      "decimals": 18,
      "logoURI": "ipfs://QmVop2FbFZs6iCnk6sExARFPyTVkhCVuRwyS4LLx1tKfS1"
    },
    {
      "chainId": 1,
      "address": "0x8290333ceF9e6D528dD5618Fb97a76f268f3EDD4",
      "symbol": "ANKR",
      "name": "Ankr",
      "decimals": 18,
      "logoURI": "ipfs://QmXjiygak4dUVX2m1W4i6V6vFoUvDKgtJBbQseFcVNJZ94"
    },
    {
      "chainId": 1,
      "address": "0xB6eD7644C69416d67B522e20bC294A9a9B405B31",
      "symbol": "0xBTC",
      "name": "0xBitcoin",
      "decimals": 8,
      "logoURI": "ipfs://QmX1V76wwDjKPAdcsS8MptpDugJGE3cVfrMkFndbSpMCeq"
    },
    {
      "chainId": 137,
      "address": "0xdAb529f40E671A1D4bF91361c21bf9f0C9712ab7",
      "symbol": "BUSD",
      "name": "Binance USD",
      "decimals": 18,
      "logoURI": "ipfs://QmUCSx8qo7kSFcdPJ7gLp9X9pPkue13KUmnL6ZzBZ6ejaQ"
    },
    {
      "chainId": 1,
      "address": "0xF256CC7847E919FAc9B808cC216cAc87CCF2f47a",
      "symbol": "aXSUSHI",
      "name": "Aave XSUSHI",
      "decimals": 18,
      "logoURI": "ipfs://QmUT4HXThbM7VLS94mVTvQQnFufz6hBSYE6Tjss4KWSrTE"
    },
    {
      "chainId": 1,
      "address": "0xE46F290Cd59195a83e757891430d8D517d16b334",
      "symbol": "AFN",
      "name": "AltaFin",
      "decimals": 18,
      "logoURI": "ipfs://Qmeqdxd8G8jCodtsYPkovWPPAEoQrM17wrSWZSAxH6jgAy"
    },
    {
      "chainId": 1,
      "address": "0x607F4C5BB672230e8672085532f7e901544a7375",
      "symbol": "RLC",
      "name": "iExec RLC",
      "decimals": 9,
      "logoURI": "ipfs://QmSZkBRpRX4oSqKjscgfqRDgwjtXPCkwmNdryhmQS3YKhb"
    },
    {
      "chainId": 1,
      "address": "0x761D38e5ddf6ccf6Cf7c55759d5210750B5D60F3",
      "symbol": "ELON",
      "name": "Dogelon Mars",
      "decimals": 18,
      "logoURI": "ipfs://QmaHs61uW9nZYiHVSQuZgnQWBPSwNokcnNgZn7FGMhSHVk"
    },
    {
      "chainId": 1,
      "address": "0x646707246D7d5C2a86d7206f41CA8199ea9CED69",
      "symbol": "CHOP",
      "name": "Porkchop",
      "decimals": 18,
      "logoURI": "ipfs://QmW1h4vfn7Z533bwKA3wBJv2magsWSzsXACqLKxpfkFFpd"
    },
    {
      "chainId": 1,
      "address": "0xDf7FF54aAcAcbFf42dfe29DD6144A69b629f8C9e",
      "symbol": "aZRX",
      "name": "Aave ZRX",
      "decimals": 18,
      "logoURI": "ipfs://QmczZhrtoXqcDm1YCxCc4RVFQhqyPU7URRrEXExVxqHfKz"
    },
    {
      "chainId": 1,
      "address": "0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272",
      "symbol": "xSUSHI",
      "name": "xSUSHI",
      "decimals": 18,
      "logoURI": "ipfs://QmeXt3g3sRF2dh6kosC3ubBN9tSw9YC7oJRA5kttdddrra"
    },
    {
      "chainId": 1,
      "address": "0x4a57E687b9126435a9B19E4A802113e266AdeBde",
      "symbol": "FXC",
      "name": "Flexacoin",
      "decimals": 18,
      "logoURI": "ipfs://QmVfe2f4TZLM43noUgyR2UWaNWNt47xYxqq69iALY5H2tR"
    },
    {
      "chainId": 1,
      "address": "0x78B039921E84E726EB72E7b1212bb35504c645cA",
      "symbol": "SETH",
      "name": "Sether",
      "decimals": 18,
      "logoURI": "ipfs://Qma5qjKV4v2tQRZSqopw3gS2St7mkaQqsg2MjAqGayP7HP"
    },
    {
      "chainId": 1,
      "address": "0x08d32b0da63e2C3bcF8019c9c5d849d7a9d791e6",
      "symbol": "DCN",
      "name": "Dentacoin",
      "decimals": 0,
      "logoURI": "ipfs://QmbhNhGY6QJChiUposVxdvKFQgjHDfTDfb2sTg48WiTmLF"
    },
    {
      "chainId": 1,
      "address": "0xC5807183a9661A533CB08CbC297594a0B864dc12",
      "symbol": "iTRX",
      "name": "Synthetic Inverse TRON",
      "decimals": 18,
      "logoURI": "ipfs://QmPjn51ZqPZkroZ4p446tKm8NBL9kBUbtFduUTPhjnELeL"
    },
    {
      "chainId": 1,
      "address": "0xc50EF449171a51FbeAFd7c562b064B6471C36caA",
      "symbol": "ZINU",
      "name": "Zombie Inu",
      "decimals": 9,
      "logoURI": "ipfs://QmcEAoRnFPvxbPhud29D78WT7EX2mZW8cFpFxXMtkhhH9G"
    },
    {
      "chainId": 10,
      "address": "0x4200000000000000000000000000000000000042",
      "symbol": "OP",
      "name": "Optimism",
      "decimals": 18,
      "logoURI": "ipfs://Qmf6Rw34hCk8DUzKhtAXVcL8WVhWJ881rQn9YB88SAokRn"
    },
    {
      "chainId": 137,
      "address": "0xD1f9c58e33933a993A3891F8acFe05a68E1afC05",
      "symbol": "SFL",
      "name": "Sunflower Land",
      "decimals": 18,
      "logoURI": "ipfs://Qmbintub8EwRSzCUT7hn4NKswtYXXaXJD7ZgbzPBXLEzkV"
    },
    {
      "chainId": 1,
      "address": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
      "symbol": "WETH",
      "name": "WETH",
      "decimals": 18,
      "logoURI": "ipfs://QmRvUDB8isthbwNEWtCvWTJ9kxZsc1VZ4mNmVmT7BBVUS9"
    },
    {
      "chainId": 1,
      "address": "0x3623387773010d9214B10C551d6e7fc375D31F58",
      "symbol": "crMTA",
      "name": "Cream Meta",
      "decimals": 8,
      "logoURI": "ipfs://QmdRJdoP5VZexUsAUxC43Vh1o8qtBUs6MG5t55Zq7bEu5J"
    },
    {
      "chainId": 1,
      "address": "0xDea67845A51E24461D5fED8084E69B426AF3D5Db",
      "symbol": "HTRE",
      "name": "HodlTree",
      "decimals": 18,
      "logoURI": "ipfs://Qmc4BagUiZCBYe7HvZkdLtAEGqThZu8FsdYfptXjSGV1Fa"
    },
    {
      "chainId": 1,
      "address": "0x1E4EDE388cbc9F4b5c79681B7f94d36a11ABEBC9",
      "symbol": "X2Y2",
      "name": "X2Y2",
      "decimals": 18,
      "logoURI": "ipfs://QmP5sg2XbsUhWE4fVHmVE2wZmfYf6EjnhtYRULj6UFHsrD"
    },
    {
      "chainId": 1,
      "address": "0x501acE9c35E60f03A2af4d484f49F9B1EFde9f40",
      "symbol": "SOLACE",
      "name": "Solace",
      "decimals": 18,
      "logoURI": "ipfs://QmaTdZw8DQ2mMcZK5G6ipeQajBUUcLUjpaXsV7eSvnCj7C"
    },
    {
      "chainId": 1,
      "address": "0x06012c8cf97BEaD5deAe237070F9587f8E7A266d",
      "symbol": "CK",
      "name": "CryptoKitties",
      "decimals": 0,
      "logoURI": "ipfs://QmXW3H7ZT6CRCWXEhgg64HiGUFTvwbQ6fRN44kVAHwUHj2"
    },
    {
      "chainId": 1,
      "address": "0x0947b0e6D821378805c9598291385CE7c791A6B2",
      "symbol": "LND",
      "name": "Lendingblock",
      "decimals": 18,
      "logoURI": "ipfs://QmTiXXzyvQjocvLaPLmx5gfksHJEwZHnJ73QZS9Ha6qcGc"
    },
    {
      "chainId": 1,
      "address": "0xCdCFc0f66c522Fd086A1b725ea3c0Eeb9F9e8814",
      "symbol": "AURA",
      "name": "Aurora DAO",
      "decimals": 18,
      "logoURI": "ipfs://QmUN2ugVSLsrcwY6kLC62aPXDXrt71k1U5KTXTknLsSRGS"
    },
    {
      "chainId": 1,
      "address": "0xbb1EE07d6c7BAeB702949904080eb61f5D5e7732",
      "symbol": "DINU",
      "name": "Dogey-Inu",
      "decimals": 18,
      "logoURI": "ipfs://QmfA1H8Et8bqhB1JDbHWfZfwsGMpPnyxTQHUbiGNyWAqF7"
    },
    {
      "chainId": 1,
      "address": "0xb3999F658C0391d94A37f7FF328F3feC942BcADC",
      "symbol": "HFT",
      "name": "Hashflow",
      "decimals": 18,
      "logoURI": "ipfs://QmNobp6XesVAXdTTGuiL1moNkjxEHFgVcWu7iLAzWQcJWs"
    },
    {
      "chainId": 1,
      "address": "0x5283D291DBCF85356A21bA090E6db59121208b44",
      "symbol": "BLUR",
      "name": "Blur",
      "decimals": 18,
      "logoURI": "ipfs://QmbccKEk1pb7p2Be8kPhKsoxjj7gAnU4TdtU3EaaKUf8QU"
    },
    {
      "chainId": 1,
      "address": "0xBe9895146f7AF43049ca1c1AE358B0541Ea49704",
      "symbol": "cbETH",
      "name": "Coinbase Wrapped Staked ETH",
      "decimals": 18,
      "logoURI": "ipfs://QmTPxtJKnMmY8XrJ5jMSwdmkVB5htNK9AXWu5Tbmw9K5ux"
    },
    {
      "chainId": 1,
      "address": "0xA682Ee16b497afcEEDF47e4820Fc2af3845FD2D2",
      "symbol": "PIKA",
      "name": "Pika",
      "decimals": 18,
      "logoURI": "ipfs://QmX4BdxaJEitiV5cvqKxTWo3oy1jLbWsFrr94UfCDgvReq"
    },
    {
      "chainId": 1,
      "address": "0x0AbdAce70D3790235af448C88547603b945604ea",
      "symbol": "DNT",
      "name": "district0x",
      "decimals": 18,
      "logoURI": "ipfs://QmNn4nv7oFMKPeZMqFvBHebx8LhoJQXsPzp1R9LwFGbFGy"
    },
    {
      "chainId": 1,
      "address": "0xd5103AfcD0B3fA865997Ef2984C66742c51b2a8b",
      "symbol": "crHFIL",
      "name": "Cream Huobi FIL",
      "decimals": 8,
      "logoURI": "ipfs://QmYVD2NVgiXjxuLD13JYxeem9wFeRj4zNLRbuTHkBVX7kE"
    },
    {
      "chainId": 1,
      "address": "0x66a0f676479Cee1d7373f3DC2e2952778BfF5bd6",
      "symbol": "WISE",
      "name": "Wise",
      "decimals": 18,
      "logoURI": "ipfs://QmauZH81qdTanmyJXQ4moGP8Q8GDX3HfixwQnS3fJWrvFV"
    },
    {
      "chainId": 1,
      "address": "0x757de3ac6B830a931eF178C6634c5C551773155c",
      "symbol": "sNIKKEI",
      "name": "Synthetic Nikkei 225 Index",
      "decimals": 18,
      "logoURI": "ipfs://QmYutUNRuRuoJMEQhRrw3fvmGbiiaX9fsdJEzeCXH3x5GX"
    },
    {
      "chainId": 1,
      "address": "0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B",
      "symbol": "CVX",
      "name": "Convex Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmWwi4dKqrdaxmdYLmutkxNSGdQBanvsfwCjh7W5BgBg9F"
    },
    {
      "chainId": 1,
      "address": "0xcE1d3dA32e3a45d27dC841781f09E40C41CAC677",
      "symbol": "DLB",
      "name": "Data Link Base",
      "decimals": 18,
      "logoURI": "ipfs://Qmevh6JpcbBaSqvG7CKH9GEfWbbk4uzaQ8RVdNR7jWUoXZ"
    },
    {
      "chainId": 1,
      "address": "0xA7Eb2bc82df18013ecC2A6C533fc29446442EDEe",
      "symbol": "iZRX",
      "name": "Fulcrum ZRX iToken",
      "decimals": 18,
      "logoURI": "ipfs://QmeLNWUVUAJKwjewbEo9hgdTHKotzmrFYGpN4gzFBwQnVU"
    },
    {
      "chainId": 1,
      "address": "0x0b38210ea11411557c13457D4dA7dC6ea731B88a",
      "symbol": "API3",
      "name": "API3",
      "decimals": 18,
      "logoURI": "ipfs://QmSiLEcUpBdFPkwbkwgEVNnW6vSToiNeroGY9zQVfxNk7w"
    },
    {
      "chainId": 1,
      "address": "0xe1aFe1Fd76Fd88f78cBf599ea1846231B8bA3B6B",
      "symbol": "sDEFI",
      "name": "Synthetic DeFi Index",
      "decimals": 18,
      "logoURI": "ipfs://QmcgvPrDuXA8F6gyQgV9ysHMEpo1WpGK2phskoe9oHzXum"
    },
    {
      "chainId": 1,
      "address": "0x468ab3b1f63A1C14b361bC367c3cC92277588Da1",
      "symbol": "YELD",
      "name": "Yeld Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmRqcpSEEWeiwPya8nW7WRqFBD1JvBgkdHhddDjGbGpaMf"
    },
    {
      "chainId": 1,
      "address": "0x5A235C0b4cB8d0e80a5c3bF4d2faD5c32E440884",
      "symbol": "KONGZ",
      "name": "KONGZ Vault",
      "decimals": 18,
      "logoURI": "ipfs://Qmd6LjkBk5xfKEhtz4h1kgi4jzTWzKnPH8uQLp9Yf5Yjuj"
    },
    {
      "chainId": 1,
      "address": "0x0000000000085d4780B73119b644AE5ecd22b376",
      "symbol": "TUSD",
      "name": "TrueUSD",
      "decimals": 18,
      "logoURI": "ipfs://QmSuucvXBjBTJyfwfY77wLBsJ1NWUPKTnJT9B4dsJP9mMp"
    },
    {
      "chainId": 1,
      "address": "0x7047F90229a057C13BF847C0744D646CFb6c9E1A",
      "symbol": "yvCurve-renBTC",
      "name": "Curve renBTC Pool yVault",
      "decimals": 18,
      "logoURI": "ipfs://QmNy5Hn2sC9rNB99wJAT9rFWyFo4Q1c9cVD6kgefyWT1AN"
    },
    {
      "chainId": 1,
      "address": "0xEABB8996eA1662cAd2f7fB715127852cd3262Ae9",
      "symbol": "CNFI",
      "name": "Connect Financial",
      "decimals": 18,
      "logoURI": "ipfs://QmZTR5RMa3uEu1LF8hB9xAN1jPrmWZ79daTyAeCKYp8P1X"
    },
    {
      "chainId": 1,
      "address": "0x7Da96a3891Add058AdA2E826306D812C638D87a7",
      "symbol": "yvUSDT",
      "name": "USDT yVault",
      "decimals": 6,
      "logoURI": "ipfs://QmWTxXoBfmxtpobVrQVwtyEHcm8APCG8xpw7b9zEtmJ8YU"
    },
    {
      "chainId": 1,
      "address": "0xD5147bc8e386d91Cc5DBE72099DAC6C9b99276F5",
      "symbol": "renFIL",
      "name": "renFIL",
      "decimals": 18,
      "logoURI": "ipfs://QmPXhBhEvEuK5kdJaeLBqaUBQqLcS4iZmELFXu1SaWb2cR"
    },
    {
      "chainId": 1,
      "address": "0xDd1Ad9A21Ce722C151A836373baBe42c868cE9a4",
      "symbol": "UBI",
      "name": "Universal Basic Income",
      "decimals": 18,
      "logoURI": "ipfs://QmZgm1mythRBiEksoSFiouniMEZZXHG4NezaSvVKMUPA16"
    },
    {
      "chainId": 1,
      "address": "0xD8Bd3958725F216Eb236E9DC65B169DE48101C6A",
      "symbol": "GBT",
      "name": "Globatalent",
      "decimals": 8,
      "logoURI": "ipfs://QmVE1tyd1BkRBh9MvBqb6p3FwAqkPiWae7dkAVGJUui4dD"
    },
    {
      "chainId": 1,
      "address": "0x3a1Bda28AdB5B0a812a7CF10A1950c920F79BcD3",
      "symbol": "FLP",
      "name": "FLIP",
      "decimals": 18,
      "logoURI": "ipfs://QmYCcNTc39eVog5dywPY3uouUbpWCpQ4NYhBkCTBsM2aXV"
    },
    {
      "chainId": 1,
      "address": "0xa1d0E215a23d7030842FC67cE582a6aFa3CCaB83",
      "symbol": "YFII",
      "name": "YFII.finance",
      "decimals": 18,
      "logoURI": "ipfs://QmR22geJeLtoUzBp6n82BRpyZoRoGjXcY2c1FdCSmgnRko"
    },
    {
      "chainId": 1,
      "address": "0x17525E4f4Af59fbc29551bC4eCe6AB60Ed49CE31",
      "symbol": "YPIE",
      "name": "PieDAO Yearn Ecosystem Pie",
      "decimals": 18,
      "logoURI": "ipfs://QmaNqgJzk9xn6nMkhHwbYAZJdo5nmwSNu3WWNovgp5nLeh"
    },
    {
      "chainId": 137,
      "address": "0x40379a439D4F6795B6fc9aa5687dB461677A2dBa",
      "symbol": "USDR",
      "name": "Real USD",
      "decimals": 9,
      "logoURI": "ipfs://QmNPpu9zxYu4d6WjAgUFX8Ej3GQvZ3CYVUApXPPMWKw971"
    },
    {
      "chainId": 1,
      "address": "0xCbaE0A83f4f9926997c8339545fb8eE32eDc6b76",
      "symbol": "crYFI",
      "name": "Cream YFI",
      "decimals": 8,
      "logoURI": "ipfs://QmdsXZWcnh6q72qKtHYWnNhQPNsgJbHAdAuCjp8PXXBpC3"
    },
    {
      "chainId": 1,
      "address": "0x1C5db575E2Ff833E46a2E9864C22F4B22E0B37C2",
      "symbol": "renZEC",
      "name": "renZEC",
      "decimals": 8,
      "logoURI": "ipfs://QmSajvEWSby7XqXYie7fXqVzdJSmNdWhFnRwU72eAB3Ymv"
    },
    {
      "chainId": 1,
      "address": "0x1712Aad2C773ee04bdC9114b32163c058321CD85",
      "symbol": "LIMIT",
      "name": "LimitSwap",
      "decimals": 18,
      "logoURI": "ipfs://QmdcQz6Jicse4WB5KRSk1jv2RfYjnVgSLE5EojZPxs5swv"
    },
    {
      "chainId": 1,
      "address": "0x5F64Ab1544D28732F0A24F4713c2C8ec0dA089f0",
      "symbol": "DEXTF",
      "name": "DEXTF Protocol",
      "decimals": 18,
      "logoURI": "ipfs://Qmbza32G6DgYrD3dthzS2uogKfooX3yB9FZQHfmgLcpyse"
    },
    {
      "chainId": 1,
      "address": "0x60EF10EDfF6D600cD91caeCA04caED2a2e605Fe5",
      "symbol": "MOCHI",
      "name": "Mochi Inu",
      "decimals": 18,
      "logoURI": "ipfs://QmXfpDvEHsaF9sU2nkffmWCf5bHkU7HdGZVdrKZfU4GshW"
    },
    {
      "chainId": 1,
      "address": "0xCdF7028ceAB81fA0C6971208e83fa7872994beE5",
      "symbol": "T",
      "name": "Threshold Network",
      "decimals": 18,
      "logoURI": "ipfs://QmSGMD29fCZELn3JY6yCkkf5TLhhamhNmp5jZSy1VfV9nk"
    },
    {
      "chainId": 1,
      "address": "0x3aFfCCa64c2A6f4e3B6Bd9c64CD2C969EFd1ECBe",
      "symbol": "DSLA",
      "name": "DSLA Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmRbiUXswRVfHKM6fCBfFgn7h89nczoA1KWartGHMwgPZQ"
    },
    {
      "chainId": 1,
      "address": "0x00000000441378008EA67F4284A57932B1c000a5",
      "symbol": "TGBP",
      "name": "TrueGBP",
      "decimals": 18,
      "logoURI": "ipfs://QmS4iZiNcUK7SYdjenQwQdXcg8Tv5iXWQTqumCcKdBYSJB"
    },
    {
      "chainId": 1,
      "address": "0x62359Ed7505Efc61FF1D56fEF82158CcaffA23D7",
      "symbol": "CORE",
      "name": "cVault.finance",
      "decimals": 18,
      "logoURI": "ipfs://QmTHv4rUgNF3hBQepAVj3mLoJfYuYxmh1qR9YQgnVtgLUf"
    },
    {
      "chainId": 1,
      "address": "0xd559f20296FF4895da39b5bd9ADd54b442596a61",
      "symbol": "FTX",
      "name": "FintruX Network",
      "decimals": 18,
      "logoURI": "ipfs://QmVsbB1WX6sCCety1YQHFLyqqPUjZJ5tYcYWGD4Szn9HuS"
    },
    {
      "chainId": 100,
      "address": "0xfa57AA7beED63D03Aaf85fFd1753f5f6242588fb",
      "symbol": "MPS",
      "name": "Mt Pelerin Shares",
      "decimals": 0,
      "logoURI": "ipfs://QmW8CL9WN1JRgRfSVitXyBTajUvnenGoaxEVtZmRYmCBSt"
    },
    {
      "chainId": 100,
      "address": "0x7eF541E2a22058048904fE5744f9c7E4C57AF717",
      "symbol": "BAL",
      "name": "Balancer",
      "decimals": 18,
      "logoURI": "ipfs://QmbzDmJ2yboeFf45poTkzpqZkDbnsdL24x2BJQTs64yv5Z"
    },
    {
      "chainId": 1,
      "address": "0x156B36ec68FdBF84a925230BA96cb1Ca4c4bdE45",
      "symbol": "MNT",
      "name": "Wrapped MNT",
      "decimals": 18,
      "logoURI": "ipfs://QmTNFJTGoZs7R18gWCZY9zMrcGAJ78c8Yr9qQY6WAbocXk"
    },
    {
      "chainId": 1,
      "address": "0x798D1bE841a82a273720CE31c822C61a67a601C3",
      "symbol": "DIGG",
      "name": "DIGG",
      "decimals": 9,
      "logoURI": "ipfs://QmRP97y1TntiTdBUZVXtr2BYUfdVsWxWkN2kpzff9NZwvq"
    },
    {
      "chainId": 137,
      "address": "0x714DB550b574b3E927af3D93E26127D15721D4C2",
      "symbol": "GMT",
      "name": "STEPN",
      "decimals": 8,
      "logoURI": "ipfs://QmaXgp7LnvKbQ64Bb3P1e92Cju9KNbxzwzdLaLqb7nrUUW"
    },
    {
      "chainId": 1,
      "address": "0xF629cBd94d3791C9250152BD8dfBDF380E2a3B9c",
      "symbol": "ENJ",
      "name": "Enjin Coin",
      "decimals": 18,
      "logoURI": "ipfs://QmRZrrgVwxuSyC8YpF3KHwAGzPEAQYbCsZ5YUBC8gCpHvT"
    },
    {
      "chainId": 1,
      "address": "0xc3dD23A0a854b4f9aE80670f528094E9Eb607CCb",
      "symbol": "TRND",
      "name": "Trendering",
      "decimals": 18,
      "logoURI": "ipfs://Qmf4CuwSyRWLEK4q3ftpZN5N1pEeUKYSTLRcRdo3rN81ZL"
    },
    {
      "chainId": 1,
      "address": "0xA91ac63D040dEB1b7A5E4d4134aD23eb0ba07e14",
      "symbol": "BEL",
      "name": "Bella Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmZQK5hofUHyVgwwxNYjcJRUmqH8HDkUdTKA3z9Mf5esw4"
    },
    {
      "chainId": 1,
      "address": "0x6345728B1ccE16E6f8C509950b5c84FFF88530d9",
      "symbol": "iCOMP",
      "name": "Synthetic Inverse Compound",
      "decimals": 18,
      "logoURI": "ipfs://QmdNRQvYCijqiE7T8TEELG4K1T1VVFXGt58kzcmF5V43Jd"
    },
    {
      "chainId": 1,
      "address": "0x3A9FfF453d50D4Ac52A6890647b823379ba36B9E",
      "symbol": "SHUF",
      "name": "Shuffle Monster",
      "decimals": 18,
      "logoURI": "ipfs://QmbthYP46q6dHF7iATqBsp4wgjqmff2X4u8xSQVDWifmzL"
    },
    {
      "chainId": 1,
      "address": "0xb131f4A55907B10d1F0A50d8ab8FA09EC342cd74",
      "symbol": "MEME",
      "name": "Memecoin",
      "decimals": 18,
      "logoURI": "ipfs://QmTZR4yGfMfESAoEvf8P4vJmyoSZ4gEfAuRWGciddmfzCa"
    },
    {
      "chainId": 1,
      "address": "0xCB56b52316041A62B6b5D0583DcE4A8AE7a3C629",
      "symbol": "CIG",
      "name": "Cigarettes",
      "decimals": 18,
      "logoURI": "ipfs://Qme4tPMxap81it6fTZ8WbJV3dJ24VUgLzL4UZpVNLxDmCs"
    },
    {
      "chainId": 137,
      "address": "0x0B220b82F3eA3B7F6d9A1D8ab58930C064A2b5Bf",
      "symbol": "GLM",
      "name": "Golem",
      "decimals": 18,
      "logoURI": "ipfs://QmTXdjxTZjiPgtBDArBu4qRWRLPyG7UqF9wyXyPM3qYu9Q"
    },
    {
      "chainId": 1,
      "address": "0x56A86d648c435DC707c8405B78e2Ae8eB4E60Ba4",
      "symbol": "STACK",
      "name": "StackOS",
      "decimals": 18,
      "logoURI": "ipfs://Qmbw5eXFt5Erm8eQBQPMkmRuWJUuqRu49nEsPmTgZR6Y13"
    },
    {
      "chainId": 1,
      "address": "0x4a220E6096B25EADb88358cb44068A3248254675",
      "symbol": "QNT",
      "name": "Quant",
      "decimals": 18,
      "logoURI": "ipfs://QmXBB2ZMiQ9r4sC2oDrQSVsXmeyABFemqLYMguYQzQqLKU"
    },
    {
      "chainId": 56,
      "address": "0xF21768cCBC73Ea5B6fd3C687208a7c2def2d966e",
      "symbol": "REEF",
      "name": "Reef",
      "decimals": 18,
      "logoURI": "ipfs://QmSGTkTMTbFUnUoDmisKxyD96yKBeLRHXwHz64zohA5d9W"
    },
    {
      "chainId": 1,
      "address": "0x4208D8d500B1643DcA98dD27bA6C0060BcA311c5",
      "symbol": "REBASE",
      "name": "REBASE",
      "decimals": 9,
      "logoURI": "ipfs://QmfZodh3xugZii2TTSMdraRB6qKh99abtn5bzZWwkRmLQv"
    },
    {
      "chainId": 1,
      "address": "0x7025baB2EC90410de37F488d1298204cd4D6b29d",
      "symbol": "XRA",
      "name": "Xriba",
      "decimals": 18,
      "logoURI": "ipfs://QmXBW1WwYrrNEmWoWKRM6bxowEd7tLhF6DQsRsppiC7X9q"
    },
    {
      "chainId": 1,
      "address": "0x4B5f49487ea7B3609b1aD05459BE420548789f1f",
      "symbol": "LEVER",
      "name": "LeverFi",
      "decimals": 18,
      "logoURI": "ipfs://QmWhcCzSZyyqXmaz6aMDfN2wtWzACmvNDABMHszXTpK7uP"
    },
    {
      "chainId": 1,
      "address": "0x26607aC599266b21d13c7aCF7942c7701a8b699c",
      "symbol": "PIPT",
      "name": "Power Index Pool Token",
      "decimals": 18,
      "logoURI": "ipfs://QmSBU8exG3LMgnNY62dve1T2Sh6ydQuRxCiBSXps9WVWhU"
    },
    {
      "chainId": 1,
      "address": "0x9ff58f4fFB29fA2266Ab25e75e2A8b3503311656",
      "symbol": "aWBTC",
      "name": "Aave WBTC",
      "decimals": 8,
      "logoURI": "ipfs://QmXbn8baBoJGaH7TtwtL1si9fU7XVfHYfzHoyyz2gBxDY2"
    },
    {
      "chainId": 1,
      "address": "0xb62d18DeA74045E822352CE4B3EE77319DC5ff2F",
      "symbol": "EVC",
      "name": "EventChain",
      "decimals": 18,
      "logoURI": "ipfs://QmaxoR4vkeB7ZXaHcMiuQreipznvHpvh53S6juXncCWw3d"
    },
    {
      "chainId": 1,
      "address": "0x5B322514FF727253292637D9054301600c2C81e8",
      "symbol": "DAD",
      "name": "DAD",
      "decimals": 9,
      "logoURI": "ipfs://QmXGmi876uyWrXRAew6WM4Xx2LtWnXqjVwUqmoG2k67hsu"
    },
    {
      "chainId": 1,
      "address": "0x1f19f83fC9a25F3C861260143E36c17706257986",
      "symbol": "VEST",
      "name": "DAO Invest",
      "decimals": 18,
      "logoURI": "ipfs://QmeKVjY3YpD3SoCKmDJDVwn6vSUpym8GWLFdwbRsCgPQi7"
    },
    {
      "chainId": 1,
      "address": "0x0fF6ffcFDa92c53F615a4A75D982f399C989366b",
      "symbol": "LAYER",
      "name": "UniLayer",
      "decimals": 18,
      "logoURI": "ipfs://QmQMUdNydwtfCYt8BZWfsB2q9vuKdewbYBh9qB7dVG32G4"
    },
    {
      "chainId": 1,
      "address": "0xb0280743b44bF7db4B6bE482b2Ba7b75E5dA096C",
      "symbol": "TNS",
      "name": "Transcodium",
      "decimals": 18,
      "logoURI": "ipfs://Qma8ADzgRinshWoiLteVSVa97C2RgxSYGJ5EuzChA8pfsb"
    },
    {
      "chainId": 1,
      "address": "0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828",
      "symbol": "UMA",
      "name": "UMA",
      "decimals": 18,
      "logoURI": "ipfs://QmQfkyWmsAoWjz5j9KASDWtxQF5hWAyfkd6BKNo6GjsHpv"
    },
    {
      "chainId": 1,
      "address": "0x9469D013805bFfB7D3DEBe5E7839237e535ec483",
      "symbol": "RING",
      "name": "Darwinia Network",
      "decimals": 18,
      "logoURI": "ipfs://QmboC9D5SSYSzhPXX5ovGrMAxi7tm1uBJzLFcEs4vCckyd"
    },
    {
      "chainId": 1,
      "address": "0x1776e1F26f98b1A5dF9cD347953a26dd3Cb46671",
      "symbol": "NMR",
      "name": "Numeraire",
      "decimals": 18,
      "logoURI": "ipfs://QmPRgkASPadSb2GXksWt2CQTpmByFtPrdisuWELirQofVG"
    },
    {
      "chainId": 1,
      "address": "0x0Cf0Ee63788A0849fE5297F3407f701E122cC023",
      "symbol": "DATA",
      "name": "Streamr",
      "decimals": 18,
      "logoURI": "ipfs://QmXxq8zYZ5hQ5FadqHbRb6cQVGqcSJvn3Kg9PEDNcatreu"
    },
    {
      "chainId": 100,
      "address": "0x5fd896D248fbfa54d26855C267859eb1b4DAEe72",
      "symbol": "MKR",
      "name": "Maker",
      "decimals": 18,
      "logoURI": "ipfs://QmfAnPxYQrWrEdjzaSi9D1Cn5XRwpPBKYov6JSbvtfcy1j"
    },
    {
      "chainId": 1,
      "address": "0xfe9A29aB92522D14Fc65880d817214261D8479AE",
      "symbol": "SNOW",
      "name": "SnowSwap",
      "decimals": 18,
      "logoURI": "ipfs://QmXitqRfiqemKJa3iDiTgHjbCfFfRz7siKy4riqVCfrUSE"
    },
    {
      "chainId": 1,
      "address": "0x054B7ed3F45714d3091e82aAd64A1588dC4096Ed",
      "symbol": "crHBTC",
      "name": "Cream Huobi BTC",
      "decimals": 8,
      "logoURI": "ipfs://QmZUJPXPEsGYH4dAFgTFWyRaEjZHCc3obYgAygPNrzZnrb"
    },
    {
      "chainId": 1,
      "address": "0x321C2fE4446C7c963dc41Dd58879AF648838f98D",
      "symbol": "CTX",
      "name": "Cryptex Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmUiXwnqasriSR9zBuGi8X1e2KE6c9V1HHnDEbKRenJEiK"
    },
    {
      "chainId": 100,
      "address": "0x524B969793a64a602342d89BC2789D43a016B13A",
      "symbol": "DONUT",
      "name": "Donut",
      "decimals": 18,
      "logoURI": "ipfs://QmcBL7KqNYdeUuojuhq1Pgb9F9cpi3s6Vjyd8nAE6d8Wa1"
    },
    {
      "chainId": 1,
      "address": "0xF0939011a9bb95c3B791f0cb546377Ed2693a574",
      "symbol": "ZERO",
      "name": "Zero Exchange",
      "decimals": 18,
      "logoURI": "ipfs://QmUuVk2vibthq3bZxtanW6Jzk9XfoiNkirutpV9iyWKK3h"
    },
    {
      "chainId": 1,
      "address": "0x0A913beaD80F321E7Ac35285Ee10d9d922659cB7",
      "symbol": "DOS",
      "name": "DOS Network",
      "decimals": 18,
      "logoURI": "ipfs://QmWedgYjEoujYKT95jSkJCNuUVEP6VDr82gRsThBouCw38"
    },
    {
      "chainId": 1,
      "address": "0xB81D70802a816B5DacBA06D708B5acF19DcD436D",
      "symbol": "DEXG",
      "name": "Dextoken",
      "decimals": 18,
      "logoURI": "ipfs://QmQJNrLBmy7pSHok5ySjAMLnS1qs5GopiZDULC3XiJty4A"
    },
    {
      "chainId": 1,
      "address": "0x9992eC3cF6A55b00978cdDF2b27BC6882d88D1eC",
      "symbol": "POLY",
      "name": "Polymath",
      "decimals": 18,
      "logoURI": "ipfs://Qmcdw3smknaNvqgpTduiGDA1gBA8S9CHmxDK7d3pQnzUA8"
    },
    {
      "chainId": 1,
      "address": "0xb683D83a532e2Cb7DFa5275eED3698436371cc9f",
      "symbol": "BTU",
      "name": "BTU Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmT4ydZAthdsCZaFZ4opS4GBMouHeEJLppCrLEFq4Ssmhf"
    },
    {
      "chainId": 1,
      "address": "0xeF8bA8cBa86f81B3108f60186FCe9c81B5096D5c",
      "symbol": "YFIIG",
      "name": "YFII Gold",
      "decimals": 18,
      "logoURI": "ipfs://QmYYLcfz2pJBrU8qzKV9zRYBpD9XxCyPHCVtiYb2zZFkwa"
    },
    {
      "chainId": 1,
      "address": "0x2C4e8f2D746113d0696cE89B35F0d8bF88E0AEcA",
      "symbol": "OST",
      "name": "OST",
      "decimals": 18,
      "logoURI": "ipfs://QmR61q5RC2XDMfqJiv83qy6Cb3b3CfKEw9cn46dTo48u69"
    },
    {
      "chainId": 1,
      "address": "0x558EC3152e2eb2174905cd19AeA4e34A23DE9aD6",
      "symbol": "BRD",
      "name": "Bread",
      "decimals": 18,
      "logoURI": "ipfs://QmP6h2J3XL4nLyJST7W92q7YF7npewT1PC1M1m43dYmNuB"
    },
    {
      "chainId": 1,
      "address": "0xAAf37055188Feee4869dE63464937e683d61b2a1",
      "symbol": "UCN",
      "name": "UChain",
      "decimals": 18,
      "logoURI": "ipfs://QmciaviyMitHtdQPsTZW2cMQ6J8qmkNo312MfjPjuvPy6J"
    },
    {
      "chainId": 56,
      "address": "0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47",
      "symbol": "ADA",
      "name": "Cardano",
      "decimals": 18,
      "logoURI": "ipfs://QmdVJVXbbocbjmnkV38XeFiPp4xjwZvQnvxGSyYzUgnNCD"
    },
    {
      "chainId": 1,
      "address": "0x8dAE6Cb04688C62d939ed9B68d32Bc62e49970b1",
      "symbol": "aCRV",
      "name": "Aave CRV",
      "decimals": 18,
      "logoURI": "ipfs://QmfNsWuRqaNbkWYdsnGvTLzvQLgYGTFB9Gxm7WqwBhmfHA"
    },
    {
      "chainId": 1,
      "address": "0xb1dC9124c395c1e97773ab855d66E879f053A289",
      "symbol": "YAX",
      "name": "yAxis",
      "decimals": 18,
      "logoURI": "ipfs://QmY497J73cPtTkUogAaEEgcFP19CkWpaFE8yNitbYj2TdC"
    },
    {
      "chainId": 56,
      "address": "0x031b41e504677879370e9DBcF937283A8691Fa7f",
      "symbol": "FET",
      "name": "Fetch.ai",
      "decimals": 18,
      "logoURI": "ipfs://Qmf2x78m2kyhE46x8g3Z7eZW8FyRhR8oAVUB9C9JGAwmfT"
    },
    {
      "chainId": 1,
      "address": "0x7c9D8Fb3bDe3D9Ea6e89170618C2dC3d16695D36",
      "symbol": "WRC",
      "name": "WhiteRockCasino",
      "decimals": 18,
      "logoURI": "ipfs://QmfQtmBt7RderkjPLKe1mUfUfGQgPd8S3S2ruozeieq1DR"
    },
    {
      "chainId": 1,
      "address": "0x30680AC0a8A993088223925265fD7a76bEb87E7F",
      "symbol": "ARAW",
      "name": "ARAW",
      "decimals": 18,
      "logoURI": "ipfs://QmNeQNjnuvpiMTQh45YFE5uZxdimMbhEBFbg9xRg7Mk9ZC"
    },
    {
      "chainId": 1,
      "address": "0xc5102fE9359FD9a28f877a67E36B0F050d81a3CC",
      "symbol": "HOP",
      "name": "Hop",
      "decimals": 18,
      "logoURI": "ipfs://QmcFNTzsHbeUeqiCmYdnZUsiWbNFDDx1qtF7n4MGn9YyJ1"
    },
    {
      "chainId": 1,
      "address": "0xc813EA5e3b48BEbeedb796ab42A30C5599b01740",
      "symbol": "NIOX",
      "name": "Autonio",
      "decimals": 4,
      "logoURI": "ipfs://QmVtWDkFBX7zFv2a9Aqrmzn7V4Rpq2gbLN7fQz4Sj8WEsb"
    },
    {
      "chainId": 1,
      "address": "0xA967Dd943B336680540011536E7D8c3d33333515",
      "symbol": "EURL",
      "name": "Lugh",
      "decimals": 6,
      "logoURI": "ipfs://QmYt8MvZYroocRVq1RgazfoS17gDY6WBBTJ1kHsi44HHSH"
    },
    {
      "chainId": 56,
      "address": "0x8FFf93E810a2eDaaFc326eDEE51071DA9d398E83",
      "symbol": "BRISE",
      "name": "Bitgert",
      "decimals": 9,
      "logoURI": "ipfs://QmVUkGuZshiuC4hXbFsGWkR51ND9ANMXQTrwbM6eXrn2o9"
    },
    {
      "chainId": 1,
      "address": "0x0fEd38108bdb8e62ef7b5680E8E0726E2F29e0De",
      "symbol": "iREN",
      "name": "Synthetic Inverse Ren",
      "decimals": 18,
      "logoURI": "ipfs://QmfWQ3RjU7bqjN4vjuyrDgr6MwxwNqqzkEUyRe9Dpv9921"
    },
    {
      "chainId": 56,
      "address": "0x6E88056E8376Ae7709496Ba64d37fa2f8015ce3e",
      "symbol": "DEXE",
      "name": "DeXe",
      "decimals": 18,
      "logoURI": "ipfs://QmZrmTvwVZFmjhZRBdjh1reCPtNenyaQhNS2cD4U18rd2B"
    },
    {
      "chainId": 1,
      "address": "0x7a545Ed3863221A974F327199Ac22F7f12535F11",
      "symbol": "BGTT",
      "name": "Baguette Token",
      "decimals": 18,
      "logoURI": "ipfs://QmdkRKXpSDxNiwvxnvTXK6vB46SZd89Cy7XThfmG8UzoaB"
    },
    {
      "chainId": 56,
      "address": "0x40af3827F39D0EAcBF4A168f8D4ee67c121D11c9",
      "symbol": "TUSD",
      "name": "TrueUSD",
      "decimals": 18,
      "logoURI": "ipfs://QmdcuKBFVn8KEoN6QW7mmGgd38dtF4aL6qTGTqMiDeQfRz"
    },
    {
      "chainId": 1,
      "address": "0xef58b2d5A1b8D3cDE67b8aB054dC5C831E9Bc025",
      "symbol": "crSRM",
      "name": "Cream Serum",
      "decimals": 8,
      "logoURI": "ipfs://QmaaRXzFw2pLDzBdcTS25wPrSHbTvWFcfWHJkQ9RPgSMU7"
    },
    {
      "chainId": 1,
      "address": "0xdB11F6Fc8E16c02719e9c2Eb3c4C762feE8F5C5b",
      "symbol": "NIA",
      "name": "Nydronia",
      "decimals": 18,
      "logoURI": "ipfs://QmeeStVYgifVWzpSbtN963fVK5sUZLEB8UowHy4B3ZwQni"
    },
    {
      "chainId": 1,
      "address": "0x94d863173EE77439E4292284fF13fAD54b3BA182",
      "symbol": "ADEL",
      "name": "Akropolis Delphi",
      "decimals": 18,
      "logoURI": "ipfs://QmQo4PC5st5YmGHsEX3JQmVz28FHBCdrzAP61zySvfU3C4"
    },
    {
      "chainId": 1,
      "address": "0x45245bc59219eeaAF6cD3f382e078A461FF9De7B",
      "symbol": "BKX",
      "name": "BANKEX",
      "decimals": 18,
      "logoURI": "ipfs://Qma4az7edTUpr8oZJZJvq3RNKLbShovzb4DReubikGjSYM"
    },
    {
      "chainId": 1,
      "address": "0x3ebb4A4e91Ad83BE51F8d596533818b246F4bEe1",
      "symbol": "SATA",
      "name": "Signata",
      "decimals": 18,
      "logoURI": "ipfs://QmU19EwajSFjMRiPdkQ9tYqqjRXPbtTcMs3zadLTYACjwN"
    },
    {
      "chainId": 1,
      "address": "0x71BEFF5533dd4c0a47B739dA50C56A2dd28633fa",
      "symbol": "SHINU",
      "name": "Sheltie Inu",
      "decimals": 18,
      "logoURI": "ipfs://QmfLswrT9R85Buip89nNCDffmMhEPWSRJAbrqPcLYahhWV"
    },
    {
      "chainId": 1,
      "address": "0xd0929d411954c47438dc1d871dd6081F5C5e149c",
      "symbol": "RFR",
      "name": "Refereum",
      "decimals": 4,
      "logoURI": "ipfs://QmNj5Q3Y2wb9MEj3P3vnnGRuKsWrzcnYjcLfMtmXjbyF5s"
    },
    {
      "chainId": 1,
      "address": "0xfF1D3d9ddfF8fA05c064349f118bb3D95BA65c85",
      "symbol": "LVLUP",
      "name": "Level Up",
      "decimals": 18,
      "logoURI": "ipfs://QmRfYWDfZQqLSynPJ3ELt4Vzj5dK9fcQUmXqqo2MZ3Nqk7"
    },
    {
      "chainId": 1,
      "address": "0x15bCDFAd12498DE8a922E62442Ae4CC4bd33bd25",
      "symbol": "WALT",
      "name": "Walletreum",
      "decimals": 18,
      "logoURI": "ipfs://QmXdvbP45BoCfErNHbx5AF7pSGcYQ2e9KaTGNdediiWD5p"
    },
    {
      "chainId": 1,
      "address": "0x22dE9912cd3D74953B1cd1F250B825133cC2C1b3",
      "symbol": "DREP",
      "name": "DREP",
      "decimals": 18,
      "logoURI": "ipfs://QmQ4aqFVgUXBqigWWXEhiEk9Czdq9rLdEyj9sSTEEJb83k"
    },
    {
      "chainId": 1,
      "address": "0x22222C03318440305aC3e8a7820563d6A9FD777F",
      "symbol": "CLV",
      "name": "Clover",
      "decimals": 6,
      "logoURI": "ipfs://QmSQTbUVitujrnbnLdMvn3QfNdq1XN5Ci7jJgoNrH6spYJ"
    },
    {
      "chainId": 1,
      "address": "0xF48e200EAF9906362BB1442fca31e0835773b8B4",
      "symbol": "sAUD",
      "name": "Synthetic Australian Dollars",
      "decimals": 18,
      "logoURI": "ipfs://Qmf84wPWrp8WA7NP72VCvABhPjrvj1qGFPmUx8GKc4bQrF"
    },
    {
      "chainId": 1,
      "address": "0x72dD4b6bd852A3AA172Be4d6C5a6dbEc588cf131",
      "symbol": "NGC",
      "name": "NAGA",
      "decimals": 18,
      "logoURI": "ipfs://QmcfYyvqP453WtmcLnNu425KLPo3XZW25hySWjdfPrhCKF"
    },
    {
      "chainId": 1,
      "address": "0x536381a8628dBcC8C70aC9A30A7258442eAb4c92",
      "symbol": "PAN",
      "name": "Pantos",
      "decimals": 8,
      "logoURI": "ipfs://QmSn1hwenF39cZGx5on9rs3kBaSYHJiGF6GuXSpZa7Y7GF"
    },
    {
      "chainId": 1,
      "address": "0xff56Cc6b1E6dEd347aA0B7676C85AB0B3D08B0FA",
      "symbol": "ORBS",
      "name": "Orbs",
      "decimals": 18,
      "logoURI": "ipfs://QmQ5aWfNnNHknkBkwWh8wceWcbpH7shyZhLdZ25BLDmgYV"
    },
    {
      "chainId": 1,
      "address": "0xF6b1C627e95BFc3c1b4c9B825a032Ff0fBf3e07d",
      "symbol": "sJPY",
      "name": "Synthetic Japanese Yen",
      "decimals": 18,
      "logoURI": "ipfs://QmcjJVo1CtmkPQExVUL91u8rRn4iX2aj6RhPAbZ3NRmi7p"
    },
    {
      "chainId": 1,
      "address": "0xB9e7F8568e08d5659f5D29C4997173d84CdF2607",
      "symbol": "SWT",
      "name": "Swarm City",
      "decimals": 18,
      "logoURI": "ipfs://QmTRuupe2YWjcGpCEjKRMLQwiokib2X5UiJ2bzzzeKDjwa"
    },
    {
      "chainId": 1,
      "address": "0xb6c4267C4877BB0D6b1685Cfd85b0FBe82F105ec",
      "symbol": "REL",
      "name": "Relevant",
      "decimals": 18,
      "logoURI": "ipfs://QmP24eMbf8Mb5LD6GBwYWJ9TCSmNwDyAksW6BWTwLkpMk1"
    },
    {
      "chainId": 1,
      "address": "0xD06527D5e56A3495252A528C4987003b712860eE",
      "symbol": "crETH",
      "name": "Cream Ether",
      "decimals": 8,
      "logoURI": "ipfs://QmeJVCLRE8ZG1DKT3w3qGWDrEBGWaFGedHcoh8q66TaPK8"
    },
    {
      "chainId": 1,
      "address": "0x2dFAc6327Dce9F88E31fF46de13049eca5a7DfcB",
      "symbol": "SHIBERUS",
      "name": "Shiberus Inu",
      "decimals": 9,
      "logoURI": "ipfs://QmVpQ74df2joAvC5q9ZiZgYsN6ztNvM5z3jr438mT4aEBQ"
    },
    {
      "chainId": 1,
      "address": "0x6De037ef9aD2725EB40118Bb1702EBb27e4Aeb24",
      "symbol": "RNDR",
      "name": "Render",
      "decimals": 18,
      "logoURI": "ipfs://Qmd4tMCvhQSdoBkxJbqBxVviGQfnMiuZWF1WA3XXRnarfa"
    },
    {
      "chainId": 1,
      "address": "0xCB98f42221b2C251A4E74A1609722eE09f0cc08E",
      "symbol": "iDASH",
      "name": "Synthetic Inverse Dash",
      "decimals": 18,
      "logoURI": "ipfs://QmXATer7itBiwRzy3SVD7M9puJKwNUCyfgnDkmcR41ejcE"
    },
    {
      "chainId": 1,
      "address": "0xf3AFDC2525568Ffe743801C8C54bdeA1704c9adb",
      "symbol": "TURTLE",
      "name": "Turtle",
      "decimals": 18,
      "logoURI": "ipfs://Qmf4J5EitTc9iH47PNaJzc4Tq6QeDmtbSZQkm5aHcZd9qE"
    },
    {
      "chainId": 1,
      "address": "0xfd0205066521550D7d7AB19DA8F72bb004b4C341",
      "symbol": "LIT",
      "name": "Liquidity Incentive Token",
      "decimals": 18,
      "logoURI": "ipfs://QmedXC9TiwpFe8w91zk6TaWdTnZi2YsHu5W9xawRSXqxuE"
    },
    {
      "chainId": 1,
      "address": "0x0327112423F3A68efdF1fcF402F6c5CB9f7C33fd",
      "symbol": "BTC++",
      "name": "PieDAO BTC++",
      "decimals": 18,
      "logoURI": "ipfs://QmVh2f9SF2Z2Jd3yQ9CzCP2vMwzk547pRWtDJEuuzv6pPL"
    },
    {
      "chainId": 1,
      "address": "0x6DEA81C8171D0bA574754EF6F8b412F2Ed88c54D",
      "symbol": "LQTY",
      "name": "Liquity",
      "decimals": 18,
      "logoURI": "ipfs://Qmd7h4JMCtYvAk1mN25dYu2UuoS9ukQkBSuxErv92s1JKh"
    },
    {
      "chainId": 137,
      "address": "0xcB059C5573646047D6d88dDdb87B745C18161d3b",
      "symbol": "POLY",
      "name": "Polymath",
      "decimals": 18,
      "logoURI": "ipfs://Qmcdw3smknaNvqgpTduiGDA1gBA8S9CHmxDK7d3pQnzUA8"
    },
    {
      "chainId": 1,
      "address": "0x246908BfF0b1ba6ECaDCF57fb94F6AE2FcD43a77",
      "symbol": "DIVI",
      "name": "Divi",
      "decimals": 8,
      "logoURI": "ipfs://Qmb6evvEXe8pzd8MWetc34v3mpb5eqVNc6z66z8x5Y3uwD"
    },
    {
      "chainId": 1,
      "address": "0xa06bC25B5805d5F8d82847D191Cb4Af5A3e873E0",
      "symbol": "aLINK",
      "name": "Aave LINK",
      "decimals": 18,
      "logoURI": "ipfs://QmUShEVQkaihBEgrAHx5qbEewpWuVTCShPvKpCb9XCLtM6"
    },
    {
      "chainId": 100,
      "address": "0x9C58BAcC331c9aa871AFD802DB6379a98e80CEdb",
      "symbol": "GNO",
      "name": "Gnosis",
      "decimals": 18,
      "logoURI": "ipfs://QmZBqLt3N7zvakLJS7jYx3D9D1TpjdPfwYhZhhGtikoiRv"
    },
    {
      "chainId": 1,
      "address": "0xeABACD844A196D7Faf3CE596edeBF9900341B420",
      "symbol": "sCEX",
      "name": "Synthetic Centralised Exchange Index",
      "decimals": 18,
      "logoURI": "ipfs://QmT9RXFQPHFqngcE2tHNCYM2ydG4ZqaRnX4GGmjTzm4cvB"
    },
    {
      "chainId": 1,
      "address": "0x99a3a5333b4Eb80192149F9eDd42d1D57AC591ee",
      "symbol": "CELT",
      "name": "CELT",
      "decimals": 18,
      "logoURI": "ipfs://QmWAqix1xFE8WB34Mbw3FrbX6kzyeN34CrLigqEJXZoqwB"
    },
    {
      "chainId": 1,
      "address": "0xc00e94Cb662C3520282E6f5717214004A7f26888",
      "symbol": "COMP",
      "name": "Compound",
      "decimals": 18,
      "logoURI": "ipfs://QmZnPax5bdmAKY4zYgcQHwP1xQxVVqNQQwFqhPRmyY3F84"
    },
    {
      "chainId": 1,
      "address": "0x02D3A27Ac3f55d5D91Fb0f52759842696a864217",
      "symbol": "IONX",
      "name": "Charged Particles",
      "decimals": 18,
      "logoURI": "ipfs://QmbpH9YQ6rmT4GTNk2B4pbEFX5rJdAxKW1uuwgFSpWz9vk"
    },
    {
      "chainId": 324,
      "address": "0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4",
      "symbol": "USDC",
      "name": "USDC",
      "decimals": 6,
      "logoURI": "ipfs://QmS7rV584ATvEk5Skugr78GyAEFBuEo5eMp2rDNRCRNSmr"
    },
    {
      "chainId": 56,
      "address": "0xbF7c81FFF98BbE61B40Ed186e4AfD6DDd01337fe",
      "symbol": "EGLD",
      "name": "MultiversX",
      "decimals": 18,
      "logoURI": "ipfs://QmVSMNvzzMZHJUhQQeYkuzgmh989XiBEdLZqhRgXmTeeSU"
    },
    {
      "chainId": 1,
      "address": "0x3212b29E33587A00FB1C83346f5dBFA69A458923",
      "symbol": "imBTC",
      "name": "The Tokenized Bitcoin",
      "decimals": 8,
      "logoURI": "ipfs://QmTSDst4wxoar338wNt7mB62XjtvfuXvxus2mTCL4NSJE9"
    },
    {
      "chainId": 56,
      "address": "0xfb5B838b6cfEEdC2873aB27866079AC55363D37E",
      "symbol": "FLOKI",
      "name": "FLOKI",
      "decimals": 9,
      "logoURI": "ipfs://QmRiPbpWgyXiCPCvR3qKCMpDaEeeZyCGJ9LXrEYM8PH4ad"
    },
    {
      "chainId": 1,
      "address": "0xBA5F11b16B155792Cf3B2E6880E8706859A8AEB6",
      "symbol": "ARN",
      "name": "Aeron",
      "decimals": 8,
      "logoURI": "ipfs://QmQHw7zmjmofgk5WVr8SbK3JquopvfdLhVmXwPSmzMMtYw"
    },
    {
      "chainId": 1,
      "address": "0xdcDc1c1cC33AA817CbDBe8F5E2390BF7cc43dc4B",
      "symbol": "AVASTR",
      "name": "AVASTR Vault",
      "decimals": 18,
      "logoURI": "ipfs://QmZDbbwc2LferUBrnhj5hMUh3jSSKQmovaYoQc9qnUmdiR"
    },
    {
      "chainId": 1,
      "address": "0xF5cFBC74057C610c8EF151A439252680AC68c6DC",
      "symbol": "OCT",
      "name": "Octopus Network",
      "decimals": 18,
      "logoURI": "ipfs://QmfMH7XmPdSUNnbxneVz2uJQDBbAerAyPR42kozLDWT6HQ"
    },
    {
      "chainId": 1,
      "address": "0xfF69e48af1174Da7F15D0c771861c33d3f19eD8a",
      "symbol": "TESINU",
      "name": "TESLA INU",
      "decimals": 9,
      "logoURI": "ipfs://QmYCRVJ5tRqmgaULiaGJo2urv5B3ei5mFMUAL1vbUQQxsu"
    },
    {
      "chainId": 1,
      "address": "0xFE3E6a25e6b192A42a44ecDDCd13796471735ACf",
      "symbol": "REEF",
      "name": "Reef",
      "decimals": 18,
      "logoURI": "ipfs://QmQ1fDAcrwBbbzrLNaj5nysDDudf5PdaW7RS3DM6yJyXE3"
    },
    {
      "chainId": 1,
      "address": "0x3c3a81e81dc49A522A592e7622A7E711c06bf354",
      "symbol": "MNT",
      "name": "Mantle",
      "decimals": 18,
      "logoURI": "ipfs://QmT52GuneX7YJcb9HL9e5yoRjQwSVGPKpXQqE4gMJkvN4G"
    },
    {
      "chainId": 1,
      "address": "0xaD6A626aE2B43DCb1B39430Ce496d2FA0365BA9C",
      "symbol": "DEFI+S",
      "name": "PieDAO DEFI Small Cap",
      "decimals": 18,
      "logoURI": "ipfs://QmVmiuffy7AZ3x2hdByLsJWNVfm2f3Ed4aMyHUB6nASCjy"
    },
    {
      "chainId": 1,
      "address": "0x1c4481750daa5Ff521A2a7490d9981eD46465Dbd",
      "symbol": "BCPT",
      "name": "Blockmason Credit Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmQanYu4muPqpACuHJN4ffdWeqd1yZTjAJ3Gj2eSZXcqqu"
    },
    {
      "chainId": 56,
      "address": "0x2723522702093601e6360CAe665518C4f63e9dA6",
      "symbol": "LINK3",
      "name": "Link3",
      "decimals": 0,
      "logoURI": "ipfs://Qmcuey2f8F3R57rw6a9aVK9bSqBxDZoFMPMXBKPaKCBGCf"
    },
    {
      "chainId": 1,
      "address": "0x47daC6BD80f024575a6d367aF5Ba8e89202A09fc",
      "symbol": "OXO",
      "name": "OXO.Farm",
      "decimals": 18,
      "logoURI": "ipfs://QmZRf9Aww2CK6NYeFkUiLVZdL4wb6DC2AFdmoGdNQTJ7zM"
    },
    {
      "chainId": 56,
      "address": "0x88D7e9B65dC24Cf54f5eDEF929225FC3E1580C25",
      "symbol": "JMPT",
      "name": "JumpToken",
      "decimals": 18,
      "logoURI": "ipfs://QmZnPm3t5ECmafB4Ppiu5aH8Rd8XDirRBe9czovVoUiM5c"
    },
    {
      "chainId": 1,
      "address": "0xa685a61171bb30d4072B338c80Cb7b2c865c873E",
      "symbol": "aMANA",
      "name": "Aave MANA",
      "decimals": 18,
      "logoURI": "ipfs://QmaW48tqvvGypz5Y4PnU8eUaMstcshujRuUrpFVSngmUdh"
    },
    {
      "chainId": 1,
      "address": "0xBd56E9477Fc6997609Cf45F84795eFbDAC642Ff1",
      "symbol": "iREP",
      "name": "Fulcrum REP iToken",
      "decimals": 18,
      "logoURI": "ipfs://QmSdtc2i8aLKi4MZpVbXdsxmETArt4DVWQf9k1E5XLSbjN"
    },
    {
      "chainId": 1,
      "address": "0x4A42d2c580f83dcE404aCad18dab26Db11a1750E",
      "symbol": "RLX",
      "name": "Relex",
      "decimals": 18,
      "logoURI": "ipfs://QmcHJejRH8EkvFiP8N6oXGvXx4mwtfzBwnLXXVYsLUR9TJ"
    },
    {
      "chainId": 100,
      "address": "0xD057604A14982FE8D88c5fC25Aac3267eA142a08",
      "symbol": "HOPR",
      "name": "HOPR",
      "decimals": 18,
      "logoURI": "ipfs://QmatpCk3VBM241MPEx8D6fMKSyHXpwTi7ua2z5MuzFdR7P"
    },
    {
      "chainId": 56,
      "address": "0x316622977073BBC3dF32E7d2A9B3c77596a0a603",
      "symbol": "jBRL",
      "name": "Jarvis Synthetic Brazilian Real",
      "decimals": 18,
      "logoURI": "ipfs://QmRxdK4TQ9NE92nZX9PkWZRx8Fe4qHsRpCng35fU8uRKrm"
    },
    {
      "chainId": 1,
      "address": "0x26CE25148832C04f3d7F26F32478a9fe55197166",
      "symbol": "DEXT",
      "name": "DEXTools",
      "decimals": 18,
      "logoURI": "ipfs://QmXUKMaBYXngZgD56Aae4aBrTGGuJHb7EqsReFftZBhKkt"
    },
    {
      "chainId": 1,
      "address": "0xBE0C826f17680d8Da620855bE89DD6544C034cA1",
      "symbol": "BANKETH",
      "name": "BankEth",
      "decimals": 18,
      "logoURI": "ipfs://QmXMUBE7xSKthwAYkXbvTkSsZ5eefCHgsMzV19PnjTod3a"
    },
    {
      "chainId": 1,
      "address": "0x524Ebc93BeEf838F70b4Ae54b675d3e971D5884E",
      "symbol": "HERO",
      "name": "Challenge Coin",
      "decimals": 9,
      "logoURI": "ipfs://QmemZEWnmnUPaEhTjXWSiDEjS3eZxAE4xUuMR9s1yLkTcE"
    },
    {
      "chainId": 1,
      "address": "0xcce63fD31e9053c110c74CEbc37C8e358A6AA5bD",
      "symbol": "BTR",
      "name": "Bitriver",
      "decimals": 4,
      "logoURI": "ipfs://QmUs9byhhXLEB7kQGZpKqdLCewybNEp6jD6Jfn3pNpn544"
    },
    {
      "chainId": 137,
      "address": "0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a",
      "symbol": "SUSHI",
      "name": "Sushi",
      "decimals": 18,
      "logoURI": "ipfs://QmT48vXNDWa4KUUk6ZsYk8Z4QwNqjk9xaqpbpQvMFz1xFC"
    },
    {
      "chainId": 1,
      "address": "0xBcca60bB61934080951369a648Fb03DF4F96263C",
      "symbol": "aUSDC",
      "name": "Aave USDC",
      "decimals": 6,
      "logoURI": "ipfs://QmSJZVFFZJDbhaJFqEE3VBfSMCmT476y6qcevLVDgiCBUo"
    },
    {
      "chainId": 137,
      "address": "0xEe327F889d5947c1dc1934Bb208a1E792F953E96",
      "symbol": "frxETH",
      "name": "Frax Ether",
      "decimals": 18,
      "logoURI": "ipfs://QmQqQhtwApaT4X9FAaAzBRvyeE2iaSDH4ahD6exWXcszZU"
    },
    {
      "chainId": 1,
      "address": "0xf6c0aA7eBFE9992200C67E5388E4F42da49E1783",
      "symbol": "USD1",
      "name": "Psyche",
      "decimals": 2,
      "logoURI": "ipfs://QmXq4YyV7jLGDyvXUAp6webBAtGAGTasu4Gx41Li1geGq4"
    },
    {
      "chainId": 1,
      "address": "0x4B4Eb5C44D50Bfd44124688c6754633f7e258b01",
      "symbol": "SGB",
      "name": "SubGame",
      "decimals": 8,
      "logoURI": "ipfs://QmQwh4xGrWTh7Q1UYxNArPs4fzQ5H5i5bRAUp4n9TBGZbZ"
    },
    {
      "chainId": 137,
      "address": "0x8343091F2499FD4b6174A46D067A920a3b851FF9",
      "symbol": "jJPY",
      "name": "Jarvis Synthetic Japanese Yen",
      "decimals": 18,
      "logoURI": "ipfs://QmechN91MXJW1tX3pks96uSNAvRbP3npPJhiyadChV8wsX"
    },
    {
      "chainId": 56,
      "address": "0x3aD9594151886Ce8538C1ff615EFa2385a8C3A88",
      "symbol": "SAFEMARS",
      "name": "SafeMars",
      "decimals": 9,
      "logoURI": "ipfs://QmSJPNnETWhdSfF1JvTsQwZoWzT3W1ZQvrUyzWrVgS4NGA"
    },
    {
      "chainId": 1,
      "address": "0x4E0fCa55a6C3A94720ded91153A27F60E26B9AA8",
      "symbol": "BOOST",
      "name": "Boost",
      "decimals": 18,
      "logoURI": "ipfs://QmYhLZYf9TdCRJVCB9bzhSaLfpGZfVy5NRYctBAetBcZ23"
    },
    {
      "chainId": 1,
      "address": "0x30365Ed4Ca8173013ad948b9842f34ac71d01f7C",
      "symbol": "DHS",
      "name": "Dirham Crypto",
      "decimals": 18,
      "logoURI": "ipfs://QmS2LRag2hd12KwxZQ2eaJ7pUfXYRFsZRwztTkcWDPJ2w1"
    },
    {
      "chainId": 42161,
      "address": "0x912CE59144191C1204E64559FE8253a0e49E6548",
      "symbol": "ARB",
      "name": "Arbitrum",
      "decimals": 18,
      "logoURI": "ipfs://QmZTMxDWvgVfYhuvVaE1opHmgknz26AcauHU3k2wGVDYkv"
    },
    {
      "chainId": 1,
      "address": "0xC14103C2141E842e228FBaC594579e798616ce7A",
      "symbol": "sLTC",
      "name": "Synthetic Litecoin",
      "decimals": 18,
      "logoURI": "ipfs://QmScVEbRzwJy95EyH84y4q2GunZbm97yKqwsAzcwSCcZb9"
    },
    {
      "chainId": 1,
      "address": "0xeEeEEb57642040bE42185f49C52F7E9B38f8eeeE",
      "symbol": "ELK",
      "name": "Elk Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmYSmFMg8incix4Hzs85MPZzQJnb2W19zLTL3nXNEzY42m"
    },
    {
      "chainId": 1,
      "address": "0x9b53E429B0baDd98ef7F01F03702986c516a5715",
      "symbol": "HY",
      "name": "hybrix",
      "decimals": 18,
      "logoURI": "ipfs://QmXQRrS4kPPyQCK8vFhj9s4eShpbdkX8Jv2Lc68QP9YqTT"
    },
    {
      "chainId": 1,
      "address": "0xADE00C28244d5CE17D72E40330B1c318cD12B7c3",
      "symbol": "ADX",
      "name": "AdEx",
      "decimals": 18,
      "logoURI": "ipfs://QmWZ1tZ6itV3HTGMFoAMbPJk1D3rqcW1XP8xBxWm4DdAJf"
    },
    {
      "chainId": 1,
      "address": "0x030bA81f1c18d280636F32af80b9AAd02Cf0854e",
      "symbol": "aWETH",
      "name": "Aave WETH",
      "decimals": 18,
      "logoURI": "ipfs://QmfKQx4eRXG6JdtdTBr9qTroHLAhrEWbCphocpeMwKh1Dz"
    },
    {
      "chainId": 1,
      "address": "0x79da1431150C9b82D2E5dfc1C68B33216846851e",
      "symbol": "iLTC",
      "name": "Synthetic Inverse Litecoin",
      "decimals": 18,
      "logoURI": "ipfs://Qmc62QgS8ugkbLtBwDoFdH84g3yXLKrJPLYVFbi1WjCTsy"
    },
    {
      "chainId": 1,
      "address": "0xd7631787B4dCc87b1254cfd1e5cE48e96823dEe8",
      "symbol": "SCL",
      "name": "Sociall",
      "decimals": 8,
      "logoURI": "ipfs://QmZdJfXBxHgHExYsMDKr5CzcTB5SpoefeKRrC6xeCqF4qt"
    },
    {
      "chainId": 1,
      "address": "0xaA7a9CA87d3694B5755f213B5D04094b8d0F0A6F",
      "symbol": "TRAC",
      "name": "OriginTrail",
      "decimals": 18,
      "logoURI": "ipfs://QmbiR2dTfi3UeHGtUuLH37gyc6AVqaFsYq9RbZXywBzvGV"
    },
    {
      "chainId": 137,
      "address": "0x23D29D30e35C5e8D321e1dc9A8a61BFD846D4C5C",
      "symbol": "HEX",
      "name": "HEX",
      "decimals": 8,
      "logoURI": "ipfs://QmTWVWF3xe5UHtZpdeMVbvTg6Brk184ngqzErei8CcMF3x"
    },
    {
      "chainId": 1,
      "address": "0xD533a949740bb3306d119CC777fa900bA034cd52",
      "symbol": "CRV",
      "name": "Curve DAO Token",
      "decimals": 18,
      "logoURI": "ipfs://QmVaPBFT3DHqGXXEpBuj8CKcb56vyKzgNBUXoTkyMToXsw"
    },
    {
      "chainId": 137,
      "address": "0x4E8dc2149EaC3f3dEf36b1c281EA466338249371",
      "symbol": "INJ",
      "name": "Injective",
      "decimals": 18,
      "logoURI": "ipfs://QmWJAE68L5VZgJnn3QPj9UdckFPJjZX6inTVdHs6CQB1hX"
    },
    {
      "chainId": 1,
      "address": "0xcA2796F9F61dc7b238Aab043971e49c6164DF375",
      "symbol": "YEED",
      "name": "YGGDRASH",
      "decimals": 18,
      "logoURI": "ipfs://QmSTQWvMT3xYs3L9tZPgowWNsfWveVNgvVfvZtV8m5cjcg"
    },
    {
      "chainId": 137,
      "address": "0xE06Bd4F5aAc8D0aA337D13eC88dB6defC6eAEefE",
      "symbol": "IXT",
      "name": "Planet IX",
      "decimals": 18,
      "logoURI": "ipfs://QmdhrPzZ6Qis17qHVwGN3zk7GYa2dVUmAvVdENUYpHzUrJ"
    },
    {
      "chainId": 1,
      "address": "0xe0955F26515d22E347B17669993FCeFcc73c3a0a",
      "symbol": "STACK",
      "name": "Stacker Ventures",
      "decimals": 18,
      "logoURI": "ipfs://Qmbr8EdZru9NaP4w6CS2HbCPFv3o1foo9oQdUvgGETZMZw"
    },
    {
      "chainId": 1,
      "address": "0x1c48f86ae57291F7686349F12601910BD8D470bb",
      "symbol": "USDK",
      "name": "USDK",
      "decimals": 18,
      "logoURI": "ipfs://QmQz8NuhLJsh3xkYo5zYVn1EYDKZJTBpzwYFsoLgRGwvim"
    },
    {
      "chainId": 1,
      "address": "0xC631bE100F6Cf9A7012C23De5a6ccb990EAFC133",
      "symbol": "BTFA",
      "name": "Banana Task Force Ape",
      "decimals": 9,
      "logoURI": "ipfs://QmQVZ5uTPMcFf5Nmi2GAJufehXeCoQfbadY6zNSd7qYySc"
    },
    {
      "chainId": 56,
      "address": "0x56b6fB708fC5732DEC1Afc8D8556423A2EDcCbD6",
      "symbol": "EOS",
      "name": "EOS",
      "decimals": 18,
      "logoURI": "ipfs://QmT2F2AT537N5nvCTkwWwvy5DDY5xPP5nkdpiTtJbj5KTc"
    },
    {
      "chainId": 1,
      "address": "0xEB9951021698B42e4399f9cBb6267Aa35F82D59D",
      "symbol": "LIF",
      "name": "Líf",
      "decimals": 18,
      "logoURI": "ipfs://QmaP4vZYZ5kej8uSyBMAyzMXcYgJ7snVhFA2NgGQp3Nkqz"
    },
    {
      "chainId": 1,
      "address": "0xaf9f549774ecEDbD0966C52f250aCc548D3F36E5",
      "symbol": "RFuel",
      "name": "Rio DeFi",
      "decimals": 18,
      "logoURI": "ipfs://QmfSjt6fcu5Dj3K7zDbDrdioYUWC89X61pauuyabfW4r2j"
    },
    {
      "chainId": 1,
      "address": "0x103c3A209da59d3E7C4A89307e66521e081CFDF0",
      "symbol": "GVT",
      "name": "Genesis Vision",
      "decimals": 18,
      "logoURI": "ipfs://QmQhTtVGR9qiPCr3tSMDJVhxZiHc5hU1YoGXiaC11mLAPL"
    },
    {
      "chainId": 100,
      "address": "0x4ECaBa5870353805a9F068101A40E0f32ed605C6",
      "symbol": "USDT",
      "name": "Tether ",
      "decimals": 6,
      "logoURI": "ipfs://Qmd9YVdtaXDZuMmeChdpK4LfizyLkBbVijpLyXGSNwFGEz"
    },
    {
      "chainId": 1,
      "address": "0xF433089366899D83a9f26A773D59ec7eCF30355e",
      "symbol": "MTL",
      "name": "Metal",
      "decimals": 8,
      "logoURI": "ipfs://QmPKro6jBGT8VpmsjSigZBjE6Hu1Z1X4zXRpAWMfUYzcw2"
    },
    {
      "chainId": 137,
      "address": "0xBbba073C31bF03b8ACf7c28EF0738DeCF3695683",
      "symbol": "SAND",
      "name": "The Sandbox",
      "decimals": 18,
      "logoURI": "ipfs://QmUNcno8wSiqwGunX6TkLYdQKs9PybBJ7t1kTJBkg9qstL"
    },
    {
      "chainId": 1,
      "address": "0x1602af2C782cC03F9241992E243290Fccf73Bb13",
      "symbol": "QBIT",
      "name": "Qubitica",
      "decimals": 18,
      "logoURI": "ipfs://QmX15siiH4JGdakKfagABfjeQwashpuzrqNZp5Hd2Qsvq9"
    },
    {
      "chainId": 1,
      "address": "0x1BBf25e71EC48B84d773809B4bA55B6F4bE946Fb",
      "symbol": "VOW",
      "name": "Vow",
      "decimals": 18,
      "logoURI": "ipfs://QmREAWi8E9DecQCn64FwVbMrJPHBFo3zMGaKVRoDTpZFnq"
    },
    {
      "chainId": 1,
      "address": "0x4236f8aaF2B1f3A28420Eb15B8e0ddF63201a95E",
      "symbol": "BMDA",
      "name": "Bermuda",
      "decimals": 18,
      "logoURI": "ipfs://QmTioxEnmwASSYBUtRmnwyzwieSgWtVXSD77ThLvdvj4cM"
    },
    {
      "chainId": 1,
      "address": "0x584bC13c7D411c00c01A62e8019472dE68768430",
      "symbol": "HEGIC",
      "name": "Hegic",
      "decimals": 18,
      "logoURI": "ipfs://QmYoqzEahXEuy4w5YEDcNTBw89J95y8r5vn7RhqyEyCZpL"
    },
    {
      "chainId": 137,
      "address": "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
      "symbol": "WMATIC",
      "name": "Wrapped Matic",
      "decimals": 18,
      "logoURI": "ipfs://QmYrwmiGyxhWd7YREgYrgkehuWZEzzoXMUWUDcHcWX72We"
    },
    {
      "chainId": 1,
      "address": "0x297E4e5e59Ad72B1B0A2fd446929e76117be0E0a",
      "symbol": "VALOR",
      "name": "SMART VALOR",
      "decimals": 18,
      "logoURI": "ipfs://QmaQpHVBidXUcK4e7zP8TMzV4YW5sYnqeLuRXNQsM6NScx"
    },
    {
      "chainId": 1,
      "address": "0x83F873388Cd14b83A9f47FabDe3C9850b5C74548",
      "symbol": "ZUT",
      "name": "Zero Utility Token",
      "decimals": 18,
      "logoURI": "ipfs://QmRyLfXJcUg8gkYGubtw3HvPw3LJBHR3SHVRcCf57URePP"
    },
    {
      "chainId": 1,
      "address": "0xf55BbE0255f7f4E70f63837Ff72A577fbDDbE924",
      "symbol": "crBOND",
      "name": "Cream BarnBridge",
      "decimals": 8,
      "logoURI": "ipfs://QmcqLdcsig4CMr8ezoxNSrepQrQrtSpjnc3NqzZeqcW8Eb"
    },
    {
      "chainId": 1,
      "address": "0x1b980e05943dE3dB3a459C72325338d327B6F5a9",
      "symbol": "GEAR",
      "name": "Bitgear",
      "decimals": 18,
      "logoURI": "ipfs://QmV6AFtWDwGNj7JR96up1f6rB68jzbmXXZnj6avXzxs9fD"
    },
    {
      "chainId": 1,
      "address": "0x892B14321a4FCba80669aE30Bd0cd99a7ECF6aC0",
      "symbol": "crCREAM",
      "name": "Cream Cream",
      "decimals": 8,
      "logoURI": "ipfs://QmUcVZcc4ABq3L1HPzMB8cnMAKpXSk45quCRidDMPdiRVZ"
    },
    {
      "chainId": 100,
      "address": "0x21a42669643f45Bc0e086b8Fc2ed70c23D67509d",
      "symbol": "FOX",
      "name": "ShapeShift FOX",
      "decimals": 18,
      "logoURI": "ipfs://QmRFkU5X6HLcFdeHEwGEJ4NhxyjDWsSP2i81trLYsY4eRG"
    },
    {
      "chainId": 1,
      "address": "0x543Ff227F64Aa17eA132Bf9886cAb5DB55DCAddf",
      "symbol": "GEN",
      "name": "DAOstack",
      "decimals": 18,
      "logoURI": "ipfs://QmUTjTLhDb5W28k7sFFgtyQEfu9YH2euD2CqGQa6JSa4Jk"
    },
    {
      "chainId": 1,
      "address": "0xB26631c6dda06aD89B93C71400D25692de89c068",
      "symbol": "MINDS",
      "name": "Minds",
      "decimals": 18,
      "logoURI": "ipfs://QmS3K2PP6mokMLjFnFonuQyQ4AMoh6RnSoW7hmRN1v8wEQ"
    },
    {
      "chainId": 1,
      "address": "0xdfbc9050F5B01DF53512DCC39B4f2B2BBaCD517A",
      "symbol": "JOB",
      "name": "Jobchain",
      "decimals": 8,
      "logoURI": "ipfs://QmaYEq19XQjwWEqsCptpuN3anxSWMvhEHZ43SHbjzruWBd"
    },
    {
      "chainId": 1,
      "address": "0xBbE460dC4ac73f7C13A2A2feEcF9aCF6D5083F9b",
      "symbol": "WICK",
      "name": "Wick Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmeE7qFarszc5DonKk4yvwGMfmLc1YkCavLs1Qp2hBBsHP"
    },
    {
      "chainId": 1,
      "address": "0xD45740aB9ec920bEdBD9BAb2E863519E59731941",
      "symbol": "SNOOD",
      "name": "Schnoodle",
      "decimals": 18,
      "logoURI": "ipfs://QmeeKtqfrvfgySgqgMSsLcQvVf6tVpo2uMam4LzTx4v5Gs"
    },
    {
      "chainId": 1,
      "address": "0x97fe22E7341a0Cd8Db6F6C021A24Dc8f4DAD855F",
      "symbol": "sGBP",
      "name": "Synthetic Pound Sterling",
      "decimals": 18,
      "logoURI": "ipfs://QmPofncKSNxDVRUdzWitaRYT1vqUr81Rskq54jEQcyNVpK"
    },
    {
      "chainId": 1,
      "address": "0x469E66e06fEc34839E5eB1273ba85A119B8D702F",
      "symbol": "DEGOV",
      "name": "Degov",
      "decimals": 18,
      "logoURI": "ipfs://QmVccZ3TynVb43qcWN7xCDJ58UmBbrycwZXXFsGAYcS68R"
    },
    {
      "chainId": 1,
      "address": "0x23B608675a2B2fB1890d3ABBd85c5775c51691d5",
      "symbol": "SOCKS",
      "name": "Unisocks",
      "decimals": 18,
      "logoURI": "ipfs://QmRr6rbmZgGbqwdpxJfDXKJnSd697sWkKsv3CfTSjtGgmt"
    },
    {
      "chainId": 1,
      "address": "0xB64ef51C888972c908CFacf59B47C1AfBC0Ab8aC",
      "symbol": "STORJ",
      "name": "Storj",
      "decimals": 8,
      "logoURI": "ipfs://QmVEjJkoaXq1QYMfyRLhE7gj4iQ4bKPFCJ69qYcwuum8aA"
    },
    {
      "chainId": 1,
      "address": "0x5Fc6DE61258e63706543bb57619b99cC0E5a5A1F",
      "symbol": "WAN",
      "name": "Wanchain",
      "decimals": 18,
      "logoURI": "ipfs://QmdDHC5AunrTwBprHNFnizfGGQc4c5yLfMyoyZehydbXS6"
    },
    {
      "chainId": 1,
      "address": "0x0Ae055097C6d159879521C384F1D2123D1f195e6",
      "symbol": "STAKE",
      "name": "STAKE",
      "decimals": 18,
      "logoURI": "ipfs://QmaCDAUrdGqK64cWWrnNcuejkfS5dLNJUmERcuXV7AH3QB"
    },
    {
      "chainId": 100,
      "address": "0x4b1E2c2762667331Bc91648052F646d1b0d35984",
      "symbol": "agEUR",
      "name": "agEUR",
      "decimals": 18,
      "logoURI": "ipfs://QmZ26fGJwCYoZYzkBrxnRmkBT41VhF7V1M7VDoPGJCNVVJ"
    },
    {
      "chainId": 1,
      "address": "0x5d60d8d7eF6d37E16EBABc324de3bE57f135e0BC",
      "symbol": "MYB",
      "name": "MyBit",
      "decimals": 18,
      "logoURI": "ipfs://QmckbQYaMKTW28agWE93UoHBsTsRYgMyaXqQf34i8BQrRk"
    },
    {
      "chainId": 1,
      "address": "0x3C6C553A95910F9FC81c98784736bd628636D296",
      "symbol": "crESD",
      "name": "Cream Empty Set Dollar",
      "decimals": 8,
      "logoURI": "ipfs://QmbNixeWCfMRxQmouX9RuZEFgoBPYwRtjFTcwBmaZEhaDo"
    },
    {
      "chainId": 100,
      "address": "0x6C76971f98945AE98dD7d4DFcA8711ebea946eA6",
      "symbol": "wstETH",
      "name": "Wrapped Staked Ether",
      "decimals": 18,
      "logoURI": "ipfs://QmPLyg2t9yytzoezeSMUQkGuRifstCJdm9HGhSKL2zbkTE"
    },
    {
      "chainId": 137,
      "address": "0xA3fB72CBF2e07dC1b34AEA569Ed40755fd978BD8",
      "symbol": "OPX",
      "name": "OPEX",
      "decimals": 6,
      "logoURI": "ipfs://QmbrZ4tFVzuXZzfenUXPHNpkvUNuBnvW38TbUM3HY4U3L7"
    },
    {
      "chainId": 1,
      "address": "0x853d955aCEf822Db058eb8505911ED77F175b99e",
      "symbol": "FRAX",
      "name": "Frax",
      "decimals": 18,
      "logoURI": "ipfs://QmauyBhQ9TYWwHMLMLoLjCPyCftWbCui5LwzSLVokJ2QL2"
    },
    {
      "chainId": 1,
      "address": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
      "symbol": "DAI",
      "name": "Dai",
      "decimals": 18,
      "logoURI": "ipfs://QmTswuPmisP64jxzZvGz6AaK2gosJyPeTwqMkNPob6pdaa"
    },
    {
      "chainId": 1,
      "address": "0x9f48b2f14517770F2d238c787356F3b961a6616F",
      "symbol": "BSDB",
      "name": "Basis Dollar Bond",
      "decimals": 18,
      "logoURI": "ipfs://QmPovqeuXKL4DPLyE3uzZh4xF6g2xxPTUWrAKdeP6ex47A"
    },
    {
      "chainId": 56,
      "address": "0xc748673057861a797275CD8A068AbB95A902e8de",
      "symbol": "BABYDOGE",
      "name": "Baby Doge Coin",
      "decimals": 9,
      "logoURI": "ipfs://QmWJ5hff93N53MPdpjMLhNoeSMPusLdCfhYw2JaBkb7bBH"
    },
    {
      "chainId": 137,
      "address": "0xFAD65Eb62a97fF5Ed91B23aFD039956aaCa6e93b",
      "symbol": "HT",
      "name": "Huobi",
      "decimals": 18,
      "logoURI": "ipfs://QmScJttJGSYVKYyNFhDrVxM7AUDS3bAj9wfCbeMhBBzBsT"
    },
    {
      "chainId": 1,
      "address": "0xC11b1268C1A384e55C48c2391d8d480264A3A7F4",
      "symbol": "cWBTC",
      "name": "Compound Wrapped BTC",
      "decimals": 8,
      "logoURI": "ipfs://QmRjbcnWJoj1cS6qbwReAHaq58bb1Rwt3V8mWHLcY8gfhs"
    },
    {
      "chainId": 1,
      "address": "0x93ED3FBe21207Ec2E8f2d3c3de6e058Cb73Bc04d",
      "symbol": "PNK",
      "name": "Pinakion",
      "decimals": 18,
      "logoURI": "ipfs://QmbC6rKFGa6xTn7QEXDiDtoCi69fon8nvjtzMoXRLD4uvv"
    },
    {
      "chainId": 1,
      "address": "0xa1d65E8fB6e87b60FECCBc582F7f97804B725521",
      "symbol": "DXD",
      "name": "DXdao",
      "decimals": 18,
      "logoURI": "ipfs://QmbUccYTyR3cMzkVxX1srVAVPCRgCTmDBnGnsU2XKeP2ik"
    },
    {
      "chainId": 1,
      "address": "0x37Ee79E0B44866876de2fB7F416d0443DD5ae481",
      "symbol": "TAT",
      "name": "Tatcoin",
      "decimals": 18,
      "logoURI": "ipfs://QmWkozeF35yGeCKvgVZ1TG2P5woR5WXSCMAX4jMjLf2yz7"
    },
    {
      "chainId": 100,
      "address": "0x256eb8a51f382650B2A1e946b8811953640ee47D",
      "symbol": "DATA",
      "name": "Streamr",
      "decimals": 18,
      "logoURI": "ipfs://QmXxq8zYZ5hQ5FadqHbRb6cQVGqcSJvn3Kg9PEDNcatreu"
    },
    {
      "chainId": 1,
      "address": "0x35A18000230DA775CAc24873d00Ff85BccdeD550",
      "symbol": "cUNI",
      "name": "Compound Uniswap",
      "decimals": 8,
      "logoURI": "ipfs://QmNQyg95g5Hv564hne6MXDKYnPdQbse1FwxzifscT7AD5R"
    },
    {
      "chainId": 1,
      "address": "0x8f8221aFbB33998d8584A2B05749bA73c37a938a",
      "symbol": "REQ",
      "name": "Request",
      "decimals": 18,
      "logoURI": "ipfs://QmWExJk6p2LhYYvaixBYw51ZWSTrzPaHgE5EiAQVFY72Eg"
    },
    {
      "chainId": 1,
      "address": "0x7884F51dC1410387371ce61747CB6264E1dAeE0B",
      "symbol": "BDOT",
      "name": "Binance Wrapped DOT",
      "decimals": 10,
      "logoURI": "ipfs://QmXXfRrcuiVTrqcYdRCbLvpPUcqoadstB96BkAF86EKCNp"
    },
    {
      "chainId": 1,
      "address": "0x9AAb071B4129B083B01cB5A0Cb513Ce7ecA26fa5",
      "symbol": "HUNT",
      "name": "HUNT",
      "decimals": 18,
      "logoURI": "ipfs://QmTjfYboCz5gqhm1WEhPkvMTTy84Se9ncoifTogk4CZHUX"
    },
    {
      "chainId": 56,
      "address": "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
      "symbol": "WBNB",
      "name": "Wrapped BNB",
      "decimals": 18,
      "logoURI": "ipfs://QmPJvxkPRPnyN1tLAmeCTjPLG13RPTxpzaoE1qTaJ4FAGW"
    },
    {
      "chainId": 1,
      "address": "0x64aa3364F17a4D01c6f1751Fd97C2BD3D7e7f1D5",
      "symbol": "OHM",
      "name": "Olympus",
      "decimals": 9,
      "logoURI": "ipfs://QmS9CqU3gEoq1H8yMoNwzUSywaQNZexC2m1arkuRxtFMkQ"
    },
    {
      "chainId": 1,
      "address": "0x19D3364A399d251E894aC732651be8B0E4e85001",
      "symbol": "yvDAI",
      "name": "DAI yVault",
      "decimals": 18,
      "logoURI": "ipfs://QmZ1EjTzpYpcDGHeT8PgFZs33WV3BwEfTGWQkwGnhgi56P"
    },
    {
      "chainId": 1,
      "address": "0x368BF9F1A1CA767935E39F20439D9041707E2634",
      "symbol": "CFXT",
      "name": "Chainflix",
      "decimals": 18,
      "logoURI": "ipfs://QmXoXDAWEaFZkkGo3BzpDNrywnjfUmSSCWCre2f7Hi3kch"
    },
    {
      "chainId": 1,
      "address": "0x120a3879da835A5aF037bB2d1456beBd6B54d4bA",
      "symbol": "RVST",
      "name": "Revest Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmbkNv59B7Su6nEqEZBu1zHc415GfvR7qeZwcjsvR2HF5m"
    },
    {
      "chainId": 1,
      "address": "0x5732046A883704404F284Ce41FfADd5b007FD668",
      "symbol": "BLZ",
      "name": "Bluzelle",
      "decimals": 18,
      "logoURI": "ipfs://QmRAbZnEifiyUx7LpDfVraeo69vc2oJTSYJ4U4EhTKs32R"
    },
    {
      "chainId": 1,
      "address": "0xb6EE9668771a79be7967ee29a63D4184F8097143",
      "symbol": "CXO",
      "name": "CargoX",
      "decimals": 18,
      "logoURI": "ipfs://QmUhvPazqW2hkQkfNCyNF7oxRhkeQ2qKbX1ZFrGgmHnup9"
    },
    {
      "chainId": 1,
      "address": "0x2ba592F78dB6436527729929AAf6c908497cB200",
      "symbol": "CREAM",
      "name": "Cream",
      "decimals": 18,
      "logoURI": "ipfs://QmSMwsQc4vLC8cq8faWX6ysuks5XL4bFf7kcAGTLgu7eQf"
    },
    {
      "chainId": 1,
      "address": "0x29502fE4d233EF0b45C3647101Fa1252cE0634BD",
      "symbol": "FROGE",
      "name": "Froge Finance",
      "decimals": 9,
      "logoURI": "ipfs://QmZqgu6mXLMEUVWc64WXueKG2YB4GtJUvpmkBK3jtt7Hhu"
    },
    {
      "chainId": 1,
      "address": "0xf6E9b246319ea30e8C2fA2d1540AAEBF6f9E1B89",
      "symbol": "iBCH",
      "name": "Synthetic Inverse Bitcoin Cash",
      "decimals": 18,
      "logoURI": "ipfs://QmYHdiTSv9mnse66vHuCkymQyj7M7Pyyb5CgDwsAR9ZHfN"
    },
    {
      "chainId": 1,
      "address": "0x4e352cF164E64ADCBad318C3a1e222E9EBa4Ce42",
      "symbol": "MCB",
      "name": "MCDEX",
      "decimals": 18,
      "logoURI": "ipfs://QmVyW3GPeVEShDebghWPZQtYN8DKME8U7xinhBYCEVFbQf"
    },
    {
      "chainId": 1,
      "address": "0x9fcF4497ED9fBb8D8B46259e4f2bB4749953ab8B",
      "symbol": "DeFi",
      "name": "DeFiant Token",
      "decimals": 9,
      "logoURI": "ipfs://QmVmoBTt12JHJZULVt9QpVohoAAKZktCanThcrYqWxb2nK"
    },
    {
      "chainId": 1,
      "address": "0x17Aa18A4B64A55aBEd7FA543F2Ba4E91f2dcE482",
      "symbol": "INB",
      "name": "Insight Chain",
      "decimals": 18,
      "logoURI": "ipfs://QmeHwxooUDSioGfpR8hxaEtTPecYNcH7GkMxeH31b7rEEn"
    },
    {
      "chainId": 1,
      "address": "0x9d1C2A187cf908aEd8CFAe2353Ef72F06223d54D",
      "symbol": "sWBTC",
      "name": "Strike WBTC",
      "decimals": 8,
      "logoURI": "ipfs://QmdYL6iiUpSkGxbsbSL5cKZJDbtkc1eumgcgpYvSXMmwiC"
    },
    {
      "chainId": 1,
      "address": "0xBdea5bB640DBFC4593809DEeC5CdB8F99b704Cd2",
      "symbol": "DIREWOLF",
      "name": "Direwolf",
      "decimals": 2,
      "logoURI": "ipfs://QmQQneKbGnCoAyqx3R1PzMCwdz923mqcbwAfJuj7pQspcS"
    },
    {
      "chainId": 56,
      "address": "0x26433c8127d9b4e9B71Eaa15111DF99Ea2EeB2f8",
      "symbol": "MANA",
      "name": "Decentraland",
      "decimals": 18,
      "logoURI": "ipfs://QmY18MUVBQbY22cM9gRxub76EqqdHMiNydGkfoR1fBarEo"
    },
    {
      "chainId": 1,
      "address": "0x9B70740e708a083C6fF38Df52297020f5DfAa5EE",
      "symbol": "DAN",
      "name": "Daneel",
      "decimals": 10,
      "logoURI": "ipfs://QmZ3MjDBaAvNMUG9xsRgjCstqhyufZJskspHZuaZ5C4GDP"
    },
    {
      "chainId": 1,
      "address": "0xA361718326c15715591c299427c62086F69923D9",
      "symbol": "aBUSD",
      "name": "Aave BUSD",
      "decimals": 18,
      "logoURI": "ipfs://QmNQwpgbcQQaXYuLUpNMqBg9ajVswF9buhv6FVAxbX9mVc"
    },
    {
      "chainId": 1,
      "address": "0xFFC97d72E13E01096502Cb8Eb52dEe56f74DAD7B",
      "symbol": "aAAVE",
      "name": "Aave AAVE",
      "decimals": 18,
      "logoURI": "ipfs://Qmb3odzj42eDcDkQvR5TNpPk5osKR2fqCN1YU2Ek1gFn1b"
    },
    {
      "chainId": 1,
      "address": "0xE14d13d8B3b85aF791b2AADD661cDBd5E6097Db1",
      "symbol": "yvYFI",
      "name": "YFI yVault",
      "decimals": 18,
      "logoURI": "ipfs://QmY4AVY22dDaK7SGv4huDf1w5QaEVPTEbrttgYcuvyvDma"
    },
    {
      "chainId": 1,
      "address": "0x5dc60C4D5e75D22588FA17fFEB90A63E535efCE0",
      "symbol": "DKA",
      "name": "dKargo",
      "decimals": 18,
      "logoURI": "ipfs://QmaCf2Zse9BVAtAN4QV4LH3N4mL9rQ8aAxEmDS7x1ta2tA"
    },
    {
      "chainId": 1,
      "address": "0xE41d2489571d322189246DaFA5ebDe1F4699F498",
      "symbol": "ZRX",
      "name": "0x",
      "decimals": 18,
      "logoURI": "ipfs://QmR9MP9Ng17aSn7DxXTxMSaRhsAQJYPTmBHZzp2HjrDphi"
    },
    {
      "chainId": 1,
      "address": "0x4954Db6391F4feB5468b6B943D4935353596aEC9",
      "symbol": "USDQ",
      "name": "USDQ",
      "decimals": 18,
      "logoURI": "ipfs://Qmcj4LbGxoia2tpHiHTyz1td7jZtatgPFyhRt2u3cNRpPB"
    },
    {
      "chainId": 1,
      "address": "0x7090a6e22c838469c9E67851D6489ba9c933a43F",
      "symbol": "ZBUX",
      "name": "Zuck Bucks",
      "decimals": 0,
      "logoURI": "ipfs://Qmc6q1dsGdfTta2Xz2NhepfULLJUyFomwFwN8ACqUXKJTj"
    },
    {
      "chainId": 1,
      "address": "0xEEF9f339514298C6A857EfCfC1A762aF84438dEE",
      "symbol": "HEZ",
      "name": "Hermez Network",
      "decimals": 18,
      "logoURI": "ipfs://QmcvpV2MStZ33KPZ3SQ4Fk2q8qWdNV1XirXpRrCAMiaaTG"
    },
    {
      "chainId": 1,
      "address": "0xeFF039C3c1D668f408d09dD7B63008622a77532C",
      "symbol": "crWNXM",
      "name": "Cream Wrapped NXM",
      "decimals": 8,
      "logoURI": "ipfs://QmZ55P4HDWn838vzv8afwqE69GoCvZNMu4icM4VXLamFxS"
    },
    {
      "chainId": 56,
      "address": "0x62D0A8458eD7719FDAF978fe5929C6D342B0bFcE",
      "symbol": "BEAM",
      "name": "Beam",
      "decimals": 18,
      "logoURI": "ipfs://QmPfGrjzfmzCevK86kK5ZvD9E7S88wLw1t7Sq1X6yPAJUB"
    },
    {
      "chainId": 1,
      "address": "0x9AFb950948c2370975fb91a441F36FDC02737cD4",
      "symbol": "HFIL",
      "name": "Huobi FIL",
      "decimals": 18,
      "logoURI": "ipfs://QmVzuHUxcgpccANDwTneHc4kqv9XBmx1SLSZwcq1L8xXfX"
    },
    {
      "chainId": 1,
      "address": "0x35f6B052C598d933D69A4EEC4D04c73A191fE6c2",
      "symbol": "aSNX",
      "name": "Aave SNX",
      "decimals": 18,
      "logoURI": "ipfs://QmfHv6w8H3StBYCnRKJAVmwgeRFAdCHggBDxThASbrRq3p"
    },
    {
      "chainId": 1,
      "address": "0x9e96604445Ec19fFed9a5e8dd7B50a29C899A10C",
      "symbol": "COSS",
      "name": "COSS",
      "decimals": 18,
      "logoURI": "ipfs://QmYwhBdUwZHuEoE59163Tz5n1gPoMkVG8s6qEuXkd5293B"
    },
    {
      "chainId": 1,
      "address": "0x7D48FBe0A877bB1f511fcf9B57F12420C75841e9",
      "symbol": "DOOR",
      "name": "DOOR",
      "decimals": 18,
      "logoURI": "ipfs://QmQ7jd3rW3i2Zqq8znfwCF5RQuXJb3n7f6rzYbqCCJ1vcM"
    },
    {
      "chainId": 1,
      "address": "0xDe30da39c46104798bB5aA3fe8B9e0e1F348163F",
      "symbol": "GTC",
      "name": "Gitcoin",
      "decimals": 18,
      "logoURI": "ipfs://Qmaxb89DFcf5B2AmuJ3cnhHcCVKMseP2eB4219kw5Vkhid"
    },
    {
      "chainId": 100,
      "address": "0xdfc20AE04ED70bd9c7D720F449eEDAe19F659D65",
      "symbol": "BADGER",
      "name": "Badger DAO",
      "decimals": 18,
      "logoURI": "ipfs://QmfRYPsbRLjenLyGEsTVJHd5TXdxx5Z11KEefC6692i3gZ"
    },
    {
      "chainId": 1,
      "address": "0x463538705E7d22aA7f03Ebf8ab09B067e1001B54",
      "symbol": "iLINK",
      "name": "Fulcrum LINK iToken",
      "decimals": 18,
      "logoURI": "ipfs://QmWZ6WR6Q77BPSnqXeYCYzLfmjJWxXUCYQx2zi2fnLJEFj"
    },
    {
      "chainId": 1,
      "address": "0x9a794Dc1939F1d78fa48613b89B8f9d0A20dA00E",
      "symbol": "ABX",
      "name": "Arbidex",
      "decimals": 18,
      "logoURI": "ipfs://QmaZeuMHv5TJkgPtbMpPQXD2gW2bFmuWbdJnG8DswAHYgp"
    },
    {
      "chainId": 100,
      "address": "0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83",
      "symbol": "USDC",
      "name": "USD Coin",
      "decimals": 6,
      "logoURI": "ipfs://QmUQp1wZzr4UREn4AVLkKH5GbwpUCwf9w5VQQJeh1bmThJ"
    },
    {
      "chainId": 1,
      "address": "0xB8647e90C0645152Fccf4d9AbB6B59Eb4AA99052",
      "symbol": "KEYFI",
      "name": "KeyFi",
      "decimals": 18,
      "logoURI": "ipfs://QmRWvD3vV6pAaZ4qjQ1FQGJ4oEYKEyuJYQC7unDeB2N8H9"
    },
    {
      "chainId": 1,
      "address": "0x8Ab7404063Ec4DBcfd4598215992DC3F8EC853d7",
      "symbol": "AKRO",
      "name": "Akropolis",
      "decimals": 18,
      "logoURI": "ipfs://QmQcYTDb1pwMvF31sfrkNEfHqW4AKvjwNHYHcNCdbh1cgg"
    },
    {
      "chainId": 137,
      "address": "0xa9a6A3626993D487d2Dbda3173cf58cA1a9D9e9f",
      "symbol": "UD",
      "name": "Unstoppable Domains",
      "decimals": 0,
      "logoURI": "ipfs://QmZieLVqfExjdEx3HQHSNT1CVC3YnXGtkKGnQzYA1MQAtD"
    },
    {
      "chainId": 1,
      "address": "0xF970b8E36e23F7fC3FD752EeA86f8Be8D83375A6",
      "symbol": "RCN",
      "name": "Ripio Credit Network",
      "decimals": 18,
      "logoURI": "ipfs://Qmav4Ey6bJchvqWK6ZFuAg6yRTdMUK9AVwkGuXNmsMFeS4"
    },
    {
      "chainId": 1,
      "address": "0xc713e5E149D5D0715DcD1c156a020976e7E56B88",
      "symbol": "aMKR",
      "name": "Aave MKR",
      "decimals": 18,
      "logoURI": "ipfs://QmXVkKM6n9jagTbPse6jbMsiWpPJRbdZnm5WrWkmzcF8Uq"
    },
    {
      "chainId": 1,
      "address": "0x84294FC9710e1252d407d3D80A84bC39001bd4A8",
      "symbol": "NUTS",
      "name": "Squirrel Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmQy8PWiC8yN6xaWgYdEL2bwkcMEmhtjLC83KfY5MFufAN"
    },
    {
      "chainId": 1,
      "address": "0xE277aC35F9D327A670c1A3F3eeC80a83022431e4",
      "symbol": "PUX",
      "name": "PolypuX",
      "decimals": 8,
      "logoURI": "ipfs://QmV9kNbcnak4Ho3dZWh1XrzMHbeeNHmbCvQgqST27DKdoK"
    },
    {
      "chainId": 1,
      "address": "0x817bbDbC3e8A1204f3691d14bB44992841e3dB35",
      "symbol": "CUDOS",
      "name": "Cudos",
      "decimals": 18,
      "logoURI": "ipfs://QmTmECvBQGz6FRHv3zDj4kbLtPEVnPNtUt9ryTLDidYeyy"
    },
    {
      "chainId": 1,
      "address": "0xfE18be6b3Bd88A2D2A7f928d00292E7a9963CfC6",
      "symbol": "sBTC",
      "name": "Synthetic Bitcoin",
      "decimals": 18,
      "logoURI": "ipfs://QmYp8Gbr7f3RQaaB5vsRgRyoZtR5Dq648u3nvFyvKhnztQ"
    },
    {
      "chainId": 1,
      "address": "0x137dDB47Ee24EaA998a535Ab00378d6BFa84F893",
      "symbol": "RDNT",
      "name": "Radiant",
      "decimals": 18,
      "logoURI": "ipfs://QmPFwFqf6KCqR6fBxYffw1FtPGVG6AUACK1dKu79cFvpHt"
    },
    {
      "chainId": 1,
      "address": "0x05D3606d5c81EB9b7B18530995eC9B29da05FaBa",
      "symbol": "TOMOE",
      "name": "TomoChain ERC-20",
      "decimals": 18,
      "logoURI": "ipfs://Qmd8aunGkByP46L6hJgcPGYZPs3i15Qes4YtgvB64mnhHh"
    },
    {
      "chainId": 1,
      "address": "0x9BE89D2a4cd102D8Fecc6BF9dA793be995C22541",
      "symbol": "BBTC",
      "name": "Binance Wrapped BTC",
      "decimals": 8,
      "logoURI": "ipfs://QmVGRju6vMmwohv4aHG33AMB3qav5hUZ7k4igvGn1fr5WZ"
    },
    {
      "chainId": 1,
      "address": "0x888888435FDe8e7d4c54cAb67f206e4199454c60",
      "symbol": "DFX",
      "name": "DFX Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmYEukBdcnQaJig9Vg92rhFmP3buofwaA6b3UM6oN9ienC"
    },
    {
      "chainId": 1,
      "address": "0x5A7E3c07604EB515C16b36cd51906a65f021F609",
      "symbol": "sNFLX",
      "name": "Synthetic Netflix",
      "decimals": 18,
      "logoURI": "ipfs://QmYSngJGkEihhyVnSSkrDhZ9cAchCR2ooZQt2R679iRLUp"
    },
    {
      "chainId": 56,
      "address": "0x6B8b9AE0627a7622c593A1696859ca753c61A670",
      "symbol": "jZAR",
      "name": "Jarvis Synthetic South African Rand",
      "decimals": 18,
      "logoURI": "ipfs://QmVNPjNmBSk1oR9cVJUNMmvVzmxxj9eNXjPhMAboxynBaV"
    },
    {
      "chainId": 1,
      "address": "0xeEAA40B28A2d1b0B08f6f97bB1DD4B75316c6107",
      "symbol": "GOVI",
      "name": "Govi",
      "decimals": 18,
      "logoURI": "ipfs://QmSJL7yi682TPGt69VecM1HCgQLWUYCPLzzxuGRihjH52h"
    },
    {
      "chainId": 1,
      "address": "0x06AF07097C9Eeb7fD685c692751D5C66dB49c215",
      "symbol": "CHAI",
      "name": "Chai",
      "decimals": 18,
      "logoURI": "ipfs://QmeQsr7VfsYe46p9ibwxrj33pJhQWKM3PrEk4tedM14oJZ"
    },
    {
      "chainId": 56,
      "address": "0xf307910A4c7bbc79691fD374889b36d8531B08e3",
      "symbol": "ANKR",
      "name": "Ankr",
      "decimals": 18,
      "logoURI": "ipfs://QmbvErh2b3MSwt6TtWbLu25Hsz4tK3EghsLrfrb6igkbCy"
    },
    {
      "chainId": 56,
      "address": "0xfD5840Cd36d94D7229439859C0112a4185BC0255",
      "symbol": "vUSDT",
      "name": "Venus USDT",
      "decimals": 8,
      "logoURI": "ipfs://QmXEdyrqjhfYeQB6VGnVKBowtG4abTNhhfRqh7BsoDCzVF"
    },
    {
      "chainId": 56,
      "address": "0x2170Ed0880ac9A755fd29B2688956BD959F933F8",
      "symbol": "ETH",
      "name": "Ethereum",
      "decimals": 18,
      "logoURI": "ipfs://QmShSisJHEC56LHmX7mxKAeUwH4utCHtmqeoGR2QonZQZ7"
    },
    {
      "chainId": 1,
      "address": "0x9EeF4CA7aB9fa8bc0650127341C2d3F707a40f8A",
      "symbol": "sCOIN",
      "name": "Synthetic Coinbase",
      "decimals": 18,
      "logoURI": "ipfs://QmUzTwNH5QMXpGB2F4jU2dvqVTvQb6yZeY5FRFR4fxgz6f"
    },
    {
      "chainId": 1,
      "address": "0x744d70FDBE2Ba4CF95131626614a1763DF805B9E",
      "symbol": "SNT",
      "name": "Status",
      "decimals": 18,
      "logoURI": "ipfs://QmewBQAyAd81xRJyfghTQ6aQ5G6NnrdDiCdB91h8MwSRgp"
    },
    {
      "chainId": 100,
      "address": "0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE",
      "symbol": "SUSHI",
      "name": "Sushi",
      "decimals": 18,
      "logoURI": "ipfs://QmT48vXNDWa4KUUk6ZsYk8Z4QwNqjk9xaqpbpQvMFz1xFC"
    },
    {
      "chainId": 1,
      "address": "0x5299d6F7472DCc137D7f3C4BcfBBB514BaBF341A",
      "symbol": "sXMR",
      "name": "Synthetic Monero",
      "decimals": 18,
      "logoURI": "ipfs://QmQKrxK93rADExK29FXr9FRb9BitFM6kxddb7FVhDUsddh"
    },
    {
      "chainId": 137,
      "address": "0xFFA4D863C96e743A2e1513824EA006B8D0353C57",
      "symbol": "USDD",
      "name": "Decentralized USD",
      "decimals": 18,
      "logoURI": "ipfs://QmPtvMuo6UQwDXB7cTVz85Ms5noX6rnnNKi3HNmwKrPf8u"
    },
    {
      "chainId": 1,
      "address": "0x2791BfD60D232150Bff86b39B7146c0eaAA2BA81",
      "symbol": "BIFI",
      "name": "BiFi",
      "decimals": 18,
      "logoURI": "ipfs://QmVUWkVWgkoryJpan9TygturFdBAy1FfoNWe97cETwFZcw"
    },
    {
      "chainId": 137,
      "address": "0x70c006878a5A50Ed185ac4C87d837633923De296",
      "symbol": "REVV",
      "name": "REVV",
      "decimals": 18,
      "logoURI": "ipfs://QmZc39HdhcUMJFMnLnwb4RtYoSxcKUjAGpGK6puYnGvfU4"
    },
    {
      "chainId": 1,
      "address": "0x22B243B96495C547598D9042B6f94B01C22B2e9E",
      "symbol": "crSWAG",
      "name": "Cream Swag",
      "decimals": 8,
      "logoURI": "ipfs://Qman9m4VwLJ1e4RpBoGpGxBzwWSBm8dXWRRsym952kZEEP"
    },
    {
      "chainId": 1,
      "address": "0x878CF148ccBb50426043a9AFFe54Ba408221C7fA",
      "symbol": "KOMBAT",
      "name": "Crypto Kombat",
      "decimals": 8,
      "logoURI": "ipfs://QmawBAVNbTtHn3XkrjG6rx1WqZZhmz4x3r4edNaMjbG3LS"
    },
    {
      "chainId": 1,
      "address": "0x0e0989b1f9B8A38983c2BA8053269Ca62Ec9B195",
      "symbol": "POE",
      "name": "Po.et",
      "decimals": 8,
      "logoURI": "ipfs://QmebVEomNBTXiAyG8xM1PynJM3bsuDznfEzabG5JUmyhyW"
    },
    {
      "chainId": 1,
      "address": "0x5150956E082C748Ca837a5dFa0a7C10CA4697f9c",
      "symbol": "ZDEX",
      "name": "Zeedex",
      "decimals": 18,
      "logoURI": "ipfs://QmV9c635vDbWfuKz8Nn7AAX8BF8atwNovrJGom7Yp5gy5A"
    },
    {
      "chainId": 1,
      "address": "0x69702cfd7DAd8bCcAA24D6B440159404AAA140F5",
      "symbol": "sUSDT",
      "name": "Strike USDT",
      "decimals": 8,
      "logoURI": "ipfs://QmUqXRqRnpobmz2KBzyCBsriLcLkCEGkuUG9ET8sRZn8V6"
    },
    {
      "chainId": 1,
      "address": "0x31c8EAcBFFdD875c74b94b077895Bd78CF1E64A3",
      "symbol": "RAD",
      "name": "Radicle",
      "decimals": 18,
      "logoURI": "ipfs://QmVzppE6wdafQtApnGkdSHJqFcd6w1uJQBPyEgdxqBRTMB"
    },
    {
      "chainId": 1,
      "address": "0x8Ee04E1e9400d4e2091Ff3A46509E246E2F34542",
      "symbol": "MUSUBI",
      "name": "Musubi",
      "decimals": 9,
      "logoURI": "ipfs://QmZ3V5h6tX4P2pFPa4rfc7NEqH9WonAQAYJ1tN4Pu9DQS1"
    },
    {
      "chainId": 1,
      "address": "0xeCe8531550Fc599ccB2c7734494FBc358d0a9483",
      "symbol": "PP",
      "name": "PP",
      "decimals": 18,
      "logoURI": "ipfs://QmT71iXeBXHoJRffSuVL1fStXdRGZxq4zVt2bVJff7SdJP"
    },
    {
      "chainId": 1,
      "address": "0xc690F7C7FcfFA6a82b79faB7508c466FEfdfc8c5",
      "symbol": "LYM",
      "name": "Lympo",
      "decimals": 18,
      "logoURI": "ipfs://QmVkikQsGp3S1TtTA2a7UE8HNUH1mLkYV6e8BS9CKH5VwD"
    },
    {
      "chainId": 137,
      "address": "0x23001f892c0C82b79303EDC9B9033cD190BB21c7",
      "symbol": "LUSD",
      "name": "Liquity USD",
      "decimals": 18,
      "logoURI": "ipfs://QmPzBCxWo5xMA8Wif7wCQQmuZ5ajP5sw4JSHthMxvxY2uR"
    },
    {
      "chainId": 1,
      "address": "0xbaA70614C7AAfB568a93E62a98D55696bcc85DFE",
      "symbol": "UCAP",
      "name": "Unicap.finance",
      "decimals": 18,
      "logoURI": "ipfs://QmSc3Q78LfQ8egt8ZLUtFTcJguigwNYixZFJWzJfBWtsvT"
    },
    {
      "chainId": 1,
      "address": "0xBB0E17EF65F82Ab018d8EDd776e8DD940327B28b",
      "symbol": "AXS",
      "name": "Axie Infinity",
      "decimals": 18,
      "logoURI": "ipfs://Qma5gXpmfTK1Ja4AwaYNyAQrxsu3fEQXj8Kqa3W2jyD5uw"
    },
    {
      "chainId": 1,
      "address": "0x5cAf454Ba92e6F2c929DF14667Ee360eD9fD5b26",
      "symbol": "DEV",
      "name": "Dev Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmdKdvH32cnqv3aNGTwDoJ6ygkcQ9vzQcTiEogkFjNDzUa"
    },
    {
      "chainId": 1,
      "address": "0x467Bccd9d29f223BcE8043b84E8C8B282827790F",
      "symbol": "TEL",
      "name": "Telcoin",
      "decimals": 2,
      "logoURI": "ipfs://QmdRM767SbowAoxgb1i327MjQxMvoenfeSWWNYtnZFTLgd"
    },
    {
      "chainId": 1,
      "address": "0x737F98AC8cA59f2C68aD658E3C3d8C8963E40a4c",
      "symbol": "AMN",
      "name": "Amon",
      "decimals": 18,
      "logoURI": "ipfs://QmemZYjfBwHT3p5XyUp6GifN5FzPtLn9ZPuJLx3zFJ39JJ"
    },
    {
      "chainId": 1,
      "address": "0x03ab458634910AaD20eF5f1C8ee96F1D6ac54919",
      "symbol": "RAI",
      "name": "Rai Reflex Index",
      "decimals": 18,
      "logoURI": "ipfs://QmPy2zFxZbcmKBfZhg6YhNpfUjcBeqdRX83wFoELTZBz69"
    },
    {
      "chainId": 1,
      "address": "0xC18360217D8F7Ab5e7c516566761Ea12Ce7F9D72",
      "symbol": "ENS",
      "name": "Ethereum Name Service",
      "decimals": 18,
      "logoURI": "ipfs://QmXtigPW4eXE48EMJqVjGQud84NWrPptAutV7gstsb6TX8"
    },
    {
      "chainId": 1,
      "address": "0xeE0f286776639cD363Da810DAF3e0623F82576b0",
      "symbol": "L2P",
      "name": "Lung Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmRtMKXhHYHGPMswVAetJFpBkENxKZoxo9jeMn5edsZ7ZH"
    },
    {
      "chainId": 1,
      "address": "0x616ef40D55C0D2c506f4d6873Bda8090b79BF8fC",
      "symbol": "KTO",
      "name": "Kounotori",
      "decimals": 9,
      "logoURI": "ipfs://QmQ6BPyfGTJG7GoJvqYfVEGGiKf4toaaRmNpcA8PHYojja"
    },
    {
      "chainId": 1,
      "address": "0x50D1c9771902476076eCFc8B2A83Ad6b9355a4c9",
      "symbol": "FTT",
      "name": "FTX Token",
      "decimals": 18,
      "logoURI": "ipfs://QmYWkTfPjEpyBPWaMo5nkA7SsDG3LvhxuRysDQGvaD1Qas"
    },
    {
      "chainId": 1,
      "address": "0x9c306A78b1a904e83115c05Ac67c1Ef07C653651",
      "symbol": "ODOGE",
      "name": "BoringDAO DOGE",
      "decimals": 18,
      "logoURI": "ipfs://QmWv3YwHReWWoGR378NVUYAeADqfTV2Cf1eCpKLipbYWKZ"
    },
    {
      "chainId": 1,
      "address": "0x3D3D35bb9bEC23b06Ca00fe472b50E7A4c692C30",
      "symbol": "VIDYA",
      "name": "Vidya",
      "decimals": 18,
      "logoURI": "ipfs://QmYgchhaGM1Mm93uZG8eFMTTqdw191ScHfyDP6GKuTP6su"
    },
    {
      "chainId": 1,
      "address": "0x39Bb259F66E1C59d5ABEF88375979b4D20D98022",
      "symbol": "WAX",
      "name": "WAX",
      "decimals": 8,
      "logoURI": "ipfs://QmY7xYvWNGnqoEw1rAH75gdgyY2PBQ5AerNoyccj2qmNJN"
    },
    {
      "chainId": 1,
      "address": "0xAE12C5930881c53715B369ceC7606B70d8EB229f",
      "symbol": "C98",
      "name": "Coin98",
      "decimals": 18,
      "logoURI": "ipfs://QmRQbHrMyudBLwQWkC1GHgyYBDzmgDGbEDWLZZ9ZqNL8dF"
    },
    {
      "chainId": 1,
      "address": "0xbCC8EBABfd6ab52CaA883ed8eBc45b7973700A29",
      "symbol": "YBI",
      "name": "Yubiai",
      "decimals": 18,
      "logoURI": "ipfs://QmX9iyy2jcWzitkqDJkcjE6A3P2RsW7dbjTSEK2itLWNan"
    },
    {
      "chainId": 1,
      "address": "0xE50365f5D679CB98a1dd62D6F6e58e59321BcdDf",
      "symbol": "LA",
      "name": "LATOKEN",
      "decimals": 18,
      "logoURI": "ipfs://Qmf8nXnsZMdLCQvwpvqLxw5jcBcYqyJgNbCMpEoHexKttA"
    },
    {
      "chainId": 1,
      "address": "0xfa9C3dC54baA9eefBe9453B1f3B3B93aD2AF0A77",
      "symbol": "DST",
      "name": "Dynamic Supply",
      "decimals": 18,
      "logoURI": "ipfs://QmVJTAFfYHfQ8Y5rA5gWzzGtaxS3qcRJtjHbXhjduXzS3Y"
    },
    {
      "chainId": 1,
      "address": "0xC76FB75950536d98FA62ea968E1D6B45ffea2A55",
      "symbol": "COL",
      "name": "Unit Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmdYojc5iV37oowX3QQR5HroYg5igesr9GUsCjJbf55GgX"
    },
    {
      "chainId": 1,
      "address": "0xf04a8ac553FceDB5BA99A64799155826C136b0Be",
      "symbol": "FLIXX",
      "name": "Flixxo",
      "decimals": 18,
      "logoURI": "ipfs://QmVKvyAL1fQKMpycE1XbfJ2Y19i21T2DLkzS7cGdBjMQRj"
    },
    {
      "chainId": 1,
      "address": "0x6f259637dcD74C767781E37Bc6133cd6A68aa161",
      "symbol": "HT",
      "name": "Huobi",
      "decimals": 18,
      "logoURI": "ipfs://QmScJttJGSYVKYyNFhDrVxM7AUDS3bAj9wfCbeMhBBzBsT"
    },
    {
      "chainId": 1,
      "address": "0x92D6C1e31e14520e676a687F0a93788B716BEff5",
      "symbol": "DYDX",
      "name": "dYdX",
      "decimals": 18,
      "logoURI": "ipfs://QmbqcAJHjX4U3DiZkrx2LrvK5PLYejuLTrUs9FXAyY4jMN"
    },
    {
      "chainId": 1,
      "address": "0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8",
      "symbol": "yCrv",
      "name": "yCurve",
      "decimals": 18,
      "logoURI": "ipfs://QmVG1AJgQ1NsHz4NhFwsL5W8M3zZkGFzAdR8J1jdjcEtME"
    },
    {
      "chainId": 137,
      "address": "0x6aBB753C1893194DE4a83c6e8B4EadFc105Fd5f5",
      "symbol": "SXP",
      "name": "Swipe",
      "decimals": 18,
      "logoURI": "ipfs://QmQyhHJ92pNm8RbezaeeNtfUqLyv8sQZ62GfBN5RZqADro"
    },
    {
      "chainId": 56,
      "address": "0x16939ef78684453bfDFb47825F8a5F714f12623a",
      "symbol": "XTZ",
      "name": "Tezos",
      "decimals": 18,
      "logoURI": "ipfs://QmcHtFxQy3TiBRjkMmVxdbgR2dYe16R9B482YFSVUkp3qY"
    },
    {
      "chainId": 1,
      "address": "0x05Ec93c0365baAeAbF7AefFb0972ea7ECdD39CF1",
      "symbol": "aBAT",
      "name": "Aave BAT",
      "decimals": 18,
      "logoURI": "ipfs://QmTmy1fbqwjtaUM55me4Dp7Cxi5fajgzqB7bN2AtjZfEw8"
    },
    {
      "chainId": 1,
      "address": "0x174aFE7A032b5A33a3270a9f6C30746E25708532",
      "symbol": "HUM",
      "name": "Humanscape",
      "decimals": 18,
      "logoURI": "ipfs://QmcamcWnuD7WsQQRgBszujdijxt3caSptHQqFW4YUTNUjo"
    },
    {
      "chainId": 1,
      "address": "0x5dE83a4b2CA7D85476bb5cA5435E1BF1bbFdE9a2",
      "symbol": "NUTRA",
      "name": "Nutraceutical Finance",
      "decimals": 9,
      "logoURI": "ipfs://QmciBbcysuuGnjDH722j593eL1kmVrBKQx5gAGvchYxMeE"
    },
    {
      "chainId": 1,
      "address": "0x3832d2F059E55934220881F831bE501D180671A7",
      "symbol": "renDOGE",
      "name": "renDOGE",
      "decimals": 8,
      "logoURI": "ipfs://QmWUUKtf1JWi4uGQwRwJ3xBEnT8gNSLGeYmrNKyS36cz6z"
    },
    {
      "chainId": 1,
      "address": "0xD71eCFF9342A5Ced620049e616c5035F1dB98620",
      "symbol": "sEUR",
      "name": "Synthetic Euros",
      "decimals": 18,
      "logoURI": "ipfs://QmSGm9XRV7SFTQYQv7QBbTyzeSo8MsGq6aqgDhyGgT3odN"
    },
    {
      "chainId": 1,
      "address": "0xB97048628DB6B661D4C2aA833e95Dbe1A905B280",
      "symbol": "PAY",
      "name": "TenX",
      "decimals": 18,
      "logoURI": "ipfs://QmQVXvrqzXaEeAGEBAL4AbKqnL6LacnwJVVaYvmqRSB8i2"
    },
    {
      "chainId": 1,
      "address": "0x5adc961D6AC3f7062D2eA45FEFB8D8167d44b190",
      "symbol": "DTH",
      "name": "Dether",
      "decimals": 18,
      "logoURI": "ipfs://QmdihZeKqZtUXab3YEonhwLnPYW5KmYsKfudfWT3vkdV8x"
    },
    {
      "chainId": 137,
      "address": "0x282d8efCe846A88B159800bd4130ad77443Fa1A1",
      "symbol": "OCEAN",
      "name": "Ocean Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmSai6eFJgLb6g3LmnaBRzxc5GKNQE1kLRCLGfmLnBuPE4"
    },
    {
      "chainId": 1,
      "address": "0x875773784Af8135eA0ef43b5a374AaD105c5D39e",
      "symbol": "IDLE",
      "name": "IDLE",
      "decimals": 18,
      "logoURI": "ipfs://QmfSFLnBjTuLoXRFYEuwYAtg24rKcMGpP4uo33ErG7f8SX"
    },
    {
      "chainId": 1,
      "address": "0x4164e5b047842Ad7dFf18fc6A6e63a1e40610f46",
      "symbol": "sSTRK",
      "name": "Strike STRK",
      "decimals": 8,
      "logoURI": "ipfs://QmYLeTvGrfDLyVw1defauXwXZu6UF6RBZ7rAKpWrJ9RvdS"
    },
    {
      "chainId": 1,
      "address": "0x44108f0223A3C3028F5Fe7AEC7f9bb2E66beF82F",
      "symbol": "ACX",
      "name": "Across Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmUTywZ71uqSEuG24c1hHAFn3nchW2T3m7KygPAkxJ5Yxk"
    },
    {
      "chainId": 1,
      "address": "0xa8B0F154A688c22142E361707df64277e0A0bE66",
      "symbol": "RAK",
      "name": "Rake Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmS4FC5r2GT4WqXCifBTuDzYvbs3JEzy9eGipfSDoeUZky"
    },
    {
      "chainId": 1,
      "address": "0xe0AeE745b22c522DE621F826a9453f534808DFD0",
      "symbol": "MCU",
      "name": "Meme Coin Universe",
      "decimals": 9,
      "logoURI": "ipfs://QmWhVbMxnEcThmVQ6Th3sFGKiRNsmYMQTQDXxR8Z9yCavL"
    },
    {
      "chainId": 1,
      "address": "0x1b890fD37Cd50BeA59346fC2f8ddb7cd9F5Fabd5",
      "symbol": "NEWO",
      "name": "New Order",
      "decimals": 18,
      "logoURI": "ipfs://Qmf15uTtmviGrSsiqwsoVKGHUVXVEXx5EKXm1bYeg9kgEi"
    },
    {
      "chainId": 10,
      "address": "0x8700dAec35aF8Ff88c16BdF0418774CB3D7599B4",
      "symbol": "SNX",
      "name": "Synthetix Network",
      "decimals": 18,
      "logoURI": "ipfs://QmX3ov1SgUvUJ64HuEn19RsDkVE91zbUuaCfozReqbbMx5"
    },
    {
      "chainId": 1,
      "address": "0x514cdb9cd8A2fb2BdCf7A3b8DDd098CaF466E548",
      "symbol": "REDPANDA",
      "name": "RedPanda Earth",
      "decimals": 9,
      "logoURI": "ipfs://QmRCNYMxqhQpZ7m4zX1qNr8rpVCtzaezCfP51WeiKS69GM"
    },
    {
      "chainId": 1,
      "address": "0xDB5C3C46E28B53a39C255AA39A411dD64e5fed9c",
      "symbol": "NCR",
      "name": "Neos Metaverse Credits",
      "decimals": 18,
      "logoURI": "ipfs://QmbsKzFvfDCRbVp7FAFaVED6EQK4mWVaNNZRsb4FbNDbS2"
    },
    {
      "chainId": 1,
      "address": "0xf1f955016EcbCd7321c7266BccFB96c68ea5E49b",
      "symbol": "RLY",
      "name": "Rally",
      "decimals": 18,
      "logoURI": "ipfs://QmTA7bGTi6gBeFMVuWALYCAyWZjX3YZHSAXD8nVwNbciNk"
    },
    {
      "chainId": 1,
      "address": "0xd15eCDCF5Ea68e3995b2D0527A0aE0a3258302F8",
      "symbol": "MCX",
      "name": "Machi X",
      "decimals": 18,
      "logoURI": "ipfs://QmQEGknGnUZabgNr23E3pofVn7ct5KLn6s2kv8aveCMN5i"
    },
    {
      "chainId": 1,
      "address": "0x69692D3345010a207b759a7D1af6fc7F38b35c5E",
      "symbol": "CHADS",
      "name": "CHADS VC",
      "decimals": 18,
      "logoURI": "ipfs://QmcvK2WZuxrALQjPeCnEojcrRKxmN1dAsS5qnMcpZVu9fm"
    },
    {
      "chainId": 1,
      "address": "0x456D8f0D25A4e787eE60c401F8B963a465148f70",
      "symbol": "CAVA",
      "name": "Cavapoo",
      "decimals": 9,
      "logoURI": "ipfs://QmUo9W9sJjsxHjMBGGHTcpS3mAjsDRCcmhLCnp8AqmN32P"
    },
    {
      "chainId": 1,
      "address": "0x8B3192f5eEBD8579568A2Ed41E6FEB402f93f73F",
      "symbol": "SAITAMA",
      "name": "SAITAMA INU",
      "decimals": 9,
      "logoURI": "ipfs://QmWeTkuvpA234u5GpqxwLTmzgJUhWSpcET7Zdwfi7bpgeo"
    },
    {
      "chainId": 1,
      "address": "0x196f4727526eA7FB1e17b2071B3d8eAA38486988",
      "symbol": "RSV",
      "name": "Reserve",
      "decimals": 18,
      "logoURI": "ipfs://QmX38Axj8iBnrVhywMf8DRrdxoZCQi8LMPXSfTbn8N2Lta"
    },
    {
      "chainId": 1,
      "address": "0xfD107B473AB90e8Fbd89872144a3DC92C40Fa8C9",
      "symbol": "LALA",
      "name": "LALA World",
      "decimals": 18,
      "logoURI": "ipfs://QmVDELVWhSukrJjEcKQHCujc4FyY2b8xeTUgXVPmKqaGKk"
    },
    {
      "chainId": 1,
      "address": "0xCDB7eCFd3403Eef3882c65B761ef9B5054890a47",
      "symbol": "HUR",
      "name": "Hurify",
      "decimals": 18,
      "logoURI": "ipfs://QmWABfSc3L4soRim6rKrUMoDoUAkwqgxatWqa8H7mPUpBf"
    },
    {
      "chainId": 1,
      "address": "0x3DE7148c41e3B3233f3310E794F68d8E70Ca69AF",
      "symbol": "SLINK",
      "name": "ShibaLink",
      "decimals": 9,
      "logoURI": "ipfs://QmSLV5QxSAgcyYsJLw2oGsRgmkZ7v1iDKTDjdN9ndHn2Vt"
    },
    {
      "chainId": 1,
      "address": "0xEfaB7248D36585e2340E5d25F8a8D243E6e3193F",
      "symbol": "DACXI",
      "name": "Dacxi",
      "decimals": 18,
      "logoURI": "ipfs://QmXEqiin4UebhJhT6Af23gjyLGLVnqPaDcBzur2fRfrddz"
    },
    {
      "chainId": 1,
      "address": "0xe89a6D0509faF730BD707bf868d9A2A744a363C7",
      "symbol": "crUNI",
      "name": "Cream Uniswap",
      "decimals": 8,
      "logoURI": "ipfs://QmWEEJ14Hi7hmgoD5BsZ7xXNsjmzgJdTEidrnuYM53jZ6V"
    },
    {
      "chainId": 1,
      "address": "0x1681bcB589b3cFCF0c0616B0cE9b19b240643dc1",
      "symbol": "ISLE",
      "name": "Island",
      "decimals": 9,
      "logoURI": "ipfs://QmYNQBF9aif8U3tZnpckXHSCGhA1kgCnAWYDRXm5xzsXCc"
    },
    {
      "chainId": 1,
      "address": "0x0000852600CEB001E08e00bC008be620d60031F2",
      "symbol": "THKD",
      "name": "TrueHKD",
      "decimals": 18,
      "logoURI": "ipfs://QmWqqBjuWoDQ5Ctpyo33tbFbRyV4VtvBhQtPesYQvjKBFe"
    },
    {
      "chainId": 1,
      "address": "0xe9Dc63083c464d6EDcCFf23444fF3CFc6886f6FB",
      "symbol": "yvCurve-oBTC",
      "name": "Curve oBTC Pool yVault",
      "decimals": 18,
      "logoURI": "ipfs://QmZNCb4tDrPCBxvRNgJ5kiSZ4UwNnScyCfp4t4AbbBD6y9"
    },
    {
      "chainId": 1,
      "address": "0x83e2BE8d114F9661221384B3a50d24B96a5653F5",
      "symbol": "ZXC",
      "name": "0xcert",
      "decimals": 18,
      "logoURI": "ipfs://QmSv4MF5DokShCRBTbg8xp1f8q1TXEuUPn8bQ3dj2uSSJw"
    },
    {
      "chainId": 1,
      "address": "0x9Cb2f26A23b8d89973F08c957C4d7cdf75CD341c",
      "symbol": "DZAR",
      "name": "Digital Rand",
      "decimals": 6,
      "logoURI": "ipfs://QmY3BBPjGtsCaHzd7oMJsPy5s7e1br4Qfv4JGKXwnP8tjy"
    },
    {
      "chainId": 1,
      "address": "0x6C5024Cd4F8A59110119C56f8933403A539555EB",
      "symbol": "aSUSD",
      "name": "Aave SUSD",
      "decimals": 18,
      "logoURI": "ipfs://QmYVWq5z2fpBS4viMQHsFHvr6saQxV62qefrKCsANjBysV"
    },
    {
      "chainId": 1,
      "address": "0x69FE11b042789bC6E2FDaad064AfD32bb298aE05",
      "symbol": "ORDR",
      "name": "The Red Order",
      "decimals": 18,
      "logoURI": "ipfs://QmZcL2WLoBRFchx3EgGZQpwyjAN5sWm3RxtUxsEAPiyGmv"
    },
    {
      "chainId": 1,
      "address": "0xf2051511B9b121394FA75B8F7d4E7424337af687",
      "symbol": "HAUS",
      "name": "DAOhaus",
      "decimals": 18,
      "logoURI": "ipfs://QmP9U4RZVhRUAYdvGirwjVEcqddsQbUScfBpw3xwCSRpqs"
    },
    {
      "chainId": 1,
      "address": "0x6243d8CEA23066d098a15582d81a598b4e8391F4",
      "symbol": "FLX",
      "name": "Reflexer Ungovernance Token",
      "decimals": 18,
      "logoURI": "ipfs://QmcQgBY943BzJ2vPtBZ5EBhnCq2R6xRF7Z1thXF3Qq7wW6"
    },
    {
      "chainId": 1,
      "address": "0x186eF81fd8E77EEC8BfFC3039e7eC41D5FC0b457",
      "symbol": "INSP",
      "name": "Inspect",
      "decimals": 18,
      "logoURI": "ipfs://QmXHbrRkcscRkQfeXtCckvgpUwdYY2pcCtPJ5N4SUv3fre"
    },
    {
      "chainId": 42161,
      "address": "0x9623063377AD1B27544C965cCd7342f7EA7e88C7",
      "symbol": "GRT",
      "name": "The Graph",
      "decimals": 18,
      "logoURI": "ipfs://Qmf8sMWoxGHRThqGaHKBTsSndkZdbsEyp8DXQvisj6QGH7"
    },
    {
      "chainId": 1,
      "address": "0xb9871cB10738eADA636432E86FC0Cb920Dc3De24",
      "symbol": "PRIA",
      "name": "PRIA",
      "decimals": 18,
      "logoURI": "ipfs://QmVZKUhNnnsai7795PVFPocC79J72M4Byo17ifZAM5PGUZ"
    },
    {
      "chainId": 1,
      "address": "0xAf30D2a7E90d7DC361c8C4585e9BB7D2F6f15bc7",
      "symbol": "1ST",
      "name": "FirstBlood",
      "decimals": 18,
      "logoURI": "ipfs://QmYai96YfRnsvEfSh9Q42WtSbPeMocQg6tNwhEquEq9da1"
    },
    {
      "chainId": 1,
      "address": "0xaff84e86d72EDb971341a6A66eb2dA209446FA14",
      "symbol": "TCAT",
      "name": "The Currency Analytics",
      "decimals": 18,
      "logoURI": "ipfs://QmTihrnEAX8HBko7XzS7cNfrkQYJo78v7FcwduswjMqDC5"
    },
    {
      "chainId": 1,
      "address": "0x7968bc6a03017eA2de509AAA816F163Db0f35148",
      "symbol": "HGET",
      "name": "Hedget",
      "decimals": 6,
      "logoURI": "ipfs://QmNe2qUgYEBYuRTgUkvBN1VzvCsZeisTvBVNfiVNQXTDmb"
    },
    {
      "chainId": 1,
      "address": "0x4c1C4957D22D8F373aeD54d0853b090666F6F9De",
      "symbol": "SLV",
      "name": "Silverway",
      "decimals": 18,
      "logoURI": "ipfs://QmcHJAC2CiQx5Jm1RkKRMYFHfuJXds33qShVq39dGkfSf1"
    },
    {
      "chainId": 1,
      "address": "0x152649eA73beAb28c5b49B26eb48f7EAD6d4c898",
      "symbol": "CAKE",
      "name": "PancakeSwap",
      "decimals": 18,
      "logoURI": "ipfs://Qmci7V6yNrA1wqMbFapLHRMMM7dpdKz2GVCiSypbDUctXf"
    },
    {
      "chainId": 1,
      "address": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
      "symbol": "C",
      "name": "CryptoPunks",
      "decimals": 0,
      "logoURI": "ipfs://QmS7nb3msDTW58evR7iLES1D5QCWEQUBMLuNiaJoBcDkX4"
    },
    {
      "chainId": 100,
      "address": "0xFbdd194376de19a88118e84E279b977f165d01b8",
      "symbol": "DHV",
      "name": "DeHive",
      "decimals": 18,
      "logoURI": "ipfs://QmeWfbxG4G3H8LiWM8cFxZDd5PiYoztAa7xJWB9NrVCdki"
    },
    {
      "chainId": 1,
      "address": "0x9B62513c8a27290CF6A7A9e29386e600245EA819",
      "symbol": "CPT",
      "name": "Contents Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmPb8mveJjSeSmCTUAbShA6qnNGzAfEzrCBP1LJQ2dPJAw"
    },
    {
      "chainId": 1,
      "address": "0x95172ccBe8344fecD73D0a30F54123652981BD6F",
      "symbol": "LOCK",
      "name": "Meridian Network",
      "decimals": 18,
      "logoURI": "ipfs://QmZjq9ftKwCEVuAciXyAV4Ywk9CTGXDgRbPuwJTNtapiRw"
    },
    {
      "chainId": 1,
      "address": "0x1d37986F252d0e349522EA6C3B98Cb935495E63E",
      "symbol": "CHART",
      "name": "ChartEx",
      "decimals": 18,
      "logoURI": "ipfs://QmfQLuuN7yf4WEhzzwJ6t2X1tLnGpd5Yk9S542j4uradWz"
    },
    {
      "chainId": 1,
      "address": "0x33E07f5055173cF8FeBedE8B21B12D1e2b523205",
      "symbol": "ELAND",
      "name": "Etherland",
      "decimals": 18,
      "logoURI": "ipfs://QmTFFLoGK1qqmDcmBRZCrfxA9xkL5WZVvA7wAZ7DZykiTL"
    },
    {
      "chainId": 1,
      "address": "0x9813037ee2218799597d83D4a5B6F3b6778218d9",
      "symbol": "BONE",
      "name": "BONE SHIBASWAP",
      "decimals": 18,
      "logoURI": "ipfs://Qmf9AQKzGFre6EAkghhfbX6JEepCQV9ArrwmjyopH82iL6"
    },
    {
      "chainId": 1,
      "address": "0x1788430620960F9a70e3DC14202a3A35ddE1A316",
      "symbol": "OAP",
      "name": "OpenAlexa Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmUaVsbZLdugd3cBNivA3qXBWPGdz9dsaob4FdEcgAnm4x"
    },
    {
      "chainId": 56,
      "address": "0x965F527D9159dCe6288a2219DB51fc6Eef120dD1",
      "symbol": "BSW",
      "name": "Biswap",
      "decimals": 18,
      "logoURI": "ipfs://Qmc3UdghzHNGbgqdf9EV5hseptxupi5vcgMxM3z5SLFEuP"
    },
    {
      "chainId": 137,
      "address": "0x9a71012B13CA4d3D0Cdc72A177DF3ef03b0E76A3",
      "symbol": "BAL",
      "name": "Balancer",
      "decimals": 18,
      "logoURI": "ipfs://QmbzDmJ2yboeFf45poTkzpqZkDbnsdL24x2BJQTs64yv5Z"
    },
    {
      "chainId": 1,
      "address": "0x2C540c3c7BE7aF98278Dc6963e092cD450009d1F",
      "symbol": "SPARKO",
      "name": "Sparko",
      "decimals": 18,
      "logoURI": "ipfs://Qmdj23X9LKyop8dCo8Hvj8Gv69fHTiCjMSQvCwNWrcmdkA"
    },
    {
      "chainId": 1,
      "address": "0xF0FAC7104aAC544e4a7CE1A55ADF2B5a25c65bD1",
      "symbol": "PAMP",
      "name": "Pamp Network",
      "decimals": 18,
      "logoURI": "ipfs://QmTDYoeBc58x3sLNG1hCqvBrgfRdA1dShhSmo8jfYMph49"
    },
    {
      "chainId": 1,
      "address": "0x0649Cef6D11ed6F88535462E147304d3FE5ae14D",
      "symbol": "KUB",
      "name": "Bitkub",
      "decimals": 18,
      "logoURI": "ipfs://QmNhTMToh21vrGzfqgZWShSRrMAtF3Pis9uEgFwH17p86p"
    },
    {
      "chainId": 1,
      "address": "0x3ac2AB91dDF57e2385089202Ca221C360CED0062",
      "symbol": "SWSH",
      "name": "SwapShip",
      "decimals": 18,
      "logoURI": "ipfs://QmSUiMcxsyfot7UsG3NKvnCVSXsT18mhPeAwrenqNpfva4"
    },
    {
      "chainId": 1,
      "address": "0xc12d099be31567add4e4e4d0D45691C3F58f5663",
      "symbol": "AUC",
      "name": "Auctus",
      "decimals": 18,
      "logoURI": "ipfs://QmQs1uUJWxMvtC18CdEZnAxg4Wf9cQF84ZfWp3RxqQDHjA"
    },
    {
      "chainId": 1,
      "address": "0xDF2C7238198Ad8B389666574f2d8bc411A4b7428",
      "symbol": "MFT",
      "name": "Hifi Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmXhErVaPdPZr2DqgXSpxdrySrmPPrmYp7F8bkYT2faJ3o"
    },
    {
      "chainId": 1,
      "address": "0x9c405acf8688AfB61B3197421cDeeC1A266c6839",
      "symbol": "DOGY",
      "name": "DogeYield",
      "decimals": 18,
      "logoURI": "ipfs://QmYjK4jSMfZxqo95HB9U7dsL7D4B7bmrgBoKxmffp3Ej6g"
    },
    {
      "chainId": 1,
      "address": "0x910Dfc18D6EA3D6a7124A6F8B5458F281060fa4c",
      "symbol": "X8X",
      "name": "X8X Token",
      "decimals": 18,
      "logoURI": "ipfs://QmVjVR8TribFRbrpXV5D1dW9R3LMv7dVMKVFFaNsV5ZDXo"
    },
    {
      "chainId": 1,
      "address": "0xCF8335727B776d190f9D15a54E6B9B9348439eEE",
      "symbol": "WHACKD",
      "name": "WHACKD",
      "decimals": 18,
      "logoURI": "ipfs://QmYtmcJu1pAq2a8MiR3xWt5deBvD9ZcLDYRo2bYoyWiWsk"
    },
    {
      "chainId": 1,
      "address": "0xE0e05c43c097B0982Db6c9d626c4eb9e95C3b9ce",
      "symbol": "USF",
      "name": "Unslashed Finance",
      "decimals": 18,
      "logoURI": "ipfs://Qmas75ppaL24asqMJwRWKYbSUjBxWx7KtP2pyj6SvabHpK"
    },
    {
      "chainId": 1,
      "address": "0x2Fb12bccF6f5Dd338b76Be784A93ade072425690",
      "symbol": "BEAT",
      "name": "BEAT",
      "decimals": 18,
      "logoURI": "ipfs://QmXXfW5GX4zncbbQ2ymZJkmzBD1PVf2Aspd2nLi52nSRWt"
    },
    {
      "chainId": 1,
      "address": "0xc770EEfAd204B5180dF6a14Ee197D99d808ee52d",
      "symbol": "FOX",
      "name": "ShapeShift FOX ",
      "decimals": 18,
      "logoURI": "ipfs://QmRFkU5X6HLcFdeHEwGEJ4NhxyjDWsSP2i81trLYsY4eRG"
    },
    {
      "chainId": 1,
      "address": "0x1aBaEA1f7C830bD89Acc67eC4af516284b1bC33c",
      "symbol": "EUROC",
      "name": "Euro Coin",
      "decimals": 6,
      "logoURI": "ipfs://Qmcot1uZuiGa6HtXZqs6feW6rx6koECZfca6x5Z5on3GP7"
    },
    {
      "chainId": 1,
      "address": "0xc944E90C64B2c07662A292be6244BDf05Cda44a7",
      "symbol": "GRT",
      "name": "The Graph",
      "decimals": 18,
      "logoURI": "ipfs://QmaCTcJ7pLUgdjdXeZkubcRsGnyT73fvPBsgPLWMZevCfd"
    },
    {
      "chainId": 1,
      "address": "0xD9A947789974bAD9BE77E45C2b327174A9c59D71",
      "symbol": "YSR",
      "name": "Ystar",
      "decimals": 18,
      "logoURI": "ipfs://QmXs6FqwBkrMFaL8Sfiazn6yJroTgm3Cco4Xayw827PyEn"
    },
    {
      "chainId": 1,
      "address": "0xAbeA7663c472648d674bd3403D94C858dFeEF728",
      "symbol": "PUDGY",
      "name": "PUDGY Vault",
      "decimals": 18,
      "logoURI": "ipfs://QmUyMdim1BDzQL9pkjEys62P8DR5oPQkZvdCES54aBMC21"
    },
    {
      "chainId": 1,
      "address": "0xe6fd75ff38Adca4B97FBCD938c86b98772431867",
      "symbol": "ELA",
      "name": "ELA on Ethereum",
      "decimals": 18,
      "logoURI": "ipfs://Qme4Gz4WdCAuCmaZSMED7kQL8YyjVUmyFM5VHY2nUxAzai"
    },
    {
      "chainId": 1,
      "address": "0x0E192d382a36De7011F795Acc4391Cd302003606",
      "symbol": "FST",
      "name": "Futureswap",
      "decimals": 18,
      "logoURI": "ipfs://QmTxTqTehArrC7VjDzbgXqtmd5VQaD59sMRvCNiVnCbR5n"
    },
    {
      "chainId": 1,
      "address": "0x299698B4B44BD6d023981A7317798dEe12860834",
      "symbol": "NFP",
      "name": "New Frontier Presents",
      "decimals": 9,
      "logoURI": "ipfs://QmQSPb3Zhj4Dc2mS4GbZbUUSS5dXr8jayCB9WD3s5cvqu4"
    },
    {
      "chainId": 1,
      "address": "0xfDBc1aDc26F0F8f8606a5d63b7D3a3CD21c22B23",
      "symbol": "1WO",
      "name": "1World",
      "decimals": 8,
      "logoURI": "ipfs://QmeZcCDpg44XS7soXkizvzoLSWjTnX1ivTixztaJCB6ULM"
    },
    {
      "chainId": 56,
      "address": "0x2859e4544C4bB03966803b044A93563Bd2D0DD4D",
      "symbol": "SHIB",
      "name": "Shiba Inu",
      "decimals": 18,
      "logoURI": "ipfs://QmZGG16WF6T62rhJgY7yWExBNNaYo4CiXrdesdxnbfbYfR"
    },
    {
      "chainId": 10,
      "address": "0xFdb794692724153d1488CcdBE0C56c252596735F",
      "symbol": "LDO",
      "name": "Lido DAO",
      "decimals": 18,
      "logoURI": "ipfs://QmTdQtLaPqXoXbHgbjVgYbXbbukvQAsNZtzq9bs14oVknY"
    },
    {
      "chainId": 1,
      "address": "0xfec0cF7fE078a500abf15F1284958F22049c2C7e",
      "symbol": "ART",
      "name": "Maecenas",
      "decimals": 18,
      "logoURI": "ipfs://QmQzHwEULCqDGd3hCMxmxdh6U4HewxoWbUGZyRBeRxfAHV"
    },
    {
      "chainId": 1,
      "address": "0xde4EE8057785A7e8e800Db58F9784845A5C2Cbd6",
      "symbol": "DEXE",
      "name": "DeXe",
      "decimals": 18,
      "logoURI": "ipfs://QmZrmTvwVZFmjhZRBdjh1reCPtNenyaQhNS2cD4U18rd2B"
    },
    {
      "chainId": 1,
      "address": "0x1E8E29CA51363D923725aB9DaC73Bd7e9C440f71",
      "symbol": "MTAO",
      "name": "MEME TAO",
      "decimals": 9,
      "logoURI": "ipfs://QmcefEaa4R1xfDxkwBhbXMiG6qToaECB4fkZx1wosdDmEz"
    },
    {
      "chainId": 1,
      "address": "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",
      "symbol": "WBTC",
      "name": "Wrapped Bitcoin",
      "decimals": 8,
      "logoURI": "ipfs://QmW8TQjyF7y1BefmvtbFUuMzo6iPL3hmanNeRrb3CSrfuh"
    },
    {
      "chainId": 1,
      "address": "0xEd40834A13129509A89be39a9bE9C0E96A0DDd71",
      "symbol": "WARP",
      "name": "Warp Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmYt78dKoPA8toh5D9f9Eh6GfkdeaAVefeKTbe1NDTART7"
    },
    {
      "chainId": 137,
      "address": "0x8505b9d2254A7Ae468c0E9dd10Ccea3A837aef5c",
      "symbol": "COMP",
      "name": "Compound",
      "decimals": 18,
      "logoURI": "ipfs://QmWZSaKRTLqDfF9BDG5HYrgc5fbr9uq3ksHct8c5MfjYUu"
    },
    {
      "chainId": 1,
      "address": "0x5f98805A4E8be255a32880FDeC7F6728C6568bA0",
      "symbol": "LUSD",
      "name": "Liquity USD",
      "decimals": 18,
      "logoURI": "ipfs://QmPzBCxWo5xMA8Wif7wCQQmuZ5ajP5sw4JSHthMxvxY2uR"
    },
    {
      "chainId": 1,
      "address": "0xB8BAa0e4287890a5F79863aB62b7F175ceCbD433",
      "symbol": "SWRV",
      "name": "Swerve",
      "decimals": 18,
      "logoURI": "ipfs://QmRaX4hMrirv57aTbnfCNGUUdCm1bvXujSpLnqhUHs7pX7"
    },
    {
      "chainId": 1,
      "address": "0x96B0bF939D9460095C15251F71Fda11e41DcBddB",
      "symbol": "S",
      "name": "Sharpay",
      "decimals": 18,
      "logoURI": "ipfs://QmYaMEMqaVF6o4aWk175W7VULwVXU9orze8GFs71G1yiFQ"
    },
    {
      "chainId": 137,
      "address": "0x0000000000000000000000000000000000001010",
      "symbol": "MATIC",
      "name": "Polygon",
      "decimals": 18,
      "logoURI": "ipfs://QmcMPwSeDvVa1K8hXKPbU4diCwGC3BXYK4dsNtPNMVFHJQ"
    },
    {
      "chainId": 1,
      "address": "0x81AFa8ACa19d5693883B0B1e10ae1Ccaf2F42781",
      "symbol": "FOREVERUP",
      "name": "ForeverUp",
      "decimals": 9,
      "logoURI": "ipfs://QmXJarPqP2wXxx2xWKx3k9pywaqSDbtZ4ocguQr5KUKZuU"
    },
    {
      "chainId": 1,
      "address": "0x0488401c3F535193Fa8Df029d9fFe615A06E74E6",
      "symbol": "SRK",
      "name": "SparkPoint",
      "decimals": 18,
      "logoURI": "ipfs://Qma8YABwskCW9qzp7X1mbXiB9Smqb6Q7CNdbi5SwJq2vDE"
    },
    {
      "chainId": 1,
      "address": "0x00000100F2A2bd000715001920eB70D229700085",
      "symbol": "TCAD",
      "name": "TrueCAD",
      "decimals": 18,
      "logoURI": "ipfs://QmVQDTPJD36wAbynhUt8W4MJVoZKSbdVN9W58vFsJEwdYS"
    },
    {
      "chainId": 1,
      "address": "0xD64809f5F7d772D9112A6BD379De00A77188199E",
      "symbol": "LSILVER",
      "name": "Lyfe Silver",
      "decimals": 18,
      "logoURI": "ipfs://QmfYGbDaqvZrFyoysoFAgwNVfxFeeuqwQ3Y5PZYtz4NvS6"
    },
    {
      "chainId": 1,
      "address": "0xba100000625a3754423978a60c9317c58a424e3D",
      "symbol": "BAL",
      "name": "Balancer",
      "decimals": 18,
      "logoURI": "ipfs://QmYfge9JvkcP16d8RNETBTu4m54JirNH5mzwC8EBb17Dea"
    },
    {
      "chainId": 56,
      "address": "0x1D2F0da169ceB9fC7B3144628dB156f3F6c60dBE",
      "symbol": "XRP",
      "name": "XRP",
      "decimals": 18,
      "logoURI": "ipfs://QmQVRk5TGJWjTWmrsczSryDiDpXNiZc58VwyVVLB2tJUHi"
    },
    {
      "chainId": 1,
      "address": "0x66186008C1050627F979d464eABb258860563dbE",
      "symbol": "MDS",
      "name": "MediShares",
      "decimals": 18,
      "logoURI": "ipfs://QmZWhBuUCJdia2VyTBUL6TZ7i3YTs36eo6MRm3t154Jw3X"
    },
    {
      "chainId": 137,
      "address": "0xE3322702BEdaaEd36CdDAb233360B939775ae5f1",
      "symbol": "TRB",
      "name": "Tellor",
      "decimals": 18,
      "logoURI": "ipfs://QmWvmGB7NhEcfLrqCM6dsRozFytqY2wBC3ordycpzgjQqU"
    },
    {
      "chainId": 1,
      "address": "0x9c354503C38481a7A7a51629142963F98eCC12D0",
      "symbol": "OGV",
      "name": "Origin Dollar Governance",
      "decimals": 18,
      "logoURI": "ipfs://QmaA6TSeLEabCGFVWszBCsAn11H16TvjyhC8f71ZnAfKn9"
    },
    {
      "chainId": 56,
      "address": "0x28A8EceCdf311C0a71231775d6ff4B8481C4ef21",
      "symbol": "XVR",
      "name": "Xover",
      "decimals": 9,
      "logoURI": "ipfs://QmevaUu5Pw172RYsGib17REfz5VzdRorjctPnCec4MR8TD"
    },
    {
      "chainId": 1,
      "address": "0x40395044Ac3c0C57051906dA938B54BD6557F212",
      "symbol": "MGO",
      "name": "MobileGo",
      "decimals": 8,
      "logoURI": "ipfs://QmRDbRmBJNYcBJX4RCywnWRW1HgTGneQeZhJ8Tzy4ZRn6N"
    },
    {
      "chainId": 1,
      "address": "0x5d65D971895Edc438f465c17DB6992698a52318D",
      "symbol": "NAS",
      "name": "Nebulas",
      "decimals": 18,
      "logoURI": "ipfs://QmbjdykdhKo82z8H8KjxNWFwXr665FjCGurN6N4bR4Zmjb"
    },
    {
      "chainId": 1,
      "address": "0x6aEB95F06CDA84cA345c2dE0F3B7f96923a44f4c",
      "symbol": "BERRY",
      "name": "Rentberry",
      "decimals": 14,
      "logoURI": "ipfs://QmesEiNjwX5u36pqzqTpkzTaS8RWZn6JJegMbseQ5UEMeN"
    },
    {
      "chainId": 1,
      "address": "0xB987D48Ed8f2C468D52D6405624EADBa5e76d723",
      "symbol": "STBZ",
      "name": "Stabilize",
      "decimals": 18,
      "logoURI": "ipfs://QmPDKrXZyJrY2zTiSLjG5usyNZvgyy6HxC9Dj3wDQt4Tfo"
    },
    {
      "chainId": 1,
      "address": "0xE5F166c0D8872B68790061317BB6CcA04582C912",
      "symbol": "TFD",
      "name": "TE-FOOD",
      "decimals": 18,
      "logoURI": "ipfs://Qmf2Yi9T2bUU7W7d1DcAMGytGYZJwj3GbTn2TiMBwNZGiP"
    },
    {
      "chainId": 100,
      "address": "0xb90D6bec20993Be5d72A5ab353343f7a0281f158",
      "symbol": "DXD",
      "name": "DXdao",
      "decimals": 18,
      "logoURI": "ipfs://QmSwZkCFvsk7rKRdW8du2rzWBpFf4WWRaJ1jgXeUqcR3ve"
    },
    {
      "chainId": 1,
      "address": "0x14778860E937f509e651192a90589dE711Fb88a9",
      "symbol": "CYBER",
      "name": "CyberConnect",
      "decimals": 18,
      "logoURI": "ipfs://QmWsLPSKnBnhUzET5D5Y53QCL2j3HbPnQxssxtfjHF8Ahx"
    },
    {
      "chainId": 1,
      "address": "0x6be61833FC4381990e82D7D4a9F4c9B3F67eA941",
      "symbol": "HTB",
      "name": "Hotbit Token",
      "decimals": 18,
      "logoURI": "ipfs://QmXD8Zd75PjZEFSPgZ2vS6qyqmSXXNs8Ato4rNfipK8zsD"
    },
    {
      "chainId": 1,
      "address": "0xfb62AE373acA027177D1c18Ee0862817f9080d08",
      "symbol": "DPET",
      "name": "My DeFi Pet",
      "decimals": 18,
      "logoURI": "ipfs://QmSxaPY4voDhTwvu8MqLC4CXdXLimRXwCFcixqfQmjDQWY"
    },
    {
      "chainId": 1,
      "address": "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",
      "symbol": "UNI",
      "name": "Uniswap",
      "decimals": 18,
      "logoURI": "ipfs://QmXw3PFpzLkvEjSouZiUvBWqasrL8NxHoEDGt87MqsPmtV"
    },
    {
      "chainId": 1,
      "address": "0x1E26b3D07E57F453caE30F7DDd2f945f5bF3EF33",
      "symbol": "XCLR",
      "name": "ClearCoin",
      "decimals": 8,
      "logoURI": "ipfs://QmaWgK5mLag1qVyAX46hxfjjRiHNXrQq9cM3kPUq9mkj9p"
    },
    {
      "chainId": 1,
      "address": "0x1D4cCC31dAB6EA20f461d329a0562C1c58412515",
      "symbol": "TALAO",
      "name": "Talao",
      "decimals": 18,
      "logoURI": "ipfs://QmUL47fZLFqQwUcmHUhcxYFKfbZC1ubvF6XYwDpZ59HwJz"
    },
    {
      "chainId": 137,
      "address": "0x385Eeac5cB85A38A9a07A70c73e0a3271CfB54A7",
      "symbol": "GHST",
      "name": "Aavegotchi",
      "decimals": 18,
      "logoURI": "ipfs://QmNk1f63RgBJ1oWMwM13tAx78HBLwh3oVE9QR1Tf79tFCs"
    },
    {
      "chainId": 1,
      "address": "0x33c2DA7Fd5B125E629B3950f3c38d7f721D7B30D",
      "symbol": "SEAL",
      "name": "Seal Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmQA7CTqLbkMbpFejLJcSQxzA7vw3knsSZ7DGpH4s6evrK"
    },
    {
      "chainId": 1,
      "address": "0x6fe56C0bcdD471359019FcBC48863d6c3e9d4F41",
      "symbol": "PROPS",
      "name": "Props Token",
      "decimals": 18,
      "logoURI": "ipfs://QmR3hftpW1kLLqCM3R3n1tRARLuDeCYwL573bPEYuUnPiT"
    },
    {
      "chainId": 1,
      "address": "0x67c597624B17b16fb77959217360B7cD18284253",
      "symbol": "MARK",
      "name": "Benchmark Protocol",
      "decimals": 9,
      "logoURI": "ipfs://QmVbQg3qYs2qGvN9KdFK7dEQtMniXY4w5boryTz913BtpE"
    },
    {
      "chainId": 1,
      "address": "0x39C6b3e42d6A679d7D776778Fe880BC9487C2EDA",
      "symbol": "aKNC",
      "name": "Aave KNC",
      "decimals": 18,
      "logoURI": "ipfs://QmNhdckCZu5ihZ9oVVDiYGKZUMT1xpuoAMvfvyqDrv8z7U"
    },
    {
      "chainId": 137,
      "address": "0xE0339c80fFDE91F3e20494Df88d4206D86024cdF",
      "symbol": "ELON",
      "name": "Dogelon Mars",
      "decimals": 18,
      "logoURI": "ipfs://QmaHs61uW9nZYiHVSQuZgnQWBPSwNokcnNgZn7FGMhSHVk"
    },
    {
      "chainId": 1,
      "address": "0x2467AA6B5A2351416fD4C3DeF8462d841feeecEC",
      "symbol": "QBX",
      "name": "qiibee",
      "decimals": 18,
      "logoURI": "ipfs://QmZdMe97hEhuymSDRafGnNT5s1WR6W2rHszMFD6Zzz7fxr"
    },
    {
      "chainId": 1,
      "address": "0x436F0F3a982074c4a05084485D421466a994FE53",
      "symbol": "RTE",
      "name": "Rate3",
      "decimals": 18,
      "logoURI": "ipfs://QmT8JSaJ6PNdvHUucZuDJx9nA9iV2BuK4AhLjtqrDcLKyD"
    },
    {
      "chainId": 1,
      "address": "0xEeEeeeeEe2aF8D0e1940679860398308e0eF24d6",
      "symbol": "ETHV",
      "name": "Ethverse",
      "decimals": 18,
      "logoURI": "ipfs://QmRca5AkNCrU6aJBXcM6nS32ywFotKV9aWRBsBgB7pmV8Q"
    },
    {
      "chainId": 1,
      "address": "0xAFD870F32CE54EfdBF677466B612bf8ad164454B",
      "symbol": "iBNB",
      "name": "Synthetic Inverse Binance Coin",
      "decimals": 18,
      "logoURI": "ipfs://QmW2R8rhF9xEvAwWeUxo2mhaG4KqiBQTuDkWSpceUHP7ng"
    },
    {
      "chainId": 1,
      "address": "0xeF9Cd7882c067686691B6fF49e650b43AFBBCC6B",
      "symbol": "FNX",
      "name": "FinNexus",
      "decimals": 18,
      "logoURI": "ipfs://QmWCrRCg1J1z9R2BguhsJoFkvqra1iZFV2HSLAtnfRtcfU"
    },
    {
      "chainId": 1,
      "address": "0x362bc847A3a9637d3af6624EeC853618a43ed7D2",
      "symbol": "PRQ",
      "name": "PARSIQ",
      "decimals": 18,
      "logoURI": "ipfs://QmeAoT4dcbEaXbU3XtWKALQQcx5gRTgLVrfhszfXqCxhMV"
    },
    {
      "chainId": 1,
      "address": "0x5Cf04716BA20127F1E2297AdDCf4B5035000c9eb",
      "symbol": "NKN",
      "name": "NKN",
      "decimals": 18,
      "logoURI": "ipfs://QmaY3NdkWRaoo8x5pzuohkwqtVCGSFK172sJ7AxjSnA9MQ"
    },
    {
      "chainId": 1,
      "address": "0x24E89bDf2f65326b94E36978A7EDeAc63623DAFA",
      "symbol": "TKING",
      "name": "Tiger King Coin",
      "decimals": 18,
      "logoURI": "ipfs://QmRjABRn4VFXkDA8gcsc64yjrxeUwZzKujTpz9K63PxZYj"
    },
    {
      "chainId": 56,
      "address": "0xbA2aE424d960c26247Dd6c32edC70B295c744C43",
      "symbol": "DOGE",
      "name": "Dogecoin",
      "decimals": 8,
      "logoURI": "ipfs://QmYHueBwGTHStyjfZqQ83g1YQ1MxDtms7dv29x22MTtFUR"
    },
    {
      "chainId": 1,
      "address": "0x0D8775F648430679A709E98d2b0Cb6250d2887EF",
      "symbol": "BAT",
      "name": "Basic Attention Token",
      "decimals": 18,
      "logoURI": "ipfs://QmcE1QB66Hw6o27brVBvbHiR4EmiyWfpVxfhV4LNvDWL5B"
    },
    {
      "chainId": 1,
      "address": "0x9aeB50f542050172359A0e1a25a9933Bc8c01259",
      "symbol": "OIN",
      "name": "OIN Finance",
      "decimals": 8,
      "logoURI": "ipfs://QmemDSt71fz4AtfGo9TiXYTz6JY4VPZLM8okFLZpFwwtbQ"
    },
    {
      "chainId": 1,
      "address": "0x003e0af2916e598Fa5eA5Cb2Da4EDfdA9aEd9Fde",
      "symbol": "BSD",
      "name": "Basis Dollar",
      "decimals": 18,
      "logoURI": "ipfs://QmaSeb6XofaJuw4SNLueyG5J5vgbMeAnqiVjbedmGKB4PX"
    },
    {
      "chainId": 1,
      "address": "0x9E46A38F5DaaBe8683E10793b06749EEF7D733d1",
      "symbol": "NCT",
      "name": "PolySwarm",
      "decimals": 18,
      "logoURI": "ipfs://QmbPmSLsxqk2tjBwkpAUc6WEZcJrwWLe33PF34FBDVJFvu"
    },
    {
      "chainId": 1,
      "address": "0xD80F72a6558ec337E0d4CF76b8752B17FA770860",
      "symbol": "RWD",
      "name": "Rewards",
      "decimals": 18,
      "logoURI": "ipfs://Qmemj5biKik1bX2zxmnrT26hPkrfciUv6RZrgHwbam9zcG"
    },
    {
      "chainId": 1,
      "address": "0x00006100F7090010005F1bd7aE6122c3C2CF0090",
      "symbol": "TAUD",
      "name": "TrueAUD",
      "decimals": 18,
      "logoURI": "ipfs://QmX2EgpvnCLLUGGVCQBk1jNDJWY3gQ1FUa273BrfWYEfz3"
    },
    {
      "chainId": 1,
      "address": "0x9355372396e3F6daF13359B7b607a3374cc638e0",
      "symbol": "WHALE",
      "name": "WHALE",
      "decimals": 4,
      "logoURI": "ipfs://QmbxcpkL2nNyjXszvmxte15WyJmoykx5XA7kxnzbRN7Eeh"
    },
    {
      "chainId": 1,
      "address": "0x4575f41308EC1483f3d399aa9a2826d74Da13Deb",
      "symbol": "OXT",
      "name": "Orchid",
      "decimals": 18,
      "logoURI": "ipfs://QmWGLZYzVETzBV6vk1YeSkaFyaTQp2WSUTkuDm5sfWLGoA"
    },
    {
      "chainId": 1,
      "address": "0x6B4c7A5e3f0B99FCD83e9c089BDDD6c7FCe5c611",
      "symbol": "MM",
      "name": "Million",
      "decimals": 18,
      "logoURI": "ipfs://QmT11zD7MsKo1mGrjNXxWJJFyueQD8xwRf32BVBxDoSLb9"
    },
    {
      "chainId": 1,
      "address": "0x1F8A626883d7724DBd59eF51CBD4BF1Cf2016D13",
      "symbol": "STAK",
      "name": "Jigstack",
      "decimals": 18,
      "logoURI": "ipfs://QmXAibTyn9C6fBeYdawDXkvTjXPAcuJ5tfEE3LexXczMYx"
    },
    {
      "chainId": 1,
      "address": "0x7C5fF719a6c76fe643e9eCd0F11F146a2de05F14",
      "symbol": "GNSH",
      "name": "Ganesha Token",
      "decimals": 18,
      "logoURI": "ipfs://QmbEiY5WnTRrgFrtKinFGfc946GbBK2oDecLsj44CyeULN"
    },
    {
      "chainId": 1,
      "address": "0x990f341946A3fdB507aE7e52d17851B87168017c",
      "symbol": "STRONG",
      "name": "Strong",
      "decimals": 18,
      "logoURI": "ipfs://QmZbtrthpGiMSNcXkDgpJhmD8Ctet5JtAJ8vgvsA88sSxM"
    },
    {
      "chainId": 1,
      "address": "0x236d53148F83706C3d670064809577385f923a75",
      "symbol": "SHUSKY",
      "name": "Siberian Husky",
      "decimals": 9,
      "logoURI": "ipfs://QmZuzsYxZ4fbmNBPtXvwgrSaVz9umkh62RhrczWF76uLuo"
    },
    {
      "chainId": 1,
      "address": "0xd50c1746D835d2770dDA3703B69187bFfeB14126",
      "symbol": "iETC",
      "name": "Synthetic Inverse Ethereum Classic",
      "decimals": 18,
      "logoURI": "ipfs://QmQumUMVEtVHCpM3dwxfAt5WubGRKy4ankUHjy6fF8wAss"
    },
    {
      "chainId": 1,
      "address": "0x72e4f9F808C49A2a61dE9C5896298920Dc4EEEa9",
      "symbol": "BITCOIN",
      "name": "HarryPotterObamaSonic10Inu",
      "decimals": 8,
      "logoURI": "ipfs://QmZq6VNLg1aaHYNcKUDwWEGgbEC2SDCouasu6Cwn4RvV4P"
    },
    {
      "chainId": 1,
      "address": "0x57Ab1ec28D129707052df4dF418D58a2D46d5f51",
      "symbol": "sUSD",
      "name": "Synthetic US Dollars",
      "decimals": 18,
      "logoURI": "ipfs://QmdFHhBRXu4rp9NW7qBAdunM4HkbtaSR4D2EzEwFozXaD1"
    },
    {
      "chainId": 1,
      "address": "0x48FF53777F747cFB694101222a944dE070c15D36",
      "symbol": "IMP",
      "name": "Ether Kingdoms",
      "decimals": 7,
      "logoURI": "ipfs://QmYzULe8z71wvav2qLDZtFxB6yinrRiQiHBhfJeRBBZzBV"
    },
    {
      "chainId": 1,
      "address": "0x61107a409fFFe1965126aa456Af679719695C69C",
      "symbol": "UMI",
      "name": "Umi Digital",
      "decimals": 18,
      "logoURI": "ipfs://QmRmB9NdyQGocpmWVZkJEABSa2cFDatvnEetQyqfvzkZji"
    },
    {
      "chainId": 1,
      "address": "0x49d716DFe60b37379010A75329ae09428f17118d",
      "symbol": "plDai",
      "name": "Pool Dai",
      "decimals": 18,
      "logoURI": "ipfs://QmZLtsc4ctdFnPF7NgKmpuLo3Cc2RP6Ph8EgRkpGuG5ie4"
    },
    {
      "chainId": 1,
      "address": "0xC7a8B45E184138114E6085C82936A8Db93DD156a",
      "symbol": "MASK",
      "name": "MASK Vault",
      "decimals": 18,
      "logoURI": "ipfs://QmPs2By1jcxFHm8HKUaVxSbDVihfa2ZvhBqNGpjtzPB7rq"
    },
    {
      "chainId": 1,
      "address": "0x9f4F1C679FC8479Cd71482A8D8C88Dc60c1403f9",
      "symbol": "DAA",
      "name": "Double Ace",
      "decimals": 8,
      "logoURI": "ipfs://QmcfmdG6w3epZWDPY12kAzZmgWJbweyrpcAZArMz6j1VPZ"
    },
    {
      "chainId": 1,
      "address": "0x55696EfC7c9779d868Ac34aC6b4a4C5FeD61aC12",
      "symbol": "DSTR",
      "name": "Dynamic Supply Tracker",
      "decimals": 18,
      "logoURI": "ipfs://QmZ7nWXGx3q5tddhXxKgxE5e17m5fmYWuUmkT7q5KgCtmW"
    },
    {
      "chainId": 1,
      "address": "0xD478161C952357F05f0292B56012Cd8457F1cfbF",
      "symbol": "POLK",
      "name": "Polkamarkets",
      "decimals": 18,
      "logoURI": "ipfs://QmRz7vRdug8ZcKcMt2Ch6i4Vr3v4hmAGoWPEMUTUkFQ9Qk"
    },
    {
      "chainId": 1,
      "address": "0x34Be5b8C30eE4fDe069DC878989686aBE9884470",
      "symbol": "SENATE",
      "name": "SENATE",
      "decimals": 18,
      "logoURI": "ipfs://QmQ1femQVjaoTwL4N2513D5rx1dBoW7ZGRpnVqJdeWhwEf"
    },
    {
      "chainId": 1,
      "address": "0xF80D589b3Dbe130c270a69F1a69D050f268786Df",
      "symbol": "DAM",
      "name": "Datamine",
      "decimals": 18,
      "logoURI": "ipfs://QmdXNjxyrV2p3v8JapZ4VnVMmu8GNqDpsoCYk1KGfY6E72"
    },
    {
      "chainId": 1,
      "address": "0xFd2a8fA60Abd58Efe3EeE34dd494cD491dC14900",
      "symbol": "a3Crv",
      "name": "a3Curve",
      "decimals": 18,
      "logoURI": "ipfs://QmYwuAvfwoycX6nSG98tYVF1mg4J8eCpnM941NTtpSR3kK"
    },
    {
      "chainId": 1,
      "address": "0x5228a22e72ccC52d415EcFd199F99D0665E7733b",
      "symbol": "pBTC",
      "name": "pTokens BTC",
      "decimals": 18,
      "logoURI": "ipfs://QmQ64jVm7aBCQ16bSbTBZyL8AZKhHiA1BKRWRqXFL46tAe"
    },
    {
      "chainId": 1,
      "address": "0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D",
      "symbol": "renBTC",
      "name": "renBTC",
      "decimals": 8,
      "logoURI": "ipfs://QmchFjgxwBKwokrsRyTJhENAcFhLnBrEujtAeCvqEhoNB9"
    },
    {
      "chainId": 1,
      "address": "0xA823E6722006afe99E91c30FF5295052fe6b8E32",
      "symbol": "NEU",
      "name": "Neumark",
      "decimals": 18,
      "logoURI": "ipfs://QmPqPhFGsKydWqrU2cu8sRFApoE8d6BiWYTWqGn1eCJVnn"
    },
    {
      "chainId": 1,
      "address": "0xA9B1Eb5908CfC3cdf91F9B8B3a74108598009096",
      "symbol": "AUCTION",
      "name": "Bounce",
      "decimals": 18,
      "logoURI": "ipfs://QmP95V5miG6w9hNetFeTSbMpTmUZFbcc3fwHG5gp72QUuC"
    },
    {
      "chainId": 1,
      "address": "0x3F382DbD960E3a9bbCeaE22651E88158d2791550",
      "symbol": "GHST",
      "name": "Aavegotchi",
      "decimals": 18,
      "logoURI": "ipfs://QmNk1f63RgBJ1oWMwM13tAx78HBLwh3oVE9QR1Tf79tFCs"
    },
    {
      "chainId": 1,
      "address": "0x4463e6A3dEd0dBE3F6e15bC8420dFc55e5FeA830",
      "symbol": "TXA",
      "name": "TXA",
      "decimals": 18,
      "logoURI": "ipfs://QmdEGwAAccqRudQUZgeWr5RbYaE5DR5fWTe8CiAMpdun1C"
    },
    {
      "chainId": 1,
      "address": "0x9783B81438C24848f85848f8df31845097341771",
      "symbol": "COLLAR",
      "name": "Dog Collar",
      "decimals": 18,
      "logoURI": "ipfs://QmWpX1Fg49v73h4YR1XTSbK9gjuqTD6bddqP42aoqUPYBD"
    },
    {
      "chainId": 1,
      "address": "0x272F97b7a56a387aE942350bBC7Df5700f8a4576",
      "symbol": "aBAL",
      "name": "Aave BAL",
      "decimals": 18,
      "logoURI": "ipfs://QmW5aXqc8LGgiBnH997P5uqAq7zYhr1KSg4wVyJtiMj5TV"
    },
    {
      "chainId": 1,
      "address": "0xE452E6Ea2dDeB012e20dB73bf5d3863A3Ac8d77a",
      "symbol": "WCELO",
      "name": "Wrapped Celo",
      "decimals": 18,
      "logoURI": "ipfs://QmZuuzQUgfGxk433KFLQ8zEZ5ffrDSNDnGuoH2e2p2HdWN"
    },
    {
      "chainId": 1,
      "address": "0x8A1E3930FDe1f151471c368fDBb39F3F63A65B55",
      "symbol": "BEZ",
      "name": "Bezop",
      "decimals": 18,
      "logoURI": "ipfs://QmfDveL1p6GkZWAt879PKw1RRnBz7JwuPJPjZjYSaVEkr2"
    },
    {
      "chainId": 1,
      "address": "0xb2F7EB1f2c37645bE61d73953035360e768D81E6",
      "symbol": "COB",
      "name": "Cobinhood",
      "decimals": 18,
      "logoURI": "ipfs://QmUPWsYFf8i6WfME9DdgdMhbBfkQq92DFADtdtmzwob7Gn"
    },
    {
      "chainId": 1,
      "address": "0x2A537Fa9FFaea8C1A41D3C2B68a9cb791529366D",
      "symbol": "crDPI",
      "name": "Cream DefiPulse Index",
      "decimals": 8,
      "logoURI": "ipfs://QmfPUT1NHKeFFNnNePdLFj4s8GPG5vaHzHi5kPSN8Eypwd"
    },
    {
      "chainId": 1,
      "address": "0xb4d0FDFC8497AEF97d3c2892AE682eE06064A2BC",
      "symbol": "FMF",
      "name": "Formosa Financial",
      "decimals": 18,
      "logoURI": "ipfs://QmWNtE8cQba7Tb5ZSPkQsmAbD6QT3ZhQChEW7f3wV3ZRMV"
    },
    {
      "chainId": 1,
      "address": "0xE1Fc4455f62a6E89476f1072530C20CF1A0622dA",
      "symbol": "PHTR",
      "name": "Phuture",
      "decimals": 18,
      "logoURI": "ipfs://QmWvPPzHXfsXQfD5vCoGiy9LCWfazzuct7E8SejbzWfqd7"
    },
    {
      "chainId": 1,
      "address": "0x7fc2a3a998E8a80dA7F2962C5A8803b641711e6c",
      "symbol": "EPARA",
      "name": "Paralism-EPARA",
      "decimals": 9,
      "logoURI": "ipfs://QmWbCUjpe2tnuqo7NhhUomyLNxMxUvzvhV4kwSeJpahWno"
    },
    {
      "chainId": 1,
      "address": "0x0E29e5AbbB5FD88e28b2d355774e73BD47dE3bcd",
      "symbol": "HAKKA",
      "name": "Hakka Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmVirPaAizCmuCg8ZgsQpTPaBhSFcwdFjDGZtewhUjipmp"
    },
    {
      "chainId": 1,
      "address": "0x6810e776880C02933D47DB1b9fc05908e5386b96",
      "symbol": "GNO",
      "name": "Gnosis",
      "decimals": 18,
      "logoURI": "ipfs://QmWPGom11TShpqTs2sKytGCaYgnXDgK8RbXmhR83JLwzMY"
    },
    {
      "chainId": 1,
      "address": "0xd26fb114401Ec86887CD09F62eccd95fCf20B571",
      "symbol": "BCP",
      "name": "Bitcoin Platinums",
      "decimals": 8,
      "logoURI": "ipfs://QmdWuPy34VCBVci6bpYL2oQmjPnSnNLfNX18oyPKVmaFZd"
    },
    {
      "chainId": 1,
      "address": "0x763Fa6806e1acf68130D2D0f0df754C93cC546B2",
      "symbol": "LIT",
      "name": "Lition",
      "decimals": 18,
      "logoURI": "ipfs://QmXh8PagSs9rkACT6r8CBWqTvtM6dMZgcAz1MVTZH8PpzR"
    },
    {
      "chainId": 137,
      "address": "0x45c32fA6DF82ead1e2EF74d17b76547EDdFaFF89",
      "symbol": "FRAX",
      "name": "Frax",
      "decimals": 18,
      "logoURI": "ipfs://QmbE2HVRj4eL1pEivnRYTHB4WjuBfzyFzT7ZLDgA8oYYj8"
    },
    {
      "chainId": 137,
      "address": "0xD85d1e945766Fea5Eda9103F918Bd915FbCa63E6",
      "symbol": "CEL",
      "name": "Celsius",
      "decimals": 4,
      "logoURI": "ipfs://QmTpTS9D6SruWLzWADgQ5y9XoXxyaf8uEzFuWbhdbMdSB4"
    },
    {
      "chainId": 1,
      "address": "0xB983E01458529665007fF7E0CDdeCDB74B967Eb6",
      "symbol": "iETH",
      "name": "Fulcrum ETH iToken",
      "decimals": 18,
      "logoURI": "ipfs://QmcH39MQG9uLEsKWZgxAMpN1zJWwEfMxf1pPFreobiPMtZ"
    },
    {
      "chainId": 1,
      "address": "0x408e41876cCCDC0F92210600ef50372656052a38",
      "symbol": "REN",
      "name": "Ren",
      "decimals": 18,
      "logoURI": "ipfs://QmX7veANMSVWJNQVNiHcfahZiKSASiX7iVzS2C6ExQSeVV"
    },
    {
      "chainId": 1,
      "address": "0xB8c77482e45F1F44dE1745F52C74426C631bDD52",
      "symbol": "BNB",
      "name": "Binance Coin",
      "decimals": 18,
      "logoURI": "ipfs://QmaL9gA7a2kEYabFzHpWWf2b9f1UDeDihQon4hFmgtNesR"
    },
    {
      "chainId": 1,
      "address": "0xCbd0595113c173Ab7746347D0600D390a85a7EEa",
      "symbol": "ACE",
      "name": "Ascend",
      "decimals": 9,
      "logoURI": "ipfs://QmNcNDMaobMCgoxGg2ks8svsuvnVXRqyiGwR6fyikH5DJv"
    },
    {
      "chainId": 56,
      "address": "0x1F1C90aEb2fd13EA972F0a71e35c0753848e3DB0",
      "symbol": "CHEEL",
      "name": "Cheelee",
      "decimals": 18,
      "logoURI": "ipfs://Qmb4ydXnxVXDpcXDZec9ZGFg5BKqDQuudUirEdoyLphE89"
    },
    {
      "chainId": 1,
      "address": "0x3845badAde8e6dFF049820680d1F14bD3903a5d0",
      "symbol": "SAND",
      "name": "The Sandbox",
      "decimals": 18,
      "logoURI": "ipfs://Qmenn3oa4uM3St91dH4QUTpwT1ium5pwfcNiTjCywrzCLj"
    },
    {
      "chainId": 1,
      "address": "0x08f5a9235B08173b7569F83645d2c7fB55e8cCD8",
      "symbol": "TNT",
      "name": "Tierion",
      "decimals": 8,
      "logoURI": "ipfs://QmZr9T31z5XjN7MkN6rbudqGVX8k1kWmFkuWxMoYq7Qw3v"
    },
    {
      "chainId": 1,
      "address": "0xd49EFA7BC0D339D74f487959C573d518BA3F8437",
      "symbol": "SHLD",
      "name": "Shield Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmNw5uXqXj6dqDBn1ACppkgx6Dwsih7372bY7zV4eA7Zew"
    },
    {
      "chainId": 1,
      "address": "0x8CE9137d39326AD0cD6491fb5CC0CbA0e089b6A9",
      "symbol": "SXP",
      "name": "Swipe",
      "decimals": 18,
      "logoURI": "ipfs://QmcrAPgDkqroEd6mjoGaYsF18cAp7bM8ZKLMfL42qurv1P"
    },
    {
      "chainId": 1,
      "address": "0x97Aa8e14db0bc073cC7e2d42AC715427717d6042",
      "symbol": "SPUNK",
      "name": "SPUNK Vault",
      "decimals": 18,
      "logoURI": "ipfs://QmT5HicDCbyzPQdbUCJ41QAQhKv65VNQ1vzjY8W3DAfpaa"
    },
    {
      "chainId": 1,
      "address": "0x4DC3643DbC642b72C158E7F3d2ff232df61cb6CE",
      "symbol": "AMB",
      "name": "Ambrosus",
      "decimals": 18,
      "logoURI": "ipfs://QmeG8zDU4UvgyccdVQnyG2HTSq5kn8d9f4EqiPUaYDyPFF"
    },
    {
      "chainId": 1,
      "address": "0xBBbbCA6A901c926F240b89EacB641d8Aec7AEafD",
      "symbol": "LRC",
      "name": "Loopring",
      "decimals": 18,
      "logoURI": "ipfs://QmV2PzSr5cYpbZqZpnRK5uks8GePKmXYGyv8Zu7LRNbdy2"
    },
    {
      "chainId": 1,
      "address": "0x8CB924583681cbFE487A62140a994A49F833c244",
      "symbol": "SWAPP",
      "name": "Swapp",
      "decimals": 18,
      "logoURI": "ipfs://QmSTrWkt9DyFdQsWQkjZMBdEVHEewckZrGvkzZ6x8UeKER"
    },
    {
      "chainId": 1,
      "address": "0x97D0CfEB4FdE54B430307c9482d6f79C761Fe9B6",
      "symbol": "EPOCH",
      "name": "Epoch",
      "decimals": 18,
      "logoURI": "ipfs://QmPLKVGX5NXPo9f52HjKaBaXUhAxMmyJbSZRzW98qdQikC"
    },
    {
      "chainId": 1,
      "address": "0xdCD90C7f6324cfa40d7169ef80b12031770B4325",
      "symbol": "yvCurve-stETH",
      "name": "Curve stETH Pool yVault",
      "decimals": 18,
      "logoURI": "ipfs://QmZgahRFnsGgFQNJmhRpW6FxREj5DQtuikiYswkRA5gY3t"
    },
    {
      "chainId": 1,
      "address": "0x8414Db07a7F743dEbaFb402070AB01a4E0d2E45e",
      "symbol": "yvCurve-sBTC",
      "name": "Curve sBTC Pool yVault",
      "decimals": 18,
      "logoURI": "ipfs://Qmb23DnVPSAokuZJk83KF9XiiVgT3iB9dfDqrQ39pbHx8D"
    },
    {
      "chainId": 1,
      "address": "0xaC6Df26a590F08dcC95D5a4705ae8abbc88509Ef",
      "symbol": "aENJ",
      "name": "Aave ENJ",
      "decimals": 18,
      "logoURI": "ipfs://QmeSANptmBuCqiXtyCfaniuuUQJ9tobmWxzxTaFcLUjsco"
    },
    {
      "chainId": 1,
      "address": "0x42476F744292107e34519F9c357927074Ea3F75D",
      "symbol": "LOOM",
      "name": "Loom Network",
      "decimals": 18,
      "logoURI": "ipfs://QmTwKnc9313STRaDtWvQZ5Y5RbreaKxEX5thDWGwhDbc3n"
    },
    {
      "chainId": 100,
      "address": "0x4537e328Bf7e4eFA29D05CAeA260D7fE26af9D74",
      "symbol": "UNI",
      "name": "Uniswap",
      "decimals": 18,
      "logoURI": "ipfs://QmSxMQhDUfjuLVwThzkiijQkMH2JsjJiEoRX4DLxeWN1h7"
    },
    {
      "chainId": 1,
      "address": "0x3B3Ac5386837Dc563660FB6a0937DFAa5924333B",
      "symbol": "bCrv",
      "name": "bCurve",
      "decimals": 18,
      "logoURI": "ipfs://QmTd665kZGY7kN2hRD5Ubix1y8vbTNqpVkgFt5CgdKdv46"
    },
    {
      "chainId": 1,
      "address": "0xf0f9D895aCa5c8678f706FB8216fa22957685A13",
      "symbol": "CULT",
      "name": "Cult DAO",
      "decimals": 18,
      "logoURI": "ipfs://QmZ2SNcaKSXWjN1eYXw5zWfqtz73BQzwbwPqJdKJAZerza"
    },
    {
      "chainId": 1,
      "address": "0xE4f726Adc8e89C6a6017F01eadA77865dB22dA14",
      "symbol": "BCP",
      "name": "PieDAO Balanced Crypto Pie",
      "decimals": 18,
      "logoURI": "ipfs://QmT5HcWcsKuFY8c5Fa4PpMPL6BV5pjWB8KwWETSakZSa7K"
    },
    {
      "chainId": 1,
      "address": "0x3DA434F76226b9489ED4277eb6fDccdf03FF190e",
      "symbol": "ZION",
      "name": "ZION",
      "decimals": 18,
      "logoURI": "ipfs://QmZedF8s8kTASnXTUXGk6g1KXK1WopGaiSLsXAPptVNqG7"
    },
    {
      "chainId": 1,
      "address": "0xb339FcA531367067e98d7c4f9303Ffeadff7B881",
      "symbol": "ALD",
      "name": "Aludra Network",
      "decimals": 18,
      "logoURI": "ipfs://QmP2GPust8uZZJqcdHF23eRvB5toiu1zqmPWbbUZnanLai"
    },
    {
      "chainId": 1,
      "address": "0x4946Fcea7C692606e8908002e55A582af44AC121",
      "symbol": "FOAM",
      "name": "FOAM",
      "decimals": 18,
      "logoURI": "ipfs://Qmcxop712UqLd53NLxMVYnJmfVLVfN7ZpQtrzVnicyeyfb"
    },
    {
      "chainId": 1,
      "address": "0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32",
      "symbol": "LDO",
      "name": "Lido DAO",
      "decimals": 18,
      "logoURI": "ipfs://QmRnKWB78HG1kxPnWHr7QWAvp92AripDcXsrbdm2kR5dPS"
    },
    {
      "chainId": 1,
      "address": "0x32c319AC8d2f4A79b2fBDeA543473cC03a986AaF",
      "symbol": "AVENGER",
      "name": "AVENGER",
      "decimals": 9,
      "logoURI": "ipfs://QmaoR7tfPTFA3HSKPH4SsjBDrG3fKXJM4eZvqpeKUBUCQM"
    },
    {
      "chainId": 1,
      "address": "0x5f18C75AbDAe578b483E5F43f12a39cF75b973a9",
      "symbol": "yvUSDC",
      "name": "USDC yVault",
      "decimals": 6,
      "logoURI": "ipfs://QmRaBnw3sPymc1ACxyg7T6fXwAJqX3qFe4EYXDzw3pMoTn"
    },
    {
      "chainId": 1,
      "address": "0x814e0908b12A99FeCf5BC101bB5d0b8B5cDf7d26",
      "symbol": "MDT",
      "name": "Measurable Data Token",
      "decimals": 18,
      "logoURI": "ipfs://QmWZftLSRfGDNiGB4EnXQ8fF1uLNQFKPTcJ1biaoD7UHqp"
    },
    {
      "chainId": 1,
      "address": "0xCC4304A31d09258b0029eA7FE63d032f52e44EFe",
      "symbol": "SWAP",
      "name": "TrustSwap",
      "decimals": 18,
      "logoURI": "ipfs://QmSLDx9kmX7Nse913qSncfPrv4Q6H6UaTpZheJjHNDsY3L"
    },
    {
      "chainId": 1,
      "address": "0x53c4871322Bb47e7A24136fce291a6dcC832a294",
      "symbol": "WLTC",
      "name": " Wrapped Litecoin",
      "decimals": 18,
      "logoURI": "ipfs://QmPAhZD8aEpQuHsNaserL3vHqGDaojFY1r3bRbqVFfrwhv"
    },
    {
      "chainId": 1,
      "address": "0xcBc1065255cBc3aB41a6868c22d1f1C573AB89fd",
      "symbol": "CRETH2",
      "name": "Cream ETH 2",
      "decimals": 18,
      "logoURI": "ipfs://QmWwemSuwVacr5orYXi7Du6pWQNh17wV1rqbmxpJr28Juo"
    },
    {
      "chainId": 1,
      "address": "0xD7EFB00d12C2c13131FD319336Fdf952525dA2af",
      "symbol": "XPR",
      "name": "XPR Network",
      "decimals": 4,
      "logoURI": "ipfs://QmczGHjAz5TBonjAuMaaWM8rdHBSKBVj8QhxnAvEq5qF3m"
    },
    {
      "chainId": 1,
      "address": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
      "symbol": "stETH",
      "name": "Staked Ether",
      "decimals": 18,
      "logoURI": "ipfs://QmXmFBTH2DnBUnfyMvkNEJPLzkmWWmraY8rPDzQc5LbbM3"
    },
    {
      "chainId": 1,
      "address": "0x155040625D7ae3e9caDA9a73E3E44f76D3Ed1409",
      "symbol": "REVO",
      "name": "Revomon",
      "decimals": 18,
      "logoURI": "ipfs://QmT7vRUrKz8TsNQDgrpyG37Wbm3faSKXrf5V5uSJZAMMhF"
    },
    {
      "chainId": 1,
      "address": "0x2de72aDa48BDF7Bac276256D3F016fE058490C34",
      "symbol": "FLOKI",
      "name": "Floki Inu",
      "decimals": 9,
      "logoURI": "ipfs://QmYPJNZqcS8vKiEVT46Z4d2SyupA14uCeZspjjrQdJusXX"
    },
    {
      "chainId": 1,
      "address": "0xd9d01D4Cb824219A8F482a0FAd479cB971Fd0628",
      "symbol": "ENTRC",
      "name": "EnterCoin",
      "decimals": 8,
      "logoURI": "ipfs://QmQBeu98iSzp6kdeaZupyriJ2ATzBVqkDaDjhyk3GKEEsG"
    },
    {
      "chainId": 1,
      "address": "0x6A22e5e94388464181578Aa7A6B869e00fE27846",
      "symbol": "sXAG",
      "name": "Synthetic Silver Ounce",
      "decimals": 18,
      "logoURI": "ipfs://QmcRBVUVDxvSgaxfmr9g9rtxa1KvXGYdbXe1agKccDKRX4"
    },
    {
      "chainId": 1,
      "address": "0xd4c435F5B09F855C3317c8524Cb1F586E42795fa",
      "symbol": "CND",
      "name": "Cindicator",
      "decimals": 18,
      "logoURI": "ipfs://QmWYuHJdFmQ5bum7Q6gop2WAGPXMHSw9LDJXn3fcYU3qPk"
    },
    {
      "chainId": 1,
      "address": "0x0557E0d15aeC0b9026dD17aA874fDf7d182A2cEB",
      "symbol": "CFXQ",
      "name": "CFX Quantum",
      "decimals": 6,
      "logoURI": "ipfs://QmXt4SvqcxYHo5vcLZPLCvANV5MThRFUCy1gxbEAZkto3d"
    },
    {
      "chainId": 1,
      "address": "0xA01199c61841Fce3b3daFB83FeFC1899715c8756",
      "symbol": "CIRUS",
      "name": "Cirus",
      "decimals": 18,
      "logoURI": "ipfs://Qmc3EMxMCuAUZ7DfVNRLH6P9vim83mB1zy7m9XcWRBGhy8"
    },
    {
      "chainId": 1,
      "address": "0x0202Be363B8a4820f3F4DE7FaF5224fF05943AB1",
      "symbol": "UFT",
      "name": "UniLend Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmdV8s7tXyepQ2zNTqbfiShTJ9rMnFbn6Wxqg86FwrrQ4L"
    },
    {
      "chainId": 137,
      "address": "0x03cf5d93cA7c70Ce0A21a09F4D70779D2c66B25A",
      "symbol": "JMPT",
      "name": "JumpToken",
      "decimals": 18,
      "logoURI": "ipfs://QmZnPm3t5ECmafB4Ppiu5aH8Rd8XDirRBe9czovVoUiM5c"
    },
    {
      "chainId": 1,
      "address": "0xAf91E8aFbe87642dC628786188a54B78580A4d76",
      "symbol": "FOY",
      "name": "Fund Of Yours",
      "decimals": 18,
      "logoURI": "ipfs://QmZfB8yJwiAaHMpbEQDXG13i8SQXFbNxffvjdfRYwszbdK"
    },
    {
      "chainId": 100,
      "address": "0x63e62989D9EB2d37dfDB1F93A22f063635b07d51",
      "symbol": "MIVA",
      "name": "Minerva Wallet",
      "decimals": 18,
      "logoURI": "ipfs://QmX7kvDt6F32tJifxDPDs9aymAnAzE9b46g4jgzahgJrRn"
    },
    {
      "chainId": 1,
      "address": "0x6fDb90535C09B82825e38D41edF5e66211D4B442",
      "symbol": "MAGNET",
      "name": "Yield Magnet",
      "decimals": 18,
      "logoURI": "ipfs://QmfCBEHud3xA2sXUiWZpa5nXpXJ1YGEjF5gFYTXRsrukWk"
    },
    {
      "chainId": 1,
      "address": "0xFF0a024B66739357c4ED231fB3DBC0c8C22749F5",
      "symbol": "BWRX",
      "name": "Binance Wrapped WRX",
      "decimals": 8,
      "logoURI": "ipfs://QmQVQSDMsnet1RBzrbERWzuaZKLVHrDDVcDjhuHgPckz1Y"
    },
    {
      "chainId": 1,
      "address": "0xD692ac3245bb82319A31068D6B8412796eE85d2c",
      "symbol": "crHUSD",
      "name": "Cream HUSD",
      "decimals": 8,
      "logoURI": "ipfs://QmcMp5f4csYd6GNBKEYvzBJbgpUawJyCRpsKtiJ2RT94LV"
    },
    {
      "chainId": 1,
      "address": "0xe2f2a5C287993345a840Db3B0845fbC70f5935a5",
      "symbol": "mUSD",
      "name": "mStable USD",
      "decimals": 18,
      "logoURI": "ipfs://QmPLntQBAPgByTpFCYarAsmaNmWdsQ5Ta7hQPf1hVDqsz7"
    },
    {
      "chainId": 1,
      "address": "0xD13c7342e1ef687C5ad21b27c2b65D772cAb5C8c",
      "symbol": "UOS",
      "name": "Ultra",
      "decimals": 4,
      "logoURI": "ipfs://Qme6hkk13dDrU6tEyMkfXHUAfSctauxmbN1VUs4HbMYR1s"
    },
    {
      "chainId": 1,
      "address": "0xA4Bdb11dc0a2bEC88d24A3aa1E6Bb17201112eBe",
      "symbol": "USDS",
      "name": "Stably USD",
      "decimals": 6,
      "logoURI": "ipfs://QmZdrfQMkDRGBAgfbYvPezUp4f5RpEkA5iNi6XYwPCcaDQ"
    },
    {
      "chainId": 1,
      "address": "0x61fd1c62551850D0c04C76FcE614cBCeD0094498",
      "symbol": "IDK",
      "name": "IDK",
      "decimals": 8,
      "logoURI": "ipfs://QmPEi8VBTLLwgBJ56HnAxYxKc46aPcNouqhHeG6w9BfACU"
    },
    {
      "chainId": 137,
      "address": "0x2e1AD108fF1D8C782fcBbB89AAd783aC49586756",
      "symbol": "TUSD",
      "name": "TrueUSD",
      "decimals": 18,
      "logoURI": "ipfs://QmdcuKBFVn8KEoN6QW7mmGgd38dtF4aL6qTGTqMiDeQfRz"
    },
    {
      "chainId": 1,
      "address": "0x24DCc881E7Dd730546834452F21872D5cb4b5293",
      "symbol": "XD",
      "name": "Data Transaction Token",
      "decimals": 18,
      "logoURI": "ipfs://QmUMwVxeAMKV7VsSC6Puj1qTNZWdztMr18ENYBgQiohdiU"
    },
    {
      "chainId": 42161,
      "address": "0x13Ad51ed4F1B7e9Dc168d8a00cB3f4dDD85EfA60",
      "symbol": "LDO",
      "name": "Lido DAO",
      "decimals": 18,
      "logoURI": "ipfs://QmTdQtLaPqXoXbHgbjVgYbXbbukvQAsNZtzq9bs14oVknY"
    },
    {
      "chainId": 1,
      "address": "0x55296f69f40Ea6d20E478533C15A6B08B654E758",
      "symbol": "XYO",
      "name": "XYO",
      "decimals": 18,
      "logoURI": "ipfs://QmeESPGkF7qQzsCyRkxWSNtvrNNWCDjqZ2eQFuate4cWRR"
    },
    {
      "chainId": 1,
      "address": "0x2b6fF53Fc2493CcD5202D80a6C439741414C5Ff2",
      "symbol": "TWEE",
      "name": "Tweebaa",
      "decimals": 18,
      "logoURI": "ipfs://QmVSqL4w89JgfVJkSzq2rSi7iMppYYLXa4ZZe1uYs9aHM1"
    },
    {
      "chainId": 1,
      "address": "0x2C974B2d0BA1716E644c1FC59982a89DDD2fF724",
      "symbol": "VIB",
      "name": "Viberate",
      "decimals": 18,
      "logoURI": "ipfs://QmXhYPBSAaUiRym9GyGMM1ZxMWBx8R7r5ATMh3fjZjC9G1"
    },
    {
      "chainId": 1,
      "address": "0xb753428af26E81097e7fD17f40c88aaA3E04902c",
      "symbol": "SFI",
      "name": "saffron.finance",
      "decimals": 18,
      "logoURI": "ipfs://QmUXAQXih7g6pEgQVDrx5GfQAP2iKx6rJ3f2am9ZWTXNfo"
    },
    {
      "chainId": 1,
      "address": "0x4946583c5b86E01cCD30c71a05617D06E3E73060",
      "symbol": "PTON",
      "name": "Foresting",
      "decimals": 18,
      "logoURI": "ipfs://QmTQe2oheVbSuhkhdX4R6Lcdhn3yvXjNXjVkyL31YLRwWk"
    },
    {
      "chainId": 1,
      "address": "0xFA2562da1Bba7B954f26C74725dF51fb62646313",
      "symbol": "ASSY",
      "name": "ASSY Index",
      "decimals": 18,
      "logoURI": "ipfs://QmWsykkkGwZpy5ZxNGavbRExrFKcn1iRDhKE8LLYQtiPTv"
    },
    {
      "chainId": 1,
      "address": "0x70c621f949b6556c4545707a2d5d73A776b98359",
      "symbol": "SKCH",
      "name": "Skychain",
      "decimals": 6,
      "logoURI": "ipfs://QmNw6N4nrjczfXhSUmD3kGFnuMnmmWLqkiBGxoJewFUJLs"
    },
    {
      "chainId": 1,
      "address": "0xB8C3B7A2A618C552C23B1E4701109a9E756Bab67",
      "symbol": "yv1INCH",
      "name": "1INCH yVault",
      "decimals": 18,
      "logoURI": "ipfs://Qmb29UqaYaMcEeZr2WfmW3v9zfEDBa8hcACEWHmR3G69aD"
    },
    {
      "chainId": 1,
      "address": "0x595832F8FC6BF59c85C527fEC3740A1b7a361269",
      "symbol": "POWR",
      "name": "Power Ledger",
      "decimals": 6,
      "logoURI": "ipfs://QmQgXguskPqfnmyTzphkWQQtSLASTiqkVG4tL64dPiV1Bz"
    },
    {
      "chainId": 137,
      "address": "0x9c2C5fd7b07E95EE044DDeba0E97a665F142394f",
      "symbol": "1INCH",
      "name": "1inch Network",
      "decimals": 18,
      "logoURI": "ipfs://QmdUjFYL2izDVe4PLKArg7GtoHmsSqX6Bcsv9fmaVMcbLF"
    },
    {
      "chainId": 1,
      "address": "0xaF4DcE16Da2877f8c9e00544c93B62Ac40631F16",
      "symbol": "MTH",
      "name": "Monetha",
      "decimals": 5,
      "logoURI": "ipfs://QmSbXe9TsvGZLuCHZvH8oj845NjGCRn6WcBcVY74uqNYcf"
    },
    {
      "chainId": 100,
      "address": "0x1509706a6c66CA549ff0cB464de88231DDBe213B",
      "symbol": "AURA",
      "name": "Aura Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmeFwBoJY8mMLCiyc6EDqoUgbZRrjvga8cC7gMdgnbx1vJ"
    },
    {
      "chainId": 1,
      "address": "0x557B933a7C2c45672B610F8954A3deB39a51A8Ca",
      "symbol": "REVV",
      "name": "REVV",
      "decimals": 18,
      "logoURI": "ipfs://QmPRMgpp7FGfU4Tebx9W4uNTGJXaZKzrrzzn7op9C6Ctvd"
    },
    {
      "chainId": 1,
      "address": "0x6C2adC2073994fb2CCC5032cC2906Fa221e9B391",
      "symbol": "DPY",
      "name": "Delphy",
      "decimals": 18,
      "logoURI": "ipfs://QmfGb7KnEX3yrV4jWWwppNjTE9aLJbcfVUVEEd2FTnHvmj"
    },
    {
      "chainId": 137,
      "address": "0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359",
      "symbol": "USDC",
      "name": "USD Coin",
      "decimals": 6,
      "logoURI": "ipfs://QmUQp1wZzr4UREn4AVLkKH5GbwpUCwf9w5VQQJeh1bmThJ"
    },
    {
      "chainId": 100,
      "address": "0x0116e28B43A358162B96f70B4De14C98A4465f25",
      "symbol": "UNCX",
      "name": "UNCX Network",
      "decimals": 18,
      "logoURI": "ipfs://QmR3EL7BBuw64gNiebFSq6i4BcysGuB83zL7VWBuSWkC1w"
    },
    {
      "chainId": 137,
      "address": "0xa3Fa99A148fA48D14Ed51d610c367C61876997F1",
      "symbol": "MIMATIC",
      "name": "MAI",
      "decimals": 18,
      "logoURI": "ipfs://Qmf7QpnQj6bj4Aa5YWJKjK5FbrsvxmAy22YSgqczX4pejm"
    },
    {
      "chainId": 1,
      "address": "0xD46bA6D942050d489DBd938a2C909A5d5039A161",
      "symbol": "AMPL",
      "name": "Ampleforth",
      "decimals": 9,
      "logoURI": "ipfs://QmdbipJGgq8hX5BQc9pEam84QVc7JCBxhKnMCfEFPrF9qC"
    },
    {
      "chainId": 1,
      "address": "0x71F85B2E46976bD21302B64329868fd15eb0D127",
      "symbol": "AXN",
      "name": "Axion",
      "decimals": 18,
      "logoURI": "ipfs://QmVAsSTJbWUbHEQEwABZhgE6NtanmZYVmTtdxjE4Tmczve"
    },
    {
      "chainId": 1,
      "address": "0xAa9D866666C2A3748d6B23Ff69E63E52f08d9AB4",
      "symbol": "FMTA",
      "name": "Fundamenta",
      "decimals": 18,
      "logoURI": "ipfs://QmahbtgXyoTZj69LU5pSjBkqYgiswQwHTc2sFP44mbU211"
    },
    {
      "chainId": 1,
      "address": "0x0F4CA92660Efad97a9a70CB0fe969c755439772C",
      "symbol": "LEV",
      "name": "Leverj",
      "decimals": 9,
      "logoURI": "ipfs://QmXzrpT6ewm2kCP1uEAcF77bGogj1ds6Kh2fa22JsWptBw"
    },
    {
      "chainId": 1,
      "address": "0xf278c1CA969095ffddDED020290cf8B5C424AcE2",
      "symbol": "RUFF",
      "name": "Ruff",
      "decimals": 18,
      "logoURI": "ipfs://QmTViNWMo9GheMCBVH69EmAzwdafN2tCtru9g7Hpv3ZT2q"
    },
    {
      "chainId": 1,
      "address": "0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6",
      "symbol": "SKRT",
      "name": "Sekuritance",
      "decimals": 18,
      "logoURI": "ipfs://QmX9DS3kMfSCBa1hbKwpouLw8RqV9GtC9kcZuCKRuuXVku"
    },
    {
      "chainId": 1,
      "address": "0xaAAf91D9b90dF800Df4F55c205fd6989c977E73a",
      "symbol": "TKN",
      "name": "Monolith",
      "decimals": 8,
      "logoURI": "ipfs://QmV1hU6mYPV1vDGtopYv1Mgrs27WGncitUzGeDem6p8VVB"
    },
    {
      "chainId": 1,
      "address": "0x08c32b0726C5684024ea6e141C50aDe9690bBdcc",
      "symbol": "STOS",
      "name": "Stratos",
      "decimals": 18,
      "logoURI": "ipfs://QmV5xdGQYxMCvX9GVZiBCPKtuN4yBPDBEEuCTbDYhK2xhV"
    },
    {
      "chainId": 56,
      "address": "0xe4Cc45Bb5DBDA06dB6183E8bf016569f40497Aa5",
      "symbol": "GAL",
      "name": "Galxe",
      "decimals": 18,
      "logoURI": "ipfs://Qmbmw5JewVsNkzb2hfMgEgn9X19wejADFyKun8ef2KQqaH"
    },
    {
      "chainId": 100,
      "address": "0xB714654e905eDad1CA1940b7790A8239ece5A9ff",
      "symbol": "TUSD",
      "name": "TrueUSD",
      "decimals": 18,
      "logoURI": "ipfs://QmdcuKBFVn8KEoN6QW7mmGgd38dtF4aL6qTGTqMiDeQfRz"
    },
    {
      "chainId": 1,
      "address": "0xef3A930e1FfFFAcd2fc13434aC81bD278B0ecC8d",
      "symbol": "FIS",
      "name": "StaFi",
      "decimals": 18,
      "logoURI": "ipfs://QmfXhahJUpGT8RJ41biy3SJuvAUVEQYo5WKqbaCBY4Zuty"
    },
    {
      "chainId": 1,
      "address": "0x37A15C92e67686aA268df03d4C881A76340907E8",
      "symbol": "PIXIU",
      "name": "Pixiu Finance",
      "decimals": 0,
      "logoURI": "ipfs://QmZyK5aCZCGu9VMoQMnYL29WgbpWfacaF1gi6YMT44YskR"
    },
    {
      "chainId": 1,
      "address": "0x73D9E335669462Cbdd6aa3AdaFe9efeE86a37Fe9",
      "symbol": "DAIQ",
      "name": "Daiquilibrium",
      "decimals": 18,
      "logoURI": "ipfs://QmW7LNmm8a8v3zBZJLkTRdnMxcDZ6rYw8vjjFipNkrbSJB"
    },
    {
      "chainId": 1,
      "address": "0x9e3319636e2126e3c0bc9e3134AEC5e1508A46c7",
      "symbol": "UTNP",
      "name": "Universa",
      "decimals": 18,
      "logoURI": "ipfs://QmVC73XpDUb5ohCoUKjsTCiqgAywWpqUooBZWDLf3HdfEd"
    },
    {
      "chainId": 1,
      "address": "0x85516e8862aB543EA15972B7809256efEC0696ea",
      "symbol": "ROCK",
      "name": "ROCK",
      "decimals": 18,
      "logoURI": "ipfs://QmeuyJjx6MYYZAc5Uu64dz5yjZV2aZM6d13bcCQRDuH4bY"
    },
    {
      "chainId": 1,
      "address": "0xEd025A9Fe4b30bcd68460BCA42583090c2266468",
      "symbol": "RPC",
      "name": "Ripio Coin",
      "decimals": 18,
      "logoURI": "ipfs://QmUvCk5SEGzozDoR5NjksPjoUVR6oEMdDHuh72kUkSRbMA"
    },
    {
      "chainId": 100,
      "address": "0x71850b7E9Ee3f13Ab46d67167341E4bDc905Eef9",
      "symbol": "HNY",
      "name": "Honey",
      "decimals": 18,
      "logoURI": "ipfs://QmYxsVgovmspp3BwuSUrRyicW2XwnVy1JbQnHkEdy4YsGH"
    },
    {
      "chainId": 1,
      "address": "0xf05a9382A4C3F29E2784502754293D88b835109C",
      "symbol": "REX",
      "name": "imbrex",
      "decimals": 18,
      "logoURI": "ipfs://QmWRcXy5DZrfiCtSPg9VFAPrnc5ZUgXHYGm4QeBwKgka3g"
    },
    {
      "chainId": 1,
      "address": "0xEb029507d3e043DD6C87F2917C4E82B902c35618",
      "symbol": "sCOMP",
      "name": "Synthetic Compound",
      "decimals": 18,
      "logoURI": "ipfs://QmUcSJ1XKmSEcir989LwNMoL5LTmcGgzQENjmQTVCQiBjz"
    },
    {
      "chainId": 1,
      "address": "0xB4272071eCAdd69d933AdcD19cA99fe80664fc08",
      "symbol": "XCHF",
      "name": "CryptoFranc",
      "decimals": 18,
      "logoURI": "ipfs://QmVLshQxKAgJ29ixYCpXy9zvd5nvdUqWYYV5GtJsT9kSzy"
    },
    {
      "chainId": 1,
      "address": "0x49f4592E641820e928F9919Ef4aBd92a719B4b49",
      "symbol": "iSUSD",
      "name": "Fulcrum sUSD iToken",
      "decimals": 18,
      "logoURI": "ipfs://Qmdt4bG2x93U8V85PQAithCMv6H9gTco48JDAEDfR76L7u"
    },
    {
      "chainId": 1,
      "address": "0x780116D91E5592E58a3b3c76A351571b39abCEc6",
      "symbol": "BOXX",
      "name": "Blockparty",
      "decimals": 15,
      "logoURI": "ipfs://QmNqw7dvT6Pda5eAKevWEZwx9uEfqPVyV3V9jbHXHdmtu6"
    },
    {
      "chainId": 1,
      "address": "0x1563D521ba309e2Ad9f4aFfD6f4dE9759E8d4F21",
      "symbol": "VNX",
      "name": "VisionX",
      "decimals": 18,
      "logoURI": "ipfs://QmfH8AgkKh7No1yweNDsXFXwNwHYoVVXv6QUV4HTFVFZVM"
    },
    {
      "chainId": 56,
      "address": "0xDf7952B35f24aCF7fC0487D01c8d5690a60DBa07",
      "symbol": "PB",
      "name": "Pancake Bunnies",
      "decimals": 0,
      "logoURI": "ipfs://QmVVhGQCsvNzH3mP6ZbHGoiMmcAAwFWiUSo2JzYxTs1LDw"
    },
    {
      "chainId": 1,
      "address": "0x4EbE70CB942D5AF0A18b9126762637e7098Ff5fD",
      "symbol": "G",
      "name": "G Revolution",
      "decimals": 9,
      "logoURI": "ipfs://QmYHXZuyUJpwyfo1e6UwPp3CgkegvsX3HVohfTjBfDrUR4"
    },
    {
      "chainId": 1,
      "address": "0xd957E08ac5421E2C28510586B57d095E5094836a",
      "symbol": "VTX",
      "name": "VorteX Network",
      "decimals": 18,
      "logoURI": "ipfs://QmY1dyHuc56piABqqEYexKxGbptkjMoyPW7BunN6tjhWJR"
    },
    {
      "chainId": 1,
      "address": "0xa0246c9032bC3A600820415aE600c6388619A14D",
      "symbol": "FARM",
      "name": "Harvest Finance",
      "decimals": 18,
      "logoURI": "ipfs://Qmd2Ub6FQEU8G8d9CPwsskqyfccQrTRMNCpaAdrKC5H6SE"
    },
    {
      "chainId": 1,
      "address": "0xbBC455cb4F1B9e4bFC4B73970d360c8f032EfEE6",
      "symbol": "sLINK",
      "name": "Synthetic Chainlink",
      "decimals": 18,
      "logoURI": "ipfs://QmekS5oTKi7GimHcCk8iX9GjRNfnGt3NEaWv8VQe7EJTdp"
    },
    {
      "chainId": 1,
      "address": "0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39",
      "symbol": "HEX",
      "name": "HEX",
      "decimals": 8,
      "logoURI": "ipfs://QmNVqEMueiS6YaoFm7ZhkTGw1F1xKTqz9YoxFPiHr2c6VP"
    },
    {
      "chainId": 1,
      "address": "0xFbC4f3f645C4003a2E4F4e9b51077d2DaA9a9341",
      "symbol": "ZEDXION",
      "name": "ZEDXION",
      "decimals": 18,
      "logoURI": "ipfs://QmYAc8hYn8A3yQGtsLyFizexFkNNtcaYP3yVhhijTqU4R2"
    },
    {
      "chainId": 1,
      "address": "0x4F9254C83EB525f9FCf346490bbb3ed28a81C667",
      "symbol": "CELR",
      "name": "Celer Network",
      "decimals": 18,
      "logoURI": "ipfs://QmVTxqkF5viA8xYcanFQJLyir4bpLX8iGXS39MrfVV7yfj"
    },
    {
      "chainId": 1,
      "address": "0x8E870D67F660D95d5be530380D0eC0bd388289E1",
      "symbol": "USDP",
      "name": "Pax Dollar",
      "decimals": 18,
      "logoURI": "ipfs://QmerxAPnW2PWxDejrLRU2aFX9NCJgEMGdHebGXoS2jHC3c"
    },
    {
      "chainId": 1,
      "address": "0x47da42696A866CDC61A4C809A515500a242909C1",
      "symbol": "BIT",
      "name": "BitRewards",
      "decimals": 18,
      "logoURI": "ipfs://QmZPAVEkwydtCdnM25jU9Mpv7idqpDPHiU9HZGBRbtn5fn"
    },
    {
      "chainId": 1,
      "address": "0x41e5560054824eA6B0732E656E3Ad64E20e94E45",
      "symbol": "CVC",
      "name": "Civic",
      "decimals": 8,
      "logoURI": "ipfs://QmZuZz7KAtnByuizThmeDC7hkH2oF2kPxp35Xp7FXYpADi"
    },
    {
      "chainId": 1,
      "address": "0xF5238462E7235c7B62811567E63Dd17d12C2EAA0",
      "symbol": "CGT",
      "name": "CACHE Gold",
      "decimals": 8,
      "logoURI": "ipfs://QmZ5ngH3qbdGvGRsTKYfo1oeNdtcpyidqZk1zuFCSDhoSX"
    },
    {
      "chainId": 1,
      "address": "0x7DD9c5Cba05E151C895FDe1CF355C9A1D5DA6429",
      "symbol": "GLM",
      "name": "Golem",
      "decimals": 18,
      "logoURI": "ipfs://QmTXdjxTZjiPgtBDArBu4qRWRLPyG7UqF9wyXyPM3qYu9Q"
    },
    {
      "chainId": 1,
      "address": "0xC343f099d3E41aA5C1b59470450e21E92E2d840b",
      "symbol": "VME",
      "name": "VeriME",
      "decimals": 18,
      "logoURI": "ipfs://QmcRDTc2hoJN2aU2gLu7ouXE9h6Dyj99TKZfUxiNW8wA6Q"
    },
    {
      "chainId": 1,
      "address": "0x5919DeA604631016c15c805e3D948A0384879892",
      "symbol": "PEEP$",
      "name": "The Peoples Coin",
      "decimals": 9,
      "logoURI": "ipfs://QmTCQbjCmuBBjR6yJzBwE5Hyz1S7okBAPdX7PCajabajGk"
    },
    {
      "chainId": 1,
      "address": "0x927402ab67c0CDA3c187E9DFE34554AC581441f2",
      "symbol": "SAITABIT",
      "name": "SaitaBit",
      "decimals": 18,
      "logoURI": "ipfs://QmerW9zrozMvYqf1x2J435oQMw21nLLFNfag2i75aNQa7b"
    },
    {
      "chainId": 1,
      "address": "0x4CC19356f2D37338b9802aa8E8fc58B0373296E7",
      "symbol": "KEY",
      "name": "SelfKey",
      "decimals": 18,
      "logoURI": "ipfs://QmVUsF49ZfdkFmTzEm6rrxYvFCUnYtSmiYHyEwyMKKDVYf"
    },
    {
      "chainId": 1,
      "address": "0x31D457E7bcFf5Bc9A5Ef86E6a5eA1DB5b5C3BFB0",
      "symbol": "FOXX",
      "name": "Star Foxx",
      "decimals": 18,
      "logoURI": "ipfs://QmQUUzyAFiwv6YpfqrESNyW9DvAGntibG5RGRJAzV2mhNT"
    },
    {
      "chainId": 56,
      "address": "0x47BEAd2563dCBf3bF2c9407fEa4dC236fAbA485A",
      "symbol": "SXP",
      "name": "Swipe",
      "decimals": 18,
      "logoURI": "ipfs://QmQyhHJ92pNm8RbezaeeNtfUqLyv8sQZ62GfBN5RZqADro"
    },
    {
      "chainId": 1,
      "address": "0xB50721BCf8d664c30412Cfbc6cf7a15145234ad1",
      "symbol": "ARB",
      "name": "Arbitrum",
      "decimals": 18,
      "logoURI": "ipfs://QmdzPaPoFE9o221RAKfjCRW7KzUQBeKohFE5MFQMvhGzjd"
    },
    {
      "chainId": 1,
      "address": "0x15B543e986b8c34074DFc9901136d9355a537e7E",
      "symbol": "STC",
      "name": "Student Coin",
      "decimals": 18,
      "logoURI": "ipfs://QmfT4temychqeDpv2GpZiUCB3eDxHWJGPtVLh9iM9vZjZf"
    },
    {
      "chainId": 1,
      "address": "0x120d3d081CDfc62CfAF99638f12703E4B9A6C4Bc",
      "symbol": "SAITAMA",
      "name": "Saitama Classic",
      "decimals": 18,
      "logoURI": "ipfs://QmQLRXsGo7WoTwNdmnqz7muyshsQ6YzSe11KrLpEmpq5ke"
    },
    {
      "chainId": 1,
      "address": "0x0391D2021f89DC339F60Fff84546EA23E337750f",
      "symbol": "BOND",
      "name": "BarnBridge",
      "decimals": 18,
      "logoURI": "ipfs://QmR1zLuhbjkYiG6ePSvyo9waqxbAsk23SbKnbwjd649wVQ"
    },
    {
      "chainId": 1,
      "address": "0x38e4adB44ef08F22F5B5b76A8f0c2d0dCbE7DcA1",
      "symbol": "CVP",
      "name": "PowerPool Concentrated Voting Power",
      "decimals": 18,
      "logoURI": "ipfs://QmYYsVEkhWHRrXqjHFD1nhZDk5Xj4sRe9EdUEjDNXxdi6M"
    },
    {
      "chainId": 1,
      "address": "0x88C8Cf3A212c0369698D13FE98Fcb76620389841",
      "symbol": "sEOS",
      "name": "Synthetic EOS",
      "decimals": 18,
      "logoURI": "ipfs://QmSKoQkUu4fZMCxYWXtxJebWqzQjiGihTyRQbMHPkNXNF7"
    },
    {
      "chainId": 1,
      "address": "0x0E5f00DA8AAef196a719d045DB89b5DA8F371b32",
      "symbol": "CNTM",
      "name": "Connectome",
      "decimals": 18,
      "logoURI": "ipfs://QmVcrnK6NXkjWy1WUFmMSzJYtqXmcsnL2WBCbuQV4b5L2F"
    },
    {
      "chainId": 100,
      "address": "0x84E2C67CBEfae6B5148fcA7d02B341B12ff4b5Bb",
      "symbol": "SWASH",
      "name": "Swash",
      "decimals": 18,
      "logoURI": "ipfs://QmP5jabdBdR9Xcp2R2TqJgc3RfSJVqvFQJTg61WWL4oCfF"
    },
    {
      "chainId": 137,
      "address": "0x53E0bca35eC356BD5ddDFebbD1Fc0fD03FaBad39",
      "symbol": "LINK",
      "name": "Chainlink",
      "decimals": 18,
      "logoURI": "ipfs://Qmdn6E15MELheFNupKrMosD9KPDFZ9M3wVKkhCuacT1cVj"
    },
    {
      "chainId": 1,
      "address": "0x626E8036dEB333b408Be468F951bdB42433cBF18",
      "symbol": "AIOZ",
      "name": "AIOZ Network",
      "decimals": 18,
      "logoURI": "ipfs://QmSvSawrMj86bFBPF6thS3En54hm5PNSxDPJSTPBJsDweS"
    },
    {
      "chainId": 1,
      "address": "0x87d73E916D7057945c9BcD8cdd94e42A6F47f776",
      "symbol": "NFTX",
      "name": "NFTX",
      "decimals": 18,
      "logoURI": "ipfs://QmRw5KHczxpT5aBDVnwRah1tth1anV72tDFKpYHb4ysFKA"
    },
    {
      "chainId": 1,
      "address": "0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9",
      "symbol": "cUSDT",
      "name": "Compound USDT",
      "decimals": 8,
      "logoURI": "ipfs://Qmbi3ANqzbU4A3gcnu5y1TnJfdmcWS4Fn2x1qx5HubG97i"
    },
    {
      "chainId": 1,
      "address": "0x33349B282065b0284d756F0577FB39c158F935e6",
      "symbol": "MPL",
      "name": "Maple",
      "decimals": 18,
      "logoURI": "ipfs://QmdYUv9tq7e5W9v4eVFvVvAfApmfcprJrf4CGeVZXKydbH"
    },
    {
      "chainId": 1,
      "address": "0x0F83287FF768D1c1e17a42F44d644D7F22e8ee1d",
      "symbol": "sCHF",
      "name": "Synthetic Swiss Franc",
      "decimals": 18,
      "logoURI": "ipfs://Qmce8NBY7ie22DgXqu7pmvZD7X9RWHttgoJaQWYUAL9aTu"
    },
    {
      "chainId": 1,
      "address": "0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A",
      "symbol": "DGD",
      "name": "DigixDAO",
      "decimals": 9,
      "logoURI": "ipfs://QmbUWtGWpsQ8iDCoo2HPzYbWXsfYuuk7wDqeKphWSxFZjR"
    },
    {
      "chainId": 1,
      "address": "0xF87E31492Faf9A91B02Ee0dEAAd50d51d56D5d4d",
      "symbol": "LAND",
      "name": "Decentraland LAND",
      "decimals": 0,
      "logoURI": "ipfs://QmVfReUZqV7bWuF7X83XMrU7spnV2ZFfigSdduXHe8jwaH"
    },
    {
      "chainId": 1,
      "address": "0x107c4504cd79C5d2696Ea0030a8dD4e92601B82e",
      "symbol": "BLT",
      "name": "Bloom",
      "decimals": 18,
      "logoURI": "ipfs://QmSCJ453JWLYv4n4rJS16QWqtrUsLUPMeE96EC13a11sjR"
    },
    {
      "chainId": 56,
      "address": "0xf7DE7E8A6bd59ED41a4b5fe50278b3B7f31384dF",
      "symbol": "RDNT",
      "name": "Radiant",
      "decimals": 18,
      "logoURI": "ipfs://QmPFwFqf6KCqR6fBxYffw1FtPGVG6AUACK1dKu79cFvpHt"
    },
    {
      "chainId": 1,
      "address": "0x4Fabb145d64652a948d72533023f6E7A623C7C53",
      "symbol": "BUSD",
      "name": "Binance USD",
      "decimals": 18,
      "logoURI": "ipfs://QmarL9ewxDAz5hpRJq2Skr2oMP5CX5KMX1fPkgXfSUHrEx"
    },
    {
      "chainId": 1,
      "address": "0xfd609a03B393F1A1cFcAcEdaBf068CAD09a924E2",
      "symbol": "crCRETH2",
      "name": "Cream Cream ETH 2",
      "decimals": 8,
      "logoURI": "ipfs://QmPjw3JC69YAYs9CQdnWqTaL94BWVxQgKTxAVXUEuWWmCq"
    },
    {
      "chainId": 1,
      "address": "0x8A2279d4A90B6fe1C4B30fa660cC9f926797bAA2",
      "symbol": "CHR",
      "name": "Chromia",
      "decimals": 6,
      "logoURI": "ipfs://QmSkpvRfbSVKxsZjnFmdcHcZrcEMiya4KTGKowmUV8UZBR"
    },
    {
      "chainId": 1,
      "address": "0xaea46A60368A7bD060eec7DF8CBa43b7EF41Ad85",
      "symbol": "FET",
      "name": "Fetch.ai",
      "decimals": 18,
      "logoURI": "ipfs://QmeR4XrGNJFoEnScmuKpaQxTsu6ySPxmmXzaHk6C7ejaM9"
    },
    {
      "chainId": 1,
      "address": "0x8762db106B2c2A0bccB3A80d1Ed41273552616E8",
      "symbol": "RSR",
      "name": "Reserve Rights",
      "decimals": 18,
      "logoURI": "ipfs://QmVudzh7roJ7j3kFBWe33jvF9P6eYdyUnJuxu2XeYnGwTn"
    },
    {
      "chainId": 1,
      "address": "0x4a5B3D0004454988C50e8dE1bCFC921EE995ADe3",
      "symbol": "wXEQ",
      "name": "wXEQ v2",
      "decimals": 18,
      "logoURI": "ipfs://QmQoHikAxtfEEjyrqen2ZvWMJwq1UP9Wb16pr6e2pnAEvk"
    },
    {
      "chainId": 56,
      "address": "0x156ab3346823B651294766e23e6Cf87254d68962",
      "symbol": "LUNC",
      "name": "Terra Classic",
      "decimals": 6,
      "logoURI": "ipfs://QmceuGzAgd2wcWiDvX9ygEohHnaMqWDpSok7ot1h7jahZt"
    },
    {
      "chainId": 100,
      "address": "0x431D5dfF03120AFA4bDf332c61A6e1766eF37BDB",
      "symbol": "JPYC",
      "name": "JPY Coin",
      "decimals": 18,
      "logoURI": "ipfs://QmX5M9oHm5KexoSF5hYDKbykYbceg5hvvi1ioho1YrBsyP"
    },
    {
      "chainId": 1,
      "address": "0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490",
      "symbol": "3Crv",
      "name": "3Curve",
      "decimals": 18,
      "logoURI": "ipfs://QmdpGMVZF7bcfpNuEEQHQXoDXQ1QE99kjiYXZDdz1UqsU7"
    },
    {
      "chainId": 1,
      "address": "0xA4eA687A2A7F29cF2dc66B39c68e4411C0D00C49",
      "symbol": "IVY",
      "name": "Ivy",
      "decimals": 18,
      "logoURI": "ipfs://QmQ1A1XDFsHDWdLewic15KPnkvbCxCgEYhUJqszDd1mu3J"
    },
    {
      "chainId": 1,
      "address": "0x986b4AFF588a109c09B50A03f42E4110E29D353F",
      "symbol": "yvCurve-sETH",
      "name": "Curve sETH Pool yVault",
      "decimals": 18,
      "logoURI": "ipfs://QmWBxxb9RYCLTVa9xg64j7saoqJuGhUqaeMo9M2HJorYqR"
    },
    {
      "chainId": 137,
      "address": "0x5FFD62D3C3eE2E81C00A7b9079FB248e7dF024A8",
      "symbol": "GNO",
      "name": "Gnosis",
      "decimals": 18,
      "logoURI": "ipfs://QmTVco7p4VxCMHJAKDNmqYAveVhww11r5Z3hKqbgg6ShRB"
    },
    {
      "chainId": 1,
      "address": "0x1c8266A4369aF6d80Df2659Ba47B3c98f35cB8bE",
      "symbol": "KOJI",
      "name": "Koji",
      "decimals": 18,
      "logoURI": "ipfs://QmamxMJQtvMMuCUE5YPUiBvLJeHUHjf4RX4hwK1PW7296W"
    },
    {
      "chainId": 1,
      "address": "0x209C1808FeBf6c1aB7C65764bb61AD67d3923fcc",
      "symbol": "APE",
      "name": "APEcoin",
      "decimals": 18,
      "logoURI": "ipfs://QmULCg8MyfEQbZo5dCPAHiskLUExUQqiS6nkMqd7WDPReB"
    },
    {
      "chainId": 100,
      "address": "0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1",
      "symbol": "WETH",
      "name": "Wrapped Ether",
      "decimals": 18,
      "logoURI": "ipfs://QmeH11wxc6kpgAEpFRyteAJq9ksXzsmfHJcPWLQeCT1f8x"
    },
    {
      "chainId": 1,
      "address": "0x68037790A0229e9Ce6EaA8A99ea92964106C4703",
      "symbol": "PAR",
      "name": "Parallel",
      "decimals": 18,
      "logoURI": "ipfs://QmSp3xELVa8NXo3XVL2BC7zGyyswgR723mwTiyRyL4doCb"
    },
    {
      "chainId": 1,
      "address": "0x7865af71cf0b288b4E7F654f4F7851EB46a2B7F8",
      "symbol": "SNTVT",
      "name": "Sentivate",
      "decimals": 18,
      "logoURI": "ipfs://QmZPFARvsdw8CBPhBi1fti9bGgKrtjkX1XFpUUWWP5f6nq"
    },
    {
      "chainId": 1,
      "address": "0x1cA02DD95f3F1e33DA7F5AfE15EA866dAb07aF04",
      "symbol": "BKING",
      "name": "King Arthur",
      "decimals": 9,
      "logoURI": "ipfs://QmWp5TW8G671GXoHoLxjRh8v8M462DjQ9sFwFKrNokvLQM"
    },
    {
      "chainId": 56,
      "address": "0x882C173bC7Ff3b7786CA16dfeD3DFFfb9Ee7847B",
      "symbol": "vBTC",
      "name": "Venus BTC",
      "decimals": 8,
      "logoURI": "ipfs://QmVcmLWcq3u93KCsXxMmbrFBEinEXxThqniJBMRxEJrJpT"
    },
    {
      "chainId": 1,
      "address": "0x36a2422a863D5B950882190Ff5433E513413343a",
      "symbol": "sBCH",
      "name": "Synthetic Bitcoin Cash",
      "decimals": 18,
      "logoURI": "ipfs://QmYWbK7CxHKSDuAefriPi2uaNrf7hskd8jKvvcPCPbiAjW"
    },
    {
      "chainId": 1,
      "address": "0x151202C9c18e495656f372281F493EB7698961D5",
      "symbol": "DEB",
      "name": "Debitum Network",
      "decimals": 18,
      "logoURI": "ipfs://QmXGVsfiRLtFTQrSDMRALjfPsxNXECqKDMH7tmZAsK9ti2"
    },
    {
      "chainId": 137,
      "address": "0xbD1463F02f61676d53fd183C2B19282BFF93D099",
      "symbol": "jCHF",
      "name": "Jarvis Synthetic Swiss Franc",
      "decimals": 18,
      "logoURI": "ipfs://QmdvXu6Ly98GP2XSc6jVcyXi8UVd8UHAzEDdWKrFV2zaob"
    },
    {
      "chainId": 1,
      "address": "0xD85AD783cc94bd04196a13DC042A3054a9B52210",
      "symbol": "HAKA",
      "name": "TribeOne",
      "decimals": 18,
      "logoURI": "ipfs://QmcNkZUyKvZrvwpU2CpjwUA1A4UWFa8r5VL5TeWiL6r1ie"
    },
    {
      "chainId": 1,
      "address": "0x554FFc77F4251a9fB3c0E3590a6a205f8d4e067D",
      "symbol": "ZMN",
      "name": "ZMINE",
      "decimals": 18,
      "logoURI": "ipfs://QmZqytjD7WW9dpwSe57d9b8DLe9jcWTd7RmGVEEzJb8mDE"
    },
    {
      "chainId": 1,
      "address": "0x78F225869c08d478c34e5f645d07A87d3fe8eb78",
      "symbol": "DEFI+L",
      "name": "PieDAO DEFI Large Cap",
      "decimals": 18,
      "logoURI": "ipfs://Qmc8BrCxfGgvoAu9bmCTXengzWUKX5PEEKTkSkP5EWkJyR"
    },
    {
      "chainId": 100,
      "address": "0x8e5bBbb09Ed1ebdE8674Cda39A0c169401db4252",
      "symbol": "WBTC",
      "name": "Wrapped Bitcoin",
      "decimals": 8,
      "logoURI": "ipfs://QmWabMBiaCBXDEu1Cc6A6NoLVJZCqd9GWwtTgxentKbeZ4"
    },
    {
      "chainId": 1,
      "address": "0xCC8Fa225D80b9c7D42F96e9570156c65D6cAAa25",
      "symbol": "SLP",
      "name": "Smooth Love Potion",
      "decimals": 0,
      "logoURI": "ipfs://QmcGQbVKiruHmKrVTrjsPa7DNqBbmd7PXB26sPQaw3Um4v"
    },
    {
      "chainId": 1,
      "address": "0x83F20F44975D03b1b09e64809B757c47f942BEeA",
      "symbol": "sDAI",
      "name": "Savings DAI",
      "decimals": 18,
      "logoURI": "ipfs://Qma2GoCXE7RN7uarcujTmJHXxpxyCBvUBUKR6eJKPWjvC5"
    },
    {
      "chainId": 1,
      "address": "0x89Ab32156e46F46D02ade3FEcbe5Fc4243B9AAeD",
      "symbol": "PNT",
      "name": "pNetwork",
      "decimals": 18,
      "logoURI": "ipfs://Qmb5cdSaXP3MYFdcCMqdLdZCr8hNhzPrb5x7HM2UPd2SxC"
    },
    {
      "chainId": 1,
      "address": "0xB9D7CB55f463405CDfBe4E90a6D2Df01C2B92BF1",
      "symbol": "aUNI",
      "name": "Aave UNI",
      "decimals": 18,
      "logoURI": "ipfs://QmdzG2wx3oRtPzZfyVLW8dMw26oxyRcSBEdZ1wDCFVKcgr"
    },
    {
      "chainId": 1,
      "address": "0xcb86c6A22CB56B6cf40CaFEDb06BA0DF188a416E",
      "symbol": "SURE",
      "name": "inSure DeFi",
      "decimals": 18,
      "logoURI": "ipfs://QmdXbCyP11ThyvYVrNVmdSmAeQFTkqJ8z9sQK3VgAWcgYw"
    },
    {
      "chainId": 56,
      "address": "0x64048A7eEcF3a2F1BA9e144aAc3D7dB6e58F555e",
      "symbol": "frxETH",
      "name": "Frax Ether",
      "decimals": 18,
      "logoURI": "ipfs://QmQqQhtwApaT4X9FAaAzBRvyeE2iaSDH4ahD6exWXcszZU"
    },
    {
      "chainId": 1,
      "address": "0xbc16da9df0A22f01A16BC0620a27e7D6d6488550",
      "symbol": "PCT",
      "name": "Percent",
      "decimals": 18,
      "logoURI": "ipfs://QmV8BhAsiScgk2Rc8hR5VHpEBMADiRtwvFZs3LUDMCHAgQ"
    },
    {
      "chainId": 1,
      "address": "0x42d6622deCe394b54999Fbd73D108123806f6a18",
      "symbol": "SPANK",
      "name": "SpankChain",
      "decimals": 18,
      "logoURI": "ipfs://QmcZFbGd5z8Gb7Hvmeng2Tr4FxWPoV4GFtLkV6VAHaPRuD"
    },
    {
      "chainId": 10,
      "address": "0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1",
      "symbol": "DAI",
      "name": "Dai",
      "decimals": 18,
      "logoURI": "ipfs://QmTswuPmisP64jxzZvGz6AaK2gosJyPeTwqMkNPob6pdaa"
    },
    {
      "chainId": 1,
      "address": "0xf485C5E679238f9304D986bb2fC28fE3379200e5",
      "symbol": "UGC",
      "name": "ugChain",
      "decimals": 18,
      "logoURI": "ipfs://QmSsiZEQwjM8dAECknzpoEycEw98W58pEVV6k1Nd28578g"
    },
    {
      "chainId": 1,
      "address": "0x80f222a749a2e18Eb7f676D371F19ad7EFEEe3b7",
      "symbol": "MGN",
      "name": "Magnolia",
      "decimals": 18,
      "logoURI": "ipfs://QmWoA3rTV1PqdLdqiivN22LTMZPK3u8AozE5sxXBganHCL"
    },
    {
      "chainId": 56,
      "address": "0x7bd6FaBD64813c48545C9c0e312A0099d9be2540",
      "symbol": "ELON",
      "name": "Dogelon Mars",
      "decimals": 18,
      "logoURI": "ipfs://QmaHs61uW9nZYiHVSQuZgnQWBPSwNokcnNgZn7FGMhSHVk"
    },
    {
      "chainId": 1,
      "address": "0x4fa000dF40C06FC8c7D9179661535846B7Cd4f87",
      "symbol": "ZNT",
      "name": "Zenswap Network",
      "decimals": 18,
      "logoURI": "ipfs://QmUjzQTjwdXZvDcjXShJRdC877GVcTqn4zu1KiJUDhDoZp"
    },
    {
      "chainId": 1,
      "address": "0xFA57F00D948bb6a28072f5416fCbF7836C3d62dD",
      "symbol": "FRIES",
      "name": "friesDAO",
      "decimals": 18,
      "logoURI": "ipfs://QmfL5Nsbjhf4JY3u5RAxnZkTrr4K4YiFCr6Eo7vCd5pa24"
    },
    {
      "chainId": 1,
      "address": "0x52d87F22192131636F93c5AB18d0127Ea52CB641",
      "symbol": "renLUNA",
      "name": "renLUNA",
      "decimals": 6,
      "logoURI": "ipfs://QmRKGynzRpQj5DPRWUs9n7VRtZpzvYXJ3FgUnNnDd2CULX"
    },
    {
      "chainId": 1,
      "address": "0x6911F552842236bd9E8ea8DDBB3fb414e2C5FA9d",
      "symbol": "SNP",
      "name": "Synapse Network",
      "decimals": 18,
      "logoURI": "ipfs://QmVBYsG6RmVCno8Sim8GiXw32pYFHgox4i57kwWBj2ixqX"
    },
    {
      "chainId": 1,
      "address": "0x1350Fbe8Ce27762ec19134bf8FC405a427fe9Bf1",
      "symbol": "TRIPS",
      "name": "TRIPS",
      "decimals": 18,
      "logoURI": "ipfs://QmXUFjoJx4mp3RbyXnvGSwLFo9hsdFeFU2WMk6SiAXbWgw"
    },
    {
      "chainId": 1,
      "address": "0x3155BA85D5F96b2d030a4966AF206230e46849cb",
      "symbol": "RUNE",
      "name": "THORChain",
      "decimals": 18,
      "logoURI": "ipfs://Qmc62WwaGG6jDw94msaiHe9QkU2shpAEXmMSkWmNjDzYmo"
    },
    {
      "chainId": 56,
      "address": "0xA07c5b74C9B40447a954e1466938b865b6BBea36",
      "symbol": "vBNB",
      "name": "Venus BNB",
      "decimals": 8,
      "logoURI": "ipfs://QmS8dd9K38HKP72mqEnEPNcX4uZr5wB9eg4hZr3qR8wHbt"
    },
    {
      "chainId": 1,
      "address": "0xbdEB4b83251Fb146687fa19D1C660F99411eefe3",
      "symbol": "SVD",
      "name": "savedroid",
      "decimals": 18,
      "logoURI": "ipfs://QmNhq6SkP6o4FML4AfWARryWn3bFMm5iySxRSR4XEnDsRM"
    },
    {
      "chainId": 1,
      "address": "0x687642347a9282Be8FD809d8309910A3f984Ac5a",
      "symbol": "iKNC",
      "name": "Fulcrum KNC iToken",
      "decimals": 18,
      "logoURI": "ipfs://QmWAbwq559hBwBBKYgjNR6SwaujQFKjcvqHKGbd3Ehpz9f"
    },
    {
      "chainId": 1,
      "address": "0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5",
      "symbol": "PICKLE",
      "name": "Pickle Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmRo1htyxY5mMwuzQzmE2f3yvorxTLqmXjNA4YmR4gJCWR"
    },
    {
      "chainId": 137,
      "address": "0xa22f6bc96f13bcC84dF36109c973d3c0505a067E",
      "symbol": "jKRW",
      "name": "Jarvis Synthetic South Korean Won",
      "decimals": 18,
      "logoURI": "ipfs://QmNWbvcuMDv7xiemxJDmYJS5byjvMFE9tWQVvvcYJ1crvv"
    },
    {
      "chainId": 1,
      "address": "0xC741f06082AA47F93729070aD0dD95E223Bda091",
      "symbol": "LEDU",
      "name": "Education Ecosystem",
      "decimals": 8,
      "logoURI": "ipfs://QmQgyLd2GZWJxS97xExPpuuqyogdaVdxDtooVit4qUx17K"
    },
    {
      "chainId": 1,
      "address": "0x25377ddb16c79C93B0CBf46809C8dE8765f03FCd",
      "symbol": "SBREE",
      "name": "CBDAO",
      "decimals": 18,
      "logoURI": "ipfs://QmbJVusZHgicX9g42uYykCEhe8VgPZxyhToeBXDScjedCk"
    },
    {
      "chainId": 1,
      "address": "0xbdab72602e9AD40FC6a6852CAf43258113B8F7a5",
      "symbol": "eSOV",
      "name": "Sovryn",
      "decimals": 18,
      "logoURI": "ipfs://QmPwahMuMXsKuK7C4YKcoMjugRrZ8ams6JqJXY734qPYwc"
    },
    {
      "chainId": 1,
      "address": "0x960b236A07cf122663c4303350609A66A7B288C0",
      "symbol": "ANT",
      "name": "Aragon",
      "decimals": 18,
      "logoURI": "ipfs://QmY8qL4UouA8u2ZeNfJj26MMi98DCwY7a9fshEmHhh475p"
    },
    {
      "chainId": 1,
      "address": "0x38A94e92A19E970c144DEd0B2DD47278CA11CC1F",
      "symbol": "F9",
      "name": "Falcon Nine",
      "decimals": 9,
      "logoURI": "ipfs://QmYVd8MYZe9fBPwgfRGJksDmz5xTiiJFQsDXgTeaT5B9yi"
    },
    {
      "chainId": 1,
      "address": "0x19810559dF63f19cfE88923313250550eDADB743",
      "symbol": "HOUSE",
      "name": "Toast.finance",
      "decimals": 0,
      "logoURI": "ipfs://QmXykNAbiMdmHytv45GmthsHWW7nvuK1CZrUPccxfAKM4o"
    },
    {
      "chainId": 137,
      "address": "0xA8b1E0764f85f53dfe21760e8AfE5446D82606ac",
      "symbol": "BAND",
      "name": "Band Protocol",
      "decimals": 18,
      "logoURI": "ipfs://Qma3oFfhCHJqvLu9E2v9REMGZJnsGJd2BVUi94C54HFLmT"
    },
    {
      "chainId": 43114,
      "address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7",
      "symbol": "USDT",
      "name": "Tether",
      "decimals": 6,
      "logoURI": "ipfs://Qmb3xCbcXGs8pa1YMvmHvN4dyadcaUkW7ZDy9mZL7pZ4aF"
    },
    {
      "chainId": 1,
      "address": "0x745a824D6aBBD236AA794b5530062778A6Ad7523",
      "symbol": "sMSFT",
      "name": "Synthetic Microsoft",
      "decimals": 18,
      "logoURI": "ipfs://QmaGcVN1cgNBLo9vhRtGvWPcceVWpirgtCcvEkwSSSzSbq"
    },
    {
      "chainId": 1,
      "address": "0x2Ebd53d035150f328bd754D6DC66B99B0eDB89aa",
      "symbol": "MET",
      "name": "Metronome",
      "decimals": 18,
      "logoURI": "ipfs://QmXEa85dGiXuCeVgFGKvHpprY9E7XECS6RbPmQCwMRLaPh"
    },
    {
      "chainId": 1,
      "address": "0xbE9375C6a420D2eEB258962efB95551A5b722803",
      "symbol": "STMX",
      "name": "StormX",
      "decimals": 18,
      "logoURI": "ipfs://QmUidHFkPZuEWJBKqYKGy84wypwPVUEkdzVC8QARAWc3xH"
    },
    {
      "chainId": 1,
      "address": "0x17107f40d70f4470d20CB3f138a052cAE8EbD4bE",
      "symbol": "crRENBTC",
      "name": "Cream renBTC",
      "decimals": 8,
      "logoURI": "ipfs://QmUAXvA6qwHtxFjjNQz8arc8jm4zS5jiJjVmr3zzSAfaES"
    },
    {
      "chainId": 1,
      "address": "0x97b65710D03E12775189F0D113202cc1443b0aa2",
      "symbol": "ELONONE",
      "name": "AstroElon",
      "decimals": 9,
      "logoURI": "ipfs://QmdP3eVJrsGTG3UXxkfBEVmSi5BZbhCQonuSztPV1yRtJW"
    },
    {
      "chainId": 1,
      "address": "0x101cc05f4A51C0319f570d5E146a8C625198e636",
      "symbol": "aTUSD",
      "name": "Aave TUSD",
      "decimals": 18,
      "logoURI": "ipfs://QmQhjFcKLaEoocDduDcpmgVA9JdLEsUq4HUTzdRwSTkDUF"
    },
    {
      "chainId": 1,
      "address": "0xA8b919680258d369114910511cc87595aec0be6D",
      "symbol": "LYXe",
      "name": "LUKSO",
      "decimals": 18,
      "logoURI": "ipfs://QmP1j6XNEBgvVNWpi6uFSUz2Pc7GGBzrta9hpS3bKfHdaZ"
    },
    {
      "chainId": 56,
      "address": "0x048E9b1ddF9EBbb224812372280e94Ccac443f9e",
      "symbol": "jGBP",
      "name": "Jarvis Synthetic British Pound",
      "decimals": 18,
      "logoURI": "ipfs://QmaTirQDCtHCjoNCnHyQJTB46nxFWq4b75cidRURRKhaYW"
    },
    {
      "chainId": 1,
      "address": "0x641927E970222B10b2E8CDBC96b1B4F427316f16",
      "symbol": "MEEB",
      "name": "MEEB Vault",
      "decimals": 18,
      "logoURI": "ipfs://QmczD2QxDB4qGu75CGncc3vAfrt5trWWgExq5rhc5nDGYt"
    },
    {
      "chainId": 1,
      "address": "0x8ED2Fc62D6850eAaDcB717465752dab591286839",
      "symbol": "$ELY",
      "name": "Elyssa AR",
      "decimals": 18,
      "logoURI": "ipfs://QmRJ97GH3vZJu6D7KMBp7US2Ad34K773xNnP3fXjckocK3"
    },
    {
      "chainId": 137,
      "address": "0x9cd6746665D9557e1B9a775819625711d0693439",
      "symbol": "LUNC",
      "name": "Terra Classic",
      "decimals": 6,
      "logoURI": "ipfs://QmceuGzAgd2wcWiDvX9ygEohHnaMqWDpSok7ot1h7jahZt"
    },
    {
      "chainId": 1,
      "address": "0xd33D0EB1c0c0295c3A2409a9101dd511823Bf217",
      "symbol": "FANS",
      "name": "Unique Fans",
      "decimals": 18,
      "logoURI": "ipfs://QmeCa3q2QFKELvcjvGc9PUnJ7oRQrzfnrzC2hG1apn16Xo"
    },
    {
      "chainId": 1,
      "address": "0x5b558564B57E4ff88c6b8D8E7EeEe599bF79B368",
      "symbol": "MMM",
      "name": "MultiMillion",
      "decimals": 18,
      "logoURI": "ipfs://QmNdesYg1cUmHDhqBCbeHxHpdgp32MrGKoRzHwqzAUBaSX"
    },
    {
      "chainId": 1,
      "address": "0x2a3bFF78B79A009976EeA096a51A948a3dC00e34",
      "symbol": "WILD",
      "name": "Wilder World",
      "decimals": 18,
      "logoURI": "ipfs://QmPTtQX3LjnnijiTqRaECUJVBzxwfERSLBmZRiPe4iqtjY"
    },
    {
      "chainId": 1,
      "address": "0xF411903cbC70a74d22900a5DE66A2dda66507255",
      "symbol": "VRA",
      "name": "Verasity",
      "decimals": 18,
      "logoURI": "ipfs://QmNsxQGWZ6UsbRWKiGgmHGVZnKa4Yk4YuhWYqvYvBtQR2z"
    },
    {
      "chainId": 1,
      "address": "0x6c6EE5e31d828De241282B9606C8e98Ea48526E2",
      "symbol": "HOT",
      "name": "Holo",
      "decimals": 18,
      "logoURI": "ipfs://QmeNKZj7zozcViKgmfLKNDKohwtzhMdih8RSj22bNU7XPp"
    },
    {
      "chainId": 1,
      "address": "0x158079Ee67Fce2f58472A96584A73C7Ab9AC95c1",
      "symbol": "cREP",
      "name": "Compound Augur",
      "decimals": 8,
      "logoURI": "ipfs://QmcYFwayw7U6HvW5SssBELZiX1iyzpBDfQFTMJ3TywGKD3"
    },
    {
      "chainId": 1,
      "address": "0xc58467b855401EF3FF8FdA9216F236e29f0d6277",
      "symbol": "GASG",
      "name": "Gasgains",
      "decimals": 18,
      "logoURI": "ipfs://QmcccQYN4jDQx9U4en8PcstcvMhTzZbq9XhvWW3HiEwNL4"
    },
    {
      "chainId": 1,
      "address": "0xa2B0fDe6D710e201d0d608e924A484d1A5fEd57c",
      "symbol": "sXRP",
      "name": "Synthetic Ripple",
      "decimals": 18,
      "logoURI": "ipfs://QmPz17iKSnxGdFTMK72iLKVFXYVczfkTz7EPcUxjXsKFDy"
    },
    {
      "chainId": 1,
      "address": "0x330839EF82D34801bd96e75a4Ee778ac56Fa1ED8",
      "symbol": "ICH",
      "name": "ICOStart",
      "decimals": 18,
      "logoURI": "ipfs://QmZfHRVgctZQDwbXX734E3bgQgeEckmfwwoqHmG9oK3GQL"
    },
    {
      "chainId": 1,
      "address": "0x546AED37d202d607F45Cbd2b8C0CaD0D25fBe339",
      "symbol": "KAWA",
      "name": "Kawakami",
      "decimals": 18,
      "logoURI": "ipfs://QmZyLwwtNhXtFk6ftujff8Fmyj16kAA2JZtDHA7sr3vZTD"
    },
    {
      "chainId": 1,
      "address": "0x998FFE1E43fAcffb941dc337dD0468d52bA5b48A",
      "symbol": "IDRT",
      "name": "Rupiah Token",
      "decimals": 2,
      "logoURI": "ipfs://QmNfbzNAsdGD2iya3PgcBsEvFt3WGBqZhA4E67twPnpCoq"
    },
    {
      "chainId": 1,
      "address": "0xA6446D655a0c34bC4F05042EE88170D056CBAf45",
      "symbol": "CSP",
      "name": "Caspian",
      "decimals": 18,
      "logoURI": "ipfs://QmSBuGQ1vF317jQpKM3wUJ38uUVTYsWgRUAEUcyGETyTVs"
    },
    {
      "chainId": 1,
      "address": "0x4c9BBFc1FbD93dFB509E718400978fbEedf590E9",
      "symbol": "RAI",
      "name": "Rai",
      "decimals": 18,
      "logoURI": "ipfs://QmNQFDN6HAqEwkp6Un97xfWc91WEDJ5hfGAA5hgPt5UYyw"
    },
    {
      "chainId": 1,
      "address": "0x09617F6fD6cF8A71278ec86e23bBab29C04353a7",
      "symbol": "ULT",
      "name": "Shardus",
      "decimals": 18,
      "logoURI": "ipfs://QmYZHdz5JzpXnoqgdcQmwJzoGUedJx9bnrt9SJMibqvVM1"
    },
    {
      "chainId": 1,
      "address": "0xB4d930279552397bbA2ee473229f89Ec245bc365",
      "symbol": "MAHA",
      "name": "MahaDAO",
      "decimals": 18,
      "logoURI": "ipfs://Qma97nj1LF9c1CwteQHHDBJuPdr4JiAfYpbeiiXsUfc6CJ"
    },
    {
      "chainId": 1,
      "address": "0xfc05987bd2be489ACCF0f509E44B0145d68240f7",
      "symbol": "ESS",
      "name": "Essentia",
      "decimals": 18,
      "logoURI": "ipfs://QmRHzxLdPxQudupVQ6QJzezTnae8t8RJc9PZeFK6oA72LL"
    },
    {
      "chainId": 1,
      "address": "0xf2Ef3551C1945A7218fc4eC0a75c9eCFDF012A4F",
      "symbol": "C4G3",
      "name": "Cage",
      "decimals": 18,
      "logoURI": "ipfs://QmSdr6HJ7WAJ4HS9CbR8LvvCKtkDvj3YVWKGAuS58Avjyg"
    },
    {
      "chainId": 1,
      "address": "0x8deef89058090ac5655A99EEB451a4f9183D1678",
      "symbol": "iXTZ",
      "name": "Synthetic Inverse Tezos",
      "decimals": 18,
      "logoURI": "ipfs://QmcFvvRzmrWHmBv8uFziQH3P1WpB6RXCLJJCb3UeWYAHxX"
    },
    {
      "chainId": 1,
      "address": "0x4691937a7508860F876c9c0a2a617E7d9E945D4B",
      "symbol": "WOO",
      "name": "WOO Network",
      "decimals": 18,
      "logoURI": "ipfs://QmP3qXoD1NyGiHHsRPcEkmuasZj1cQPivy5KV93SEjgGVZ"
    },
    {
      "chainId": 56,
      "address": "0xCC42724C6683B7E57334c4E856f4c9965ED682bD",
      "symbol": "MATIC",
      "name": "Matic",
      "decimals": 18,
      "logoURI": "ipfs://QmcMPwSeDvVa1K8hXKPbU4diCwGC3BXYK4dsNtPNMVFHJQ"
    },
    {
      "chainId": 1,
      "address": "0x9E32b13ce7f2E80A01932B42553652E053D6ed8e",
      "symbol": "METIS",
      "name": "Metis",
      "decimals": 18,
      "logoURI": "ipfs://QmSifbmJ5Jms4vAPKhtNwHqjzyEosdZvbjmjcYZMW3jBb4"
    },
    {
      "chainId": 1,
      "address": "0x33e18a092a93ff21aD04746c7Da12e35D34DC7C4",
      "symbol": "PLAY",
      "name": "Metaverse NFT Index",
      "decimals": 18,
      "logoURI": "ipfs://QmVNJQrJLdbzHUV1m8cxfmLeX5FEG9qjR6cBbJanVLnPge"
    },
    {
      "chainId": 1,
      "address": "0x08711D3B02C8758F2FB3ab4e80228418a7F8e39c",
      "symbol": "EDG",
      "name": "Edgeless",
      "decimals": 0,
      "logoURI": "ipfs://QmS8etH8X4mmdVnzFnhJ7yjjnvp3NZJSnWzfXL3EGgXThV"
    },
    {
      "chainId": 1,
      "address": "0x3DB6Ba6ab6F95efed1a6E794caD492fAAabF294D",
      "symbol": "LTO",
      "name": "LTO Network",
      "decimals": 8,
      "logoURI": "ipfs://QmU9h5yk7wfJHCS65Hng9qLuUVDPBDCsxP6CFiEwkEQom7"
    },
    {
      "chainId": 1,
      "address": "0x076C97e1c869072eE22f8c91978C99B4bcB02591",
      "symbol": "CBT",
      "name": "CommerceBlock",
      "decimals": 18,
      "logoURI": "ipfs://QmTqKxhQziBer8AitBdYX3MARSxiHjAGrtKf9iw3L6KRwp"
    },
    {
      "chainId": 56,
      "address": "0xeEeEEb57642040bE42185f49C52F7E9B38f8eeeE",
      "symbol": "ELK",
      "name": "Elk Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmYSmFMg8incix4Hzs85MPZzQJnb2W19zLTL3nXNEzY42m"
    },
    {
      "chainId": 1,
      "address": "0xA974c709cFb4566686553a20790685A47acEAA33",
      "symbol": "XIN",
      "name": "Mixin",
      "decimals": 18,
      "logoURI": "ipfs://QmfSwqgnnDxYEGPyftYoSx7FQn8zqh9dPFmiGzNcUUKooX"
    },
    {
      "chainId": 1,
      "address": "0xD5525D397898e5502075Ea5E830d8914f6F0affe",
      "symbol": "MEME",
      "name": "Meme",
      "decimals": 8,
      "logoURI": "ipfs://QmeFWqQo2vN7JMoefQ3RYuAiHfZZU6487edGyfYSrxzQkg"
    },
    {
      "chainId": 56,
      "address": "0x3019BF2a2eF8040C242C9a4c5c4BD4C81678b2A1",
      "symbol": "GMT",
      "name": "STEPN",
      "decimals": 8,
      "logoURI": "ipfs://QmaXgp7LnvKbQ64Bb3P1e92Cju9KNbxzwzdLaLqb7nrUUW"
    },
    {
      "chainId": 1,
      "address": "0xc2544A32872A91F4A553b404C6950e89De901fdb",
      "symbol": "FPIS",
      "name": "Frax Price Index Share",
      "decimals": 18,
      "logoURI": "ipfs://QmWzJ6WF973aNnrMxk1d7GVmEvjZH4PBXWuHhHopnMniuo"
    },
    {
      "chainId": 1,
      "address": "0x856c4Efb76C1D1AE02e20CEB03A2A6a08b0b8dC3",
      "symbol": "OETH",
      "name": "Origin Ether",
      "decimals": 18,
      "logoURI": "ipfs://QmdSRVuw27BYmyHNAjH3hanuZUbfCiByhtiUK1siX6LaBT"
    },
    {
      "chainId": 100,
      "address": "0x6A8cb6714B1EE5b471a7D2eC4302cb4f5Ff25eC2",
      "symbol": "EWT",
      "name": "Energy Web Token",
      "decimals": 18,
      "logoURI": "ipfs://QmPx8qAq3NifpADHkDKJb8qyTT8DdsDH5N36wbSYMWkMRF"
    },
    {
      "chainId": 1,
      "address": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
      "symbol": "LINK",
      "name": "Chainlink",
      "decimals": 18,
      "logoURI": "ipfs://QmZ6xMzTmuuMBXGXDxsqYzscFxeCeyLPzTbYDcENuuxn6t"
    },
    {
      "chainId": 1,
      "address": "0x219F4a1D142DFC564bD6e80c022cD29f3394A999",
      "symbol": "WXLM",
      "name": "Wrapped Stellar",
      "decimals": 18,
      "logoURI": "ipfs://QmaVomWHZrtVrLtvdkcUHKt9HNTdWL38QrYSWvfUYk8Yto"
    },
    {
      "chainId": 1,
      "address": "0x1b40183EFB4Dd766f11bDa7A7c3AD8982e998421",
      "symbol": "VSP",
      "name": "Vesper Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmX3NmrFqtuJNaDDWMpnFXaEh3g3dZzmbjBN6L1i2C59HK"
    },
    {
      "chainId": 1,
      "address": "0x40ce0A1D8F4999807b92ec266a025F071814b15d",
      "symbol": "NOTRUMP",
      "name": "Dai If Trump Loses The 2020 Election",
      "decimals": 18,
      "logoURI": "ipfs://QmaHpCUg5SJbVwWRsvwNk3upqs8fBjz9yu3exbEWb7dhHf"
    },
    {
      "chainId": 1,
      "address": "0x7240aC91f01233BaAf8b064248E80feaA5912BA3",
      "symbol": "OCTO",
      "name": "OctoFi",
      "decimals": 18,
      "logoURI": "ipfs://QmbGHwDkfGjC8v56NqrfL2wkCmJjq3Wg9byebEDpkY8aG9"
    },
    {
      "chainId": 1,
      "address": "0x041fdd6637eCfD96af8804278AC12660ac2D12c0",
      "symbol": "SDX",
      "name": "SwapDEX",
      "decimals": 7,
      "logoURI": "ipfs://QmaAvzz7nUuCXxy8R7bnc53ydmhU1bokpHFPgbpkJ5tHvW"
    },
    {
      "chainId": 100,
      "address": "0xbf65bfcb5da067446CeE6A706ba3Fe2fB1a9fdFd",
      "symbol": "YFI",
      "name": "yearn.finance",
      "decimals": 18,
      "logoURI": "ipfs://QmUqUt4Z4ftUcKUKpT4RMWJUTcRyoTu1ni9tCno1nXwHPR"
    },
    {
      "chainId": 1,
      "address": "0x01da76DEa59703578040012357b81ffE62015C2d",
      "symbol": "crYETH",
      "name": "Cream yETH",
      "decimals": 8,
      "logoURI": "ipfs://QmT4fQBW315Hd9NgPD9NAE3hHgZyAaDFL3VjPCnAgbWa19"
    },
    {
      "chainId": 137,
      "address": "0x3Cef98bb43d732E2F285eE605a8158cDE967D219",
      "symbol": "BAT",
      "name": "Basic Attention Token",
      "decimals": 18,
      "logoURI": "ipfs://QmZPngVewTaGaXqN28CnZ9EJSBJ2jAEnMao87T9RbPUoGM"
    },
    {
      "chainId": 1,
      "address": "0x2e98A6804E4b6c832ED0ca876a943abD3400b224",
      "symbol": "BELA",
      "name": "Bela",
      "decimals": 18,
      "logoURI": "ipfs://QmXRXMsoQHM6nZaDYtB5HujCnojYW6ngKL8Z5uSRds8UUn"
    },
    {
      "chainId": 1,
      "address": "0x56d811088235F11C8920698a204A5010a788f4b3",
      "symbol": "BZRX",
      "name": "bZx Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmY1PvCUwosCACycBjKdy2HM3XS1HSUaYYJUMU1C4WKMNw"
    },
    {
      "chainId": 1,
      "address": "0x10Bae51262490B4f4AF41e12eD52A0E744c1137A",
      "symbol": "SLINK",
      "name": "Soft Link",
      "decimals": 9,
      "logoURI": "ipfs://QmbxeRCr8KeAoedAWftc3pXwdy83u7wUbMYx1dggTxw7u6"
    },
    {
      "chainId": 1,
      "address": "0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e",
      "symbol": "YFI",
      "name": "yearn.finance",
      "decimals": 18,
      "logoURI": "ipfs://QmUqUt4Z4ftUcKUKpT4RMWJUTcRyoTu1ni9tCno1nXwHPR"
    },
    {
      "chainId": 1,
      "address": "0xEA26c4aC16D4a5A106820BC8AEE85fd0b7b2b664",
      "symbol": "QKC",
      "name": "QuarkChain",
      "decimals": 18,
      "logoURI": "ipfs://QmdNmZ5fZuk9uj68JceJm9yWSLfu24Qm29WDiZbeY5ETcY"
    },
    {
      "chainId": 1,
      "address": "0xfE33ae95A9f0DA8A845aF33516EDc240DCD711d6",
      "symbol": "sDASH",
      "name": "Synthetic Dash",
      "decimals": 18,
      "logoURI": "ipfs://QmdgTFhcBZKmNUX4Ru9Q1fZzgD991qen935MCcSfoJTzPB"
    },
    {
      "chainId": 1,
      "address": "0x8b3FF1ed4F36C2c2be675AFb13CC3AA5d73685a5",
      "symbol": "crCEL",
      "name": "Cream Celsius",
      "decimals": 8,
      "logoURI": "ipfs://QmNZ3cHiQstDKpf1gDDyWcx4SyKgKe54eH3hLexu7KGcN4"
    },
    {
      "chainId": 137,
      "address": "0x77f56cf9365955486B12C4816992388eE8606f0E",
      "symbol": "C98",
      "name": "Coin98",
      "decimals": 18,
      "logoURI": "ipfs://QmRQbHrMyudBLwQWkC1GHgyYBDzmgDGbEDWLZZ9ZqNL8dF"
    },
    {
      "chainId": 137,
      "address": "0xA1c57f48F0Deb89f569dFbE6E2B7f46D33606fD4",
      "symbol": "MANA",
      "name": "Decentraland",
      "decimals": 18,
      "logoURI": "ipfs://QmY18MUVBQbY22cM9gRxub76EqqdHMiNydGkfoR1fBarEo"
    },
    {
      "chainId": 56,
      "address": "0x43C934A845205F0b514417d757d7235B8f53f1B9",
      "symbol": "XLM",
      "name": "Stellar",
      "decimals": 18,
      "logoURI": "ipfs://QmXEkrYLhmVJCGJ9AhxQypF3eS4aUUQX3PTef31gmEfyJo"
    },
    {
      "chainId": 1,
      "address": "0x9556f8ee795D991fF371F547162D5efB2769425F",
      "symbol": "DMME",
      "name": "DMme",
      "decimals": 18,
      "logoURI": "ipfs://QmSau4kiADix48qCdBTWbufW5RvvasphX8P81NvwZhFTJX"
    },
    {
      "chainId": 1,
      "address": "0x5abFd418AdB35e89c68313574eB16BdfFc15e607",
      "symbol": "TMV",
      "name": "Timvi",
      "decimals": 18,
      "logoURI": "ipfs://QmRLx2pp9G2HCvjQS5f2Wp34fzX2Py6QiEPCCVC4JW32eG"
    },
    {
      "chainId": 56,
      "address": "0xcF6BB5389c92Bdda8a3747Ddb454cB7a64626C63",
      "symbol": "XVS",
      "name": "Venus",
      "decimals": 18,
      "logoURI": "ipfs://QmXTx1VXDTzAavzk6TV81XW61iLMRaNx2DF2JTdsJxXAzD"
    },
    {
      "chainId": 1,
      "address": "0x10FDBD1e48eE2fD9336a482D746138AE19e649Db",
      "symbol": "crFTT",
      "name": "Cream FTX Token",
      "decimals": 8,
      "logoURI": "ipfs://QmUAjxyf38antvrNBaeqBGuzwPZdAvhzmGR2Sp72jiuTAA"
    },
    {
      "chainId": 1,
      "address": "0xD82fd4D6D62f89A1E50b1db69AD19932314aa408",
      "symbol": "LIQ",
      "name": "Liquis",
      "decimals": 18,
      "logoURI": "ipfs://QmNy9DZPYkjBUUwXvYZT3gDuo1njYcbHSBVvdejy1UUjcX"
    },
    {
      "chainId": 1,
      "address": "0x3FD8f39A962eFDA04956981C31AB89FAB5FB8bC8",
      "symbol": "RTH",
      "name": "Rotharium",
      "decimals": 18,
      "logoURI": "ipfs://QmT57bje4H2QJwdtEwkhURRimnsRHneh4939PqLbaws9G4"
    },
    {
      "chainId": 1,
      "address": "0x3893b9422Cd5D70a81eDeFfe3d5A1c6A978310BB",
      "symbol": "MITH",
      "name": "Mithril",
      "decimals": 18,
      "logoURI": "ipfs://QmRsyP8dkfdcVBQ1Qp27gbuo3YZxvFTkw7bi3oCAGWFk1z"
    },
    {
      "chainId": 1,
      "address": "0x431ad2ff6a9C365805eBaD47Ee021148d6f7DBe0",
      "symbol": "DF",
      "name": "dForce",
      "decimals": 18,
      "logoURI": "ipfs://QmNZqSfgPn2B3VhrefqLYGtDzmyLy1TnrbTarGwyPcBig3"
    },
    {
      "chainId": 100,
      "address": "0xCa8d20f3e0144a72C6B5d576e9Bd3Fd8557E2B04",
      "symbol": "WBNB",
      "name": "Wrapped BNB",
      "decimals": 18,
      "logoURI": "ipfs://QmSqnCR4xndFFVeUrUSdVmV7zmysYgcr1oGRAjmJmBrtJd"
    },
    {
      "chainId": 1,
      "address": "0x99ea4dB9EE77ACD40B119BD1dC4E33e1C070b80d",
      "symbol": "QSP",
      "name": "Quantstamp",
      "decimals": 18,
      "logoURI": "ipfs://QmdLczacUT3w5RG5KnFKDg53U5Gp4Wp2TuaqtvN4JJYE7w"
    },
    {
      "chainId": 1,
      "address": "0x0E3cC2c4FB9252d17d07C67135E48536071735D9",
      "symbol": "ARTH",
      "name": "ARTH",
      "decimals": 18,
      "logoURI": "ipfs://QmRFpRmLYTyc8EGy6FrjgpVYRs4EHyEh46CtGXGHiyyewZ"
    },
    {
      "chainId": 1,
      "address": "0x15b7c0c907e4C6b9AdaAaabC300C08991D6CEA05",
      "symbol": "GEL",
      "name": "Gelato",
      "decimals": 18,
      "logoURI": "ipfs://QmQe8BUGdw7YRmwVHYYQ1VeQGpCPj4twgCsv22jK23wQmB"
    },
    {
      "chainId": 1,
      "address": "0x2008e3057BD734e10AD13c9EAe45Ff132aBc1722",
      "symbol": "ZCO",
      "name": "Zebi",
      "decimals": 8,
      "logoURI": "ipfs://QmVSTWZDULQ1ZYzEkXxEGFRgH5DGyhaHyvDzJt5HDd5xCj"
    },
    {
      "chainId": 1,
      "address": "0x22602469d704BfFb0936c7A7cfcD18f7aA269375",
      "symbol": "sETC",
      "name": "Synthetic Ethereum Classic",
      "decimals": 18,
      "logoURI": "ipfs://QmTU7BWvndLxAWqb4rP6zrX448MeNiieihaty52ndNNgQb"
    },
    {
      "chainId": 1,
      "address": "0x0c7D5ae016f806603CB1782bEa29AC69471CAb9c",
      "symbol": "BFC",
      "name": "Bifrost",
      "decimals": 18,
      "logoURI": "ipfs://QmcbEMgcCc3RaW5sronwftdoaNV9yoeAhXeEeJKiLXMipp"
    },
    {
      "chainId": 1,
      "address": "0x419D0d8BdD9aF5e606Ae2232ed285Aff190E711b",
      "symbol": "FUN",
      "name": "FunFair",
      "decimals": 8,
      "logoURI": "ipfs://QmUqA14PWyqWcnu3m2Y1Be4xnP9TCYrZ5ieR2G5eNbbfB1"
    },
    {
      "chainId": 1,
      "address": "0xD9Ec3ff1f8be459Bb9369b4E79e9Ebcf7141C093",
      "symbol": "KAI",
      "name": "KardiaChain",
      "decimals": 18,
      "logoURI": "ipfs://QmbtaRhGo5uPQQwzEKHG7mYwk1aU8R7GeqddqagyNRXqyn"
    },
    {
      "chainId": 1,
      "address": "0xdA1E53E088023Fe4D1DC5a418581748f52CBd1b8",
      "symbol": "AIDI",
      "name": "Aidi Inu",
      "decimals": 9,
      "logoURI": "ipfs://QmXS8D6QgX3fuvo72uCG61rRcBnKgsyonQ7K9hQ1NVeaMu"
    },
    {
      "chainId": 1,
      "address": "0x0417912b3a7AF768051765040A55BB0925D4DDcF",
      "symbol": "LID",
      "name": "Liquidity Dividends Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmRXTo4wPvygFwT49AC6vj1YVKqkd5JLqcZWKoz711p77o"
    },
    {
      "chainId": 1,
      "address": "0x9F284E1337A815fe77D2Ff4aE46544645B20c5ff",
      "symbol": "KTON",
      "name": "Darwinia Commitment Token",
      "decimals": 18,
      "logoURI": "ipfs://QmPND3auCEeiueSoqZ5agoB2QyTphnUDqswS1xffXL65z3"
    },
    {
      "chainId": 1,
      "address": "0x1c4b7d0e1885bd7667Af3378E0c538F74E712006",
      "symbol": "IOG",
      "name": "Playgroundz",
      "decimals": 18,
      "logoURI": "ipfs://QmQJiSKhg9V7V9BtmHUV1VtoUUug8RhMzuujB5g7Wf3TGD"
    },
    {
      "chainId": 1,
      "address": "0xB1191F691A355b43542Bea9B8847bc73e7Abb137",
      "symbol": "KIRO",
      "name": "Kirobo",
      "decimals": 18,
      "logoURI": "ipfs://QmVQFhHdAeLWQWBsF7X1e7iN6KpNaAPS6TBqbKFAQbRkBZ"
    },
    {
      "chainId": 1,
      "address": "0x6c936D4AE98E6d2172dB18c16C4b601C99918EE6",
      "symbol": "LIFE",
      "name": "Life Crypto",
      "decimals": 18,
      "logoURI": "ipfs://QmRWZpVkNZQxj5W6pCWayN6goVZn51K3fA3XgfREjhe58g"
    },
    {
      "chainId": 1,
      "address": "0xEd91879919B71bB6905f23af0A68d231EcF87b14",
      "symbol": "DMG",
      "name": "DMM: Governance",
      "decimals": 18,
      "logoURI": "ipfs://QmSdSiwF4vCRBbqeXmvcsiU2fxknQHLmM56tbh2mA4Bpnd"
    },
    {
      "chainId": 1,
      "address": "0x537edD52ebcb9F48ff2f8a28c51FCdB9D6a6E0D4",
      "symbol": "SDOG",
      "name": "Small Doge",
      "decimals": 18,
      "logoURI": "ipfs://Qma3UvxaNDGniJsWqKDx7RHijuQquRvj3yLwH3pKQ1GNo8"
    },
    {
      "chainId": 1,
      "address": "0xd5F7838F5C461fefF7FE49ea5ebaF7728bB0ADfa",
      "symbol": "mETH",
      "name": "Mantle Staked Ether",
      "decimals": 18,
      "logoURI": "ipfs://QmPzCHNB2PoDN8tGv3iTfZAAuxL8NASp9uHmpE1LTYBTRK"
    },
    {
      "chainId": 1,
      "address": "0xbCdfE338D55c061C084D81fD793Ded00A27F226D",
      "symbol": "DML",
      "name": "Decentralized Machine Learning",
      "decimals": 18,
      "logoURI": "ipfs://QmRWsgxw5awcMcGACbk136e1YEhqCud7HqfQhndgZWT4Ts"
    },
    {
      "chainId": 1,
      "address": "0xc3589F56B6869824804A5EA29F2c9886Af1B0FcE",
      "symbol": "HNY",
      "name": "Honey",
      "decimals": 18,
      "logoURI": "ipfs://QmYxsVgovmspp3BwuSUrRyicW2XwnVy1JbQnHkEdy4YsGH"
    },
    {
      "chainId": 56,
      "address": "0x23b8683Ff98F9E4781552DFE6f12Aa32814924e8",
      "symbol": "jEUR",
      "name": "Jarvis Synthetic Euro",
      "decimals": 18,
      "logoURI": "ipfs://QmPGP57ZrLr8KAD5Q9m9C8z5x7FzTEMuLo1hp8vcb4wfFx"
    },
    {
      "chainId": 56,
      "address": "0x154A9F9cbd3449AD22FDaE23044319D6eF2a1Fab",
      "symbol": "SKILL",
      "name": "CryptoBlades",
      "decimals": 18,
      "logoURI": "ipfs://QmfHKRLnY43AEfUCAivyMhrV9pv2maskCYu3zF8tanWEVH"
    },
    {
      "chainId": 1,
      "address": "0xfc82bb4ba86045Af6F327323a46E80412b91b27d",
      "symbol": "PROM",
      "name": "Prometeus",
      "decimals": 18,
      "logoURI": "ipfs://QmRVpirJhazUJkvo6jUNQLZoMavmJCKazECiNEX1cJjBg6"
    },
    {
      "chainId": 1,
      "address": "0x9A48BD0EC040ea4f1D3147C025cd4076A2e71e3e",
      "symbol": "USD++",
      "name": "PieDAO USD++",
      "decimals": 18,
      "logoURI": "ipfs://QmbEyp1qWnxeTvDN5Ucdk2yTgKwuCjTgvRbyfzz71bKu1y"
    },
    {
      "chainId": 137,
      "address": "0xC3C7d422809852031b44ab29EEC9F1EfF2A58756",
      "symbol": "LDO",
      "name": "Lido DAO",
      "decimals": 18,
      "logoURI": "ipfs://QmTdQtLaPqXoXbHgbjVgYbXbbukvQAsNZtzq9bs14oVknY"
    },
    {
      "chainId": 1,
      "address": "0x676Ad1b33ae6423c6618C1AEcf53BAa29cf39EE5",
      "symbol": "SDT",
      "name": "Wrapped SDT",
      "decimals": 18,
      "logoURI": "ipfs://QmPJ1r1Ja9U2XcbKFRhExGksTr8xyA2oSeUzAwKk4e1NbE"
    },
    {
      "chainId": 137,
      "address": "0xeEeEEb57642040bE42185f49C52F7E9B38f8eeeE",
      "symbol": "ELK",
      "name": "Elk Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmYSmFMg8incix4Hzs85MPZzQJnb2W19zLTL3nXNEzY42m"
    },
    {
      "chainId": 1,
      "address": "0x4EcE5C5CfB9B960A49aAe739E15cDB6cfDcc5782",
      "symbol": "DBUY",
      "name": "Doont Buy",
      "decimals": 9,
      "logoURI": "ipfs://QmdjxhwAUmS3rc5MS2Xb4ok77K7DupzfR3JFtBXGMEBEZx"
    },
    {
      "chainId": 1,
      "address": "0x106238737b85b4220C7A7DdFD5c4cAF8597281fe",
      "symbol": "BURNX",
      "name": "BurnX",
      "decimals": 18,
      "logoURI": "ipfs://QmdaRvD2GZbYgu7PVKBR5CTKiQ1HwRhsXkEjTPSnXB1d1W"
    },
    {
      "chainId": 1,
      "address": "0x2d7aC061fc3db53c39fe1607fB8cec1B2C162B01",
      "symbol": "iLINK",
      "name": "Synthetic Inverse Chainlink",
      "decimals": 18,
      "logoURI": "ipfs://QmVRE93cpXdFpEAtUMErSs52fzKq9gXrfDsweFEHDdC7TN"
    },
    {
      "chainId": 1,
      "address": "0xd42debE4eDc92Bd5a3FBb4243e1ecCf6d63A4A5d",
      "symbol": "C8",
      "name": "Carboneum",
      "decimals": 18,
      "logoURI": "ipfs://QmdZcrPWGJthiiNayHs2NiswQ6XettLy8Pwy15LrUutd5V"
    },
    {
      "chainId": 1,
      "address": "0xE5a3229CCb22b6484594973A03a3851dCd948756",
      "symbol": "RAE",
      "name": "Receive Access Ecosystem",
      "decimals": 18,
      "logoURI": "ipfs://QmUAuHjZ5ruQdKH2WuPy8CY3oQYe9iVRT34jxRFQwpYnus"
    },
    {
      "chainId": 56,
      "address": "0x5f0Da599BB2ccCfcf6Fdfd7D81743B6020864350",
      "symbol": "MKR",
      "name": "Maker",
      "decimals": 18,
      "logoURI": "ipfs://QmfAnPxYQrWrEdjzaSi9D1Cn5XRwpPBKYov6JSbvtfcy1j"
    },
    {
      "chainId": 1,
      "address": "0x46DceB1bB2c55531D12A4E769E8088F4aF64D410",
      "symbol": "XBX",
      "name": "XBX",
      "decimals": 18,
      "logoURI": "ipfs://QmeEw2Y3zpyqJh9zKb1xW4v4hH1dNCRUpyboULKgrAYTyC"
    },
    {
      "chainId": 1,
      "address": "0xe0E4839E0c7b2773c58764F9Ec3B9622d01A0428",
      "symbol": "ENCORE",
      "name": "EnCore",
      "decimals": 18,
      "logoURI": "ipfs://QmSoyhEXtjuzNXQ1ovf7q8Gdc6pKupaj53hXgnFYe5Ta5W"
    },
    {
      "chainId": 1,
      "address": "0x4Fb721eF3Bf99e0f2c193847afA296b9257d3C30",
      "symbol": "TOK",
      "name": "Tokenplace",
      "decimals": 8,
      "logoURI": "ipfs://QmPsuSmit2qKsc8x2ojTxVioVPWuK3cehrkqsMPJDSPrqi"
    },
    {
      "chainId": 100,
      "address": "0xD589F00Fa2Eb83367f732AB3CDA92eE0940389cF",
      "symbol": "FUSE",
      "name": "Fuse",
      "decimals": 18,
      "logoURI": "ipfs://QmQkbt5kPE1q2362xZKErG1onw9RDfapPrdiuuPNymGci2"
    },
    {
      "chainId": 137,
      "address": "0x97C415D4c8ea982aaabCBb65506D37FA6631C351",
      "symbol": "UNCL",
      "name": "UNCL",
      "decimals": 18,
      "logoURI": "ipfs://QmdWnNAzfwfmZX64H3Nt2DatWNkA3eJcKcPwYCykwZrWav"
    },
    {
      "chainId": 1,
      "address": "0x5979F50f1D4c08f9A53863C2f39A7B0492C38d0f",
      "symbol": "pLTC",
      "name": "pTokens LTC",
      "decimals": 18,
      "logoURI": "ipfs://QmcDfKGb6tZpKL5aejE5pdKMzW2txAJJqQKYwsX9j3wUfu"
    },
    {
      "chainId": 1,
      "address": "0x33B919F54692dDbf702065763EA2b50Ca02e6bfF",
      "symbol": "MCW",
      "name": "Mocrow",
      "decimals": 18,
      "logoURI": "ipfs://QmSSh93o6AY5XKUGvi7sFJLWT7wYagqdv3sFzjPzonkJdy"
    },
    {
      "chainId": 56,
      "address": "0x3Cd55356433C89E50DC51aB07EE0fa0A95623D53",
      "symbol": "sfrxETH",
      "name": "Staked Frax Ether",
      "decimals": 18,
      "logoURI": "ipfs://QmX1r2JVToPDMkRUFsERHeeCheTXFZ9Hw1nuq1gDNjufxG"
    },
    {
      "chainId": 137,
      "address": "0x0621d647cecbFb64b79E44302c1933cB4f27054d",
      "symbol": "AMP",
      "name": "Amp",
      "decimals": 18,
      "logoURI": "ipfs://QmQjvLscdUTvwZQ5Qmka1g6oNjBPwjEf3igNn4a1VL54iN"
    },
    {
      "chainId": 1,
      "address": "0xDf6Ef343350780BF8C3410BF062e0C015B1DD671",
      "symbol": "BMC",
      "name": "Blackmoon",
      "decimals": 8,
      "logoURI": "ipfs://QmYJyC17923N7xVwJbXzAfNzMtoYvZDBXMwCLp7UFGbkSB"
    },
    {
      "chainId": 1,
      "address": "0xDe5eA375FFBDc8b25a80fe13D631E8Ba0AB4BB02",
      "symbol": "GERA",
      "name": "Gera Coin",
      "decimals": 18,
      "logoURI": "ipfs://QmWRYiu9u1NG2FM63d3UQT3DK7bq9eQUcn2fJUxprGtxny"
    },
    {
      "chainId": 1,
      "address": "0x85F17Cf997934a597031b2E18a9aB6ebD4B9f6a4",
      "symbol": "NEAR",
      "name": "NEAR Protocol",
      "decimals": 24,
      "logoURI": "ipfs://QmVPvVH7de6BnNxFkhzjmdCZxVME1StXViP26SMcxjad1d"
    },
    {
      "chainId": 1,
      "address": "0x6f40d4A6237C257fff2dB00FA0510DeEECd303eb",
      "symbol": "INST",
      "name": "Instadapp",
      "decimals": 18,
      "logoURI": "ipfs://QmVvPHqUg4p2axX5ggQpyVa1V39EefHcM4XaVNQxtjRTjF"
    },
    {
      "chainId": 100,
      "address": "0x37b60f4E9A31A64cCc0024dce7D0fD07eAA0F7B3",
      "symbol": "PNK",
      "name": "Pinakion",
      "decimals": 18,
      "logoURI": "ipfs://QmbC6rKFGa6xTn7QEXDiDtoCi69fon8nvjtzMoXRLD4uvv"
    },
    {
      "chainId": 100,
      "address": "0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d",
      "symbol": "WXDAI",
      "name": "Wrapped XDAI",
      "decimals": 18,
      "logoURI": "ipfs://QmUQfPdRURXsHDfW5gpqJuz5LKCrwszK6v4eLRJT4myF9x"
    },
    {
      "chainId": 137,
      "address": "0xBFA35599c7AEbb0dAcE9b5aa3ca5f2a79624D8Eb",
      "symbol": "RETRO",
      "name": "Retro Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmfAVNA35HwGvwJXDYATorBoKBPCiHzkQxCenHNpfJPmQz"
    },
    {
      "chainId": 1,
      "address": "0x582d872A1B094FC48F5DE31D3B73F2D9bE47def1",
      "symbol": "TONCOIN",
      "name": "Wrapped TON Coin",
      "decimals": 9,
      "logoURI": "ipfs://QmQDnCpnW6QHWj6NVd3br8KpHsoAwxfQthC6EFXCCJ7Tsy"
    },
    {
      "chainId": 1,
      "address": "0x4a22A69E45AB29F9F7276B0267797474DAf1F27c",
      "symbol": "SUNI",
      "name": "SUNI",
      "decimals": 18,
      "logoURI": "ipfs://QmWsDUv5dEorjGoJxtF4DerYcLvyhfmXf6Q8wasxhjLwQb"
    },
    {
      "chainId": 137,
      "address": "0x4e3Decbb3645551B8A19f0eA1678079FCB33fB4c",
      "symbol": "jEUR",
      "name": "Jarvis Synthetic Euro",
      "decimals": 18,
      "logoURI": "ipfs://QmPGP57ZrLr8KAD5Q9m9C8z5x7FzTEMuLo1hp8vcb4wfFx"
    },
    {
      "chainId": 1,
      "address": "0xBD05CeE8741100010D8E93048a80Ed77645ac7bf",
      "symbol": "CYTR",
      "name": "Cyclops Treasure",
      "decimals": 18,
      "logoURI": "ipfs://QmW2Piu5MWaZtUNyc9cdmxfQ7ep3TGLAHLhDPy8oH8x1ZX"
    },
    {
      "chainId": 1,
      "address": "0xD0D6D6C5Fe4a677D343cC433536BB717bAe167dD",
      "symbol": "ADT",
      "name": "adToken",
      "decimals": 9,
      "logoURI": "ipfs://QmdG1K1AMwXznQh9yWddFe6BbEjKsDawmTJ9Zat9ekX734"
    },
    {
      "chainId": 1,
      "address": "0xEA097A2b1dB00627B2Fa17460Ad260c016016977",
      "symbol": "UFR",
      "name": "Upfiring",
      "decimals": 18,
      "logoURI": "ipfs://QmW9qyrWnDJFT5XL26YBgNcjY7zLSmEMyD58UBVKcsB4je"
    },
    {
      "chainId": 1,
      "address": "0x0E8d6b471e332F140e7d9dbB99E5E3822F728DA6",
      "symbol": "ABYSS",
      "name": "Abyss",
      "decimals": 18,
      "logoURI": "ipfs://QmePf7N7HwqmKT8aYZMph6s9bncxKj3R2TQ16cjEo8LwvZ"
    },
    {
      "chainId": 1,
      "address": "0x6C4522F0035bED2180B40f4c5d9DbAab64B41325",
      "symbol": "PASS",
      "name": "Passport Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmXnqCL23UcV7KpQvXQcAQsggJSqkx3uKjog4U99hy5u3c"
    },
    {
      "chainId": 1,
      "address": "0x8400D94A5cb0fa0D041a3788e395285d61c9ee5e",
      "symbol": "UBT",
      "name": "Unibright",
      "decimals": 8,
      "logoURI": "ipfs://QmQgC8EoYL3yvvM1MjEFncecJkAN3Zs7Sx4Qafc76m4NzZ"
    },
    {
      "chainId": 1,
      "address": "0x630bC7dD0aBfc2d196289cE09Db947DD2CAfae7C",
      "symbol": "NABOX",
      "name": "Nabox",
      "decimals": 18,
      "logoURI": "ipfs://QmbNNeZg8NpdvoMYcThnsat8qhfgZJhXMgbFoQBpXSSZjT"
    },
    {
      "chainId": 1,
      "address": "0x217ddEad61a42369A266F1Fb754EB5d3EBadc88a",
      "symbol": "DON",
      "name": "Don-key",
      "decimals": 18,
      "logoURI": "ipfs://QmUmNBTEk3Cn8WgqXvnkxBXJdiNsNiPGb7MS65TCqiHssk"
    },
    {
      "chainId": 1,
      "address": "0xDa007777D86AC6d989cC9f79A73261b3fC5e0DA0",
      "symbol": "NODE",
      "name": "DAppNode",
      "decimals": 18,
      "logoURI": "ipfs://QmdVxDsdvm5MkgxJckmKuntxFx8umGQ2nV4t9qBbegvyqV"
    },
    {
      "chainId": 1,
      "address": "0xdC386452F9FFDa7F0d2940e5c60Dc0F9469b1097",
      "symbol": "xKAWA",
      "name": "xKAWA",
      "decimals": 18,
      "logoURI": "ipfs://QmaziqAwXh5fkyonMZdHNDky81xhJDaVSjz8zgHkijdhGr"
    },
    {
      "chainId": 42161,
      "address": "0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1",
      "symbol": "DAI",
      "name": "Dai",
      "decimals": 18,
      "logoURI": "ipfs://QmWcx6mu7PtPNM6eiUHwLwGuPsjXLoXiQ8ayBYteGJ7WFf"
    },
    {
      "chainId": 1,
      "address": "0x3d1BA9be9f66B8ee101911bC36D3fB562eaC2244",
      "symbol": "RVT",
      "name": "Rivetz",
      "decimals": 18,
      "logoURI": "ipfs://QmUjEG6pFRnv6y5BtCGyyKM4GbQqCvfZ9wFEENRfX4YSGT"
    },
    {
      "chainId": 8453,
      "address": "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913",
      "symbol": "USDC",
      "name": "USD Coin",
      "decimals": 6,
      "logoURI": "ipfs://QmWbGfqePP3uAvPNHdYSP69aDznHGknsypTPRaiJT9NZF8"
    },
    {
      "chainId": 137,
      "address": "0x2C89bbc92BD86F8075d1DEcc58C7F4E0107f286b",
      "symbol": "AVAX",
      "name": "Avalanche",
      "decimals": 18,
      "logoURI": "ipfs://QmeJKVZCwbKeB6zzDanjcYRLLeaJe2rDY4f5ij5Uak7EC8"
    },
    {
      "chainId": 1,
      "address": "0x6e1A19F235bE7ED8E3369eF73b196C07257494DE",
      "symbol": "WFIL",
      "name": "Wrapped Filecoin",
      "decimals": 18,
      "logoURI": "ipfs://QmbKfADJcTcCSGDh7sz5FZnuUnJQiSKhYPjaB2QXz4yGXN"
    },
    {
      "chainId": 1,
      "address": "0x10bA8C420e912bF07BEdaC03Aa6908720db04e0c",
      "symbol": "RAISE",
      "name": "Raise",
      "decimals": 18,
      "logoURI": "ipfs://QmSGmkJiNexqJqGP55ijfDNmxAnXJMFcB2f4QtMw9W3DCG"
    },
    {
      "chainId": 1,
      "address": "0xfFED56a180f23fD32Bc6A1d8d3c09c283aB594A8",
      "symbol": "FL",
      "name": "Freeliquid",
      "decimals": 18,
      "logoURI": "ipfs://QmenQLmVNs5aGYYBuVJMqKwgA7MpTGzNsdaKesMMKBsUf5"
    },
    {
      "chainId": 137,
      "address": "0x2B9E7ccDF0F4e5B24757c1E1a80e311E34Cb10c7",
      "symbol": "MASK",
      "name": "Mask Network",
      "decimals": 18,
      "logoURI": "ipfs://QmRoLnh8xZA9Aw8ddiA2E22cwqyq6ZSxvKyH25wC8X87kL"
    },
    {
      "chainId": 1,
      "address": "0x8888889213DD4dA823EbDD1e235b09590633C150",
      "symbol": "MBC",
      "name": "Marblecoin",
      "decimals": 18,
      "logoURI": "ipfs://QmTSRzr81casaxv5Q8oNNuC5sw6x4NWPPiQfNJEYPpmcFN"
    },
    {
      "chainId": 1,
      "address": "0x55d1d16fB42fCE47B899010c996a3a31f6db8fD6",
      "symbol": "BINU",
      "name": "Bully Inu",
      "decimals": 18,
      "logoURI": "ipfs://Qmbk9WQAb6JJysy5GpuYGW5bo2Py8Rd1jjz5aVEfdX8ZCb"
    },
    {
      "chainId": 1,
      "address": "0x423b5F62b328D0D6D44870F4Eee316befA0b2dF5",
      "symbol": "GOT",
      "name": "GoNetwork",
      "decimals": 18,
      "logoURI": "ipfs://QmPZVpCyS8NVoPR33vKsJ9HkmbSRZPpAqHAsKbWLZxDBEU"
    },
    {
      "chainId": 1,
      "address": "0x956F47F50A910163D8BF957Cf5846D573E7f87CA",
      "symbol": "FEI",
      "name": "Fei Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmcwNoQdrMEbixYhqJzE6U97qwoKkX4iGJFtnEb4f2yeoQ"
    },
    {
      "chainId": 1,
      "address": "0xA5a5DF41883Cdc00c4cCC6E8097130535399d9a3",
      "symbol": "iOIL",
      "name": "Synthetic Inverse Perpetual Oil Futures",
      "decimals": 18,
      "logoURI": "ipfs://Qmdu2y6AzNv2KHTPLjHFdq4Wqewtnu5DwjUG7YfJ6eh45G"
    },
    {
      "chainId": 1,
      "address": "0xAcfa209Fb73bF3Dd5bBfb1101B9Bc999C49062a5",
      "symbol": "BCDT",
      "name": "Blockchain Certified Data Token",
      "decimals": 18,
      "logoURI": "ipfs://QmYA56kw69GeMxHfBwkhdmMKr1XT9awE9GSucPk4BoLnTd"
    },
    {
      "chainId": 1,
      "address": "0xb052F8A33D8bb068414EaDE06AF6955199f9f010",
      "symbol": "ECOREAL",
      "name": "Ecoreal Estate ",
      "decimals": 18,
      "logoURI": "ipfs://QmV1jBDVNLMouwAdike2xke55JzQXYpz1YdS21Xfswgepw"
    },
    {
      "chainId": 1,
      "address": "0x33EbD390d986EB21Fb91a5B72Ee5AD8a1F40e43e",
      "symbol": "CLIFFC",
      "name": "Clifford Classic",
      "decimals": 18,
      "logoURI": "ipfs://QmdRr5YRjqCZwD24EhpFhKKukLkG89C97BG1VMb1jUxWoJ"
    },
    {
      "chainId": 1,
      "address": "0x8689D850CdF3b74A1F6A5eB60302c785B71c2fc7",
      "symbol": "CPHX",
      "name": "Crypto Phoenix",
      "decimals": 18,
      "logoURI": "ipfs://QmPL4Dk4eZeAANhmKSXRnp9Z7nCCuB7TZa2jYmd8G2zgQK"
    },
    {
      "chainId": 1,
      "address": "0xB2279B6769CFBa691416F00609b16244c0cF4b20",
      "symbol": "WAIF",
      "name": "Waifu Token",
      "decimals": 18,
      "logoURI": "ipfs://QmX4z2Qdou1h6MFASVkeShYu2UhaGwafqMs4aXbF9Us27R"
    },
    {
      "chainId": 1,
      "address": "0xe76C6c83af64e4C60245D8C7dE953DF673a7A33D",
      "symbol": "RAIL",
      "name": "RAILGUN",
      "decimals": 18,
      "logoURI": "ipfs://QmQHocvkazBM3eGiStPMeceYANdZJx9fjtvXnGrpX8fsm3"
    },
    {
      "chainId": 1,
      "address": "0x32E4c68B3A4a813b710595AebA7f6B7604Ab9c15",
      "symbol": "iUSDC",
      "name": "Fulcrum USDC iToken",
      "decimals": 6,
      "logoURI": "ipfs://QmXaGXjRpFhf2NgoCwzYp4fWFoN8hY2hmUnCUD9rKytBYM"
    },
    {
      "chainId": 137,
      "address": "0xAdA58DF0F643D959C2A47c9D4d4c1a4deFe3F11C",
      "symbol": "CRO",
      "name": "Cronos",
      "decimals": 8,
      "logoURI": "ipfs://QmQCyvKSpQRcokX61YQKW1tE7aX1cZV9QS8EAuFJEVtTFV"
    },
    {
      "chainId": 1,
      "address": "0xad32A8e6220741182940c5aBF610bDE99E737b2D",
      "symbol": "DOUGH",
      "name": "PieDAO DOUGH v2",
      "decimals": 18,
      "logoURI": "ipfs://QmY3pJEgtRk8yNYjP8eic1ZbJZ6HVULQbPxhBbkb8hD86j"
    },
    {
      "chainId": 1,
      "address": "0xf34960d9d60be18cC1D5Afc1A6F012A723a28811",
      "symbol": "KCS",
      "name": "KuCoin Token",
      "decimals": 6,
      "logoURI": "ipfs://QmYPgbZNK5r6DrZ5KsJxgcinmrJSf6Bkb5wLDNvVdhUK9b"
    },
    {
      "chainId": 1,
      "address": "0x5CA9a71B1d01849C0a95490Cc00559717fCF0D1d",
      "symbol": "AE",
      "name": "Aeternity",
      "decimals": 18,
      "logoURI": "ipfs://QmTwBRpQ3E5FPFaD81cXxxFqEmuq6vjQxj3RvKzwoHVr9B"
    },
    {
      "chainId": 1,
      "address": "0x9F8eef61b1Ad834B44C089DBF33eb854746a6bf9",
      "symbol": "DAWGS",
      "name": "SpaceDawgs",
      "decimals": 9,
      "logoURI": "ipfs://QmYceUUW97Tzba78gT9BKpj8YoU3WAFSgHEpm5H4m7yGKm"
    },
    {
      "chainId": 1,
      "address": "0x0f8C793DbC30A185138d5Da00f106290B26E36C5",
      "symbol": "ASTAX",
      "name": "Ape Stax",
      "decimals": 9,
      "logoURI": "ipfs://QmXg8uXagNzEUPX6o7yCgFZAcZGfiJeavBDK9z9dygYsmk"
    },
    {
      "chainId": 1,
      "address": "0xEec2bE5c91ae7f8a338e1e5f3b5DE49d07AfdC81",
      "symbol": "DPX",
      "name": "Dopex",
      "decimals": 18,
      "logoURI": "ipfs://QmWYUf3cdbRyZytf3qvCg7aMrb6Mj8co2CNwQymeqfQicn"
    },
    {
      "chainId": 1,
      "address": "0x6781a0F84c7E9e846DCb84A9a5bd49333067b104",
      "symbol": "ZAP",
      "name": "Zap",
      "decimals": 18,
      "logoURI": "ipfs://QmfGQAScapgZKAMxWL1Ge7WbCf76RoCBZePKScqcVjT8up"
    },
    {
      "chainId": 1,
      "address": "0xF68df6dF642E8387AfC9D03214B78f3087ef8a99",
      "symbol": "RELOADED",
      "name": "Doge Reloaded",
      "decimals": 9,
      "logoURI": "ipfs://QmVjGha8782bikX2PcWUzCA11nBgvNjNJjrjaxwvbhK5uT"
    },
    {
      "chainId": 1,
      "address": "0x92E187a03B6CD19CB6AF293ba17F2745Fd2357D5",
      "symbol": "DUCK",
      "name": "Unit Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmRyFHbLwrZXh7Yn5wCkfn2CuRzhtF2deQHL7HCiMjCnyd"
    },
    {
      "chainId": 1,
      "address": "0x037A54AaB062628C9Bbae1FDB1583c195585fe41",
      "symbol": "LCX",
      "name": "LCX",
      "decimals": 18,
      "logoURI": "ipfs://QmQUKTYwwp6woMuyRnqFSgg3jhyTaVKVxJAyfdNKn6Gix3"
    },
    {
      "chainId": 1,
      "address": "0x76851A93977bEA9264C32255b6457882035C7501",
      "symbol": "FOGE",
      "name": "Fat Doge",
      "decimals": 9,
      "logoURI": "ipfs://QmXNKDmgovNHRFxc1qeRvcSFaYZQ9faxpC72HWP659kXWy"
    },
    {
      "chainId": 1,
      "address": "0xBa21Ef4c9f433Ede00badEFcC2754B8E74bd538A",
      "symbol": "SWFL",
      "name": "Swapfolio",
      "decimals": 18,
      "logoURI": "ipfs://Qmf1DVFojCK8wbLhaLJvesSPKJ9rpRfzxGPYbumcB1tuZn"
    },
    {
      "chainId": 1,
      "address": "0xbbFF862d906E348E9946Bfb2132ecB157Da3D4b4",
      "symbol": "SS",
      "name": "Sharder",
      "decimals": 18,
      "logoURI": "ipfs://QmUGCkmZi7frnZ9DyzKnKnPAAKYLijRQkD414Jdhy1FFBi"
    },
    {
      "chainId": 1,
      "address": "0xdab396cCF3d84Cf2D07C4454e10C8A6F5b008D2b",
      "symbol": "GFI",
      "name": "Goldfinch",
      "decimals": 18,
      "logoURI": "ipfs://QmdyUTPzy9FVDMPJzT64iiYgDUoP6UUuACKswXXzSHCyDA"
    },
    {
      "chainId": 56,
      "address": "0xCE7de646e7208a4Ef112cb6ed5038FA6cC6b12e3",
      "symbol": "TRX",
      "name": "TRON",
      "decimals": 18,
      "logoURI": "ipfs://QmejfwdibxibEpygxVAeqRVFkAecVSMJSR1yu4LXu2wtAm"
    },
    {
      "chainId": 1,
      "address": "0xa9fE4601811213c340e850ea305481afF02f5b28",
      "symbol": "yvWETH",
      "name": "WETH yVault",
      "decimals": 18,
      "logoURI": "ipfs://QmceTmZ7T6QXrVV6KEjEdrmyg3A21XrWtRPbQXv6TzxNqz"
    },
    {
      "chainId": 1,
      "address": "0xe36E2D3c7c34281FA3bC737950a68571736880A1",
      "symbol": "sADA",
      "name": "Synthetic Cardano",
      "decimals": 18,
      "logoURI": "ipfs://QmeSRea3pa5kJxaGvWVsf9u1nwSEQyY1Uv1WmmPh88oNLN"
    },
    {
      "chainId": 1,
      "address": "0xEA47B64e1BFCCb773A0420247C0aa0a3C1D2E5C5",
      "symbol": "BAYC",
      "name": "BAYC Vault",
      "decimals": 18,
      "logoURI": "ipfs://QmdSv6MebYPQ99p4ExtU2Mgq7bAEiBYaWndzattpFmLSwt"
    },
    {
      "chainId": 1,
      "address": "0x269616D549D7e8Eaa82DFb17028d0B212D11232A",
      "symbol": "PUNK",
      "name": "PUNK Vault",
      "decimals": 18,
      "logoURI": "ipfs://Qmb7xRSAvcZhURBnahLNNjPcsyyFEMer23NsCSdfnW2m7i"
    },
    {
      "chainId": 1,
      "address": "0x16B0a1a87ae8aF5C792faBC429C4FE248834842B",
      "symbol": "ALG",
      "name": "Algory",
      "decimals": 18,
      "logoURI": "ipfs://Qmb24huyb1UZiNhajqxrbVF9A7QnFC5MsBsUm9xRZaB4C8"
    },
    {
      "chainId": 1,
      "address": "0x419c4dB4B9e25d6Db2AD9691ccb832C8D9fDA05E",
      "symbol": "DRGN",
      "name": "Dragonchain",
      "decimals": 18,
      "logoURI": "ipfs://QmRS6KSpNrmwatJo2yvQyVPEixxBbMmSdwJUpQfVqDUvN8"
    },
    {
      "chainId": 1,
      "address": "0x32b86b99441480a7E5BD3A26c124ec2373e3F015",
      "symbol": "BAD",
      "name": "BAD IDEA AI",
      "decimals": 18,
      "logoURI": "ipfs://QmbVTW11yZmY7wmKB2tHVB9rEfCy4dwvJs3DmF58FeXKpt"
    },
    {
      "chainId": 1,
      "address": "0x12e2b8033420270db2F3b328E32370Cb5B2Ca134",
      "symbol": "SFP",
      "name": "SafePal",
      "decimals": 18,
      "logoURI": "ipfs://QmVPts8pq7Wr3uehn66tmE8uHMMJ85pGhXjXVBdfRg12Ca"
    },
    {
      "chainId": 1,
      "address": "0x2494a68C1484376fEf880b4c24D91f049d29B02A",
      "symbol": "TTT",
      "name": "The Transfer Token",
      "decimals": 18,
      "logoURI": "ipfs://QmRvgoR4EimrLQxEMTBrrA2XBKL2dGuKZHHTK1EP5vQYgU"
    },
    {
      "chainId": 1,
      "address": "0x37fE0f067FA808fFBDd12891C0858532CFE7361d",
      "symbol": "CIV",
      "name": "Civilization",
      "decimals": 18,
      "logoURI": "ipfs://QmS8yfu2hut7qEqu86nx9hi35epd2KPt35ELMkBVf8dFWS"
    },
    {
      "chainId": 1,
      "address": "0x14feE680690900BA0ccCfC76AD70Fd1b95D10e16",
      "symbol": "PAAL",
      "name": "PAAL AI",
      "decimals": 9,
      "logoURI": "ipfs://QmNjdmLc1q62EFNn1fSMLEBa3vbDvUaYzpLdLWcGNLsR3o"
    },
    {
      "chainId": 1,
      "address": "0xC567bca531992352166252ea5121e535432E81eD",
      "symbol": "TAR",
      "name": "Tartarus",
      "decimals": 8,
      "logoURI": "ipfs://QmSJKZnXPLupCgtrwssgbkXSSAeJFbmX6dFeSoxLVD9D6V"
    },
    {
      "chainId": 1,
      "address": "0x6123B0049F904d730dB3C36a31167D9d4121fA6B",
      "symbol": "RBN",
      "name": "Ribbon Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmVePjvBD1j6STJBypANRZiuRFXURcmWoMtrRajuHXo9y3"
    },
    {
      "chainId": 1,
      "address": "0x6fB3e0A217407EFFf7Ca062D46c26E5d60a14d69",
      "symbol": "IOTX",
      "name": "IoTeX",
      "decimals": 18,
      "logoURI": "ipfs://QmbCems7dusffBC21hovSehgvVYGmZQvL6Vb46wSknuNVn"
    },
    {
      "chainId": 1,
      "address": "0xA2cd3D43c775978A96BdBf12d733D5A1ED94fb18",
      "symbol": "XCN",
      "name": "Onyxcoin",
      "decimals": 18,
      "logoURI": "ipfs://Qme5AUweKBvvTYQGVSwuEZdSXwggYqgADVrzAMxhWbXfio"
    },
    {
      "chainId": 1,
      "address": "0xf4d2888d29D722226FafA5d9B24F9164c092421E",
      "symbol": "LOOKS",
      "name": "LooksRare",
      "decimals": 18,
      "logoURI": "ipfs://QmRGoQJaybuVdF2vReK9EThK796ULyxVMvaACY7eDkFqAc"
    },
    {
      "chainId": 1,
      "address": "0x54a3017754BFba73F71F37d893A368814CbFf457",
      "symbol": "WWCN",
      "name": "Wrapped Widecoin",
      "decimals": 8,
      "logoURI": "ipfs://QmZdkurMfUgKWRG1nRp38wDF8B8ADKxNkniQG1MetKDhjj"
    },
    {
      "chainId": 1,
      "address": "0x0000000000b3F879cb30FE243b4Dfee438691c04",
      "symbol": "GST2",
      "name": "GasToken",
      "decimals": 2,
      "logoURI": "ipfs://QmSpdxTUBZxyg1J3yZjiKfE8HCZRLmGmqgkUEZCLgxjfbm"
    },
    {
      "chainId": 56,
      "address": "0xa2B726B1145A4773F68593CF171187d8EBe4d495",
      "symbol": "INJ",
      "name": "Injective",
      "decimals": 18,
      "logoURI": "ipfs://QmbHj8s17pzLhzMBb9azQu5Gjn4ufJT3iZMm7vCefgJhBn"
    },
    {
      "chainId": 1,
      "address": "0x8642A849D0dcb7a15a974794668ADcfbe4794B56",
      "symbol": "PROS",
      "name": "Prosper",
      "decimals": 18,
      "logoURI": "ipfs://QmewE3Kv1SjWchsXj6iRPBL2Nh5qKHvR6ivb4R3D3nWQo5"
    },
    {
      "chainId": 1,
      "address": "0x23348160D7f5aca21195dF2b70f28Fce2B0be9fC",
      "symbol": "sFTSE",
      "name": "Synthetic FTSE 100 Index",
      "decimals": 18,
      "logoURI": "ipfs://QmTGnrhN18nUuUij8gxo4WnGNy2HiPBBBBEYULT3kZhWjx"
    },
    {
      "chainId": 1,
      "address": "0x4Ba6dDd7b89ed838FEd25d208D4f644106E34279",
      "symbol": "VETH",
      "name": "Vether",
      "decimals": 18,
      "logoURI": "ipfs://QmSoBqGE3sa6vmK1tZXFguJ5LKg8sTGuWTVzKuRdxDuFt5"
    },
    {
      "chainId": 137,
      "address": "0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063",
      "symbol": "DAI",
      "name": "Dai",
      "decimals": 18,
      "logoURI": "ipfs://QmboEaSgdZWMar6bTtvs1kEJ2eoQwonTzayNs8ugpmKFwK"
    },
    {
      "chainId": 137,
      "address": "0x15b7c0c907e4C6b9AdaAaabC300C08991D6CEA05",
      "symbol": "GEL",
      "name": "Gelato",
      "decimals": 18,
      "logoURI": "ipfs://QmQe8BUGdw7YRmwVHYYQ1VeQGpCPj4twgCsv22jK23wQmB"
    },
    {
      "chainId": 1,
      "address": "0x5d4ABC77B8405aD177d8ac6682D584ecbFd46CEc",
      "symbol": "PST",
      "name": "Primas",
      "decimals": 18,
      "logoURI": "ipfs://Qmdky3mAhPeoyvs1i3orBoDf86aM9NJvV49GL9xfrhTX28"
    },
    {
      "chainId": 1,
      "address": "0x74e1698344eC7563EEE5bCB4D1eF894f9bA78e82",
      "symbol": "MCU",
      "name": "MemeCoin Universe",
      "decimals": 9,
      "logoURI": "ipfs://QmPshkjACUnqDAMheciGCuDdDC6u3tifWQBkJH8xNdyXmP"
    },
    {
      "chainId": 1,
      "address": "0xadd5E881984783dD432F80381Fb52F45B53f3e70",
      "symbol": "VITE",
      "name": "Vite",
      "decimals": 18,
      "logoURI": "ipfs://QmU1kD1sU9YJSotL4C8TvAeN2tokWX6sacwDvUwjKPwCrw"
    },
    {
      "chainId": 1,
      "address": "0xdBee1d8C452c781C17Ea20115CbaD0d5f627a680",
      "symbol": "sSXP",
      "name": "Strike SXP",
      "decimals": 8,
      "logoURI": "ipfs://QmceoCJCtNMASmSt3KYxY7XiPUQtq3dgrvbASBVxDW3Jk4"
    },
    {
      "chainId": 1,
      "address": "0x0352557B007A4Aae1511C114409b932F06F9E2f4",
      "symbol": "sRUNE",
      "name": "Synthetic THORChain",
      "decimals": 18,
      "logoURI": "ipfs://QmULP7aGKQB7j8QLoWipQaY4T53vEZzqv5yRKn7u7F8yu6"
    },
    {
      "chainId": 10,
      "address": "0xBC7B1Ff1c6989f006a1185318eD4E7b5796e66E1",
      "symbol": "PENDLE",
      "name": "Pendle",
      "decimals": 18,
      "logoURI": "ipfs://QmUgLTHTMw5TD3NmeH4L9VAcRH7EAevahe5AtP7vPVL4Gc"
    },
    {
      "chainId": 42161,
      "address": "0xf97f4df75117a78c1A5a0DBb814Af92458539FB4",
      "symbol": "LINK",
      "name": "Chainlink",
      "decimals": 18,
      "logoURI": "ipfs://Qmdn6E15MELheFNupKrMosD9KPDFZ9M3wVKkhCuacT1cVj"
    },
    {
      "chainId": 1,
      "address": "0x579CEa1889991f68aCc35Ff5c3dd0621fF29b0C9",
      "symbol": "IQ",
      "name": "IQ",
      "decimals": 18,
      "logoURI": "ipfs://QmZQFbKhmbBRXAzLuBJRGNKdWuow7Knpidcjj8vBtsKUz6"
    },
    {
      "chainId": 1,
      "address": "0x617aeCB6137B5108D1E7D4918e3725C8cEbdB848",
      "symbol": "sBNB",
      "name": "Synthetic Binance Coin",
      "decimals": 18,
      "logoURI": "ipfs://QmauvAXsTmRLTSAx6oFREEmkk387HwKjnBWu9MfQ8AJjXq"
    },
    {
      "chainId": 1,
      "address": "0x14d10003807AC60d07BB0ba82cAeaC8d2087c157",
      "symbol": "iDEFI",
      "name": "Synthetic Inverse DeFi Index",
      "decimals": 18,
      "logoURI": "ipfs://QmQGnnZPGWk1z9uQWL7yYbcAyHa4Yy8kVpFemFhsS26aKB"
    },
    {
      "chainId": 1,
      "address": "0x70401dFD142A16dC7031c56E862Fc88Cb9537Ce0",
      "symbol": "BIRD",
      "name": "Bird.Money",
      "decimals": 18,
      "logoURI": "ipfs://QmRVjZAVdgsFBSnXwv1P3p121Mqc6A1MNPWF4qAo5HNe41"
    },
    {
      "chainId": 1,
      "address": "0x9358e3a79D428c7708da22a5bd085159F6818D12",
      "symbol": "TENSHI",
      "name": "Tenshi",
      "decimals": 9,
      "logoURI": "ipfs://QmZ21QN19rocGFxLywy6SaHyBw1Qko7D6ToZjLPCuzYjHp"
    },
    {
      "chainId": 1,
      "address": "0xb9E6BDcBa653b5f768dD2E2fAF6288df9054e554",
      "symbol": "DAH",
      "name": "Dirham",
      "decimals": 18,
      "logoURI": "ipfs://QmYi4eCEwvELnUNwFSM33JFNKhNg6EuiLAGyEv2Aa4QL4p"
    },
    {
      "chainId": 1,
      "address": "0x839e71613f9aA06E5701CF6de63E303616B0DDE3",
      "symbol": "VVS",
      "name": "VVS Finance",
      "decimals": 18,
      "logoURI": "ipfs://QmVvZiQuKRwHRP2iiQq7aWi6MaDkdccnX4d5KibyzMwSt5"
    },
    {
      "chainId": 1,
      "address": "0x8a854288a5976036A725879164Ca3e91d30c6A1B",
      "symbol": "GET",
      "name": "GET Protocol",
      "decimals": 18,
      "logoURI": "ipfs://QmVHERSsfvp44eLyJPZ8dDxLxAi3gjsVmgBujwSVxaCToZ"
    },
    {
      "chainId": 1,
      "address": "0xFF603F43946A3A28DF5E6A73172555D8C8b02386",
      "symbol": "RNT",
      "name": "OneRoot Network",
      "decimals": 18,
      "logoURI": "ipfs://QmZ73VGPURtajb8DeLHM4o9yCrHYsx7Y8QcDzczSuZvwGK"
    },
    {
      "chainId": 137,
      "address": "0xd0258a3fD00f38aa8090dfee343f10A9D4d30D3F",
      "symbol": "VOXEL",
      "name": "Voxies",
      "decimals": 18,
      "logoURI": "ipfs://Qmb2wg9BXjnuwohrWva4zN4a4ywWePr4uaFPV9HX5yEcmw"
    },
    {
      "chainId": 1,
      "address": "0x0cEC1A9154Ff802e7934Fc916Ed7Ca50bDE6844e",
      "symbol": "POOL",
      "name": "PoolTogether",
      "decimals": 18,
      "logoURI": "ipfs://Qmd1f4NaF27puWeZ87fgymsr8co79Ue2obzH9QumYtjzkn"
    },
    {
      "chainId": 1,
      "address": "0x6Ba460AB75Cd2c56343b3517ffeBA60748654D26",
      "symbol": "UP",
      "name": "UpToken",
      "decimals": 8,
      "logoURI": "ipfs://QmVN2FipRy8iuXNQBPxx28ym98gA7xSdy6ZX5eaDDyWdjY"
    },
    {
      "chainId": 1,
      "address": "0xA9639160481b625ba43677bE753E0A70bf58c647",
      "symbol": "RBXS",
      "name": "RBXSamurai",
      "decimals": 18,
      "logoURI": "ipfs://QmcbhHDvZyE1MEpZxGSwspkpRr1SLzzwKp1s6Lvt4jKXEp"
    },
    {
      "chainId": 1,
      "address": "0x03042482d64577A7bdb282260e2eA4c8a89C064B",
      "symbol": "CNTR",
      "name": "Centaur",
      "decimals": 18,
      "logoURI": "ipfs://QmWXACyGhSBewgQe97PA9bv4qCiBBUPXuFp6sEBkN4ewuS"
    },
    {
      "chainId": 1,
      "address": "0x5B2e4a700dfBc560061e957edec8F6EeEb74a320",
      "symbol": "INS",
      "name": "Insolar",
      "decimals": 10,
      "logoURI": "ipfs://QmQ1dpmYqCqAQbskgwVcSvJkBUBpFwyJHfwPHZ2TvWC8wX"
    },
    {
      "chainId": 1,
      "address": "0x46a97629C9C1F58De6EC18C7F536e7E6d6A6ecDe",
      "symbol": "iDOT",
      "name": "Synthetic Inverse Polkadot",
      "decimals": 18,
      "logoURI": "ipfs://QmR65PEeabRdLWvLAGtmQrxWNf4mUQfGjEqrGRN4VxWPiF"
    },
    {
      "chainId": 1,
      "address": "0x1fC52f1ABade452Dd4674477D4711951700b3d27",
      "symbol": "NOKU",
      "name": "Noku",
      "decimals": 18,
      "logoURI": "ipfs://QmWJGd6BftkEPesNhr5mN4H7TutptNCb355EFMRbBEEbPe"
    },
    {
      "chainId": 1,
      "address": "0x7475C42f8BF2c19F4EAF12fEaabaBA859fdC8914",
      "symbol": "ACCEL",
      "name": "ACCEL",
      "decimals": 18,
      "logoURI": "ipfs://QmREBWcWdsN9yvaLL8oRkC7igE9UpVFAVJ3TGUFtAUMc3B"
    }
  ]
}



================================================
FILE: src/kleros/useTokenList.ts
================================================
import { getAddress } from "ethers";
import { useMemo } from "react";
import { ChecksummedAddress } from "../types";
import t2crtokens from "./t2crtokens.eth.json";

export const useTokenSet = (
  chainId: bigint | undefined,
): Set<ChecksummedAddress> => {
  const res = useMemo(() => {
    const list = t2crtokens.tokens
      .filter((t) => t.chainId === Number(chainId))
      .map((t) => getAddress(t.address));
    return new Set(list);
  }, [chainId]);

  return res;
};



================================================
FILE: src/ots2/contractMatchParsers.ts
================================================
import { getAddress } from "ethers";
import { ChecksummedAddress } from "../types";
import { ContractMatch, ContractResultParser } from "./usePrototypeHooks";

export type ERC20ContractMatch = ContractMatch & {
  name: string;
  symbol: string;
  decimals: number;
};

export type ERC721ContractMatch = ContractMatch & {
  name: string;
  symbol: string;
};

export type ERC1155ContractMatch = ContractMatch & {
  name: string;
  symbol: string;
};

export type ERC1167ContractMatch = ContractMatch & {
  implementation: ChecksummedAddress;
};

export type ERC4626ContractMatch = ERC20ContractMatch & {
  asset: string;
  totalAssets: number;
};
export const contractMatchParser: ContractResultParser<ContractMatch> = (
  m,
) => ({
  blockNumber: BigInt(m.blockNumber),
  address: getAddress(m.address),
});

export const erc20MatchParser: ContractResultParser<ERC20ContractMatch> = (
  m,
) => ({
  blockNumber: BigInt(m.blockNumber),
  address: getAddress(m.address),
  name: m.name,
  symbol: m.symbol,
  decimals: m.decimals,
});

export const erc4626MatchParser: ContractResultParser<ERC4626ContractMatch> = (
  m,
) => ({
  blockNumber: BigInt(m.blockNumber),
  address: getAddress(m.address),
  name: m.name,
  symbol: m.symbol,
  decimals: m.decimals,
  asset: m.asset,
  totalAssets: m.totalAssets,
});

export const erc721MatchParser: ContractResultParser<ERC721ContractMatch> = (
  m,
) => ({
  blockNumber: BigInt(m.blockNumber),
  address: getAddress(m.address),
  name: m.name,
  symbol: m.symbol,
});

export const erc1155MatchParser: ContractResultParser<ERC1155ContractMatch> = (
  m,
) => ({
  blockNumber: BigInt(m.blockNumber),
  address: getAddress(m.address),
  name: m.name,
  symbol: m.symbol,
});

export const erc1167MatchParser: ContractResultParser<ERC1167ContractMatch> = (
  m,
) => ({
  blockNumber: BigInt(m.blockNumber),
  address: getAddress(m.address),
  implementation: getAddress(m.implementation),
});



================================================
FILE: src/ots2/pagination.test.ts
================================================
import { describe, expect } from "@jest/globals";
import { pageToReverseIdx } from "./pagination";

describe("pagination tests", () => {
  test("first page", () => {
    expect(pageToReverseIdx(1, 25, 99)).toEqual({ idx: 74, count: 25 });
  });

  test("last page", () => {
    expect(pageToReverseIdx(4, 25, 99)).toEqual({ idx: 0, count: 24 });
  });

  test("inexistent page", () => {
    expect(pageToReverseIdx(5, 25, 99)).toEqual({ idx: 0, count: 0 });
  });
});



================================================
FILE: src/ots2/pagination.ts
================================================
export type ResultPage = {
  idx: number;
  count: number;
};

/**
 * Calculates the N-th page (1-based) backwards from the total of matches.
 *
 * i.e.: page 1 == [total - pageSize + 1, total]
 */
export const pageToReverseIdx = (
  pageNumber: number,
  pageSize: number,
  totalElements: number | undefined,
): ResultPage | undefined => {
  if (totalElements === undefined) {
    return undefined;
  }

  let idx = totalElements - pageSize * pageNumber;
  let count = pageSize;

  // Last page? [1, total % pageSize]
  if (idx < 0) {
    count = idx + pageSize;
    if (count < 0) {
      count = 0;
    }
    idx = 0;
  }

  return { idx, count };
};



================================================
FILE: src/ots2/usePrototypeHooks.ts
================================================
import { JsonRpcApiProvider } from "ethers";
import useSWR from "swr";
import useSWRImmutable from "swr/immutable";
import { providerFetcher } from "../useErigonHooks";
import { pageToReverseIdx } from "./pagination";

export type BlockSummary = {
  blockNumber: bigint;
  timestamp: number;
};

// TODO: dedup BlockSummary?
export type BlockRewardedSummary = {
  blockNumber: bigint;
  timestamp: number;
  totalFees: bigint;
};

export type ContractMatch = {
  blockNumber: bigint;
  address: string;
};

export type ContractResultParser<T> = (e: any) => T;

export type ContractListResults<T> = {
  blocksSummary: Map<bigint, BlockSummary>;
  results: T[];
};

/**
 * All supported contract search types.
 *
 * Those are NOT arbitrary strings, they are used to compose RPC method
 * names.
 */
export type ContractSearchType =
  | "AllContracts"
  | "ERC20"
  | "ERC4626"
  | "ERC721"
  | "ERC1155"
  | "ERC1167";

export const useGenericContractSearch = <T extends ContractMatch>(
  provider: JsonRpcApiProvider,
  t: ContractSearchType,
  pageNumber: number,
  pageSize: number,
  total: number | undefined,
  parser: ContractResultParser<T>,
): ContractListResults<T> | undefined => {
  const page = pageToReverseIdx(pageNumber, pageSize, total);
  const rpcMethod = `ots2_get${t}List`;
  const fetcher = providerFetcher(provider);
  const { data, error } = useSWR(
    page === undefined ? null : [rpcMethod, page.idx, page.count],
    fetcher,
  );
  if (error) {
    console.error(error);
    return undefined;
  }

  if (data === undefined) {
    return undefined;
  }
  const results = (data.results as any[]).map((m) => parser(m));

  const blockMap = new Map<bigint, BlockSummary>();
  for (const [k, v] of Object.entries(data.blocksSummary as any)) {
    // TODO: parseInt -> BigInt won't work when the int is followed
    // by non-numeric characters
    blockMap.set(BigInt(k), v as any);
  }
  return {
    blocksSummary: blockMap,
    results,
  };
};

export const useGenericContractsCount = (
  provider: JsonRpcApiProvider,
  t: ContractSearchType,
): number | undefined => {
  const rpcMethod = `ots2_get${t}Count`;
  const fetcher = providerFetcher(provider);

  const { data, error } = useSWRImmutable([rpcMethod], fetcher);
  if (error) {
    return undefined;
  }
  return data as number | undefined;
};



================================================
FILE: src/ots2/usePrototypeTransferHooks.ts
================================================
import { useQuery } from "@tanstack/react-query";
import {
  Contract,
  JsonRpcApiProvider,
  TransactionReceipt,
  TransactionResponse,
  ZeroAddress,
  getAddress,
} from "ethers";
import { Fetcher } from "swr";
import useSWRImmutable from "swr/immutable";
import erc20 from "../abi/erc20.json";
import { Match, useSourcifyMetadata } from "../sourcify/useSourcify";
import { ChecksummedAddress } from "../types";
import { providerFetcher, useHasCode } from "../useErigonHooks";
import { formatter } from "../utils/formatter";
import { pageToReverseIdx } from "./pagination";
import { BlockSummary } from "./usePrototypeHooks";

/**
 * All supported transaction search types.
 *
 * Those are NOT arbitrary strings, they are used to compose RPC method
 * names.
 */
export type TransactionSearchType =
  | "ERC20Transfer"
  | "ERC721Transfer"
  | "Withdrawals"
  | "BlocksRewarded";

export type TransactionListResults<T, U = BlockSummary> = {
  blocksSummary: Map<number, U>;
  results: T[];
};

export type TransactionMatch = {
  hash: string;
};

export type TransactionMatchWithData = TransactionMatch & {
  transaction: TransactionResponse;
  receipt: TransactionReceipt;
};

export type WithdrawalMatch = {
  index: bigint;
  blockNumber: number;
  validatorIndex: number;
  amount: bigint;
};

export type BlocksRewardedMatch = {
  blockNumber: number;
  totalFees: bigint;
};

type SearchResultsType<T extends TransactionSearchType> =
  T extends "Withdrawals"
    ? WithdrawalMatch
    : T extends "BlocksRewarded"
      ? BlocksRewardedMatch
      : TransactionMatchWithData;

export const genericTransactionCountQuery = (
  provider: JsonRpcApiProvider,
  typeName: TransactionSearchType,
  address: ChecksummedAddress,
) => {
  const rpcMethod = `ots2_get${typeName}Count`;
  return {
    queryKey: [rpcMethod, address],
    queryFn: () => {
      return provider.send(rpcMethod, [address]);
    },
  };
};

function decodeResults<T extends TransactionSearchType>(
  item: any,
  provider: JsonRpcApiProvider,
  typeName: T,
): SearchResultsType<T> {
  if (typeName === "Withdrawals") {
    return {
      index: formatter.bigInt(item.index),
      blockNumber: formatter.number(item.blockNumber),
      validatorIndex: formatter.number(item.validatorIndex),
      amount: formatter.bigInt(item.amount),
    } as SearchResultsType<T>;
  } else if (typeName === "BlocksRewarded") {
    return {
      blockNumber: formatter.number(item.blockNumber),
    } as SearchResultsType<T>;
  } else {
    return {
      hash: item.hash,
      // provider is a JsonRpcApiProvider; fetcher/res would be undefined otherwise
      transaction: new TransactionResponse(
        formatter.transactionResponse(item.transaction),
        provider as JsonRpcApiProvider,
      ),
      receipt: new TransactionReceipt(
        formatter.transactionReceiptParams(item.receipt),
        provider as JsonRpcApiProvider,
      ),
    } as SearchResultsType<T>;
  }
}

const resultFetcher = <T extends TransactionSearchType, U>(
  provider: JsonRpcApiProvider,
  typeName: T,
): Fetcher<
  TransactionListResults<SearchResultsType<T>, U> | undefined,
  [string, ...any]
> => {
  const fetcher = providerFetcher(provider);

  return async (key) => {
    const res = await fetcher(key);
    if (res === undefined) {
      return undefined;
    }

    const converted = (res.results as any[]).map(
      (m): SearchResultsType<T> => decodeResults<T>(m, provider, typeName),
    );
    const blockMap = new Map<number, U>();
    for (const [k, v] of Object.entries(res.blocksSummary as any)) {
      blockMap.set(parseInt(k), v as any);
    }

    return {
      blocksSummary: blockMap,
      results: converted.reverse(),
    };
  };
};

export const genericTransactionListQuery = <
  T extends TransactionSearchType,
  U = BlockSummary,
>(
  provider: JsonRpcApiProvider,
  typeName: T,
  address: ChecksummedAddress,
  pageNumber: number,
  pageSize: number,
  total: number | undefined,
): {
  queryKey: [
    string,
    ChecksummedAddress,
    number | undefined,
    number | undefined,
  ];
  queryFn: () => Promise<TransactionListResults<SearchResultsType<T>, U>>;
} => {
  const page = pageToReverseIdx(pageNumber, pageSize, total);
  const rpcMethod = `ots2_get${typeName}List`;
  return {
    queryKey: [rpcMethod, address, page?.idx, page?.count],
    queryFn: () => {
      if (provider === undefined || page === undefined) {
        throw new Error("Provider or page is undefined");
      }
      return provider
        .send(rpcMethod, [address, page.idx, page.count])
        .then((res) => {
          const converted = (res.results as any[]).map(
            (m): SearchResultsType<T> =>
              decodeResults<T>(m, provider, typeName),
          );
          const blockMap = new Map<number, U>();
          for (const [k, v] of Object.entries(res.blocksSummary as any)) {
            blockMap.set(parseInt(k), v as any);
          }

          return {
            blocksSummary: blockMap,
            results: converted.reverse(),
          };
        });
    },
  };
};

export const useERC1167Impl = (
  provider: JsonRpcApiProvider,
  address: ChecksummedAddress | undefined,
): ChecksummedAddress | undefined | null => {
  const fetcher = providerFetcher(provider);
  const { data, error } = useSWRImmutable(
    ["ots2_getERC1167Impl", address],
    fetcher,
  );
  if (error) {
    return undefined;
  }
  return data;
};

export const erc20HoldingsQuery = (
  provider: JsonRpcApiProvider,
  address: ChecksummedAddress,
) => {
  return {
    queryKey: ["ots2_getERC20Holdings", address],
    queryFn: async () => {
      const data = await provider.send("ots2_getERC20Holdings", [address]);
      return (data as any[]).map((m) => getAddress(m.address));
    },
  };
};

const ERC20_PROTOTYPE = new Contract(ZeroAddress, erc20);

export const erc20BalanceQuery = (
  provider: JsonRpcApiProvider,
  address: ChecksummedAddress,
  tokenAddress: ChecksummedAddress,
) => {
  return {
    queryKey: ["erc20balance", address, tokenAddress],
    queryFn: async () => {
      // TODO: Remove "as Contract" workaround for https://github.com/ethers-io/ethers.js/issues/4183
      const contract = ERC20_PROTOTYPE.connect(provider).attach(
        tokenAddress,
      ) as Contract;
      return contract.balanceOf(address);
    },
  };
};

export type AddressAttributes = {
  erc20?: boolean;
  erc165?: boolean;
  erc721?: boolean;
  erc1155?: boolean;
  erc1167?: boolean;
  erc1167Logic?: boolean;
};

export const addressAttributesQuery = (
  provider: JsonRpcApiProvider,
  address: ChecksummedAddress | undefined,
) => {
  return {
    queryKey: ["ots2_getAddressAttributes", address],
    queryFn: async () => {
      if (address === undefined) {
        throw new Error("Address is undefined");
      }
      const result = provider.send("ots2_getAddressAttributes", [address]);
      return result === null ? undefined : result;
    },
  };
};

export const useAddressAttributes = (
  provider: JsonRpcApiProvider,
  address: ChecksummedAddress | undefined,
): AddressAttributes | undefined => {
  const { data } = useQuery(addressAttributesQuery(provider, address));
  return data;
};

export type ProxyAttributes = {
  proxyType?: string;
  logicAddress?: ChecksummedAddress;
  proxyHasCode?: boolean;
  proxyMatch?: Match | null | undefined;
};

export const useProxyAttributes = (
  provider: JsonRpcApiProvider,
  address: ChecksummedAddress | undefined,
): ProxyAttributes => {
  const attr = useAddressAttributes(provider, address);
  const proxyType = attr && attr.erc1167 ? "ERC-1167" : undefined;
  const proxyAddress =
    useERC1167Impl(provider, attr && attr.erc1167 ? address : undefined) ??
    undefined;
  const checksummedProxyAddress = proxyAddress
    ? getAddress(proxyAddress)
    : undefined;
  const proxyHasCode = useHasCode(provider, checksummedProxyAddress);
  const proxyMatch = useSourcifyMetadata(
    proxyHasCode ? checksummedProxyAddress : undefined,
    provider._network.chainId,
  );

  return {
    proxyType,
    logicAddress: checksummedProxyAddress,
    proxyHasCode,
    proxyMatch,
  };
};



================================================
FILE: src/ots2/useUIHooks.ts
================================================
import { useContext, useMemo } from "react";
import { useSearchParams } from "react-router-dom";
import { PAGE_SIZE } from "../params";
import { RuntimeContext } from "../useRuntime";
import {
  BlockSummary,
  ContractMatch,
  ContractResultParser,
  ContractSearchType,
  useGenericContractSearch,
  useGenericContractsCount,
} from "./usePrototypeHooks";

/**
 * Extract the page number from query string; if it doesn't
 * exist or is not a number, assumes 1.
 */
export const usePageNumber = () => {
  let pageNumber = 1;

  const [searchParams] = useSearchParams();
  const p = searchParams.get("p");
  if (p) {
    try {
      pageNumber = parseInt(p);
    } catch (err) {}
  }

  return pageNumber;
};

const useContractSearch = <T extends ContractMatch>(
  t: ContractSearchType,
  p: ContractResultParser<T>,
) => {
  const { provider } = useContext(RuntimeContext);

  const pageNumber = usePageNumber();
  const total = useGenericContractsCount(provider, t);
  const results = useGenericContractSearch(
    provider,
    t,
    pageNumber,
    PAGE_SIZE,
    total,
    p,
  );

  return {
    pageNumber,
    results,
    total,
  };
};

export type ResultMapper<T> = (
  m: any,
  blocksSummary: ReadonlyMap<bigint, BlockSummary>,
) => T;

/**
 * Basic building block for a generic contract search browsing page.
 */
export const useContractSearchPage = <
  T extends ContractMatch,
  U extends unknown,
>(
  t: ContractSearchType,
  p: ContractResultParser<T>,
  mapper: ResultMapper<U>,
) => {
  const { pageNumber, results, total } = useContractSearch(t, p);

  const page: U[] | undefined = useMemo(() => {
    if (results === undefined) {
      return undefined;
    }

    const mapperWrapper = (m: any) => mapper(m, results.blocksSummary);
    return results.results.map(mapperWrapper).reverse();
  }, [results]);

  return {
    pageNumber,
    page,
    total,
  };
};



================================================
FILE: src/scilla/useZRC2Hooks.ts
================================================
import { useQuery } from "@tanstack/react-query";
import { toChecksumAddress } from "@zilliqa-js/crypto";
import { Zilliqa } from "@zilliqa-js/zilliqa";
import { AbiCoder, JsonRpcApiProvider } from "ethers";
import { ChecksummedAddress, ZRC2Meta, ZRC2Transfer } from "../types";
import { useTxData } from "../useErigonHooks";

/**
 * Fetches ZRC2 token metadata from a Scilla contract
 */
export const useZRC2Metadata = (
  zilliqa: Zilliqa | undefined,
  contractAddress: ChecksummedAddress,
): ZRC2Meta | undefined => {
  const { data } = useQuery({
    queryKey: ["zrc2_metadata", contractAddress],
    queryFn: async () => {
      if (!zilliqa) return null;

      try {
        const contract = zilliqa.contracts.at(contractAddress);
        const state = await contract.getInit();

        const getValueForName = (name: string): string | undefined => {
          const item = state.find((s: any) => s.vname === name);
          return item ? item.value : undefined;
        };

        return {
          name: getValueForName("name") || "Unknown Token",
          symbol: getValueForName("symbol") || "UNK",
          decimals: parseInt(getValueForName("decimals") || "0"),
          contractAddress,
          version: getValueForName("version"),
        };
      } catch (error) {
        console.error("Failed to fetch ZRC2 metadata:", error);
        return null;
      }
    },
    enabled: !!zilliqa && !!contractAddress,
  });

  return data || undefined;
};

/**
 * Detects ZRC2 transfers from Scilla transaction receipts
 */
export const findZRC2TransfersInEventLog = (
  eventLog: any, // Zilliqa transaction receipt
): ZRC2Transfer | null => {
  if (
    eventLog._eventname === "TransferSuccess" ||
    eventLog._eventname === "TransferFromSuccess"
  ) {
    try {
      const params = eventLog.params || [];

      // Find sender, recipient, and amount from params
      const senderParam = params.find((p: any) => p.vname === "sender");
      const recipientParam = params.find((p: any) => p.vname === "recipient");
      const amountParam = params.find((p: any) => p.vname === "amount");

      if (senderParam && recipientParam && amountParam) {
        return {
          token: eventLog.address,
          from: toChecksumAddress(senderParam.value),
          to: toChecksumAddress(recipientParam.value),
          value: BigInt(amountParam.value),
          contractAddress: eventLog.address,
          transitionName: "Transfer",
        };
      }
    } catch (error) {
      console.warn("Failed to parse ZRC2 transfer event:", error);
    }
  }

  return null;
};

/**
 * Hook to detect ZRC2 transfers in a transaction
 */
export const useZRC2Transfers = (
  provider: JsonRpcApiProvider,
  txHash: string | undefined,
): ZRC2Transfer[] | undefined => {
  const txData = useTxData(provider, txHash!);

  const { data: transfers } = useQuery({
    queryKey: ["zrc2_transfers", txHash],
    queryFn: async () => {
      const zrc2Transfers = txData?.confirmedData?.logs
        ?.map((log) => {
          try {
            const data = JSON.parse(
              AbiCoder.defaultAbiCoder().decode(["string"], log.data)[0],
            );

            return findZRC2TransfersInEventLog(data);
          } catch (err) {
            return undefined;
          }
        })
        .filter((log) => !!log);

      return zrc2Transfers as any[];
    },
    enabled: !!txData,
  });

  return transfers;
};



================================================
FILE: src/scilla/ZRC2TransferItem.tsx
================================================
import { faCaretRight, faSackDollar } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { FC, memo, useContext } from "react";
import TransactionAddress from "../execution/components/TransactionAddress";
import FormattedBalanceHighlighter from "../selection/FormattedBalanceHighlighter";
import { AddressContext, ZRC2Transfer } from "../types";
import { RuntimeContext } from "../useRuntime";
import { useZRC2Metadata } from "./useZRC2Hooks";

type ZRC2TransferItemProps = {
  transfer: ZRC2Transfer;
};

const ZRC2TransferItem: FC<ZRC2TransferItemProps> = ({ transfer }) => {
  const { zilliqa } = useContext(RuntimeContext);
  const tokenMeta = useZRC2Metadata(zilliqa, transfer.token);

  return (
    <div className="flex items-baseline space-x-2 truncate px-2 py-1 hover:bg-gray-100">
      <div
        className="grid w-full items-baseline gap-x-1"
        style={{ gridTemplateColumns: "auto 1fr 1fr 1fr" }}
      >
        {/* ZRC2 Transfer Label */}
        <div className="flex items-baseline space-x-1">
          <span className="text-xs font-medium text-purple-600 bg-purple-100 px-2 py-1 rounded">
            ZRC2
          </span>
        </div>

        {/* From Address */}
        <div className="flex items-baseline space-x-1">
          <TransactionAddress
            address={transfer.from}
            addressCtx={AddressContext.FROM}
            showCodeIndicator
            displayAsBech32={true}
          />
        </div>

        {/* To Address */}
        <div className="flex items-baseline space-x-1">
          <span className="text-gray-500">
            <FontAwesomeIcon icon={faCaretRight} size="1x" />
          </span>
          <TransactionAddress
            address={transfer.to}
            addressCtx={AddressContext.TO}
            showCodeIndicator
            displayAsBech32={true}
          />
        </div>

        {/* Amount and Token */}
        <div className="col-span-1 flex items-baseline space-x-1">
          <span className="text-gray-500">
            <FontAwesomeIcon icon={faSackDollar} size="1x" />
          </span>
          <span>
            <FormattedBalanceHighlighter
              value={transfer.value}
              decimals={tokenMeta?.decimals ?? 0}
            />
          </span>
          <span className="text-sm text-gray-600">
            {tokenMeta?.symbol || "Unknown"}
          </span>
          <TransactionAddress address={transfer.token} displayAsBech32={true} />
        </div>
      </div>
    </div>
  );
};

export default memo(ZRC2TransferItem);



================================================
FILE: src/search/BlockItem.tsx
================================================
import React from "react";
import { NavLink } from "react-router-dom";
import BlockLink from "../components/BlockLink";
import HexValue from "../components/HexValue";
import Timestamp from "../components/Timestamp";
import { formatValue } from "../components/formatter";
import BlockReward from "../execution/components/BlockReward";
import { MultiColumnDisplay } from "../search/useMultiColumnDisplayToggler";
import { blockTxsURL } from "../url";
import { ExtendedBlock } from "../useErigonHooks";
import TransactionItemFiatFee from "./TransactionItemFiatFee";
import { FeeDisplay } from "./useFeeToggler";

type BlockItemProps = {
  block: ExtendedBlock;
  feeDisplay: FeeDisplay;
  multiColumnDisplay: MultiColumnDisplay;
};

const BlockItem: React.FC<BlockItemProps> = ({
  block,
  feeDisplay,
  multiColumnDisplay,
}) => {
  return (
    <div
      className="grid grid-cols-10 items-baseline gap-x-1 border-t border-gray-200 text-sm 
    hover:bg-skin-table-hover px-2 py-3"
    >
      <span>
        <BlockLink blockTag={block.number} />
      </span>
      <span>
        <NavLink
          className="rounded-lg bg-link-blue/10 px-2 py-1 text-xs text-link-blue hover:bg-link-blue/100 hover:text-white"
          to={blockTxsURL(block.number)}
        >
          {block.transactionCount} transactions
        </NavLink>
      </span>
      <span className="col-span-3">
        <HexValue value={block.hash ?? "null"} />
      </span>
      <span className="col-span-2">
        {multiColumnDisplay == MultiColumnDisplay.SHOW_PROPOSER && (
          <div>
            {" "}
            <HexValue value={block.miner ?? "none"} />
          </div>
        )}
        {multiColumnDisplay == MultiColumnDisplay.SHOW_PARENT && (
          <div>
            {" "}
            <HexValue value={block.parentHash ?? "none"} />
          </div>
        )}
      </span>
      <span className="truncate font-balance text-xs text-gray-500">
        {feeDisplay === FeeDisplay.TX_FEE && formatValue(block.feeReward, 18)}
        {feeDisplay === FeeDisplay.TX_FEE_USD && (
          <TransactionItemFiatFee
            blockTag={block.number}
            fee={block.feeReward}
          />
        )}
        {feeDisplay === FeeDisplay.GAS_PRICE && formatValue(block.gasUsed, 9)}
      </span>
      <span className="truncate">
        <BlockReward block={block} />
      </span>
      <Timestamp age={false} value={block.timestamp} />
    </div>
  );
};

export default BlockItem;



================================================
FILE: src/search/BlockResultHeader.tsx
================================================
import React from "react";
import { EmptyBlocksDisplay } from "./useEmptyBlocksToggler";
import { FeeDisplay } from "./useFeeToggler";
import { MultiColumnDisplay } from "./useMultiColumnDisplayToggler";

export type ResultHeaderProps = {
  feeDisplay: FeeDisplay;
  emptyBlocksDisplay: EmptyBlocksDisplay;
  feeDisplayToggler: () => void;
  emptyBlocksDisplayToggler: () => void;
  multiColumnDisplay: MultiColumnDisplay;
  multiColumnDisplayToggler: () => void;
};

const BlockResultHeader: React.FC<ResultHeaderProps> = ({
  feeDisplay,
  feeDisplayToggler,
  emptyBlocksDisplay,
  emptyBlocksDisplayToggler,
  multiColumnDisplay,
  multiColumnDisplayToggler,
}) => (
  <div className="grid grid-cols-10 gap-x-1 border-t border-b border-gray-200 bg-gray-100 px-2 py-2 text-sm font-bold text-gray-500">
    <div>Height</div>
    <div>
      <button
        className="text-link-blue hover:text-link-blue-hover"
        onClick={emptyBlocksDisplayToggler}
      >
        {emptyBlocksDisplay === EmptyBlocksDisplay.SHOW_EMPTY_BLOCKS &&
          "Txns [all-blks]"}
        {emptyBlocksDisplay === EmptyBlocksDisplay.HIDE_EMPTY_BLOCKS &&
          "Txns [non-empty-blks]"}
      </button>
    </div>
    <div className="col-span-3">Block Hash</div>
    <div className="col-span-2">
      <button
        className="text-link-blue hover:text-link-blue-hover"
        onClick={multiColumnDisplayToggler}
      >
        {multiColumnDisplay == MultiColumnDisplay.SHOW_PARENT && "Parent"}
        {multiColumnDisplay == MultiColumnDisplay.SHOW_PROPOSER && "Proposer"}
      </button>
    </div>
    <div>
      <button
        className="text-link-blue hover:text-link-blue-hover"
        onClick={feeDisplayToggler}
      >
        {feeDisplay === FeeDisplay.TX_FEE && "Txn Fee"}
        {feeDisplay === FeeDisplay.TX_FEE_USD && "Txn Fee (USD)"}
        {feeDisplay === FeeDisplay.GAS_PRICE && "Gas Price"}
      </button>
    </div>
    <div>Rewards</div>
    <div>Timestamp</div>
  </div>
);

export default React.memo(BlockResultHeader);



================================================
FILE: src/search/CameraScanner.tsx
================================================
import { Dialog, DialogPanel, DialogTitle } from "@headlessui/react";
import { BarcodeFormat } from "@zxing/library";
import { isAddress } from "ethers";
import React, { useTransition } from "react";
import { useNavigate } from "react-router-dom";
import { QrReader } from "./qr-reader/QrReader";
import { OnResultFunction } from "./qr-reader/useQrReader";

type CameraScannerProps = {
  turnOffScan: () => void;
};

const CameraScanner: React.FC<CameraScannerProps> = ({ turnOffScan }) => {
  const navigate = useNavigate();
  const [_, startTransition] = useTransition();

  const evaluateScan: OnResultFunction = (result, error, codeReader) => {
    console.log("scan");
    if (!error && result?.getBarcodeFormat() === BarcodeFormat.QR_CODE) {
      const text = result.getText();
      console.log(`Scanned: ${text}`);
      if (!isAddress(text)) {
        console.warn("Not an ETH address");
        return;
      }

      startTransition(() => {
        navigate(`/search?q=${text}`);
        turnOffScan();
      });
    }
  };

  return (
    <Dialog
      className="fixed inset-0 z-10 overflow-y-auto"
      open={true}
      onClose={turnOffScan}
    >
      <div className="flex min-h-screen items-center justify-center">
        <div className="fixed inset-0 bg-black opacity-30" />
        <DialogPanel>
          <DialogTitle className="absolute left-0 top-0 w-full bg-white text-center text-lg">
            Point an ETH address QR code to camera
          </DialogTitle>
          <div className="absolute inset-0 m-auto h-screen max-h-screen w-full min-w-max max-w-3xl rounded bg-transparent">
            <QrReader
              className="m-auto h-full"
              constraints={{}}
              onResult={evaluateScan}
            />
          </div>
        </DialogPanel>
      </div>
    </Dialog>
  );
};

export default CameraScanner;



================================================
FILE: src/search/DSBlockItem.tsx
================================================
import { DsBlockObj } from "@zilliqa-js/core/dist/types/src/types";
import React from "react";
import DSBlockLink from "../components/DSBlockLink";
import HexValue from "../components/HexValue";
import Timestamp from "../components/Timestamp";
import TransactionAddress from "../execution/components/TransactionAddress";
import {
  addHexPrefix,
  commify,
  pubKeyToAddr,
  zilliqaToOtterscanTimestamp,
} from "../utils/utils";

type DSBlockItemProps = {
  block: DsBlockObj;
  selectedAddress?: string;
};

const DSBlockItem: React.FC<DSBlockItemProps> = ({
  block,
  selectedAddress,
}) => {
  return (
    <div
      className="grid grid-cols-12 items-baseline gap-x-1 border-t border-gray-200 text-sm 
    hover:bg-skin-table-hover px-2 py-3"
    >
      <span>
        <DSBlockLink blockTag={block.header.BlockNum} />
      </span>
      <span>{commify(block.header.Difficulty)}</span>
      <span>{commify(block.header.DifficultyDS)}</span>
      <span className="col-span-2 truncate">
        <Timestamp
          age={false}
          value={zilliqaToOtterscanTimestamp(block.header.Timestamp)}
        />
      </span>
      <span className="col-span-2 truncate">
        <TransactionAddress
          address={pubKeyToAddr(block.header.LeaderPubKey)}
          selectedAddress={selectedAddress}
          miner={true}
        />
      </span>
      <span className="col-span-2 truncate">
        <HexValue value={addHexPrefix(block.header.PrevHash)} />
      </span>
    </div>
  );
};

export default DSBlockItem;



================================================
FILE: src/search/DSBlockResultHeader.tsx
================================================
import React from "react";

const DSBlockResultHeader: React.FC = () => (
  <div className="grid grid-cols-12 gap-x-1 border-t border-b border-gray-200 bg-gray-100 px-2 py-2 text-sm font-bold text-gray-500">
    <div>Height</div>
    <div>Difficulty</div>
    <div>DS Difficulty</div>
    <div className="col-span-2">Timestamp</div>
    <div className="col-span-2">DS Leader</div>
    <div className="col-span-2">Prev Block Hash</div>
  </div>
);

export default React.memo(DSBlockResultHeader);



================================================
FILE: src/search/messages.ts
================================================
import { commify } from "../utils/utils";

export const totalTransactionsFormatter = (total: number) =>
  `A total of ${commify(total)} ${
    total === 1 ? "transaction" : "transactions"
  } found`;

export const totalWithdrawalsFormatter = (total: number) =>
  `A total of ${commify(total)} ${
    total === 1 ? "withdrawal" : "withdrawals"
  } found`;

export const totalBlocksFormatter = (total: number) =>
  `A total of ${commify(total)} ${total === 1 ? "block" : "blocks"} found`;

export const totalContractsFormatter = (total: number) =>
  `A total of ${commify(total)} ${
    total === 1 ? "contract" : "contracts"
  } found`;

export const getTotalFormatter = (
  typeName: string,
): ((total: number) => string) => {
  switch (typeName) {
    case "transaction":
      return totalTransactionsFormatter;
    case "withdrawal":
      return totalWithdrawalsFormatter;
    case "contract":
      return totalContractsFormatter;
    case "block":
      return totalBlocksFormatter;
    default:
      return (total: number) => `A total of ${total} found`;
  }
};



================================================
FILE: src/search/PageButton.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import PageButton from "./PageButton";

const meta = {
  component: PageButton,
} satisfies Meta<typeof PageButton>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    goToPage: 5,
    children: <>5</>,
  },
};

export const Disabled: Story = {
  args: {
    ...Default.args,
    disabled: true,
  },
};



================================================
FILE: src/search/PageButton.tsx
================================================
import { FC, PropsWithChildren } from "react";
import { NavLink } from "react-router-dom";

type PageButtonProps = {
  goToPage: number;
  disabled?: boolean;
};

const PageButton: FC<PropsWithChildren<PageButtonProps>> = ({
  goToPage,
  disabled,
  children,
}) => {
  if (disabled) {
    return (
      <span className="select-none rounded-lg bg-link-blue/10 px-3 py-2 text-xs text-gray-400">
        {children}
      </span>
    );
  }

  return (
    <NavLink
      className="select-none rounded-lg bg-link-blue/10 px-3 py-2 text-xs text-link-blue transition-colors hover:bg-link-blue/100 hover:text-white disabled:cursor-default disabled:bg-link-blue disabled:text-gray-400"
      to={`?p=${goToPage}`}
    >
      {children}
    </NavLink>
  );
};

export default PageButton;



================================================
FILE: src/search/PageControl.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import PageControl from "./PageControl";

const meta = {
  component: PageControl,
} satisfies Meta<typeof PageControl>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    pageNumber: 2,
    pageSize: 25,
    total: 100,
  },
};

export const First: Story = {
  args: {
    pageNumber: 1,
    pageSize: 25,
    total: 100,
  },
};

export const Last: Story = {
  args: {
    pageNumber: 4,
    pageSize: 25,
    total: 100,
  },
};



================================================
FILE: src/search/PageControl.tsx
================================================
import { FC, memo } from "react";
import { commify } from "../utils/utils";
import PageButton from "./PageButton";

type PageControlProps = {
  pageNumber: number;
  pageSize: number;
  total: number;
};

const PageControl: FC<PageControlProps> = ({ pageNumber, pageSize, total }) => {
  const totalPages = Math.max(1, Math.ceil(total / pageSize));
  const isFirst = pageNumber === 1;
  const isLast = pageNumber === totalPages;

  return (
    <div className="flex items-baseline space-x-1 text-xs">
      <PageButton goToPage={1} disabled={isFirst}>
        First
      </PageButton>
      <PageButton goToPage={pageNumber - 1} disabled={isFirst}>
        {"<"}
      </PageButton>
      <PageButton goToPage={1} disabled>
        Page {commify(pageNumber)} of {commify(totalPages)}
      </PageButton>
      <PageButton goToPage={pageNumber + 1} disabled={isLast}>
        {">"}
      </PageButton>
      <PageButton goToPage={totalPages} disabled={isLast}>
        Last
      </PageButton>
    </div>
  );
};

export default memo(PageControl);



================================================
FILE: src/search/PendingResults.tsx
================================================
import React from "react";

const PendingResults: React.FC = () => (
  <div className="grid animate-pulse grid-cols-12 items-baseline gap-x-1 border-t border-gray-200 px-2 py-3 text-sm">
    <div className="col-span-2 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-2 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-2 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-2 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
  </div>
);

export const PendingRecentBlockResults: React.FC = React.memo(() => (
  <div className="grid animate-pulse grid-cols-5 items-baseline gap-x-1 border-t border-gray-200 px-2 py-3 text-sm">
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
  </div>
));

export const PendingBlockResults: React.FC = React.memo(() => (
  <div className="grid animate-pulse grid-cols-5 items-baseline gap-x-1 border-t border-gray-200 px-2 py-3 text-sm">
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-4 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
  </div>
));

export const PendingRecentDSBlockResults: React.FC = React.memo(() => (
  <div className="grid animate-pulse grid-cols-4 items-baseline gap-x-1 border-t border-gray-200 px-2 py-3 text-sm">
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
  </div>
));

export const PendingTransactionResults: React.FC = React.memo(() => (
  <div className="grid animate-pulse grid-cols-12 items-baseline gap-x-1 border-t border-gray-200 px-2 py-3 text-sm">
    <div className="col-span-2 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-2 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-2 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-2 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
  </div>
));

export const PendingChainInfoResults: React.FC = React.memo(() => (
  <div className="grid animate-pulse grid-cols-4 items-baseline gap-x-1 border-t border-gray-200 px-2 py-3 text-sm">
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
    <div className="col-span-1 h-5 w-full rounded bg-gradient-to-r from-gray-100 to-transparent"></div>
  </div>
));

export default React.memo(PendingResults);



================================================
FILE: src/search/RecentBlockItem.tsx
================================================
import React from "react";
import { NavLink } from "react-router-dom";
import BlockLink from "../components/BlockLink";
import Timestamp from "../components/Timestamp";
import { formatValue } from "../components/formatter";
import BlockReward from "../execution/components/BlockReward";
import { blockTxsURL } from "../url";
import { ExtendedBlock } from "../useErigonHooks";
import TransactionItemFiatFee from "./TransactionItemFiatFee";
import { FeeDisplay } from "./useFeeToggler";

type BlockItemProps = {
  block: ExtendedBlock;
  feeDisplay: FeeDisplay;
};

const RecentBlockItem: React.FC<BlockItemProps> = ({ block, feeDisplay }) => {
  return (
    <div
      className="grid grid-cols-5 items-baseline gap-x-1 border-t border-gray-200 text-sm 
    hover:bg-skin-table-hover px-2 py-3"
    >
      <span>
        <BlockLink blockTag={block.number} />
      </span>
      <span>
        <NavLink
          className="rounded-lg bg-link-blue/10 px-2 py-1 text-xs text-link-blue hover:bg-link-blue/100 hover:text-white"
          to={blockTxsURL(block.number)}
        >
          {block.transactionCount} transactions
        </NavLink>
      </span>
      <span className="truncate font-balance text-xs text-gray-500">
        {feeDisplay === FeeDisplay.TX_FEE && formatValue(block.feeReward, 18)}
        {feeDisplay === FeeDisplay.TX_FEE_USD && (
          <TransactionItemFiatFee
            blockTag={block.number}
            fee={block.feeReward}
          />
        )}
        {feeDisplay === FeeDisplay.GAS_PRICE && formatValue(block.gasUsed, 9)}
      </span>
      <span className="truncate">
        <BlockReward block={block} />
      </span>
      <Timestamp age={false} value={block.timestamp} />
    </div>
  );
};

export default RecentBlockItem;



================================================
FILE: src/search/RecentBlockResultHeader.tsx
================================================
import React from "react";
import { FeeDisplay } from "./useFeeToggler";

export type ResultHeaderProps = {
  feeDisplay: FeeDisplay;
  feeDisplayToggler: () => void;
};

const RecentBlockResultHeader: React.FC<ResultHeaderProps> = ({
  feeDisplay,
  feeDisplayToggler,
}) => (
  <div className="grid grid-cols-5 gap-x-1 border-t border-b border-gray-200 bg-gray-100 px-2 py-2 text-sm font-bold text-gray-500">
    <div>Height</div>
    <div>Txns</div>
    <div>
      <button
        className="text-link-blue hover:text-link-blue-hover"
        onClick={feeDisplayToggler}
      >
        {feeDisplay === FeeDisplay.TX_FEE && "Txn Fee"}
        {feeDisplay === FeeDisplay.TX_FEE_USD && "Txn Fee (USD)"}
        {feeDisplay === FeeDisplay.GAS_PRICE && "Gas Price"}
      </button>
    </div>
    <div>Rewards</div>
    <div>Timestamp</div>
  </div>
);

export default React.memo(RecentBlockResultHeader);



================================================
FILE: src/search/RecentDSBlockItem.tsx
================================================
import { DsBlockObj } from "@zilliqa-js/core/dist/types/src/types";
import DSBlockLink from "../components/DSBlockLink";
import TimestampAge from "../components/TimestampAge";
import { commify, zilliqaToOtterscanTimestamp } from "../utils/utils";

type DSBlockItemProps = {
  block: DsBlockObj;
};

const RecentDSBlockItem: React.FC<DSBlockItemProps> = ({ block }) => {
  return (
    <div
      className="grid grid-cols-4 items-baseline gap-x-1 border-t border-gray-200 text-sm 
    hover:bg-skin-table-hover px-2 py-3"
    >
      <span>
        <DSBlockLink blockTag={block.header.BlockNum} />
      </span>
      <span>{commify(block.header.Difficulty)}</span>
      <span>{commify(block.header.DifficultyDS)}</span>
      <TimestampAge
        timestamp={zilliqaToOtterscanTimestamp(block.header.Timestamp)}
      />
    </div>
  );
};

export default RecentDSBlockItem;



================================================
FILE: src/search/RecentDSBlockResultHeader.tsx
================================================
import React from "react";

const RecentDSBlockResultHeader: React.FC = () => (
  <div className="grid grid-cols-4 gap-x-1 border-t border-b border-gray-200 bg-gray-100 px-2 py-2 text-sm font-bold text-gray-500">
    <div>Height</div>
    <div>Difficulty</div>
    <div>Difficulty</div>
    <div>Age</div>
  </div>
);

export default React.memo(RecentDSBlockResultHeader);



================================================
FILE: src/search/RecentDSNavBar.tsx
================================================
import { FC, memo } from "react";
import { NavLink } from "react-router-dom";

type RecentNavBarProps = {
  isLoading: boolean;
};

const RecentDSNavBar: FC<RecentNavBarProps> = ({ isLoading }) => (
  <div className="flex items-baseline justify-between py-3">
    <div className="text-sm text-gray-500">
      {isLoading ? "Waiting for blocks..." : "DS Blocks"}
    </div>
    <NavLink
      className={"text-link-blue hover:text-link-blue-hover truncate"}
      to={`/dsblocklist`}
      title={"View All"}
    >
      {"View All"}
    </NavLink>
  </div>
);

export default memo(RecentDSNavBar);



================================================
FILE: src/search/RecentNavBar.tsx
================================================
import { FC, memo } from "react";
import { NavLink } from "react-router-dom";

type RecentNavBarProps = {
  isLoading: boolean;
};

const RecentNavBar: FC<RecentNavBarProps> = ({ isLoading }) => (
  <div className="flex items-baseline justify-between py-3">
    <div className="text-sm text-gray-500">
      {isLoading ? "Waiting for blocks..." : "Transaction Blocks"}
    </div>
    <NavLink
      className={"text-link-blue hover:text-link-blue-hover truncate"}
      to={`/blocklist`}
      title={"View All"}
    >
      {"View All"}
    </NavLink>
  </div>
);

export default memo(RecentNavBar);



================================================
FILE: src/search/ResultHeader.tsx
================================================
import React from "react";
import StandardTHead from "../components/StandardTHead";
import { FeeDisplay } from "./useFeeToggler";

export type ResultHeaderProps = {
  feeDisplay: FeeDisplay;
  feeDisplayToggler: () => void;
};

const ResultHeader: React.FC<ResultHeaderProps> = ({
  feeDisplay,
  feeDisplayToggler,
}) => (
  <StandardTHead>
    <th>Txn Hash</th>
    <th>Method</th>
    <th className="w-28">Block</th>
    <th className="w-36">Age</th>
    <th>From</th>
    <th>To</th>
    <th className="min-w-52">Value</th>
    <th>
      <button
        className="text-link-blue hover:text-link-blue-hover"
        onClick={feeDisplayToggler}
      >
        {feeDisplay === FeeDisplay.TX_FEE && "Txn Fee"}
        {feeDisplay === FeeDisplay.TX_FEE_USD && "Txn Fee (USD)"}
        {feeDisplay === FeeDisplay.GAS_PRICE && "Gas Price"}
      </button>
    </th>
  </StandardTHead>
);

export default React.memo(ResultHeader);



================================================
FILE: src/search/search.ts
================================================
import { fromBech32Address } from "@zilliqa-js/crypto";
import {
  JsonRpcApiProvider,
  TransactionReceiptParams,
  TransactionResponse,
  isAddress,
  isHexString,
} from "ethers";
import {
  ChangeEventHandler,
  FormEventHandler,
  RefObject,
  useRef,
  useState,
} from "react";
import { NavigateFunction, useNavigate } from "react-router";
import useKeyboardShortcut from "use-keyboard-shortcut";
import {
  getOpFeeData,
  isOptimisticChain,
} from "../execution/op-tx-calculation";
import { PAGE_SIZE } from "../params";
import { queryClient } from "../queryClient";
import { ProcessedTransaction, TransactionChunk } from "../types";
import { formatter } from "../utils/formatter";

export const rawToProcessed = (provider: JsonRpcApiProvider, _rawRes: any) => {
  const _res: TransactionResponse[] = _rawRes.txs.map(
    (t: any) =>
      new TransactionResponse(formatter.transactionResponse(t), provider),
  );

  return {
    txs: _res.map((t, i): ProcessedTransaction => {
      const _rawReceipt = _rawRes.receipts[i];
      const _receipt: TransactionReceiptParams =
        formatter.transactionReceiptParams(_rawReceipt);

      let fee: bigint;
      let gasPrice: bigint;
      if (isOptimisticChain(provider._network.chainId)) {
        const l1Fee: bigint = formatter.bigInt(_rawReceipt.l1Fee ?? 0n);
        ({ fee, gasPrice } = getOpFeeData(
          t.type,
          t.gasPrice!,
          _receipt.gasUsed,
          l1Fee,
        ));
      } else {
        fee = _receipt.gasUsed * t.gasPrice!;
        gasPrice = t.gasPrice!;
      }

      return {
        blockNumber: t.blockNumber!,
        timestamp: formatter.number(_rawReceipt.timestamp),
        idx: _receipt.index,
        hash: t.hash,
        type: t.type,
        from: t.from,
        to: t.to ?? null,
        createdContractAddress: _receipt.contractAddress ?? undefined,
        value: t.value,
        fee,
        gasPrice,
        data: t.data,
        status: _receipt.status!,
      };
    }),
    firstPage: _rawRes.firstPage,
    lastPage: _rawRes.lastPage,
  };
};

export const getTransactionQuery = (
  provider: JsonRpcApiProvider,
  transactionHash: string,
) => ({
  queryKey: ["eth_getTransactionByHash", transactionHash],
  queryFn: () => {
    return provider.getTransaction(transactionHash);
  },
});

export const searchTransactionsQuery = (
  provider: JsonRpcApiProvider,
  address: string,
  baseBlock: number,
  direction: "before" | "after",
): {
  queryKey: [string, string, number];
  queryFn: () => Promise<TransactionChunk>;
} => {
  const method =
    direction === "before"
      ? "ots_searchTransactionsBefore"
      : "ots_searchTransactionsAfter";
  return {
    queryKey: [method, address, baseBlock],
    queryFn: async () => {
      const _rawRes = await provider.send(method, [
        address,
        baseBlock,
        PAGE_SIZE,
      ]);
      return rawToProcessed(provider, _rawRes);
    },
  };
};

export class SearchController {
  private txs: ProcessedTransaction[];

  private pageStart: number;

  private pageEnd: number;

  private constructor(
    readonly address: string,
    txs: ProcessedTransaction[],
    readonly isFirst: boolean,
    readonly isLast: boolean,
    boundToStart: boolean,
  ) {
    this.txs = txs;
    if (boundToStart) {
      this.pageStart = 0;
      this.pageEnd = Math.min(txs.length, PAGE_SIZE);
    } else {
      this.pageEnd = txs.length;
      this.pageStart = Math.max(0, txs.length - PAGE_SIZE);
    }
  }

  static async firstPage(
    provider: JsonRpcApiProvider,
    address: string,
  ): Promise<SearchController> {
    const newTxs: TransactionChunk = await queryClient.fetchQuery(
      searchTransactionsQuery(provider, address, 0, "before"),
    );
    return new SearchController(
      address,
      newTxs.txs,
      newTxs.firstPage,
      newTxs.lastPage,
      true,
    );
  }

  static async middlePage(
    provider: JsonRpcApiProvider,
    address: string,
    hash: string,
    next: boolean,
  ): Promise<SearchController> {
    const tx = await queryClient.fetchQuery(
      getTransactionQuery(provider, hash),
    );
    // TODO: Can we actually infer that this transaction is not null?
    const newTxs = await queryClient.fetchQuery(
      searchTransactionsQuery(
        provider,
        address,
        tx!.blockNumber!,
        next ? "before" : "after",
      ),
    );
    return new SearchController(
      address,
      newTxs.txs,
      newTxs.firstPage,
      newTxs.lastPage,
      next,
    );
  }

  static async lastPage(
    provider: JsonRpcApiProvider,
    address: string,
  ): Promise<SearchController> {
    const newTxs = await queryClient.fetchQuery(
      searchTransactionsQuery(provider, address, 0, "after"),
    );
    return new SearchController(
      address,
      newTxs.txs,
      newTxs.firstPage,
      newTxs.lastPage,
      false,
    );
  }

  getPage(): ProcessedTransaction[] {
    return this.txs.slice(this.pageStart, this.pageEnd);
  }

  async prevPage(
    provider: JsonRpcApiProvider,
    hash: string,
  ): Promise<SearchController> {
    if (this.txs[this.pageStart].hash === hash) {
      const overflowPage = this.txs.slice(0, this.pageStart);
      const baseBlock = this.txs[0].blockNumber;
      const prevPage = await queryClient.fetchQuery(
        searchTransactionsQuery(provider, this.address, baseBlock, "after"),
      );
      return new SearchController(
        this.address,
        prevPage.txs.concat(overflowPage),
        prevPage.firstPage,
        prevPage.lastPage,
        false,
      );
    }

    return this;
  }

  async nextPage(
    provider: JsonRpcApiProvider,
    hash: string,
  ): Promise<SearchController> {
    if (this.txs[this.pageEnd - 1].hash === hash) {
      const overflowPage = this.txs.slice(this.pageEnd);
      const baseBlock = this.txs[this.txs.length - 1].blockNumber;
      const nextPage = await queryClient.fetchQuery(
        searchTransactionsQuery(provider, this.address, baseBlock, "before"),
      );
      return new SearchController(
        this.address,
        overflowPage.concat(nextPage.txs),
        nextPage.firstPage,
        nextPage.lastPage,
        true,
      );
    }

    return this;
  }
}

const doSearch = async (q: string, navigate: NavigateFunction) => {
  const redir = parseSearch(q);
  if (redir !== undefined) {
    navigate(redir);
  }
};

export const parseSearch = (q: string): string | undefined => {
  // Cleanup
  q = q.trim();

  console.log(`parseSearch q = ${q}`);
  let maybeAddress = q;
  let maybeIndex = "";
  const sepIndex = q.lastIndexOf(":");
  if (sepIndex !== -1) {
    maybeAddress = q.substring(0, sepIndex);
    const afterAddress = q.substring(sepIndex + 1);
    maybeIndex = !isNaN(parseInt(afterAddress))
      ? parseInt(afterAddress).toString()
      : "";
    console.log(`2 = ${maybeAddress}`);
  }

  console.log(`3 = ${maybeAddress}`);

  // Parse URLs for other block explorers
  try {
    const url = new URL(q);
    const pathname = url.pathname.replace(/\/$/, "");

    const addressMatch = pathname.match(/^\/(?:address|token)\/(.*)$/);
    const txMatch = pathname.match(/^\/tx\/(.*)$/);
    const blockMatch = pathname.match(/^\/block\/(\d+)$/);
    const epochMatch = pathname.match(/^\/epoch\/(.*)$/);
    const slotMatch = pathname.match(/^\/slot\/(.*)$/);
    const validatorMatch = pathname.match(/^\/validator\/(.*)$/);
    if (addressMatch) {
      maybeAddress = addressMatch[1];
      console.log(`maybeAddress from ${pathname} -> ${maybeAddress}`);
      // The URL might use a different port number
      maybeIndex = "";
    } else if (txMatch) {
      q = txMatch[1];
    } else if (blockMatch) {
      q = blockMatch[1];
    } else if (epochMatch) {
      q = "epoch:" + epochMatch[1];
    } else if (slotMatch) {
      q = "slot:" + slotMatch[1];
    } else if (validatorMatch) {
      q = "validator:" + validatorMatch[1];
    }
  } catch (error) {
    if (!(error instanceof TypeError)) {
      throw error;
    }
  }

  // Tx hash?
  if (isHexString(q, 32)) {
    console.log(`search: this looks like a txn hash - ${q}`);
    return `/tx/${q}`;
  } else if (isHexString(`0x${q}`, 32)) {
    return `/tx/0x${q}`;
  }

  // Zilliqa address?
  try {
    maybeAddress = fromBech32Address(maybeAddress);
    console.log(`search: bech32 address to base16 - ${maybeAddress}`);
  } catch (e) {
    console.log(`search: Not a bech32 address`);
  }
  console.log(`4 = ${maybeAddress}`);

  // The type checker is convinced that ethers:isAddress() will never say that a string > 40 characters
  // long is not an address. I'm not sure why...
  if (!isAddress(maybeAddress)) {
    let typeCheckerIsWrong = maybeAddress as string;
    // remove any leading 0x
    console.log(`typeCheckerIsWrong ${typeCheckerIsWrong}`);
    if (typeCheckerIsWrong.startsWith("0x")) {
      typeCheckerIsWrong = typeCheckerIsWrong.substr(2);
    }
    console.log(`rem ${typeCheckerIsWrong} ${typeCheckerIsWrong.length}`);
    if (typeCheckerIsWrong.length >= 40) {
      try {
        maybeAddress =
          "0x" +
          typeCheckerIsWrong
            .substr(typeCheckerIsWrong.length - 40)
            .toLowerCase();
        console.log(`rem2 ${maybeAddress}`);
      } catch (e) {
        // Obviously not.
      }
    }
  }

  // Plain address?
  if (isAddress(maybeAddress)) {
    console.log(`search: maybeAddress ${maybeAddress} is an address XXX ..`);
    return `/address/${maybeAddress}${maybeIndex !== "" ? `?nonce=${maybeIndex}` : ""}`;
  }

  // Block number?
  // If the number here is very large, parseInt() will return an fp number which
  // will cause errors, so ..
  try {
    let toParse = q;
    console.log(`search: try to parse ${toParse} as a block number`);
    const blockNumber = BigInt(toParse);
    console.log(`search: ${toParse} Parses as a block number ${blockNumber}`);
    return `/block/${blockNumber.toString()}`;
  } catch (e) {
    // Obviously not!
  }

  // DS Block number?
  if (q.charAt(0) === "#") {
    const dsBlockNumber = parseInt(q.substring(1));
    if (!isNaN(dsBlockNumber)) {
      console.log(`search: # ${dsBlockNumber} - it's a ds block number`);
      return `/dsblock/${dsBlockNumber}`;
    }
  }

  // Epoch?
  if (q.startsWith("epoch:")) {
    const mayBeEpoch = q.substring(6);
    const epoch = parseInt(mayBeEpoch);
    if (!isNaN(epoch)) {
      console.log(`search: epoch: ${epoch}`);
      return `/epoch/${epoch}`;
    }
  }

  // Slot?
  if (q.startsWith("slot:")) {
    const mayBeSlot = q.substring(5);
    const slot = parseInt(mayBeSlot);
    if (!isNaN(slot)) {
      console.log(`search: slot: ${slot}`);
      return `/slot/${slot}`;
    }
  }

  // Validator?
  if (q.startsWith("validator:")) {
    const mayBeValidator = q.substring(10);

    // Validator by index
    if (mayBeValidator.match(/^\d+$/)) {
      console.log(`search: validator: ${mayBeValidator}`);
      const validatorIndex = parseInt(mayBeValidator);
      return `/validator/${validatorIndex}`;
    }

    // Validator by public key
    if (mayBeValidator.length === 98 && isHexString(mayBeValidator, 48)) {
      return `/validator/${mayBeValidator}`;
    }
  }

  // Assume it is an ENS name
  console.log(`search: no match: assuming ${maybeAddress} is an ENS name`);
  return `/address/${maybeAddress}${maybeIndex !== "" ? `?nonce=${maybeIndex}` : ""}`;
};

export const useGenericSearch = (): [
  RefObject<HTMLInputElement>,
  ChangeEventHandler<HTMLInputElement>,
  FormEventHandler<HTMLFormElement>,
] => {
  const [searchString, setSearchString] = useState<string>("");
  const [canSubmit, setCanSubmit] = useState<boolean>(false);
  const navigate = useNavigate();

  const handleChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {
    const searchTerm = e.target.value.trim();
    setCanSubmit(searchTerm.length > 0);
    setSearchString(searchTerm);
  };

  const handleSubmit: React.FormEventHandler<HTMLFormElement> = (e) => {
    e.preventDefault();
    if (!canSubmit) {
      return;
    }

    if (searchRef.current) {
      searchRef.current.value = "";
    }
    doSearch(searchString, navigate);
  };

  const searchRef = useRef<HTMLInputElement>(null);
  useKeyboardShortcut(
    ["/"],
    () => {
      searchRef.current?.focus();
    },
    {
      overrideSystem: true,
    },
  );

  return [searchRef, handleChange, handleSubmit];
};



================================================
FILE: src/search/SearchResultNavBar.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import SearchResultNavBar from "./SearchResultNavBar";

const meta = {
  component: SearchResultNavBar,
} satisfies Meta<typeof SearchResultNavBar>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    pageNumber: 1,
    pageSize: 25,
    total: 100,
    totalFormatter: (total) => `Total results: ${total}`,
  },
};

export const Pending: Story = {
  args: {
    ...Default.args,
    total: undefined,
  },
};

export const SingleResult: Story = {
  args: {
    ...Default.args,
    total: 1,
  },
};



================================================
FILE: src/search/SearchResultNavBar.tsx
================================================
import { FC, ReactNode, memo } from "react";
import PageControl from "./PageControl";

type SearchResultNavBarProps = {
  /**
   * 1-based page number.
   *
   * If omitted, assumes 1 using default value.
   */
  pageNumber?: number;

  /**
   * The max number of elements inside a page result. Used to calculate
   * how many pages exist in navigation controls.
   *
   * If undefined, it doesn't display the page navigation controls.
   */
  pageSize?: number | undefined;

  /**
   * The total number of results in the scope of the search.
   *
   * Undefined means the total is not still available (getting from the server).
   */
  total: number | undefined;

  /**
   * Callback used to format the text displayed inside this component given
   * a formatted total.
   */
  totalFormatter: (total: number) => ReactNode;
};

const SearchResultNavBar: FC<SearchResultNavBarProps> = ({
  pageNumber = 1,
  pageSize,
  total,
  totalFormatter,
}) => (
  <div className="flex items-baseline justify-between py-3">
    <div className="text-sm text-gray-500">
      {total === undefined
        ? "Waiting for search results..."
        : totalFormatter(total)}
    </div>
    {pageSize !== undefined && total !== undefined && (
      <PageControl pageNumber={pageNumber} pageSize={pageSize} total={total} />
    )}
  </div>
);

export default memo(SearchResultNavBar);



================================================
FILE: src/search/TransactionItem.tsx
================================================
import React, { useContext } from "react";
import BlockLink from "../components/BlockLink";
import MethodName from "../components/MethodName";
import NativeTokenAmount from "../components/NativeTokenAmount";
import TimestampAge from "../components/TimestampAge";
import TransactionDirection, {
  Direction,
  Flags,
} from "../components/TransactionDirection";
import TransactionLink from "../components/TransactionLink";
import { formatValue } from "../components/formatter";
import TransactionAddress from "../execution/components/TransactionAddress";
import { ProcessedTransaction } from "../types";
import { BlockNumberContext } from "../useBlockTagContext";
import { useSendsToMiner } from "../useErigonHooks";
import { RuntimeContext } from "../useRuntime";
import TransactionItemFiatFee from "./TransactionItemFiatFee";
import { FeeDisplay } from "./useFeeToggler";

type TransactionItemProps = {
  tx: ProcessedTransaction;
  selectedAddress?: string;
  feeDisplay: FeeDisplay;
};

const TransactionItem: React.FC<TransactionItemProps> = ({
  tx,
  selectedAddress,
  feeDisplay,
}) => {
  const { provider } = useContext(RuntimeContext);
  const [sendsToMiner] = useSendsToMiner(provider, tx.hash, tx.miner);

  let direction: Direction | undefined;
  if (selectedAddress) {
    if (tx.from === selectedAddress && tx.to === selectedAddress) {
      direction = Direction.SELF;
    } else if (tx.from === selectedAddress) {
      direction = Direction.OUT;
    } else if (
      tx.to === selectedAddress ||
      tx.createdContractAddress === selectedAddress
    ) {
      direction = Direction.IN;
    } else {
      direction = Direction.INTERNAL;
    }
  }

  const flash = tx.gasPrice === 0n && sendsToMiner;

  return (
    <BlockNumberContext.Provider value={tx.blockNumber}>
      <tr>
        <td className="max-w-[14.5rem]">
          <TransactionLink
            txHash={tx.hash}
            fail={tx.status === 0}
            blob={tx.type === 3}
            deposit={tx.type === 126}
          />
        </td>
        {/* Set both min and max widths to reduce column width changes when items of different lengths appear */}
        <td className="min-w-32 max-w-32">
          {tx.to !== null && <MethodName data={tx.data} to={tx.to} />}
        </td>
        <td className="max-w-28">
          <span className="pr-1">
            <BlockLink blockTag={tx.blockNumber} />
          </span>
        </td>
        <td className="min-w-36 max-w-36">
          <TimestampAge timestamp={tx.timestamp} />
        </td>
        <td className="max-w-[14.5rem]">
          <span className="col-span-2 flex items-baseline justify-between space-x-2 pr-2">
            <span className="truncate">
              {tx.from && (
                <TransactionAddress
                  address={tx.from}
                  selectedAddress={selectedAddress}
                />
              )}
            </span>
            <span>
              <TransactionDirection
                direction={direction}
                flags={sendsToMiner ? Flags.MINER : undefined}
              />
            </span>
          </span>
        </td>
        <td className="max-w-[14.5rem]">
          <span
            className="col-span-2 flex items-baseline"
            title={tx.to ?? tx.createdContractAddress}
          >
            <span className="truncate">
              {tx.to ? (
                <TransactionAddress
                  address={tx.to}
                  selectedAddress={selectedAddress}
                  miner={tx.miner === tx.to}
                  showCodeIndicator
                />
              ) : (
                <TransactionAddress
                  address={tx.createdContractAddress!}
                  selectedAddress={selectedAddress}
                  creation
                  showCodeIndicator
                />
              )}
            </span>
          </span>
        </td>
        <td className="min-w-48 max-w-48">
          <NativeTokenAmount value={tx.value} />
        </td>
        <td className="min-w-16 max-w-28">
          <span className="truncate font-balance text-xs text-gray-500">
            {feeDisplay === FeeDisplay.TX_FEE && formatValue(tx.fee, 18)}
            {feeDisplay === FeeDisplay.TX_FEE_USD && (
              <TransactionItemFiatFee blockTag={tx.blockNumber} fee={tx.fee} />
            )}
            {feeDisplay === FeeDisplay.GAS_PRICE && formatValue(tx.gasPrice, 9)}
          </span>
        </td>
      </tr>
    </BlockNumberContext.Provider>
  );
};

export default TransactionItem;



================================================
FILE: src/search/TransactionItemFiatFee.tsx
================================================
import { BlockTag, FixedNumber } from "ethers";
import React, { useContext } from "react";
import { useETHUSDOracle } from "../usePriceOracle";
import { RuntimeContext } from "../useRuntime";
import { commify } from "../utils/utils";

type TransactionItemFiatFeeProps = {
  blockTag: BlockTag;
  fee: bigint;
};

const TransactionItemFiatFee: React.FC<TransactionItemFiatFeeProps> = ({
  blockTag,
  fee,
}) => {
  const { provider } = useContext(RuntimeContext);
  const { price: eth2USDValue, decimals: ethPriceDecimals } = useETHUSDOracle(
    provider,
    blockTag,
  );
  const fiatValue =
    eth2USDValue !== undefined
      ? (fee * eth2USDValue) / 10n ** ethPriceDecimals
      : undefined;

  return fiatValue ? (
    <span className="text-xs">
      $
      <span className="font-balance">
        {commify(FixedNumber.fromValue(fiatValue, 18).round(2).toString())}
      </span>
    </span>
  ) : (
    <>N/A</>
  );
};

export default TransactionItemFiatFee;



================================================
FILE: src/search/TransactionResultHeader.tsx
================================================
import React from "react";
import StandardTHead from "../components/StandardTHead";
import { FeeDisplay } from "./useFeeToggler";

export type ResultHeaderProps = {
  feeDisplay: FeeDisplay;
  feeDisplayToggler: () => void;
};

const TransactionResultHeader: React.FC<ResultHeaderProps> = ({
  feeDisplay,
  feeDisplayToggler,
}) => (
  <StandardTHead>
    <th>Txn Hash</th>
    <th>Method</th>
    <th className="w-28">Block</th>
    <th className="w-36">Age</th>
    <th>From</th>
    <th>To</th>
    <th className="min-w-52">Value</th>
    <th>
      <button
        className="text-link-blue hover:text-link-blue-hover"
        onClick={feeDisplayToggler}
      >
        {feeDisplay === FeeDisplay.TX_FEE && "Txn Fee"}
        {feeDisplay === FeeDisplay.TX_FEE_USD && "Txn Fee (USD)"}
        {feeDisplay === FeeDisplay.GAS_PRICE && "Gas Price"}
      </button>
    </th>
  </StandardTHead>
);

export default React.memo(TransactionResultHeader);



================================================
FILE: src/search/UndefinedPageButton.tsx
================================================
import { FC, PropsWithChildren } from "react";
import { NavLink } from "react-router-dom";

type UndefinedPageButtonProps = {
  address: string;
  direction: "first" | "last" | "prev" | "next";
  hash?: string;
  disabled?: boolean;
};

const UndefinedPageButton: FC<PropsWithChildren<UndefinedPageButtonProps>> = ({
  address,
  direction,
  hash,
  disabled,
  children,
}) => {
  if (disabled) {
    return (
      <span className="select-none rounded-lg bg-link-blue/10 px-3 py-2 text-xs text-gray-400">
        {children}
      </span>
    );
  }

  return (
    <NavLink
      className="select-none rounded-lg bg-link-blue/10 px-3 py-2 text-xs text-link-blue transition-colors hover:bg-link-blue/100 hover:text-white disabled:cursor-default disabled:bg-link-blue disabled:text-gray-400"
      to={`/address/${address}/txs/${direction}${
        direction === "prev" || direction === "next" ? `?h=${hash}` : ""
      }`}
      data-test={`nav-${direction}`}
    >
      {children}
    </NavLink>
  );
};

export default UndefinedPageButton;



================================================
FILE: src/search/UndefinedPageControl.tsx
================================================
import React from "react";
import UndefinedPageButton from "./UndefinedPageButton";

type UndefinedPageControlProps = {
  isFirst?: boolean;
  isLast?: boolean;
  address: string;
  prevHash: string;
  nextHash: string;
  disabled?: boolean;
};

const UndefinedPageControl: React.FC<UndefinedPageControlProps> = ({
  isFirst,
  isLast,
  address,
  prevHash,
  nextHash,
  disabled,
}) => {
  return (
    <div className="flex items-baseline space-x-1 text-xs">
      <UndefinedPageButton
        address={address}
        direction="first"
        disabled={disabled || isFirst}
      >
        First
      </UndefinedPageButton>
      <UndefinedPageButton
        address={address}
        direction="prev"
        hash={prevHash}
        disabled={disabled || isFirst}
      >
        {"<"}
      </UndefinedPageButton>
      <UndefinedPageButton
        address={address}
        direction="next"
        hash={nextHash}
        disabled={disabled || isLast}
      >
        {">"}
      </UndefinedPageButton>
      <UndefinedPageButton
        address={address}
        direction="last"
        disabled={disabled || isLast}
      >
        Last
      </UndefinedPageButton>
    </div>
  );
};

export default React.memo(UndefinedPageControl);



================================================
FILE: src/search/useEmptyBlocksToggler.ts
================================================
import { useState } from "react";

export enum EmptyBlocksDisplay {
  SHOW_EMPTY_BLOCKS = 0,
  HIDE_EMPTY_BLOCKS = 1,
}

export const useEmptyBlocksToggler = (): [EmptyBlocksDisplay, () => void] => {
  const [emptyBlocksDisplay, setEmptyBlocksDisplay] =
    useState<EmptyBlocksDisplay>(EmptyBlocksDisplay.HIDE_EMPTY_BLOCKS);
  const emptyBlocksDisplayToggler = () => {
    if (emptyBlocksDisplay === EmptyBlocksDisplay.HIDE_EMPTY_BLOCKS) {
      setEmptyBlocksDisplay(EmptyBlocksDisplay.SHOW_EMPTY_BLOCKS);
    } else {
      setEmptyBlocksDisplay(EmptyBlocksDisplay.HIDE_EMPTY_BLOCKS);
    }
  };
  return [emptyBlocksDisplay, emptyBlocksDisplayToggler];
};



================================================
FILE: src/search/useFeeToggler.ts
================================================
import { useState } from "react";

export enum FeeDisplay {
  TX_FEE,
  TX_FEE_USD,
  GAS_PRICE,
}

export const useFeeToggler = (): [FeeDisplay, () => void] => {
  const [feeDisplay, setFeeDisplay] = useState<FeeDisplay>(FeeDisplay.TX_FEE);
  const feeDisplayToggler = () => {
    setFeeDisplay(feeDisplay + 1);
    if (feeDisplay === FeeDisplay.GAS_PRICE) {
      setFeeDisplay(0);
    }
  };

  return [feeDisplay, feeDisplayToggler];
};



================================================
FILE: src/search/useMultiColumnDisplayToggler.ts
================================================
import { useState } from "react";

export enum MultiColumnDisplay {
  SHOW_PARENT = 0,
  SHOW_PROPOSER = 1,
}

export const useMultiColumnDisplayToggler = (): [
  MultiColumnDisplay,
  () => void,
] => {
  const [multiColumnDisplay, setMultiColumnDisplay] =
    useState<MultiColumnDisplay>(MultiColumnDisplay.SHOW_PARENT);
  const multiColumnDisplayToggler = () => {
    if (multiColumnDisplay === MultiColumnDisplay.SHOW_PARENT) {
      setMultiColumnDisplay(MultiColumnDisplay.SHOW_PROPOSER);
    } else {
      setMultiColumnDisplay(MultiColumnDisplay.SHOW_PARENT);
    }
  };
  return [multiColumnDisplay, multiColumnDisplayToggler];
};



================================================
FILE: src/search/qr-reader/QrReader.tsx
================================================
import { useRef } from "react";
import { OnResultFunction, useQrReader } from "./useQrReader";

export type QrReaderProps = {
  /**
   * Media track constraints object, to specify which camera and capabilities to use
   */
  constraints: MediaTrackConstraints;
  /**
   * Called when an error occurs.
   */
  onResult: OnResultFunction;
  /**
   * Property that represents the view finder component
   */
  ViewFinder?: (props: any) => React.ReactElement<any, any> | null;
  /**
   * Property that represents the scan period
   */
  scanDelay?: number;
  /**
   * Property that represents the ID of the video element
   */
  videoId?: string;
  /**
   * Property that represents an optional className to modify styles
   */
  className?: string;
  /**
   * Property that represents a style for the container
   */
  containerStyle?: any;
  /**
   * Property that represents a style for the video
   */
  videoStyle?: any;
};

export const QrReader: React.FC<QrReaderProps> = ({
  videoStyle,
  constraints = {
    facingMode: "user",
  },
  ViewFinder,
  scanDelay = 500,
  className,
  onResult = () => {},
}) => {
  const videoRef = useRef<HTMLVideoElement>(null);

  useQrReader({
    constraints,
    scanDelay,
    onResult,
    videoRef,
  });

  return (
    <section className={className}>
      <div className="w-full h-full pt-full overflow-hidden relative">
        {!!ViewFinder && <ViewFinder />}
        <video
          muted
          ref={videoRef}
          className={`top-0 left-0 w-full h-full block overflow-hidden absolute ${constraints?.facingMode === "user" ? "scale-x-[-1]" : ""}`}
        />
      </div>
    </section>
  );
};

export default QrReader;



================================================
FILE: src/search/qr-reader/useQrReader.ts
================================================
import { BrowserQRCodeReader, IScannerControls } from "@zxing/browser";
import { Result } from "@zxing/library";
import { MutableRefObject, RefObject, useEffect, useRef } from "react";
import { isMediaDevicesSupported, isValidType } from "./utils";

export type OnResultFunction = (
  /**
   * The QR values extracted by Zxing
   */
  result?: Result | undefined | null,
  /**
   * The name of the exceptions thrown while reading the QR
   */
  error?: Error | undefined | null,
  /**
   * The instance of the QR browser reader
   */
  codeReader?: BrowserQRCodeReader,
) => void;

export type UseQrReaderHookProps = {
  /**
   * Media constraints object, to specify which camera and capabilities to use
   */
  constraints?: MediaTrackConstraints;
  /**
   * Callback for retrieving the result
   */
  onResult: OnResultFunction;
  /**
   * Property that represents the scan period
   */
  scanDelay?: number;
  /**
   * Property that represents the video element
   */
  videoRef: RefObject<HTMLVideoElement>;
};

export type UseQrReaderHook = (props: UseQrReaderHookProps) => void;

// TODO: add support for debug logs
export const useQrReader: UseQrReaderHook = ({
  scanDelay: delayBetweenScanAttempts,
  constraints: video,
  onResult,
  videoRef,
}) => {
  const controlsRef: MutableRefObject<IScannerControls | null> = useRef(null);

  useEffect(() => {
    const codeReader = new BrowserQRCodeReader(undefined, {
      delayBetweenScanAttempts,
    });

    let isUnmounted = false;

    if (
      !isMediaDevicesSupported() &&
      isValidType(onResult, "onResult", "function")
    ) {
      const message =
        'MediaDevices API has no support for your browser. You can fix this by running "npm i webrtc-adapter"';

      onResult(null, new Error(message), codeReader);
    }
    if (isValidType(video, "constraints", "object")) {
      (async () => {
        // Checks if the component already unmounted
        await Promise.resolve();
        if (isUnmounted || videoRef.current === null) {
          return;
        }

        codeReader
          .decodeFromConstraints(
            { video },
            videoRef.current,
            (result, error) => {
              if (isValidType(onResult, "onResult", "function")) {
                onResult(result, error, codeReader);
              }
            },
          )
          .then((controls: IScannerControls) => {
            if (isUnmounted) {
              controls.stop();
            } else {
              controlsRef.current = controls;
            }
          })
          .catch((error: Error) => {
            if (isValidType(onResult, "onResult", "function")) {
              onResult(null, error, codeReader);
            }
            console.error("Failed: error =", error);
          });
      })();
    }

    return () => {
      isUnmounted = true;
      controlsRef.current?.stop();
    };
  }, [videoRef]);
};



================================================
FILE: src/search/qr-reader/utils.ts
================================================
export const isMediaDevicesSupported = () => {
  const isMediaDevicesSupported =
    typeof navigator !== "undefined" && !!navigator.mediaDevices;

  if (!isMediaDevicesSupported) {
    console.warn(
      `[ReactQrReader]: MediaDevices API has no support for your browser. You can fix this by running "npm i webrtc-adapter"`,
    );
  }

  return isMediaDevicesSupported;
};

export const isValidType = (value: any, name: string, type: string) => {
  const isValid = typeof value === type;

  if (!isValid) {
    console.warn(
      `[ReactQrReader]: Expected "${name}" to be a of type "${type}".`,
    );
  }

  return isValid;
};



================================================
FILE: src/selection/FormattedBalanceHighlighter.tsx
================================================
import { FC, memo } from "react";
import FormattedBalance, {
  FormattedBalanceProps,
} from "../components/FormattedBalance";
import { useSelectionContext } from "./useSelection";

// TODO: replace all occurrences with SelectionHighlighter and remove this component
const FormattedBalanceHighlighter: FC<FormattedBalanceProps> = ({
  value,
  ...rest
}) => {
  const [selection, setSelection] = useSelectionContext();
  const select = () => {
    setSelection({ type: "value", content: value.toString() });
  };
  const deselect = () => {
    setSelection(null);
  };

  return (
    <span
      className={`truncate rounded border border-dashed px-1 hover:border-transparent hover:bg-transparent ${
        selection !== null &&
        selection.type === "value" &&
        selection.content === value.toString()
          ? "border-zq-lightblue bg-amber-100"
          : "border-transparent"
      }`}
      onMouseEnter={select}
      onMouseLeave={deselect}
    >
      <FormattedBalance value={value} {...rest} />
    </span>
  );
};

export default memo(FormattedBalanceHighlighter);



================================================
FILE: src/selection/SelectionHighlighter.tsx
================================================
import { FC, memo, PropsWithChildren, useMemo } from "react";
import {
  OptionalSelection,
  SelectionType,
  useSelectionContext,
} from "./useSelection";

export type ContentSelector = (
  selection: OptionalSelection,
  content: string,
) => boolean;

export const genericSelector =
  (type: SelectionType) =>
  (selection: OptionalSelection, content: string): boolean =>
    selection !== null &&
    selection.type === type &&
    selection.content === content;

export const addressSelector: ContentSelector = genericSelector("address");
export const valueSelector: ContentSelector = genericSelector("value");
export const functionSigSelector: ContentSelector =
  genericSelector("functionSig");
export const tagSelector: ContentSelector = genericSelector("tag");

type SelectionHighlighterProps = {
  myType: SelectionType;
  myContent: string;
  selector: ContentSelector;
};

const SelectionHighlighter: FC<
  PropsWithChildren<SelectionHighlighterProps>
> = ({ myType, myContent, selector, children }) => {
  const [selection, setSelection] = useSelectionContext();
  const [select, deselect] = useMemo(() => {
    const _select = () => {
      setSelection({ type: myType, content: myContent });
    };
    const _deselect = () => {
      setSelection(null);
    };
    return [_select, _deselect];
  }, [setSelection, myType, myContent]);

  return (
    <HighlighterBox
      selected={selector(selection, myContent)}
      select={select}
      deselect={deselect}
    >
      {children}
    </HighlighterBox>
  );
};

type HighlighterBoxProps = {
  selected: boolean;
  select: () => void;
  deselect: () => void;
};

const HighlighterBox: FC<PropsWithChildren<HighlighterBoxProps>> = memo(
  ({ selected, select, deselect, children }) => (
    <div
      className={`overflow-hidden rounded border border-dashed px-1 hover:border-transparent hover:bg-transparent ${
        selected ? "border-orange-400 bg-amber-100" : "border-transparent"
      }`}
      onMouseEnter={select}
      onMouseLeave={deselect}
    >
      {children}
    </div>
  ),
);

export default SelectionHighlighter;



================================================
FILE: src/selection/StandardSelectionBoundary.tsx
================================================
import { FC, PropsWithChildren } from "react";
import { SelectionContext, useSelection } from "./useSelection";

const StandardSelectionBoundary: FC<PropsWithChildren> = ({ children }) => {
  const selectionCtx = useSelection();

  return (
    <SelectionContext.Provider value={selectionCtx}>
      {children}
    </SelectionContext.Provider>
  );
};

export default StandardSelectionBoundary;



================================================
FILE: src/selection/useSelection.ts
================================================
import {
  Dispatch,
  SetStateAction,
  createContext,
  useContext,
  useState,
} from "react";

export type SelectionType = "address" | "value" | "functionSig" | "tag";

export type Selection = {
  type: SelectionType;
  content: string;
};

export type OptionalSelection = Selection | null;

export const useSelection = (): [
  OptionalSelection,
  Dispatch<SetStateAction<OptionalSelection>>,
] => {
  return useState<OptionalSelection>(null);
};

export const SelectionContext = createContext<ReturnType<typeof useSelection>>(
  null!,
);

export const useSelectionContext = () => {
  return useContext(SelectionContext);
};



================================================
FILE: src/sourcify/SourcifyLogo.tsx
================================================
import React from "react";
import SourcifyIcon from "./sourcify.svg";

const SourcifyLogo: React.FC = () => (
  <img
    src={SourcifyIcon}
    alt="Sourcify logo"
    title="Verified by Sourcify"
    width={16}
    height={16}
  />
);

export default SourcifyLogo;



================================================
FILE: src/sourcify/useSourcify.ts
================================================
import { ErrorDescription, Interface } from "ethers";
import { useContext, useMemo } from "react";
import { Fetcher } from "swr";
import useSWRImmutable from "swr/immutable";
import { ChecksummedAddress, TransactionDescriptionData } from "../types";
import { useAppConfigContext } from "../useAppConfig";
import { RuntimeContext } from "../useRuntime";

export type UserMethod = {
  notice?: string | undefined;
};

export type UserEvent = {
  notice?: string | undefined;
};

export type UserError = [
  {
    notice?: string | undefined;
  },
];

export type UserDoc = {
  kind: "user";
  version?: number | undefined;
  notice?: string | undefined;
  methods: Record<string, UserMethod>;
  events: Record<string, UserEvent>;
  errors?: Record<string, UserError> | undefined;
};

export type DevMethod = {
  params?: Record<string, string>;
  returns?: Record<string, string>;
  details?: string | undefined;
};

export type DevError = [
  {
    params?: Record<string, string>;
  },
];

export type DevDoc = {
  kind: "dev";
  version?: number | undefined;
  methods: Record<string, DevMethod>;
  errors?: Record<string, DevError> | undefined;
};

export type Metadata = {
  version: string;
  language: string;
  compiler: {
    version: string;
    keccak256?: string | undefined;
  };
  sources: {
    [filename: string]: {
      keccak256: string;
      content?: string | undefined;
      urls?: string[];
      license?: string;
    };
  };
  settings?: {
    remappings: string[];
    optimizer?: {
      enabled: boolean;
      runs: number;
    };
    compilationTarget: {
      [filename: string]: string;
    };
    libraries: {
      [filename: string]: string;
    };
  };
  output: {
    abi: any[];
    userdoc?: UserDoc | undefined;
    devdoc?: DevDoc | undefined;
  };
};

export enum SourcifySource {
  // Resolve trusted IPNS for root IPFS
  IPFS_IPNS = "ipfs",

  // Centralized Sourcify servers
  CENTRAL_SERVER = "central_server",
}

export type SourcifySourceMap = { [key: string]: string };

const SourcifyBackendFormats = ["RepositoryV1", "RepositoryV2"] as const;
type SourcifyBackendFormat = (typeof SourcifyBackendFormats)[number];

function isSourcifyBackendFormat(
  format: string | undefined,
): format is SourcifyBackendFormat {
  if (format === undefined) {
    return false;
  }
  return SourcifyBackendFormats.includes(format as SourcifyBackendFormat);
}

const sourcifyIPNS = "repo.sourcify.dev";
const defaultIpfsGatewayPrefix = `https://ipfs.io/ipns/${sourcifyIPNS}`;
const sourcifyHttpRepoPrefix = `https://repo.sourcify.dev`;

const defaultSourcifySources = {
  [SourcifySource.IPFS_IPNS]: defaultIpfsGatewayPrefix,
  [SourcifySource.CENTRAL_SERVER]: sourcifyHttpRepoPrefix,
};

function resolveSourcifySource(
  source: SourcifySource,
  sourcifySources: SourcifySourceMap,
): string {
  if (source in sourcifySources) {
    return sourcifySources[source];
  } else {
    throw new Error(`Unknown Sourcify integration source code: ${source}`);
  }
}

function useSourcifySources(): {
  sources: SourcifySourceMap;
  backendFormat: SourcifyBackendFormat;
} {
  const { config } = useContext(RuntimeContext);
  const sources = config.sourcify?.sources ?? defaultSourcifySources;
  let backendFormat: SourcifyBackendFormat = "RepositoryV1";
  const configFormat = config.sourcify?.backendFormat;
  if (isSourcifyBackendFormat(configFormat)) {
    backendFormat = configFormat;
  }
  return { sources, backendFormat };
}

/**
 * Builds a complete Sourcify metadata.json URL given the contract address
 * and chain.
 */
export const sourcifyMetadata = (
  address: ChecksummedAddress,
  chainId: bigint,
  source: SourcifySource,
  type: MatchType,
  sourcifySources: SourcifySourceMap,
) =>
  `${resolveSourcifySource(source, sourcifySources)}/contracts/${
    type === MatchType.FULL_MATCH ? "full_match" : "partial_match"
  }/${chainId}/${address}/metadata.json`;

export const sourcifySourceFile = (
  address: ChecksummedAddress,
  chainId: bigint,
  filepath: string,
  source: SourcifySource,
  type: MatchType,
  sourcifySources: SourcifySourceMap,
) =>
  `${resolveSourcifySource(source, sourcifySources)}/contracts/${
    type === MatchType.FULL_MATCH ? "full_match" : "partial_match"
  }/${chainId}/${address}/sources/${filepath}`;

export enum MatchType {
  FULL_MATCH,
  PARTIAL_MATCH,
  WHATSABI_GUESS,
}

export type Match = {
  type: MatchType;
  metadata: Metadata;
  unknownSelectors?: string[];
};

function sourcifyFetcher(
  sourcifySources: SourcifySourceMap,
): Fetcher<
  Match | null | undefined,
  ["sourcify", ChecksummedAddress, bigint, SourcifySource]
> {
  return async ([_, address, chainId, sourcifySource]) => {
    // Try full match
    try {
      const url = sourcifyMetadata(
        address,
        chainId,
        sourcifySource,
        MatchType.FULL_MATCH,
        sourcifySources,
      );
      const res = await fetch(url);
      if (res.ok) {
        return {
          type: MatchType.FULL_MATCH,
          metadata: await res.json(),
        };
      }
    } catch (err) {
      console.info(
        `error while getting Sourcify full_match metadata: chainId=${chainId} address=${address} err=${err}; falling back to partial_match`,
      );
    }

    // Fallback to try partial match
    try {
      const url = sourcifyMetadata(
        address,
        chainId,
        sourcifySource,
        MatchType.PARTIAL_MATCH,
        sourcifySources,
      );
      const res = await fetch(url);
      if (res.ok) {
        return {
          type: MatchType.PARTIAL_MATCH,
          metadata: await res.json(),
        };
      }
    } catch (err) {
      console.warn(
        `error while getting Sourcify partial_match metadata: chainId=${chainId} address=${address} err=${err}`,
      );
    }
    return null;
  };
}

export const useSourcifyMetadata = (
  address: ChecksummedAddress | undefined,
  chainId: bigint | undefined,
): Match | null | undefined => {
  const { sourcifySource } = useAppConfigContext();
  const { sources: sourcifySources } = useSourcifySources();
  const metadataURL = () =>
    address === undefined || chainId === undefined
      ? null
      : ["sourcify", address, chainId, sourcifySource];
  const fetcher = sourcifyFetcher(sourcifySources);
  const { data, error } = useSWRImmutable<Match | null | undefined>(
    metadataURL,
    fetcher,
  );
  if (error) {
    return null;
  }
  return data;
};

const contractFetcher: Fetcher<string | null, string> = async (url) => {
  const res = await fetch(url);
  if (res.ok) {
    return await res.text();
  }
  return null;
};

export const useContract = (
  checksummedAddress: string,
  networkId: bigint,
  filename: string,
  fileHash: string,
  sourcifySource: SourcifySource,
  type: MatchType,
) => {
  const { sources, backendFormat } = useSourcifySources();
  let fetchFilename: string;
  switch (backendFormat) {
    case "RepositoryV1": {
      fetchFilename = filename.replaceAll(/[:]/g, "_");
    }
    case "RepositoryV2": {
      // TODO: Revisit whether all such sources should be assumed to be Solidity files
      fetchFilename = fileHash + ".sol";
    }
  }
  const url = sourcifySourceFile(
    checksummedAddress,
    networkId,
    fetchFilename,
    sourcifySource,
    type,
    sources,
  );

  const { data, error } = useSWRImmutable(url, contractFetcher);
  if (error) {
    return undefined;
  }
  return data;
};

export const useTransactionDescription = (
  metadata: Metadata | null | undefined,
  txData: TransactionDescriptionData | null | undefined,
) => {
  const txDesc = useMemo(() => {
    if (metadata === null) {
      return null;
    }
    if (!metadata || !txData) {
      return undefined;
    }

    const abi = metadata.output.abi;
    const intf = new Interface(abi as any);
    try {
      return intf.parseTransaction({
        data: txData.data,
        value: txData.value,
      });
    } catch (err) {
      console.warn("Couldn't find function signature", err);
      return null;
    }
  }, [metadata, txData]);

  return txDesc;
};

export const useError = (
  metadata: Metadata | null | undefined,
  output: string | null | undefined,
): ErrorDescription | null | undefined => {
  const err = useMemo(() => {
    if (!metadata || !output) {
      return undefined;
    }

    const abi = metadata.output.abi;
    const intf = new Interface(abi as any);
    try {
      return intf.parseError(output);
    } catch (err) {
      console.warn("Couldn't find error signature", err);
      return null;
    }
  }, [metadata, output]);

  return err;
};



================================================
FILE: src/sourcify/useWhatsabi.ts
================================================
import { whatsabi } from "@shazow/whatsabi";
import { Interface, JsonRpcApiProvider } from "ethers";
import { Fetcher } from "swr";
import useSWRImmutable from "swr/immutable";
import { queryClient } from "../queryClient";
import { ChecksummedAddress } from "../types";
import { fourBytesURL } from "../url";
import { getCodeQuery } from "../useErigonHooks";
import { Match, MatchType } from "./useSourcify";

export const useWhatsabiMetadata = (
  address: ChecksummedAddress | undefined,
  chainId: bigint | undefined,
  provider: JsonRpcApiProvider,
  assetsURLPrefix: string | undefined,
): Match | null | undefined => {
  const fetcher = whatsabiFetcher(provider, assetsURLPrefix);
  const key = ["whatsabi", address, chainId];
  const { data, error } = useSWRImmutable<Match | null | undefined>(
    address !== undefined ? key : null,
    fetcher,
  );
  if (error) {
    return null;
  }
  return data;
};

function whatsabiFetcher(
  provider: JsonRpcApiProvider,
  assetsURLPrefix: string | undefined,
): Fetcher<Match | null | undefined, ["whatsabi", ChecksummedAddress, bigint]> {
  return async ([_, address, chainId]) => {
    if (assetsURLPrefix !== undefined) {
      const code = await queryClient.fetchQuery(
        getCodeQuery(provider, address, "latest"),
      );
      const selectors = whatsabi.selectorsFromBytecode(code);
      const decodedFunctions: (string | null)[] = await Promise.all(
        selectors.map(async (selector) => {
          try {
            const result = await fetch(
              fourBytesURL(assetsURLPrefix, selector.slice(2)),
            );
            if (!result.ok) {
              throw new Error(
                `4bytes fetch returned ${result.status} response`,
              );
            }
            const text = await result.text();
            const sig = text.split(";")[0];
            if (sig.length > 0) {
              return `function ${sig} external view`;
            }
          } catch (e) {}
          return null;
        }),
      );
      const unknownSelectors = selectors.filter(
        (selector, i) => decodedFunctions[i] === null,
      );
      const functions: string[] = decodedFunctions
        .filter((sig) => sig !== null)
        .sort() as string[];
      const int = Interface.from([...functions]);
      const abi = JSON.parse(int.formatJson());
      const metadata = {
        version: "Unknown",
        language: "Unknown",
        compiler: { version: "Unknown" },
        sources: {},
        // settings: {remappings: [], compilationTarget: {}, libraries: {}},
        output: {
          abi,
        },
      };

      return {
        type: MatchType.WHATSABI_GUESS,
        metadata: metadata,
        unknownSelectors,
      };
    }

    return null;
  };
}



================================================
FILE: src/special/london/Blip.tsx
================================================
import { Transition } from "@headlessui/react";
import React, { useState } from "react";

type BlipProps = {
  value: number;
};

const Blip: React.FC<BlipProps> = ({ value }) => {
  const [show, setShow] = useState<boolean>(true);

  return (
    <Transition
      as="div"
      show
      appear
      enter="transition ease-in duration-1000 translate-x-full pl-3"
      enterFrom="opacity-100 translate-y-0"
      enterTo="opacity-0 -translate-y-5"
      afterEnter={() => setShow(false)}
    >
      {show && value !== 0 && (
        <div
          className={`absolute bottom-0 font-bold ${
            value > 0 ? "text-emerald-500" : "text-red-500"
          } text-3xl`}
        >
          {value > 0 ? `+${value}` : `${value}`}
        </div>
      )}
    </Transition>
  );
};

export default React.memo(Blip);



================================================
FILE: src/special/london/BlockRow.tsx
================================================
import { FixedNumber, formatEther } from "ethers";
import React from "react";
import BlockLink from "../../components/BlockLink";
import TimestampAge from "../../components/TimestampAge";
import { useChainInfo } from "../../useChainInfo";
import { ExtendedBlock } from "../../useErigonHooks";
import { commify } from "../../utils/utils";
import Blip from "./Blip";

const ELASTICITY_MULTIPLIER = 2n;

type BlockRowProps = {
  block: ExtendedBlock;
  baseFeeDelta: number;
};

const BlockRow: React.FC<BlockRowProps> = ({ block, baseFeeDelta }) => {
  const {
    nativeCurrency: { symbol },
  } = useChainInfo();
  const gasTarget = block.gasLimit / ELASTICITY_MULTIPLIER;
  const burntFees = block?.baseFeePerGas && block.baseFeePerGas * block.gasUsed;
  const netFeeReward = block && block.feeReward - (burntFees ?? 0n);
  const totalReward = block.blockReward + (netFeeReward ?? 0n);

  return (
    <div className="grid grid-cols-9 gap-x-2 px-3 py-2 hover:bg-skin-table-hover">
      <div>
        <BlockLink blockTag={block.number} />
      </div>
      <div
        className={`col-span-2 text-right ${
          block.gasUsed > gasTarget
            ? "text-emerald-500"
            : block.gasUsed < gasTarget
              ? "text-red-500"
              : ""
        }`}
      >
        {commify(block.gasUsed.toString())} (
        {block.gasUsed > gasTarget ? "+" : ""}
        {FixedNumber.fromValue(block.gasUsed)
          .subUnsafe(FixedNumber.fromValue(gasTarget))
          .mulUnsafe(FixedNumber.fromValue(100))
          .divUnsafe(FixedNumber.fromValue(gasTarget))
          .round(2)
          .toUnsafeFloat()}
        %)
      </div>
      <div className="text-right">
        <div className="relative">
          <span>
            {FixedNumber.fromValue(block.baseFeePerGas ?? 0n)
              .divUnsafe(FixedNumber.fromValue(1_000_000_000n))
              .toUnsafeFloat()
              .toFixed(2)}{" "}
            Gwei
          </span>
          <Blip value={baseFeeDelta} />
        </div>
      </div>
      <div className="col-span-2 text-right">
        {commify(formatEther(totalReward))} {symbol}
      </div>
      <div className="col-span-2 text-right text-orange-500 line-through">
        {commify(formatEther(block.gasUsed * block.baseFeePerGas!))} {symbol}
      </div>
      <div className="text-right text-gray-400">
        <TimestampAge timestamp={block.timestamp} />
      </div>
    </div>
  );
};

export default React.memo(BlockRow);



================================================
FILE: src/special/london/Blocks.tsx
================================================
import {
  faBurn,
  faCoins,
  faCube,
  faGasPump,
  faHistory,
} from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { Transition } from "@headlessui/react";
import {
  CategoryScale,
  Chart as ChartJS,
  Filler,
  LineElement,
  LinearScale,
  PointElement,
  Tooltip,
} from "chart.js";
import { Block, FixedNumber } from "ethers";
import React, {
  useCallback,
  useContext,
  useEffect,
  useMemo,
  useState,
} from "react";
import { Line } from "react-chartjs-2";
import { ExtendedBlock, readBlock } from "../../useErigonHooks";
import { RuntimeContext } from "../../useRuntime";
import BlockRow from "./BlockRow";
import {
  burntFeesChartData,
  burntFeesChartOptions,
  gasChartData,
  gasChartOptions,
} from "./chart";

ChartJS.register(
  LinearScale,
  CategoryScale,
  PointElement,
  LineElement,
  Filler,
  Tooltip,
);

const MAX_BLOCK_HISTORY = 20;

const PREV_BLOCK_COUNT = 15;

type BlocksProps = {
  latestBlock: Block;
};

const Blocks: React.FC<BlocksProps> = ({ latestBlock }) => {
  const { provider } = useContext(RuntimeContext);
  const [blocks, setBlocks] = useState<ExtendedBlock[]>([]);
  const [toggleChart, setToggleChart] = useState<boolean>(true);

  const addBlock = useCallback(
    async (blockNumber: number) => {
      const extBlock = await readBlock(provider, blockNumber.toString());
      setBlocks((_blocks) => {
        for (let i = 0; i < _blocks.length; i++) {
          if (_blocks[i].number === blockNumber) {
            // Block already in list
            return _blocks;
          }
        }
        if (extBlock === null) {
          return _blocks;
        }

        // Leave the last block because of transition animation
        const newBlocks = [extBlock, ..._blocks].slice(
          0,
          MAX_BLOCK_HISTORY + 1,
        );

        // Little hack to fix out of order block notifications
        newBlocks.sort((a, b) => b.number - a.number);
        return newBlocks;
      });
    },
    [provider],
  );

  useEffect(() => {
    addBlock(latestBlock.number);
  }, [addBlock, latestBlock]);

  const data = useMemo(
    () => (toggleChart ? gasChartData(blocks) : burntFeesChartData(blocks)),
    [toggleChart, blocks],
  );
  const chartOptions = toggleChart ? gasChartOptions : burntFeesChartOptions;

  // On page reload, pre-populate the last N blocks
  useEffect(
    () => {
      const addPreviousBlocks = async () => {
        for (
          let i = latestBlock.number - PREV_BLOCK_COUNT;
          i < latestBlock.number;
          i++
        ) {
          await addBlock(i);
        }
      };

      setBlocks([]);
      addPreviousBlocks();
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [],
  );

  return (
    <div className="w-full grow">
      <div className="divide-y-2 px-9 pb-12 pt-3">
        <div className="relative">
          <div className="flex items-baseline justify-center space-x-2 px-3 pb-2 text-xl text-gray-800">
            Latest Blocks
          </div>
          <div className="absolute right-0 top-0 rounded border px-2 py-1 text-sm text-link-blue shadow-md hover:bg-gray-50 hover:text-link-blue-hover">
            <button onClick={() => setToggleChart(!toggleChart)}>
              {toggleChart ? "Gas usage" : "Burnt fees"}
            </button>
          </div>
        </div>
        <div>
          <Line data={data} height={100} options={chartOptions} />
        </div>
        <div className="mt-5 grid grid-cols-9 gap-x-2 px-3 py-2">
          <div className="flex items-baseline space-x-1">
            <span className="text-gray-500">
              <FontAwesomeIcon icon={faCube} />
            </span>
            <span>Block</span>
          </div>
          <div className="col-span-2 flex items-baseline justify-end space-x-1 text-right">
            <span className="text-gray-500">
              <FontAwesomeIcon icon={faGasPump} />
            </span>
            <span>Gas used</span>
          </div>
          <div className="text-right">Base fee</div>
          <div className="col-span-2 flex items-baseline justify-end space-x-1 text-right">
            <span className="text-amber-400">
              <FontAwesomeIcon icon={faCoins} />
            </span>
            <span>Rewards</span>
          </div>
          <div className="col-span-2 flex items-baseline justify-end space-x-1 text-right">
            <span className="text-orange-500">
              <FontAwesomeIcon icon={faBurn} />
            </span>
            <span>Burnt fees</span>
          </div>
          <div className="flex items-baseline justify-end space-x-1 text-right">
            <span className="text-gray-500">
              <FontAwesomeIcon icon={faHistory} />
            </span>
            <span>Age</span>
          </div>
        </div>
        {blocks.map((b, i, all) => (
          <Transition
            as="div"
            key={b.hash}
            show={i < MAX_BLOCK_HISTORY}
            appear
            enter="transition ease-out duration-500"
            enterFrom="opacity-0 -translate-y-10"
            enterTo="opacity-100 translate-y-0"
            leave="transition ease-out duration-1000"
            leaveFrom="opacity-100 translate-y-0"
            leaveTo="opacity-0 translate-y-10"
          >
            <BlockRow
              block={b}
              baseFeeDelta={
                i < all.length - 1
                  ? FixedNumber.fromValue(b.baseFeePerGas!)
                      .divUnsafe(FixedNumber.fromValue(1e9))
                      .round(0)
                      .subUnsafe(
                        FixedNumber.fromValue(all[i + 1].baseFeePerGas!)
                          .divUnsafe(FixedNumber.fromValue(1e9))
                          .round(0),
                      )
                      .toUnsafeFloat()
                  : 0
              }
            />
          </Transition>
        ))}
      </div>
    </div>
  );
};

export default React.memo(Blocks);



================================================
FILE: src/special/london/chart.ts
================================================
import { ChartData, ChartOptions } from "chart.js";
import { ExtendedBlock } from "../../useErigonHooks";
import { commify } from "../../utils/utils";

function rgbToHex(red: number, green: number, blue: number): string {
  return `#${((red << 16) + (green << 8) + blue).toString(16).padStart(6, "0")}`;
}

function interpolateColor(gasUsed: number, gasLimit: number): string {
  const red = Math.floor(255 + (gasUsed / gasLimit) * (0 - 255));
  const green = Math.floor(255 + (gasUsed / gasLimit) * (0 - 255));
  const blue = 255;
  return rgbToHex(red, green, blue);
}

export const burntFeesChartOptions: ChartOptions<"line"> = {
  animation: false,
  plugins: {
    legend: {
      display: false,
    },
  },
  scales: {
    x: {
      ticks: {
        callback: function (v) {
          // @ts-ignore
          return commify(this.getLabelForValue(v));
        },
      },
    },
    y: {
      beginAtZero: true,
      title: {
        display: true,
        text: "Burnt fees",
      },
      ticks: {
        callback: (v) => `${(v as number) / 1e9} ETH`,
      },
    },
    yBaseFee: {
      position: "right",
      beginAtZero: true,
      title: {
        display: true,
        text: "Base fee",
      },
      ticks: {
        callback: (v) => `${(v as number) / 1e9} Gwei`,
      },
      grid: {
        drawOnChartArea: false,
      },
    },
  },
};

export const burntFeesChartData = (
  blocks: ExtendedBlock[],
): ChartData<"line"> => ({
  labels: blocks.map((b) => b.number.toString()).reverse(),
  datasets: [
    {
      label: "Burnt fees (Gwei)",
      data: blocks
        .map((b) => Number((b.gasUsed * b.baseFeePerGas!) / 10n ** 9n))
        .reverse(),
      fill: true,
      backgroundColor: "#FDBA7470",
      borderColor: "#FB923C",
      tension: 0.2,
    },
    {
      label: "Base fee (wei)",
      data: blocks.map((b) => Number(b.baseFeePerGas!)).reverse(),
      yAxisID: "yBaseFee",
      borderColor: "#38BDF8",
      tension: 0.2,
    },
  ],
});

export const gasChartOptions: ChartOptions<"line"> = {
  animation: false,
  interaction: {
    mode: "index",
    intersect: false,
  },
  plugins: {
    legend: {
      display: false,
    },
  },
  scales: {
    x: {
      ticks: {
        callback: function (v) {
          // @ts-ignore
          return commify(this.getLabelForValue(v));
        },
      },
    },
    y: {
      beginAtZero: true,
      title: {
        display: true,
        text: "Gas",
      },
    },
    yBaseFee: {
      position: "right",
      beginAtZero: true,
      title: {
        display: true,
        text: "Base fee",
      },
      ticks: {
        callback: (v) => `${(v as number) / 1e9} Gwei`,
      },
      grid: {
        drawOnChartArea: false,
      },
    },
  },
};

export const gasChartData = (blocks: ExtendedBlock[]): ChartData<"line"> => ({
  labels: blocks.map((b) => b.number.toString()).reverse(),
  datasets: [
    {
      label: "Gas used",
      data: blocks.map((b) => Number(b.gasUsed)).reverse(),
      fill: true,
      segment: {
        backgroundColor: (ctx, x) =>
          interpolateColor(
            ctx.p1.parsed.y,
            Number(blocks[ctx.p1DataIndex].gasLimit),
          ) + "70",
        borderColor: (ctx) =>
          interpolateColor(
            ctx.p1.parsed.y,
            Number(blocks[ctx.p1DataIndex].gasLimit),
          ),
      },
      tension: 0.2,
    },
    {
      label: "Gas target",
      data: blocks.map((b) => Math.round(Number(b.gasLimit) / 2)).reverse(),
      borderColor: "#FCA5A5",
      borderDash: [5, 5],
      borderWidth: 2,
      tension: 0.2,
      pointStyle: "dash",
    },
    {
      label: "Gas limit",
      data: blocks.map((b) => Number(b.gasLimit)).reverse(),
      borderColor: "#B91C1CF0",
      tension: 0.2,
      pointStyle: "crossRot",
      pointRadius: 5,
    },
    {
      label: "Base fee (wei)",
      data: blocks.map((b) => Number(b.baseFeePerGas!)).reverse(),
      yAxisID: "yBaseFee",
      borderColor: "#38BDF8",
      tension: 0.2,
    },
  ],
});



================================================
FILE: src/special/london/LiveBlocks.tsx
================================================
import React, { useContext } from "react";
import { useLatestBlockHeader } from "../../useLatestBlock";
import { RuntimeContext } from "../../useRuntime";
import Blocks from "./Blocks";

const LiveBlocks: React.FC = () => {
  const { provider } = useContext(RuntimeContext);
  const block = useLatestBlockHeader(provider);
  if (!block) {
    return <div className="grow"></div>;
  }

  return <Blocks latestBlock={block} />;
};

export default React.memo(LiveBlocks);



================================================
FILE: src/storybook/util.tsx
================================================
import { Decorator } from "@storybook/react/*";
import { JsonRpcProvider } from "ethers";
import StandardSelectionBoundary from "../selection/StandardSelectionBoundary";
import { SourcifySource } from "../sourcify/useSourcify";
import { AppConfigContext } from "../useAppConfig";
import { OtterscanConfig } from "../useConfig";
import { RuntimeContext } from "../useRuntime";
import { createZilliqa } from "../useZilliqa";

const mockConfig: OtterscanConfig = { version: "unknown" };

// Mock ETH node at localhost@4242; with mock chain ID 424242
const mockProvider: JsonRpcProvider = new JsonRpcProvider(
  "http://127.0.0.1:4242",
  424242,
  {
    staticNetwork: true,
  },
);

export const runtimeDecorator: Decorator<unknown> = (Story) => (
  <RuntimeContext.Provider
    value={{
      config: mockConfig,
      provider: mockProvider,
      zilliqa: createZilliqa("http://127.0.0.1:4242")!,
    }}
  >
    <AppConfigContext.Provider
      value={{
        sourcifySource: SourcifySource.CENTRAL_SERVER,
        setSourcifySource: () => {},
      }}
    >
      <StandardSelectionBoundary>
        <Story />
      </StandardSelectionBoundary>
    </AppConfigContext.Provider>
  </RuntimeContext.Provider>
);



================================================
FILE: src/token/AllContracts.tsx
================================================
import { FC } from "react";
import { contractMatchParser } from "../ots2/contractMatchParsers";
import { useContractSearchPage } from "../ots2/useUIHooks";
import { PAGE_SIZE } from "../params";
import { usePageTitle } from "../useTitle";
import ContractHeader from "./ContractHeader";
import ContractItem, { mapper } from "./ContractItem";
import GenericContractSearchResult from "./GenericContractSearchResult";

const AllContracts: FC = () => {
  const { pageNumber, page, total } = useContractSearchPage(
    "AllContracts",
    contractMatchParser,
    mapper,
  );

  usePageTitle("All contracts");

  return (
    <GenericContractSearchResult
      title="All contracts"
      header={<ContractHeader />}
      cols={3}
      pageNumber={pageNumber}
      pageSize={PAGE_SIZE}
      total={total}
      page={page}
      Item={(m) => <ContractItem {...m} />}
    />
  );
};

export default AllContracts;



================================================
FILE: src/token/AllERC1155.tsx
================================================
import { FC } from "react";
import { erc1155MatchParser } from "../ots2/contractMatchParsers";
import { useContractSearchPage } from "../ots2/useUIHooks";
import { PAGE_SIZE } from "../params";
import { usePageTitle } from "../useTitle";
import ERC1155Header from "./ERC1155Header";
import ERC1155Item, { mapper } from "./ERC1155Item";
import GenericContractSearchResult from "./GenericContractSearchResult";

const AllERC1155: FC = () => {
  const { pageNumber, page, total } = useContractSearchPage(
    "ERC1155",
    erc1155MatchParser,
    mapper,
  );

  usePageTitle("ERC1155 Tokens");

  return (
    <GenericContractSearchResult
      title="ERC1155 tokens"
      header={<ERC1155Header />}
      cols={5}
      pageNumber={pageNumber}
      pageSize={PAGE_SIZE}
      total={total}
      page={page}
      Item={(m) => <ERC1155Item {...m} />}
    />
  );
};

export default AllERC1155;



================================================
FILE: src/token/AllERC1167.tsx
================================================
import { FC } from "react";
import { erc1167MatchParser } from "../ots2/contractMatchParsers";
import { useContractSearchPage } from "../ots2/useUIHooks";
import { PAGE_SIZE } from "../params";
import { usePageTitle } from "../useTitle";
import ERC1167Header from "./ERC1167Header";
import ERC1167Item, { mapper } from "./ERC1167Item";
import GenericContractSearchResult from "./GenericContractSearchResult";

const AllERC1167: FC = () => {
  const { pageNumber, page, total } = useContractSearchPage(
    "ERC1167",
    erc1167MatchParser,
    mapper,
  );

  usePageTitle("ERC1167 Contracts");

  return (
    <GenericContractSearchResult
      title="ERC1167 proxies"
      header={<ERC1167Header />}
      cols={4}
      pageNumber={pageNumber}
      pageSize={PAGE_SIZE}
      total={total}
      page={page}
      Item={(m) => <ERC1167Item {...m} />}
    />
  );
};

export default AllERC1167;



================================================
FILE: src/token/AllERC20.tsx
================================================
import { FC } from "react";
import { erc20MatchParser } from "../ots2/contractMatchParsers";
import { useContractSearchPage } from "../ots2/useUIHooks";
import { PAGE_SIZE } from "../params";
import { usePageTitle } from "../useTitle";
import ERC20Header from "./ERC20Header";
import ERC20Item, { mapper } from "./ERC20Item";
import GenericContractSearchResult from "./GenericContractSearchResult";

const AllERC20: FC = () => {
  const { pageNumber, page, total } = useContractSearchPage(
    "ERC20",
    erc20MatchParser,
    mapper,
  );

  usePageTitle("ERC20 Tokens");

  return (
    <GenericContractSearchResult
      title="ERC20 tokens"
      header={<ERC20Header />}
      cols={6}
      pageNumber={pageNumber}
      pageSize={PAGE_SIZE}
      total={total}
      page={page}
      Item={(m) => <ERC20Item {...m} />}
    />
  );
};

export default AllERC20;



================================================
FILE: src/token/AllERC4626.tsx
================================================
import { FC } from "react";
import { erc4626MatchParser } from "../ots2/contractMatchParsers";
import { useContractSearchPage } from "../ots2/useUIHooks";
import { PAGE_SIZE } from "../params";
import { usePageTitle } from "../useTitle";
import ERC4626Header from "./ERC4626Header";
import ERC4626Item, { mapper } from "./ERC4626Item";
import GenericContractSearchResult from "./GenericContractSearchResult";

const AllERC4626: FC = () => {
  const { pageNumber, page, total } = useContractSearchPage(
    "ERC4626",
    erc4626MatchParser,
    mapper,
  );

  usePageTitle("ERC4626 Tokens");

  return (
    <GenericContractSearchResult
      title="ERC4626 vaults"
      header={<ERC4626Header />}
      cols={8}
      pageNumber={pageNumber}
      pageSize={PAGE_SIZE}
      total={total}
      page={page}
      Item={(m) => <ERC4626Item {...m} />}
    />
  );
};

export default AllERC4626;



================================================
FILE: src/token/AllERC721.tsx
================================================
import { FC } from "react";
import { erc721MatchParser } from "../ots2/contractMatchParsers";
import { useContractSearchPage } from "../ots2/useUIHooks";
import { PAGE_SIZE } from "../params";
import { usePageTitle } from "../useTitle";
import ERC721Header from "./ERC721Header";
import ERC721Item, { mapper } from "./ERC721Item";
import GenericContractSearchResult from "./GenericContractSearchResult";

const AllERC721: FC = () => {
  const { pageNumber, page, total } = useContractSearchPage(
    "ERC721",
    erc721MatchParser,
    mapper,
  );

  usePageTitle("ERC721 Tokens");

  return (
    <GenericContractSearchResult
      title="ERC721 tokens"
      header={<ERC721Header />}
      cols={5}
      pageNumber={pageNumber}
      pageSize={PAGE_SIZE}
      total={total}
      page={page}
      Item={(m) => <ERC721Item {...m} />}
    />
  );
};

export default AllERC721;



================================================
FILE: src/token/ContractFilterMenu.tsx
================================================
import { faChevronDown } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { Menu, MenuButton, MenuItem, MenuItems } from "@headlessui/react";
import { FC } from "react";
import { NavLink } from "react-router-dom";
import { contractFilters } from "./filters";

type ContractFilterMenuProps = {
  title: string;
};

const ContractFilterMenu: FC<ContractFilterMenuProps> = ({ title }) => (
  <Menu>
    <MenuButton>
      <div className="flex items-baseline space-x-2 hover:text-link-blue-hover">
        <span>{title}</span>
        <span className="self-center">
          <FontAwesomeIcon icon={faChevronDown} size="1x" />
        </span>
      </div>
    </MenuButton>
    <MenuItems
      className="absolute space-y-1 rounded border bg-white p-1 drop-shadow"
      as="div"
    >
      {contractFilters.map((f) => (
        <MenuItem key={f.url}>
          {({ focus }) => (
            <NavLink to={f.url} end>
              {({ isActive }) => (
                <div
                  className={`${focus && !isActive ? "bg-gray-200" : ""} ${
                    isActive ? "opacity-40" : ""
                  } text-md rounded px-2 py-1 font-normal`}
                >
                  {f.label}
                </div>
              )}
            </NavLink>
          )}
        </MenuItem>
      ))}
    </MenuItems>
  </Menu>
);

export default ContractFilterMenu;



================================================
FILE: src/token/ContractHeader.tsx
================================================
import { FC } from "react";

const ContractHeader: FC = () => (
  <>
    <th className="w-96">Address</th>
    <th className="w-28">Block</th>
    <th>Age</th>
  </>
);

export default ContractHeader;



================================================
FILE: src/token/ContractItem.tsx
================================================
import { FC, memo } from "react";
import BlockLink from "../components/BlockLink";
import TimestampAge from "../components/TimestampAge";
import DecoratedAddressLink from "../execution/components/DecoratedAddressLink";
import { ResultMapper } from "../ots2/useUIHooks";
import { ChecksummedAddress } from "../types";

type ContractItemProps = {
  blockNumber: bigint;
  timestamp: number;
  address: ChecksummedAddress;
};

export const mapper: ResultMapper<ContractItemProps> = (m, blocksSummary) => ({
  blockNumber: m.blockNumber,
  timestamp: blocksSummary.get(m.blockNumber)!.timestamp,
  address: m.address,
});

const ContractItem: FC<ContractItemProps> = ({
  blockNumber,
  timestamp,
  address,
}) => (
  <>
    <td>
      <DecoratedAddressLink address={address} plain />
    </td>
    <td>
      <BlockLink blockTag={blockNumber} />
    </td>
    <td>
      <TimestampAge timestamp={timestamp} />
    </td>
  </>
);

export default memo(ContractItem);



================================================
FILE: src/token/ERC1155Header.tsx
================================================
import { FC } from "react";

const ERC1155Header: FC = () => (
  <>
    <th className="w-96">Address</th>
    <th className="w-28">Block</th>
    <th className="w-40">Age</th>
    <th>Name</th>
    <th>Symbol</th>
  </>
);

export default ERC1155Header;



================================================
FILE: src/token/ERC1155Item.tsx
================================================
import { FC, memo } from "react";
import BlockLink from "../components/BlockLink";
import CanBeEmptyText from "../components/CanBeEmptyText";
import TimestampAge from "../components/TimestampAge";
import DecoratedAddressLink from "../execution/components/DecoratedAddressLink";
import { ResultMapper } from "../ots2/useUIHooks";
import { ChecksummedAddress } from "../types";

type ERC1155ItemProps = {
  blockNumber: bigint;
  timestamp: number;
  address: ChecksummedAddress;
  name: string;
  symbol: string;
};

export const mapper: ResultMapper<ERC1155ItemProps> = (m, blocksSummary) => ({
  blockNumber: m.blockNumber,
  timestamp: blocksSummary.get(m.blockNumber)!.timestamp,
  address: m.address,
  name: m.name,
  symbol: m.symbol,
});

const ERC1155Item: FC<ERC1155ItemProps> = ({
  blockNumber,
  timestamp,
  address,
  name,
  symbol,
}) => (
  <>
    <td>
      <DecoratedAddressLink address={address} plain />
    </td>
    <td>
      <BlockLink blockTag={blockNumber} />
    </td>
    <td>
      <TimestampAge timestamp={timestamp} />
    </td>
    <td>
      <CanBeEmptyText text={name} />
    </td>
    <td>
      <CanBeEmptyText text={symbol} />
    </td>
  </>
);

export default memo(ERC1155Item);



================================================
FILE: src/token/ERC1167Header.tsx
================================================
import { FC } from "react";

const ERC1167Header: FC = () => (
  <>
    <th className="w-96">Address</th>
    <th className="w-28">Block</th>
    <th className="w-40">Age</th>
    <th>Implementation</th>
  </>
);

export default ERC1167Header;



================================================
FILE: src/token/ERC1167Item.tsx
================================================
import { FC, memo } from "react";
import AddressHighlighter from "../components/AddressHighlighter";
import BlockLink from "../components/BlockLink";
import TimestampAge from "../components/TimestampAge";
import DecoratedAddressLink from "../execution/components/DecoratedAddressLink";
import { ResultMapper } from "../ots2/useUIHooks";
import { ChecksummedAddress } from "../types";

type ERC1167ItemProps = {
  blockNumber: bigint;
  timestamp: number;
  address: ChecksummedAddress;
  implementation: ChecksummedAddress;
};

export const mapper: ResultMapper<ERC1167ItemProps> = (m, blocksSummary) => ({
  blockNumber: m.blockNumber,
  timestamp: blocksSummary.get(m.blockNumber)!.timestamp,
  address: m.address,
  implementation: m.implementation,
});

const ERC1167Item: FC<ERC1167ItemProps> = ({
  blockNumber,
  timestamp,
  address,
  implementation,
}) => (
  <>
    <td>
      <DecoratedAddressLink address={address} eoa={false} plain />
    </td>
    <td>
      <BlockLink blockTag={blockNumber} />
    </td>
    <td>
      <TimestampAge timestamp={timestamp} />
    </td>
    <td className="inline-flex">
      <AddressHighlighter address={implementation}>
        <DecoratedAddressLink address={implementation} eoa={false} />
      </AddressHighlighter>
    </td>
  </>
);

export default memo(ERC1167Item);



================================================
FILE: src/token/ERC20Header.tsx
================================================
import { FC } from "react";

const ERC20Header: FC = () => (
  <>
    <th className="w-96">Address</th>
    <th className="w-28">Block</th>
    <th className="w-40">Age</th>
    <th className="w-96">Name</th>
    <th className="w-48">Symbol</th>
    <th className="w-20">Decimals</th>
  </>
);

export default ERC20Header;



================================================
FILE: src/token/ERC20Item.tsx
================================================
import { FC, memo } from "react";
import BlockLink from "../components/BlockLink";
import CanBeEmptyText from "../components/CanBeEmptyText";
import TimestampAge from "../components/TimestampAge";
import DecoratedAddressLink from "../execution/components/DecoratedAddressLink";
import { ResultMapper } from "../ots2/useUIHooks";
import { ChecksummedAddress } from "../types";

type ERC20ItemProps = {
  blockNumber: bigint;
  timestamp: number;
  address: ChecksummedAddress;
  name: string;
  symbol: string;
  decimals: number;
};

export const mapper: ResultMapper<ERC20ItemProps> = (m, blocksSummary) => ({
  blockNumber: m.blockNumber,
  timestamp: blocksSummary.get(m.blockNumber)!.timestamp,
  address: m.address,
  name: m.name,
  symbol: m.symbol,
  decimals: m.decimals,
});

const ERC20Item: FC<ERC20ItemProps> = ({
  blockNumber,
  timestamp,
  address,
  name,
  symbol,
  decimals,
}) => (
  <>
    <td>
      <DecoratedAddressLink address={address} plain />
    </td>
    <td>
      <BlockLink blockTag={blockNumber} />
    </td>
    <td>
      <TimestampAge timestamp={timestamp} />
    </td>
    <td>
      <CanBeEmptyText text={name} />
    </td>
    <td>
      <CanBeEmptyText text={symbol} />
    </td>
    <td>{decimals}</td>
  </>
);

export default memo(ERC20Item);



================================================
FILE: src/token/ERC4626Header.tsx
================================================
import { FC } from "react";

const ERC4626Header: FC = () => (
  <>
    <th className="w-96">Address</th>
    <th className="w-28">Block</th>
    <th className="w-40">Age</th>
    <th className="w-96">Name</th>
    <th className="w-48">Symbol</th>
    <th className="w-20">Decimals</th>
    <th className="w-96">Asset</th>
    <th className="w-40">Total Assets</th>
  </>
);

export default ERC4626Header;



================================================
FILE: src/token/ERC4626Item.tsx
================================================
import { FC, memo } from "react";
import BlockLink from "../components/BlockLink";
import CanBeEmptyText from "../components/CanBeEmptyText";
import TimestampAge from "../components/TimestampAge";
import DecoratedAddressLink from "../execution/components/DecoratedAddressLink";
import { ResultMapper } from "../ots2/useUIHooks";
import { ChecksummedAddress } from "../types";

type ERC4626ItemProps = {
  blockNumber: bigint;
  timestamp: number;
  address: ChecksummedAddress;
  name: string;
  symbol: string;
  decimals: number;
  asset: string;
  totalAssets: number;
};

export const mapper: ResultMapper<ERC4626ItemProps> = (m, blocksSummary) => ({
  blockNumber: m.blockNumber,
  timestamp: blocksSummary.get(m.blockNumber)!.timestamp,
  address: m.address,
  name: m.name,
  symbol: m.symbol,
  decimals: m.decimals,
  asset: m.asset,
  totalAssets: m.totalAssets,
});

const ERC4626Item: FC<ERC4626ItemProps> = ({
  blockNumber,
  timestamp,
  address,
  name,
  symbol,
  decimals,
  asset,
  totalAssets,
}) => (
  <>
    <td>
      <DecoratedAddressLink address={address} plain />
    </td>
    <td>
      <BlockLink blockTag={blockNumber} />
    </td>
    <td>
      <TimestampAge timestamp={timestamp} />
    </td>
    <td>
      <CanBeEmptyText text={name} />
    </td>
    <td>
      <CanBeEmptyText text={symbol} />
    </td>
    <td>{decimals}</td>
    <td>
      <DecoratedAddressLink address={asset} />
    </td>
    <td>{totalAssets}</td>
  </>
);

export default memo(ERC4626Item);



================================================
FILE: src/token/ERC721Header.tsx
================================================
import { FC } from "react";

const ERC721Header: FC = () => (
  <>
    <th className="w-96">Address</th>
    <th className="w-28">Block</th>
    <th className="w-40">Age</th>
    <th className="w-96">Name</th>
    <th className="w-48">Symbol</th>
  </>
);

export default ERC721Header;



================================================
FILE: src/token/ERC721Item.tsx
================================================
import { FC, memo } from "react";
import BlockLink from "../components/BlockLink";
import CanBeEmptyText from "../components/CanBeEmptyText";
import TimestampAge from "../components/TimestampAge";
import DecoratedAddressLink from "../execution/components/DecoratedAddressLink";
import { ResultMapper } from "../ots2/useUIHooks";
import { ChecksummedAddress } from "../types";

type ERC721ItemProps = {
  blockNumber: bigint;
  timestamp: number;
  address: ChecksummedAddress;
  name: string;
  symbol: string;
};

export const mapper: ResultMapper<ERC721ItemProps> = (m, blocksSummary) => ({
  blockNumber: m.blockNumber,
  timestamp: blocksSummary.get(m.blockNumber)!.timestamp,
  address: m.address,
  name: m.name,
  symbol: m.symbol,
});

const ERC721Item: FC<ERC721ItemProps> = ({
  blockNumber,
  timestamp,
  address,
  name,
  symbol,
}) => (
  <>
    <td>
      <DecoratedAddressLink address={address} plain />
    </td>
    <td>
      <BlockLink blockTag={blockNumber} />
    </td>
    <td>
      <TimestampAge timestamp={timestamp} />
    </td>
    <td>
      <CanBeEmptyText text={name} />
    </td>
    <td>
      <CanBeEmptyText text={symbol} />
    </td>
  </>
);

export default memo(ERC721Item);



================================================
FILE: src/token/filters.ts
================================================
export type ContractFilter = {
  url: string;
  label: string;
};

export const contractFilters: ContractFilter[] = [
  {
    url: "/contracts",
    label: "All contracts",
  },
  {
    url: "/contracts/erc20",
    label: "ERC20 tokens",
  },
  {
    url: "/contracts/erc721",
    label: "ERC721 tokens",
  },
  {
    url: "/contracts/erc1155",
    label: "ERC1155 tokens",
  },
  {
    url: "/contracts/erc4626",
    label: "ERC4626 vaults",
  },
  {
    url: "/contracts/erc1167",
    label: "ERC1167 proxies",
  },
];



================================================
FILE: src/token/GenericContractSearchResult.tsx
================================================
import { FC, ReactNode } from "react";
import ContentFrame from "../components/ContentFrame";
import StandardFrame from "../components/StandardFrame";
import StandardScrollableTable from "../components/StandardScrollableTable";
import StandardSubtitle from "../components/StandardSubtitle";
import StandardTBody from "../components/StandardTBody";
import StandardTHead from "../components/StandardTHead";
import PendingPage from "../execution/address/PendingPage";
import { ContractMatch } from "../ots2/usePrototypeHooks";
import SearchResultNavBar from "../search/SearchResultNavBar";
import { totalContractsFormatter } from "../search/messages";
import StandardSelectionBoundary from "../selection/StandardSelectionBoundary";
import ContractFilterMenu from "./ContractFilterMenu";

type GenericContractSearchResultProps<T> = {
  /**
   * Title describing the contract search, i.e., "ERC20 tokens".
   */
  title: string;

  /**
   * A control to be inserted into results's table header control;
   * usually a fragment containing a series of <th>'s.
   *
   * The <th>'s may have a column width.
   */
  header: ReactNode;

  /**
   * Number of columns; used to render pending content.
   */
  cols: number;

  /**
   * 1-based page number.
   */
  pageNumber: number;

  /**
   * The max number of elements inside a page result. Used to calculate
   * how many pages exist in navigation controls.
   */
  pageSize: number;

  /**
   * The total number of results in the scope of the search, i.e.,
   * for an ERC20 search, it should represent the total number of
   * existing ERC20 contracts so far.
   */
  total: number | undefined;

  /**
   * Represents 1 page of search results. The entire page will be rendered
   * by this component.
   */
  page: T[] | undefined;

  /**
   * Renders 1 page result. It should be a fragment with the result <td> columns.
   */
  Item: FC<T>;
};

const GenericContractSearchResult = <T extends ContractMatch>({
  title,
  header,
  pageNumber,
  pageSize,
  total,
  page,
  Item,
}: GenericContractSearchResultProps<T>) => (
  <StandardFrame>
    <StandardSubtitle>
      <ContractFilterMenu title={title} />
    </StandardSubtitle>
    <ContentFrame key={pageNumber}>
      <SearchResultNavBar
        pageNumber={pageNumber}
        pageSize={pageSize}
        total={total}
        totalFormatter={totalContractsFormatter}
      />
      <StandardScrollableTable>
        <StandardTHead>{header}</StandardTHead>
        {page !== undefined ? (
          <StandardSelectionBoundary>
            <StandardTBody>
              {page.map((m) => (
                <tr key={m.address}>
                  <Item {...m} />
                </tr>
              ))}
            </StandardTBody>
          </StandardSelectionBoundary>
        ) : (
          <PendingPage rows={pageSize} cols={3} />
        )}
      </StandardScrollableTable>
      {total !== undefined && (
        <SearchResultNavBar
          pageNumber={pageNumber}
          pageSize={pageSize}
          total={total}
          totalFormatter={totalContractsFormatter}
        />
      )}
    </ContentFrame>
  </StandardFrame>
);

export default GenericContractSearchResult;



================================================
FILE: src/utils/age.day.test.ts
================================================
import { describe, expect } from "@jest/globals";
import { ageString } from "./utils";

describe("day tests", () => {
  test("now", () => {
    expect(ageString(0)).toBe("now");
  });

  test("1 day", () => {
    expect(ageString(86400)).toBe("1 day ago");
  });

  test("2 days", () => {
    expect(ageString(172800)).toBe("2 days ago");
  });

  test("29 days", () => {
    expect(ageString(2505600)).toBe("29 days ago");
  });
});



================================================
FILE: src/utils/age.intraday.test.ts
================================================
import { describe, expect } from "@jest/globals";
import { ageString } from "./utils";

describe("second tests", () => {
  test("1 second", () => {
    expect(ageString(1)).toBe("1 sec ago");
  });

  test("2 seconds", () => {
    expect(ageString(2)).toBe("2 secs ago");
  });

  test("59 seconds", () => {
    expect(ageString(59)).toBe("59 secs ago");
  });
});

describe("minute tests", () => {
  test("1 minute", () => {
    expect(ageString(60)).toBe("1 min ago");
  });

  test("2 minutes", () => {
    expect(ageString(120)).toBe("2 mins ago");
  });

  test("almost 2 minutes", () => {
    expect(ageString(119)).toBe("1 min ago");
  });

  test("just after 2 minutes", () => {
    expect(ageString(121)).toBe("2 mins ago");
  });

  test("59 minutes", () => {
    expect(ageString(3540)).toBe("59 mins ago");
  });
});

describe("hour tests", () => {
  test("1 hour", () => {
    expect(ageString(3600)).toBe("1 hr ago");
  });

  test("2 hours", () => {
    expect(ageString(7200)).toBe("2 hrs ago");
  });

  test("almost 2 hours", () => {
    expect(ageString(7199)).toBe("1 hr 59 mins ago");
  });

  test("just after 2 hours", () => {
    expect(ageString(7201)).toBe("2 hrs ago");
  });

  test("23 hours", () => {
    expect(ageString(82800)).toBe("23 hrs ago");
  });
});



================================================
FILE: src/utils/formatter.ts
================================================
import {
  AccessList,
  BlockParams,
  LogParams,
  Signature,
  TransactionReceiptParams,
  TransactionResponseParams,
  accessListify,
  dataLength,
  getAddress,
  isHexString,
  makeError,
  toBeHex,
  zeroPadValue,
} from "ethers";

export type FormatFunc<T> = (value: any) => T;

type FormatObject<T> = {
  [K in keyof T]: T[K] extends FormatFunc<infer U> ? U : never;
};

type BlockParamsWithTransactions = BlockParams & {
  transactions: ReadonlyArray<TransactionResponseParams>;
};

class Formatter {
  static formats = {
    block: {
      hash: Formatter.allowNull(Formatter.hash),
      parentHash: Formatter.hash,
      number: Formatter.number,

      timestamp: Formatter.number,
      nonce: Formatter.hex,
      difficulty: Formatter.bigInt,

      gasLimit: Formatter.bigInt,
      gasUsed: Formatter.bigInt,

      miner: Formatter.address,
      extraData: Formatter.data,

      receiptsRoot: Formatter.allowNull(Formatter.hash),
      stateRoot: Formatter.allowNull(Formatter.hash),

      // TODO: Are there any situations where fetching only the block header
      // might cause ethers to believe the block has no transactions?
      transactions: Formatter.allowNull(Formatter.arrayOf(Formatter.hash), []),

      baseFeePerGas: Formatter.allowNull(Formatter.bigInt),

      blobGasUsed: Formatter.allowNull(Formatter.bigInt, null),
      excessBlobGas: Formatter.allowNull(Formatter.bigInt, null),

      parentBeaconBlockRoot: Formatter.allowNull(Formatter.hash, null),
    },
    receipt: {
      to: Formatter.allowNull(Formatter.address, null),
      from: Formatter.address,
      contractAddress: Formatter.allowNull(Formatter.address, null),
      transactionIndex: Formatter.number,

      // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
      root: Formatter.allowNull(Formatter.hex),
      gasPrice: Formatter.allowNull(Formatter.bigInt, null),
      gasUsed: Formatter.bigInt,
      // TODO: Is this an acceptable default value?
      logsBloom: Formatter.allowNull(Formatter.data, "0x"),
      blockHash: Formatter.hash,
      transactionHash: Formatter.hash,
      logs: Formatter.arrayOf(Formatter.logParams),
      blockNumber: Formatter.number,
      cumulativeGasUsed: Formatter.bigInt,
      effectiveGasPrice: Formatter.allowNull(Formatter.bigInt),
      status: Formatter.allowNull(Formatter.number, null),
      type: Formatter.number,

      blobGasPrice: Formatter.allowNull(Formatter.bigInt),
      blobGasUsed: Formatter.allowNull(Formatter.bigInt),
    },
    receiptLog: {
      transactionIndex: Formatter.number,
      blockNumber: Formatter.number,
      transactionHash: Formatter.hash,
      address: Formatter.address,
      topics: Formatter.arrayOf(Formatter.hash),
      data: Formatter.data,
      logIndex: Formatter.number,
      blockHash: Formatter.hash,
      removed: Formatter.boolean,
    },
    transaction: {
      hash: Formatter.hash,

      type: Formatter.number,
      accessList: Formatter.allowNull(Formatter.accessList, null),

      blockHash: Formatter.allowNull(Formatter.hash, null),
      blockNumber: Formatter.allowNull(Formatter.number, null),
      transactionIndex: Formatter.allowNull(Formatter.number, null),

      confirmations: Formatter.allowNull(Formatter.number, null),

      from: Formatter.address,

      // gasPrice must be set
      // maxPriorityFeePerGas + maxFeePerGas, not necessarily
      gasPrice: Formatter.bigInt,
      maxPriorityFeePerGas: Formatter.allowNull(Formatter.bigInt),
      maxFeePerGas: Formatter.allowNull(Formatter.bigInt),

      gasLimit: Formatter.bigInt,
      to: Formatter.allowNull(Formatter.address, null),
      value: Formatter.bigInt,
      nonce: Formatter.number,
      data: Formatter.data,

      maxFeePerBlobGas: Formatter.allowNull(Formatter.bigInt, null),
      blobVersionedHashes: Formatter.allowNull(
        Formatter.arrayOf(Formatter.hash),
        null,
      ),

      r: Formatter.allowNull(Formatter.uint256),
      s: Formatter.allowNull(Formatter.uint256),
      v: Formatter.allowNull(Formatter.number),

      // TODO: Removed in ethers v6
      creates: Formatter.allowNull(Formatter.address, null),

      raw: Formatter.allowNull(Formatter.data),
    },
  };

  static address(value: any): string {
    return getAddress(value);
  }

  // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number
  // Strict! Used on input.
  static number(number: any): number {
    if (number === "0x") {
      return 0;
    }
    return Number(BigInt(number));
  }

  static bigInt(value: any): bigint {
    return BigInt(value);
  }

  static boolean(value: any): boolean {
    if (typeof value === "boolean") {
      return value;
    }
    if (typeof value === "string") {
      value = value.toLowerCase();
      if (value === "true") {
        return true;
      }
      if (value === "false") {
        return false;
      }
    }
    throw makeError("invalid boolean", "INVALID_ARGUMENT", {
      argument: "value",
      value,
    });
  }

  // if value is null-ish, nullValue is returned
  static allowNull<T>(
    format: FormatFunc<T>,
    nullValue?: any,
  ): FormatFunc<T | typeof nullValue> {
    return function (value: any) {
      if (value === null || value === undefined) {
        return nullValue;
      }
      return format(value);
    };
  }

  // Requires an Array satisfying check
  static arrayOf<T>(format: FormatFunc<T>): FormatFunc<T[]> {
    return function (array: any): T[] {
      if (!Array.isArray(array)) {
        throw new Error("not an array");
      }

      const result: T[] = [];

      array.forEach(function (value) {
        result.push(format(value));
      });

      return result;
    };
  }

  static hex(value: any, strict?: boolean): string {
    if (typeof value === "string") {
      if (!strict && value.substring(0, 2) !== "0x") {
        value = "0x" + value;
      }
      if (isHexString(value)) {
        return value.toLowerCase();
      }
    }
    throw makeError("invalid hex", "INVALID_ARGUMENT", {
      argument: "value",
      value,
    });
  }

  static uint256(value: any): string {
    if (!isHexString(value)) {
      throw makeError("invalid uint256", "INVALID_ARGUMENT", {
        argument: "value",
        value,
      });
    }
    return zeroPadValue(toBeHex(value), 32);
  }

  // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.
  static hash(value: any, strict?: boolean): string {
    const result = Formatter.hex(value, strict);
    if (dataLength(result) !== 32) {
      throw makeError("invalid hash", "INVALID_ARGUMENT", {
        argument: "value",
        value,
      });
    }
    return result;
  }

  static data(value: any, strict?: boolean): string {
    const result = Formatter.hex(value, strict);
    if (result.length % 2 !== 0) {
      throw makeError("invalid data; odd-length", "INVALID_ARGUMENT", {
        argument: "value",
        value,
      });
    }
    return result;
  }

  static check<T extends Record<string, FormatFunc<any>>>(
    format: T,
    object: any,
  ): FormatObject<T> {
    const result = {} as FormatObject<T>;
    for (const key in format) {
      try {
        const value = format[key](object[key]);
        if (value !== undefined) {
          result[key] = value;
        }
      } catch (error: any) {
        throw makeError("check failed", "INVALID_ARGUMENT", {
          argument: key,
          value: object[key],
        });
      }
    }
    return result;
  }

  static blockParams(blockObj: any): BlockParams {
    return Formatter.check(Formatter.formats.block, blockObj);
  }

  static blockParamsWithTransactions(
    blockObj: any,
  ): BlockParamsWithTransactions {
    let blockWithTxsFormat = {
      ...Formatter.formats.block,
      transactions: Formatter.arrayOf(Formatter.transactionResponse),
    };
    return Formatter.check(blockWithTxsFormat, blockObj);
  }

  static logParams(receiptLogObj: any): LogParams {
    const nodeLog = Formatter.check(
      Formatter.formats.receiptLog,
      receiptLogObj,
    );
    return {
      index: nodeLog.logIndex,
      ...nodeLog,
    };
  }

  static transactionReceiptParams(receiptObj: any): TransactionReceiptParams {
    const nodeReceipt = Formatter.check(Formatter.formats.receipt, receiptObj);
    return {
      hash: nodeReceipt.transactionHash,
      index: nodeReceipt.transactionIndex,
      ...nodeReceipt,
    };
  }

  static accessList(obj: any): AccessList {
    return accessListify(obj || []);
  }

  static transactionResponse(transaction: any): TransactionResponseParams {
    // Rename gas to gasLimit
    if (transaction.gas != null && transaction.gasLimit == null) {
      transaction.gasLimit = transaction.gas;
    }

    // Some clients (TestRPC) do strange things like return 0x0 for the
    // 0 address; correct this to be a real address
    // TODO: Remove this?
    if (transaction.to && BigInt(transaction.to) === 0n) {
      transaction.to = "0x0000000000000000000000000000000000000000";
    }

    // Rename input to data
    if (transaction.input != null && transaction.data == null) {
      transaction.data = transaction.input;
    }

    // Removed in ethers v6
    // If to and creates are empty, populate the creates from the transaction
    /*
    if (transaction.to == null && transaction.creates == null) {
        transaction.creates = this.contractAddress(transaction);
    }
    */

    if (
      (transaction.type === 1 ||
        transaction.type === 2 ||
        transaction.type === 3) &&
      transaction.accessList == null
    ) {
      transaction.accessList = [];
    }

    type ParsedTransactionType = FormatObject<
      typeof Formatter.formats.transaction
    >;
    type ParsedResponseType = ParsedTransactionType & {
      index: number;
      chainId: bigint;
      signature: Signature;
    };
    const parsedTx: ParsedTransactionType = Formatter.check(
      Formatter.formats.transaction,
      transaction,
    );

    const index = parsedTx.transactionIndex;
    let chainId: bigint;
    if (transaction.chainId != null) {
      chainId = transaction.chainId;

      if (isHexString(chainId)) {
        chainId = BigInt(chainId);
      }
    } else {
      chainId = transaction.networkId;

      if (isHexString(chainId)) {
        chainId = BigInt(chainId);
      }

      if (typeof chainId !== "bigint") {
        chainId = 0n;
      }
    }

    const signature = Signature.from({
      r: parsedTx.r,
      s: parsedTx.s,
      v: parsedTx.v,
    });
    const result: TransactionResponseParams = {
      ...parsedTx,
      index,
      chainId,
      signature,
    };
    return result;
  }
}

const addressFormat: FormatFunc<string> = Formatter.address;

export const formatter = Formatter;



================================================
FILE: src/utils/future.intraday.test.ts
================================================
import { describe, expect } from "@jest/globals";
import { ageString } from "./utils";

describe("second tests", () => {
  test("1 second", () => {
    expect(ageString(-1)).toBe("in 1 sec");
  });

  test("2 seconds", () => {
    expect(ageString(-2)).toBe("in 2 secs");
  });

  test("59 seconds", () => {
    expect(ageString(-59)).toBe("in 59 secs");
  });
});

describe("minute tests", () => {
  test("1 minute", () => {
    expect(ageString(-60)).toBe("in 1 min");
  });

  test("2 minutes", () => {
    expect(ageString(-120)).toBe("in 2 mins");
  });

  test("almost 2 minutes", () => {
    expect(ageString(-119)).toBe("in 1 min");
  });

  test("just after 2 minutes", () => {
    expect(ageString(-121)).toBe("in 2 mins");
  });

  test("59 minutes", () => {
    expect(ageString(-3540)).toBe("in 59 mins");
  });
});

describe("hour tests", () => {
  test("1 hour", () => {
    expect(ageString(-3600)).toBe("in 1 hr");
  });

  test("2 hours", () => {
    expect(ageString(-7200)).toBe("in 2 hrs");
  });

  test("almost 2 hours", () => {
    expect(ageString(-7199)).toBe("in 1 hr 59 mins");
  });

  test("just after 2 hours", () => {
    expect(ageString(-7201)).toBe("in 2 hrs");
  });

  test("23 hours", () => {
    expect(ageString(-82800)).toBe("in 23 hrs");
  });
});



================================================
FILE: src/utils/NOTICE.txt
================================================
This repository uses code for the `commify` function and `Formatter` class that is derived from the ethers library, version 5, available under the following license:

MIT License

Copyright (c) 2019 Richard Moore

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
FILE: src/utils/utils.ts
================================================
import { getAddressFromPublicKey } from "@zilliqa-js/crypto";
import { validation } from "@zilliqa-js/util";

export const ageString = (durationInSecs: number) => {
  if (durationInSecs === 0) {
    return "now";
  }

  let desc = "";

  const isInThePast = durationInSecs > 0;
  if (!isInThePast) {
    desc = "in ";
    durationInSecs = -durationInSecs;
  }

  if (durationInSecs <= 1) {
    desc += "1 sec ";
  } else if (durationInSecs < 60) {
    desc += `${Math.trunc(durationInSecs)} secs `;
  } else {
    const days = Math.trunc(durationInSecs / 86400);
    durationInSecs %= 86400;
    const hours = Math.trunc(durationInSecs / 3600);
    durationInSecs %= 3600;
    const mins = Math.trunc(durationInSecs / 60);

    if (days > 0) {
      desc += `${days} ${days === 1 ? "day" : "days"} `;
    }
    if (hours > 0) {
      desc += `${hours} ${hours === 1 ? "hr" : "hrs"} `;
    }
    if (days === 0 && mins > 0) {
      desc += `${mins} ${mins === 1 ? "min" : "mins"} `;
    }
  }
  if (isInThePast) {
    desc += "ago";
  } else {
    desc = desc.trimEnd();
  }

  return desc;
};

export function commify(value: string | number | bigint): string {
  const comps = String(value).split(".");

  if (
    comps.length > 2 ||
    !comps[0].match(/^-?[0-9]*$/) ||
    (comps[1] && !comps[1].match(/^[0-9]*$/)) ||
    value === "." ||
    value === "-."
  ) {
    throw new Error("invalid commify value: " + value);
  }

  // Make sure we have at least one whole digit (0 if none)
  let whole = comps[0];

  let negative = "";
  if (whole.substring(0, 1) === "-") {
    negative = "-";
    whole = whole.substring(1);
  }

  // Make sure we have at least 1 whole digit with no leading zeros
  while (whole.substring(0, 1) === "0") {
    whole = whole.substring(1);
  }
  if (whole === "") {
    whole = "0";
  }

  let suffix = "";
  if (comps.length === 2) {
    suffix = "." + (comps[1] || "0");
  }
  while (suffix.length > 2 && suffix[suffix.length - 1] === "0") {
    suffix = suffix.substring(0, suffix.length - 1);
  }

  const formatted = [];
  while (whole.length) {
    if (whole.length <= 3) {
      formatted.unshift(whole);
      break;
    } else {
      const index = whole.length - 3;
      formatted.unshift(whole.substring(index));
      whole = whole.substring(0, index);
    }
  }

  return negative + formatted.join(",") + suffix;
}

export const zilliqaToOtterscanTimestamp = (timestamp: string): number => {
  return Math.trunc(parseInt(timestamp, 10) / 1000000);
};

export const stripHexPrefix: (inputHex: string) => string = (
  inputHex: string,
) => {
  if (inputHex.substring(0, 2) === "0x") return inputHex.substring(2);
  return inputHex;
};

// Add hex prefix if not already
export const addHexPrefix: (inputHex: string) => string = (
  inputHex: string,
) => {
  if (inputHex.substring(0, 2) !== "0x") return "0x" + inputHex;
  return inputHex;
};

export const pubKeyToAddr: (k: string) => string = (pubKey: string) => {
  const strippedPubKey = stripHexPrefix(pubKey);
  if (!validation.isPubKey(strippedPubKey)) return "Invalid public key";
  else return getAddressFromPublicKey(strippedPubKey).toLowerCase();
};



================================================
FILE: .github/dependabot.yml
================================================
version: 2
updates:
  - package-ecosystem: "npm"
    directory: "/"
    schedule:
      interval: "daily"
    open-pull-requests-limit: 20
  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "daily"



================================================
FILE: .github/workflows/build-and-prettier.yml
================================================
name: Build and Prettier
on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - develop
      - main
  workflow_dispatch:
jobs:
  check-prettier:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
      - name: Install packages
        run: npm ci
      - name: Run prettier
        run: npx prettier -c .
      - name: Build Otterscan
        run: npm run build



================================================
FILE: .github/workflows/cicd-prd.yaml
================================================
name: "CICD production"

on:
  # On release
  release:
    types: [published]

jobs:
  build-makefile:
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-24.04
    if: github.actor != 'dependabot[bot]'
    name: "Build image with Makefile"
    strategy:
      fail-fast: false
      matrix:
        application: [otterscan]
        include:
          - application: otterscan
            image_name: otterscan
            path: .
            tag_length: 8
            tag_latest: false
    env:
      REGISTRY: asia-docker.pkg.dev
      REPOSITORY_STG: asia-docker.pkg.dev/prj-d-devops-services-4dgwlsse/zilliqa-public
      REPOSITORY_PRD: asia-docker.pkg.dev/prj-p-devops-services-tvwmrf63/zilliqa-public
    steps:
      - name: Checkout code
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29
        with:
          submodules: recursive
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 0

      - name: "Authenticate to Google Cloud - staging"
        id: google-auth-stg
        uses: "google-github-actions/auth@71fee32a0bb7e97b4d33d548e7d957010649d8fa"
        with:
          token_format: "access_token"
          workload_identity_provider: "${{ secrets.GCP_PRD_GITHUB_WIF }}"
          service_account: "${{ secrets.GCP_STG_GITHUB_SA_DOCKER_REGISTRY }}"
          create_credentials_file: true

      - name: Login to the registry - staging
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
        with:
          registry: ${{ env.REGISTRY }}
          username: "oauth2accesstoken"
          password: "${{ steps.google-auth-stg.outputs.access_token }}"

      - name: "Build and push ${{ matrix.application }} - staging"
        env:
          ENVIRONMENT: prd
          IMAGE_TAG: ${{ env.REPOSITORY_STG }}/${{ matrix.image_name }}:${{ github.ref_name }}
        run: |
          cd ${{ matrix.path }}
          make image/build-and-push

      - name: "Build and push ${{ matrix.application }} tag latest - staging"
        if: ${{ matrix.tag_latest == true }}
        env:
          ENVIRONMENT: prd
          IMAGE_TAG: "${{ env.REPOSITORY_STG }}/${{ matrix.image_name }}:latest"
        run: |
          cd ${{ matrix.path }}
          make image/build-and-push

      - name: "Authenticate to Google Cloud - production"
        id: google-auth-prd
        uses: "google-github-actions/auth@71fee32a0bb7e97b4d33d548e7d957010649d8fa"
        with:
          token_format: "access_token"
          workload_identity_provider: "${{ secrets.GCP_PRD_GITHUB_WIF }}"
          service_account: "${{ secrets.GCP_PRD_GITHUB_SA_DOCKER_REGISTRY }}"
          create_credentials_file: true

      - name: Login to the registry - production
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
        with:
          registry: ${{ env.REGISTRY }}
          username: "oauth2accesstoken"
          password: "${{ steps.google-auth-prd.outputs.access_token }}"

      - name: "Build and push ${{ matrix.application }} - production"
        env:
          ENVIRONMENT: prd
          IMAGE_TAG: ${{ env.REPOSITORY_PRD }}/${{ matrix.image_name }}:${{ github.ref_name }}
        run: |
          cd ${{ matrix.path }}
          make image/build-and-push

      - name: "Build and push ${{ matrix.application }} tag latest - production"
        if: ${{ matrix.tag_latest == true }}
        env:
          ENVIRONMENT: prd
          IMAGE_TAG: "${{ env.REPOSITORY_PRD }}/${{ matrix.image_name }}:latest"
        run: |
          cd ${{ matrix.path }}
          make image/build-and-push

  deploy-to-non-production:
    needs: [build-makefile]
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-22.04
    if: github.event_name == 'release'
    strategy:
      fail-fast: false
      matrix:
        application:
          - otterscan-testnet
    env:
      APP_NAME: ${{ matrix.application }}
      Z_ENV: infra/live/gcp/non-production/prj-d-staging/z_ase1.yaml
      Z_SERVICE_ACCOUNT: ${{ secrets.GCP_STG_GITHUB_SA_K8S_DEPLOY }}
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN_STG }}
      GITHUB_PAT: ${{ secrets.GH_PAT }}
      Z_IMAGE: asia-docker.pkg.dev/prj-d-devops-services-4dgwlsse/zilliqa-private/z:latest
      REGISTRY: asia-docker.pkg.dev
    steps:
      - name: Checkout
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29
        with:
          repository: Zilliqa/devops
          token: ${{ env.GITHUB_PAT }}
          ref: main
          sparse-checkout: |
            ${{ env.Z_ENV }}

      - name: Authenticate to Google Cloud
        id: google-auth
        uses: google-github-actions/auth@71fee32a0bb7e97b4d33d548e7d957010649d8fa
        with:
          token_format: "access_token"
          workload_identity_provider: "${{ secrets.GCP_PRD_GITHUB_WIF }}"
          service_account: ${{ env.Z_SERVICE_ACCOUNT }}
          create_credentials_file: true

      - name: Deploy application
        run: |
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://${{ env.REGISTRY }}
          docker run --rm \
              -e ZQ_USER='${{ env.Z_SERVICE_ACCOUNT }}' \
              -e Z_ENV='/devops/${{ env.Z_ENV }}' \
              -e OP_SERVICE_ACCOUNT_TOKEN='${{ env.OP_SERVICE_ACCOUNT_TOKEN }}' \
              -e GITHUB_PAT='${{ env.GITHUB_PAT }}' \
              -e CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE='/google/application_default_credentials.json' \
              -v `pwd`:/devops \
              -v ${{ steps.google-auth.outputs.credentials_file_path }}:/google/application_default_credentials.json \
              --name z_container ${{ env.Z_IMAGE }} \
              bash -c "gcloud config set account ${{ env.Z_SERVICE_ACCOUNT }} && z /app /devops app sync --cache-dir .cache ${{ env.APP_NAME }}"

  deploy-to-production:
    needs: [build-makefile]
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-22.04
    if: github.event_name == 'release'
    strategy:
      fail-fast: false
      matrix:
        application:
          - otterscan-mainnet
    env:
      APP_NAME: ${{ matrix.application }}
      Z_ENV: infra/live/gcp/production/prj-p-prod-apps/z_ase1.yaml
      Z_SERVICE_ACCOUNT: ${{ secrets.GCP_PRD_GITHUB_SA_K8S_DEPLOY }}
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN_PRD }}
      GITHUB_PAT: ${{ secrets.GH_PAT }}
      Z_IMAGE: asia-docker.pkg.dev/prj-p-devops-services-tvwmrf63/zilliqa-private/z:latest
      REGISTRY: asia-docker.pkg.dev
    steps:
      - name: Checkout
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29
        with:
          repository: Zilliqa/devops
          token: ${{ env.GITHUB_PAT }}
          ref: main
          sparse-checkout: |
            ${{ env.Z_ENV }}

      - name: Authenticate to Google Cloud
        id: google-auth
        uses: google-github-actions/auth@71fee32a0bb7e97b4d33d548e7d957010649d8fa
        with:
          token_format: "access_token"
          workload_identity_provider: "${{ secrets.GCP_PRD_GITHUB_WIF }}"
          service_account: ${{ env.Z_SERVICE_ACCOUNT }}
          create_credentials_file: true

      - name: Deploy application
        run: |
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://${{ env.REGISTRY }}
          docker run --rm \
              -e ZQ_USER='${{ env.Z_SERVICE_ACCOUNT }}' \
              -e Z_ENV='/devops/${{ env.Z_ENV }}' \
              -e OP_SERVICE_ACCOUNT_TOKEN='${{ env.OP_SERVICE_ACCOUNT_TOKEN }}' \
              -e GITHUB_PAT='${{ env.GITHUB_PAT }}' \
              -e CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE='/google/application_default_credentials.json' \
              -v `pwd`:/devops \
              -v ${{ steps.google-auth.outputs.credentials_file_path }}:/google/application_default_credentials.json \
              --name z_container ${{ env.Z_IMAGE }} \
              bash -c "gcloud config set account ${{ env.Z_SERVICE_ACCOUNT }} && z /app /devops app sync --cache-dir .cache ${{ env.APP_NAME }}"



================================================
FILE: .github/workflows/cicd-stg.yaml
================================================
name: "CICD staging"

on:
  # Test run before merging
  pull_request:
    branches:
      - main
  # On merged
  push:
    branches:
      - main

jobs:
  build-makefile:
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-24.04
    # To test deployments, remove the github.ref_name clause: see devops/docs/z2-testing-apps.md - rrw 2024-04-12
    # && github.ref_name == 'main'
    if: github.actor != 'dependabot[bot]'
    name: "Build image with Makefile"
    strategy:
      fail-fast: false
      matrix:
        application: [otterscan]
        include:
          - application: otterscan
            image_name: otterscan
            path: .
            tag_length: 8
            tag_latest: false
    env:
      REGISTRY: asia-docker.pkg.dev
      REPOSITORY: asia-docker.pkg.dev/prj-d-devops-services-4dgwlsse/zilliqa-public
    steps:
      - name: Checkout code
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29
        with:
          submodules: recursive
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 0

      - name: "Authenticate to Google Cloud - staging"
        id: google-auth
        uses: "google-github-actions/auth@71fee32a0bb7e97b4d33d548e7d957010649d8fa"
        with:
          token_format: "access_token"
          workload_identity_provider: "${{ secrets.GCP_PRD_GITHUB_WIF }}"
          service_account: "${{ secrets.GCP_STG_GITHUB_SA_DOCKER_REGISTRY }}"
          create_credentials_file: true

      - name: Login to the registry - staging
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
        with:
          registry: ${{ env.REGISTRY }}
          username: "oauth2accesstoken"
          password: "${{ steps.google-auth.outputs.access_token }}"

      - name: Get tag version - staging
        id: set-tag
        uses: Zilliqa/gh-actions-workflows/actions/generate-tag@v1
        with:
          tag: ${{ env.REPOSITORY }}/${{ matrix.image_name }}
          length: ${{ matrix.tag_length }}

      - name: "Build and push ${{ matrix.application }} - staging"
        env:
          ENVIRONMENT: stg
          IMAGE_TAG: ${{ steps.set-tag.outputs.tags }}
        run: |
          cd ${{ matrix.path }}
          make image/build-and-push

      - name: "Build and push ${{ matrix.application }} tag latest - staging"
        if: ${{ matrix.tag_latest == true }}
        env:
          ENVIRONMENT: stg
          IMAGE_TAG: "${{ env.REPOSITORY }}/${{ matrix.image_name }}:latest"
        run: |
          cd ${{ matrix.path }}
          make image/build-and-push

  deploy-to-staging:
    needs: [build-makefile]
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-22.04
    if: github.actor != 'dependabot[bot]' && github.ref_name == 'main'
    strategy:
      fail-fast: false
      matrix:
        application:
          - otterscan
    env:
      APP_NAME: ${{ matrix.application }}
      Z_ENV: infra/live/gcp/non-production/prj-d-staging/z_ase1.yaml
      Z_SERVICE_ACCOUNT: ${{ secrets.GCP_STG_GITHUB_SA_K8S_DEPLOY }}
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN_STG }}
      GITHUB_PAT: ${{ secrets.GH_PAT }}
      Z_IMAGE: asia-docker.pkg.dev/prj-d-devops-services-4dgwlsse/zilliqa-private/z:latest
      REGISTRY: asia-docker.pkg.dev
    steps:
      - name: Checkout
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29
        with:
          repository: Zilliqa/devops
          token: ${{ env.GITHUB_PAT }}
          ref: main
          sparse-checkout: |
            ${{ env.Z_ENV }}

      - name: Authenticate to Google Cloud
        id: google-auth
        uses: google-github-actions/auth@71fee32a0bb7e97b4d33d548e7d957010649d8fa
        with:
          token_format: "access_token"
          workload_identity_provider: "${{ secrets.GCP_PRD_GITHUB_WIF }}"
          service_account: ${{ env.Z_SERVICE_ACCOUNT }}
          create_credentials_file: true

      - name: Deploy application
        run: |
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://${{ env.REGISTRY }}
          docker run --rm \
              -e ZQ_USER='${{ env.Z_SERVICE_ACCOUNT }}' \
              -e Z_ENV='/devops/${{ env.Z_ENV }}' \
              -e OP_SERVICE_ACCOUNT_TOKEN='${{ env.OP_SERVICE_ACCOUNT_TOKEN }}' \
              -e GITHUB_PAT='${{ env.GITHUB_PAT }}' \
              -e CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE='/google/application_default_credentials.json' \
              -v `pwd`:/devops \
              -v ${{ steps.google-auth.outputs.credentials_file_path }}:/google/application_default_credentials.json \
              --name z_container ${{ env.Z_IMAGE }} \
              bash -c "gcloud config set account ${{ env.Z_SERVICE_ACCOUNT }} && z /app /devops app sync --cache-dir .cache ${{ env.APP_NAME }}"



================================================
FILE: .github/workflows/docker-publish.yaml
================================================
name: Publish Docker image

on:
  push:
    branches:
      - "main"
      - "develop"
    tags:
      - "v*"

env:
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
    permissions:
      id-token: write
      contents: write
      packages: write

    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: "Authenticate to Google Cloud"
        id: google-auth
        uses: "google-github-actions/auth@v1"
        with:
          token_format: "access_token"
          workload_identity_provider: "${{ secrets.GCP_PRD_GITHUB_WIF }}"
          service_account: "${{ secrets.GCP_PRD_GITHUB_SA_DOCKER_REGISTRY }}"
          create_credentials_file: true

      - name: Login to the registry - production
        uses: docker/login-action@v2
        with:
          registry: asia-docker.pkg.dev
          username: oauth2accesstoken
          password: "${{ steps.google-auth.outputs.access_token }}"

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker Metadata action
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            zilliqa/otterscan
            asia-docker.pkg.dev/prj-p-devops-services-tvwmrf63/zilliqa-public/otterscan
          tags: |
            type=ref,enable=false,priority=600,prefix=pr-,suffix=,event=pr
            type=ref,event=branch
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=semver,pattern={{raw}}

      - name: "Build and push ${{ matrix.application }}"
        env:
          ENVIRONMENT: stg
          IMAGE_TAG: ${{ steps.set-tag.outputs.tags }}
        run: |
          cd ${{ matrix.path }}
          make image/build-and-push




================================================
FILE: .github/workflows/end-to-end.yaml
================================================
name: End-to-End Tests
on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - develop
      - main
  workflow_dispatch:
jobs:
  check-secrets:
    runs-on: ubuntu-24.04
    outputs:
      e2e-erigon-url: ${{ steps.e2e-erigon-url.outputs.defined }}
      e2e-cypress-record-key: ${{ steps.e2e-cypress-record-key.outputs.defined }}
    steps:
      - name: Check if E2E_ERIGON_URL is available
        id: e2e-erigon-url
        env:
          E2E_ERIGON_URL: ${{ secrets.E2E_ERIGON_URL }}
        if: "${{ env.E2E_ERIGON_URL != '' }}"
        run: echo "defined=true" >> $GITHUB_OUTPUT
      - name: Check if E2E_CYPRESS_RECORD_KEY is available
        id: e2e-cypress-record-key
        env:
          E2E_CYPRESS_RECORD_KEY: ${{ secrets.E2E_CYPRESS_RECORD_KEY }}
        if: "${{ env.E2E_CYPRESS_RECORD_KEY != '' }}"
        run: echo "defined=true" >> $GITHUB_OUTPUT

  e2e-test-mainnet:
    name: Run E2E tests on mainnet
    runs-on: ubuntu-24.04
    if: ${{ needs.check-secrets.outputs.e2e-erigon-url == 'true' }}
    needs: [check-secrets]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up xvfb
        run: |
          sudo apt update
          sudo apt install -y libgtk2.0-0t64 libgtk-3-0t64 libgbm-dev libnotify-dev libnss3 libxss1 libasound2t64 libxtst6 xauth xvfb
      - name: Run Cypress tests on mainnet
        uses: cypress-io/github-action@v6
        with:
          start: npm start
          wait-on: "http://localhost:5173"
          spec: "cypress/e2e/mainnet/**/*.cy.ts,cypress/e2e/*.cy.ts"
          tag: ${{needs.check-secrets.outputs.e2e-cypress-record-key == 'true' && 'mainnet' || ''}}
          record: |
            ${{needs.check-secrets.outputs.e2e-cypress-record-key == 'true' && 'true' || 'false'}}
        env:
          VITE_ERIGON_URL: ${{secrets.E2E_ERIGON_URL}}
          CYPRESS_RECORD_KEY: ${{secrets.E2E_CYPRESS_RECORD_KEY}}
      - name: Upload screenshots from failing tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: Cypress Mainnet Screenshots
          path: cypress/screenshots

  e2e-test-devnet:
    name: Run E2E tests on a devnet
    runs-on: ubuntu-24.04
    needs: [check-secrets]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up xvfb
        run: |
          sudo apt update
          sudo apt install -y libgtk2.0-0t64 libgtk-3-0t64 libgbm-dev libnotify-dev libnss3 libxss1 libasound2t64 libxtst6 xauth xvfb
      - name: Download Erigon
        run: git clone --branch release/2.54 --single-branch https://github.com/ledgerwatch/erigon.git
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "erigon/go.mod"
          cache-dependency-path: "erigon/go.sum"
      - name: Build Erigon
        run: |
          cd erigon
          make erigon
      - name: Load devnet config
        id: load-devnet-config
        run: |
          OTTERSCAN_CONFIG="$(cat cypress/support/devnet-config.json | sed 's/localhost/127.0.0.1/')"
          OTTERSCAN_CONFIG=$(echo $OTTERSCAN_CONFIG)
          echo "config=$OTTERSCAN_CONFIG" >> $GITHUB_OUTPUT
      - name: Run Cypress tests on devnet
        uses: cypress-io/github-action@v6
        with:
          start: |
            sh ./scripts/run-erigon-devnet-e2e-tests.sh
            npm run start
          wait-on: "http://127.0.0.1:8545, http://localhost:5173"
          spec: "cypress/e2e/devnet/**/*.cy.ts,cypress/e2e/*.cy.ts"
          tag: ${{needs.check-secrets.outputs.e2e-cypress-record-key == 'true' && 'devnet' || ''}}
          record: |
            ${{needs.check-secrets.outputs.e2e-cypress-record-key == 'true' && 'true' || 'false'}}
        env:
          VITE_CONFIG_JSON: ${{steps.load-devnet-config.outputs.config}}
          CYPRESS_RECORD_KEY: ${{secrets.E2E_CYPRESS_RECORD_KEY}}
          CYPRESS_DEVNET_ERIGON_URL: "http://127.0.0.1:8545"
          CYPRESS_DEVNET_SOURCIFY_SOURCE: "http://127.0.0.1:7077"
      - name: Upload screenshots from failing tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: Cypress Devnet Screenshots
          path: cypress/screenshots

  e2e-test-anvil:
    name: Run E2E tests on an Anvil devnet
    runs-on: ubuntu-24.04
    needs: [check-secrets]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up xvfb
        run: |
          sudo apt update
          sudo apt install -y libgtk2.0-0t64 libgtk-3-0t64 libgbm-dev libnotify-dev libnss3 libxss1 libasound2t64 libxtst6 xauth xvfb
      - name: Download Anvil
        run: |
          wget -O ./foundry.tar.gz https://github.com/foundry-rs/foundry/releases/download/nightly/foundry_nightly_linux_amd64.tar.gz
          tar -xzf ./foundry.tar.gz anvil
      - name: Load devnet config
        id: load-devnet-config
        run: |
          OTTERSCAN_CONFIG="$(cat cypress/support/devnet-config.json | sed 's/localhost/127.0.0.1/')"
          OTTERSCAN_CONFIG=$(echo $OTTERSCAN_CONFIG)
          echo "config=$OTTERSCAN_CONFIG" >> $GITHUB_OUTPUT
      - name: Run Cypress tests on Anvil devnet
        uses: cypress-io/github-action@v6
        with:
          start: |
            sh ./scripts/run-anvil-devnet.sh
            npm run start
          # Cypress can't detect Anvil's RPC server, so we have to assume it is up
          wait-on: "http://localhost:5173"
          spec: "cypress/e2e/devnet/**/*.cy.ts,cypress/e2e/*.cy.ts"
          tag: ${{needs.check-secrets.outputs.e2e-cypress-record-key == 'true' && 'anvil' || ''}}
          record: |
            ${{needs.check-secrets.outputs.e2e-cypress-record-key == 'true' && 'true' || 'false'}}
        env:
          VITE_CONFIG_JSON: ${{steps.load-devnet-config.outputs.config}}
          CYPRESS_RECORD_KEY: ${{secrets.E2E_CYPRESS_RECORD_KEY}}
          CYPRESS_DEVNET_ERIGON_URL: "http://127.0.0.1:8545"
          CYPRESS_DEVNET_SOURCIFY_SOURCE: "http://127.0.0.1:7077"
          CYPRESS_DEVNET_ACCOUNT_KEY: "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80"
      - name: Upload screenshots from failing tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: Cypress Devnet Screenshots
          path: cypress/screenshots



================================================
FILE: .storybook/main.ts
================================================
import type { StorybookConfig } from "@storybook/react-vite";

const config: StorybookConfig = {
  stories: ["../src/**/*.mdx", "../src/**/*.stories.@(js|jsx|ts|tsx)"],
  addons: [
    "@storybook/addon-links",
    "@storybook/addon-essentials",
    "@storybook/addon-interactions",
  ],
  framework: {
    name: "@storybook/react-vite",
    options: {},
  },
  docs: {},
  typescript: {
    reactDocgen: false,
  },
  core: {
    disableTelemetry: true,
  },
};

export default config;



================================================
FILE: .storybook/preview-head.html
================================================
<script>
  window.global = window;
</script>



================================================
FILE: .storybook/preview.tsx
================================================
import "@fontsource/fira-code/index.css";
import "@fontsource/roboto-mono/index.css";
import "@fontsource/roboto/index.css";
import "@fontsource/space-grotesk/files/space-grotesk-latin-400-normal.woff2";
import "@fontsource/space-grotesk/index.css";
import { INITIAL_VIEWPORTS } from "@storybook/addon-viewport";
import { Decorator } from "@storybook/react";
import { BrowserRouter as Router } from "react-router-dom";
import "../src/index.css";

export const parameters = {
  backgrounds: {
    default: "light",
  },
  actions: { argTypesRegex: "^on[A-Z].*" },
  controls: {
    matchers: {
      color: /(background|color)$/i,
      date: /Date$/,
    },
  },
  viewport: {
    viewports: INITIAL_VIEWPORTS,
  },
};

export const decorators: Decorator[] = [
  (Story) => (
    <Router>
      <Story />
    </Router>
  ),
];


